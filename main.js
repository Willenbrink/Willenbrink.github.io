//# 1 ".main.eobjs/jsoo/main.bc.runtime.js"
// Generated by js_of_ocaml
(function
   (Object)
   {typeof globalThis
    !==
    "object"
    &&
    (this
      ?get()
      :(Object.defineProperty
         (Object.prototype,"_T_",{configurable:true,get:get}),
        _T_));
    function get()
     {var global=this || self;
      global.globalThis = global;
      delete Object.prototype._T_}}
  (Object));
(function(globalThis)
   {"use strict";
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    var caml_global_data=[0];
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function caml_jsbytes_of_string(s)
     {s.t & 6 && caml_convert_string_to_bytes(s);return s.c}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += f.uppercase?"0X":"0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_expm1_float(x){return Math.expm1(x)}
    function caml_ml_condition_broadcast(t){return 0}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    function fs_node_supported()
     {return typeof globalThis.process
             !==
             "undefined"
             &&
             typeof globalThis.process.versions
             !==
             "undefined"
             &&
             typeof globalThis.process.versions.node
             !==
             "undefined"}
    function make_path_is_absolute()
     {function posix(path)
       {if(path.charAt(0) === "/")return ["",path.substring(1)];return}
      function win32(path)
       {var
         splitDeviceRe=
          /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
         result=splitDeviceRe.exec(path),
         device=result[1] || "",
         isUnc=Boolean(device && device.charAt(1) !== ":");
        if(Boolean(result[2] || isUnc))
         {var root=result[1] || "",sep=result[2] || "";
          return [root,path.substring(root.length + sep.length)]}
        return}
      return fs_node_supported()
              &&
              globalThis.process
              &&
              globalThis.process.platform
              ?globalThis.process.platform === "win32"?win32:posix
              :posix}
    var path_is_absolute=make_path_is_absolute();
    function caml_trailing_slash(name)
     {return name.slice(- 1) !== "/"?name + "/":name}
    if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
     var caml_current_dir=globalThis.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    caml_current_dir = caml_trailing_slash(caml_current_dir);
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(! path_is_absolute(name))name = caml_current_dir + name;
      var comp0=path_is_absolute(name),comp=comp0[1].split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":break;
         default:ncomp.push(comp[i]);break}
      ncomp.unshift(comp0[0]);
      ncomp.orig = name;
      return ncomp}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    var
     unix_error=
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
    function make_unix_err_args(code,syscall,path,errno)
     {var variant=unix_error.indexOf(code);
      if(variant < 0){if(errno == null)errno = - 9999;variant = [0,errno]}
      var
       args=
        [variant,
         caml_string_of_jsstring(syscall || ""),
         caml_string_of_jsstring(path || "")];
      return args}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_raise_with_args(tag,args){throw [0,tag].concat(args)}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_bytes_of_array(a)
     {if(! (a instanceof Uint8Array))a = new Uint8Array(a);
      return new MlBytes(4,a,a.length)}
    function caml_bytes_of_string(s){return s}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {caml_raise_sys_error(name + ": No such file or directory")}
    function caml_convert_bytes_to_array(s)
     {var a=new Uint8Array(s.l),b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_uint8_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_ml_bytes_length(s){return s.l}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.constructor = MlFakeFile;
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_bytes(caml_bytes_of_array(buf),pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)len = clen - offset;
      if(len)
       {var data=caml_create_bytes(len | 0);
        caml_blit_bytes(this.data,offset,data,0,len);
        buf.set(caml_uint8_array_of_bytes(data),pos)}
      return len};
    function MlFakeFd(name,file,flags)
     {this.file = file;this.name = name;this.flags = flags}
    MlFakeFd.prototype.err_closed
    =
    function()
     {caml_raise_sys_error(this.name + ": file descriptor already closed")};
    MlFakeFd.prototype.length
    =
    function(){if(this.file)return this.file.length();this.err_closed()};
    MlFakeFd.prototype.write
    =
    function(offset,buf,pos,len)
     {if(this.file)return this.file.write(offset,buf,pos,len);
      this.err_closed()};
    MlFakeFd.prototype.read
    =
    function(offset,buf,pos,len)
     {if(this.file)return this.file.read(offset,buf,pos,len);
      this.err_closed()};
    MlFakeFd.prototype.close = function(){this.file = undefined};
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.create_dir_if_needed
    =
    function(name)
     {var comp=name.split("/"),res="";
      for(var i=0;i < comp.length - 1;i++)
       {res += comp[i] + "/";
        if(this.content[res])continue;
        this.content[res] = Symbol("directory")}};
    MlFakeDevice.prototype.slash
    =
    function(name){return /\/$/.test(name)?name:name + "/"};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         {this.create_dir_if_needed(name);
          this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=this.slash(name);
      if(this.content[name_slash])return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {var unix_error=raise_unix && caml_named_value("Unix.Unix_error");
      if(this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("EEXIST","mkdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": File exists");
      var parent=/^(.*)\/[^/]+/.exec(name);
      parent = parent && parent[1] || "";
      if(! this.exists(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": No such file or directory");
      if(! this.is_dir(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": Not a directory");
      this.create_dir_if_needed(this.slash(name))};
    MlFakeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {var
       unix_error=raise_unix && caml_named_value("Unix.Unix_error"),
       name_slash=name == ""?"":this.slash(name),
       r=new RegExp("^" + name_slash + "([^/]+)");
      if(! this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": Not a directory");
      for(var n in this.content)
       if(n.match(r))
        if(unix_error)
         caml_raise_with_args
          (unix_error,make_unix_err_args("ENOTEMPTY","rmdir",this.nm(name)));
        else
         caml_raise_sys_error(this.nm(name) + ": Directory not empty");
      delete this.content[name_slash]};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var name_slash=name == ""?"":this.slash(name);
      if(! this.exists(name))
       caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))caml_raise_sys_error(name + ": Not a directory");
      var r=new RegExp("^" + name_slash + "([^/]+)"),seen={},a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.opendir
    =
    function(name,raise_unix)
     {var
       unix_error=raise_unix && caml_named_value("Unix.Unix_error"),
       a=this.readdir(name),
       c=false,
       i=0;
      return {readSync:
              function()
               {if(c)
                 if(unix_error)
                  caml_raise_with_args
                   (unix_error,
                    make_unix_err_args("EBADF","closedir",this.nm(name)));
                 else
                  caml_raise_sys_error(name + ": closedir failed");
                if(i == a.length)return null;
                var entry=a[i];
                i++;
                return {name:entry}},
              closeSync:
              function()
               {if(c)
                 if(unix_error)
                  caml_raise_with_args
                   (unix_error,
                    make_unix_err_args("EBADF","closedir",this.nm(name)));
                 else
                  caml_raise_sys_error(name + ": closedir failed");
                c = true;
                a = []}}};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {if(name == "")return true;
      var name_slash=this.slash(name);
      return this.content[name_slash]?1:0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {var file;
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        file = this.content[name];
        if(f.truncate)file.truncate()}
      else
       if(f.create)
        {this.create_dir_if_needed(name);
         this.content[name] = new MlFakeFile(caml_create_bytes(0));
         file = this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name));
      return new MlFakeFd(this.nm(name),file,f)};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {var file;
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        file = this.content[name];
        if(f.truncate)file.truncate()}
      else
       if(f.create)
        {this.create_dir_if_needed(name);
         this.content[name] = new MlFakeFile(caml_create_bytes(0));
         file = this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name));
      return new MlFakeFd(this.nm(name),file,f)};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {var file;
      if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))file = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       file = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        file = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         file = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           file = new MlFakeFile(bytes)}
      if(file)
       {this.create_dir_if_needed(name);this.content[name] = file}
      else
       caml_raise_sys_error
        (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_uint8_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function MlNodeFd(fd,flags)
     {this.fs = require("fs");this.fd = fd;this.flags = flags}
    MlNodeFd.prototype = new MlFile();
    MlNodeFd.prototype.constructor = MlNodeFd;
    MlNodeFd.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFd.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFd.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {try
       {if(this.flags.isCharacterDevice)
         this.fs.writeSync(this.fd,buf,buf_offset,len);
        else
         this.fs.writeSync(this.fd,buf,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFd.prototype.read
    =
    function(offset,a,buf_offset,len)
     {try
       {if(this.flags.isCharacterDevice)
         var read=this.fs.readSync(this.fd,a,buf_offset,len);
        else
         var read=this.fs.readSync(this.fd,a,buf_offset,len,offset);
        return read}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFd.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd);return 0}
      catch(err){caml_raise_sys_error(err.toString())}};
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try {return this.fs.existsSync(this.nm(name))?1:0}catch(err){return 0}};
    MlNodeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {try
       {this.fs.mkdirSync(this.nm(name),{mode:mode});return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {try
       {this.fs.rmdirSync(this.nm(name));return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readdir
    =
    function(name,raise_unix)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name,raise_unix)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name));
        return b}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.open
    =
    function(name,f,raise_unix)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var
         fd=this.fs.openSync(this.nm(name),res),
         isCharacterDevice=
          this.fs.lstatSync(this.nm(name)).isCharacterDevice();
        f.isCharacterDevice = isCharacterDevice;
        return new MlNodeFd(fd,f)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rename
    =
    function(o,n,raise_unix)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.stat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.statSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.lstat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.lstatSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.symlink
    =
    function(to_dir,target,path,raise_unix)
     {try
       {this.fs.symlinkSync(this.nm(target),this.nm(path),to_dir?"dir":"file");
        return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readlink
    =
    function(name,raise_unix)
     {try
       {var link=this.fs.readlinkSync(this.nm(name),"utf8");
        return caml_string_of_jsstring(link)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.opendir
    =
    function(name,raise_unix)
     {try
       {return this.fs.opendirSync(this.nm(name))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.raise_nodejs_error
    =
    function(err,raise_unix)
     {var unix_error=caml_named_value("Unix.Unix_error");
      if(raise_unix && unix_error)
       {var args=make_unix_err_args(err.code,err.syscall,err.path,err.errno);
        caml_raise_with_args(unix_error,args)}
      else
       caml_raise_sys_error(err.toString())};
    MlNodeDevice.prototype.stats_from_js
    =
    function(js_stats)
     {var file_kind;
      if(js_stats.isFile())
       file_kind = 0;
      else
       if(js_stats.isDirectory())
        file_kind = 1;
       else
        if(js_stats.isCharacterDevice())
         file_kind = 2;
        else
         if(js_stats.isBlockDevice())
          file_kind = 3;
         else
          if(js_stats.isSymbolicLink())
           file_kind = 4;
          else
           if(js_stats.isFIFO())
            file_kind = 5;
           else
            if(js_stats.isSocket())file_kind = 6;
      return [0,
              js_stats.dev,
              js_stats.ino,
              file_kind,
              js_stats.mode,
              js_stats.nlink,
              js_stats.uid,
              js_stats.gid,
              js_stats.rdev,
              js_stats.size,
              js_stats.atimeMs,
              js_stats.mtimeMs,
              js_stats.ctimeMs]};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    function caml_get_root(path)
     {var x=path_is_absolute(path);if(! x)return;return x[0] + "/"}
    function caml_failwith(msg)
     {if(! caml_global_data.Failure)
       caml_global_data.Failure = [248,caml_string_of_jsbytes("Failure"),- 3];
      caml_raise_with_string(caml_global_data.Failure,msg)}
    var
     caml_root=
      caml_get_root(caml_current_dir)
      ||
      caml_failwith("unable to compute caml_root"),
     jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=caml_trailing_slash(name),
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      if(! res && fs_node_supported())
       {var root=caml_get_root(name);
        if(root && root.match(/^[a-zA-Z]:\/$/))
         {var m={path:root,device:new MlNodeDevice(root)};
          jsoo_mount_point.push(m);
          res
          =
          {path:m.path,
           device:m.device,
           rest:name.substring(m.path.length,name.length)}}}
      if(res)return res;
      caml_raise_sys_error("no device found for " + name_slash)}
    function caml_sys_is_directory(name)
     {var root=resolve_fs_device(name),a=root.device.is_dir(root.rest);
      return a?1:0}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var process=globalThis.process,n=caml_jsstring_of_string(name);
      if(process && process.env && process.env[n] != undefined)
       return caml_string_of_jsstring(process.env[n]);
      if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
       return caml_string_of_jsstring(globalThis.jsoo_static_env[n]);
      caml_raise_not_found()}
    function shift_right_nat(nat1,ofs1,len1,nat2,ofs2,nbits)
     {if(nbits == 0){nat2.data[ofs2] = 0;return 0}
      var wrap=0;
      for(var i=len1 - 1;i >= 0;i--)
       {var a=nat1.data[ofs1 + i] >>> 0;
        nat1.data[ofs1 + i] = a >>> nbits | wrap;
        wrap = a << 32 - nbits}
      nat2.data[ofs2] = wrap;
      return 0}
    var caml_gr_state;
    function caml_gr_state_get()
     {if(caml_gr_state)return caml_gr_state;
      throw [0,
             caml_named_value("Graphics.Graphic_failure"),
             caml_string_of_jsbytes("Not initialized")]}
    function caml_gr_point_color(x,y)
     {var
       s=caml_gr_state_get(),
       im=s.context.getImageData(x,s.height - y,1,1),
       d=im.data;
      return (d[0] << 16) + (d[1] << 8) + d[2]}
    var MlObjectTable;
    if(typeof globalThis.WeakMap === "undefined")
     MlObjectTable
     =
     function()
       {function NaiveLookup(objs){this.objs = objs}
        NaiveLookup.prototype.get
        =
        function(v)
         {for(var i=0;i < this.objs.length;i++)if(this.objs[i] === v)return i};
        NaiveLookup.prototype.set = function(){};
        return function()
         {this.objs = [];this.lookup = new NaiveLookup(this.objs)}}
      ();
    else
     MlObjectTable
     =
     function(){this.objs = [];this.lookup = new (globalThis.WeakMap)()};
    MlObjectTable.prototype.store
    =
    function(v){this.lookup.set(v,this.objs.length);this.objs.push(v)};
    MlObjectTable.prototype.recall
    =
    function(v)
     {var i=this.lookup.get(v);
      return i === undefined?undefined:this.objs.length - i};
    function caml_sys_rename(o,n)
     {var o_root=resolve_fs_device(o),n_root=resolve_fs_device(n);
      if(o_root.device != n_root.device)
       caml_failwith
        ("caml_sys_rename: cannot move file between two filesystem");
      if(! o_root.device.rename)
       caml_failwith("caml_sys_rename: no implemented");
      o_root.device.rename(o_root.rest,n_root.rest)}
    function caml_log10_float(x){return Math.log10(x)}
    var caml_runtime_warnings=0;
    function caml_ml_enable_runtime_warnings(bool)
     {caml_runtime_warnings = bool;return 0}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    var caml_ml_channels=new Array();
    function caml_refill(chan)
     {if(chan.refill != null)
       {var str=chan.refill(),str_a=caml_uint8_array_of_string(str);
        if(str_a.length == 0)
         chan.refill = null;
        else
         {if(chan.buffer.length < chan.buffer_max + str_a.length)
           {var b=new Uint8Array(chan.buffer_max + str_a.length);
            b.set(chan.buffer);
            chan.buffer = b}
          chan.buffer.set(str_a,chan.buffer_max);
          chan.offset += str_a.length;
          chan.buffer_max += str_a.length}}
      else
       {var
         nread=
          chan.file.read
           (chan.offset,
            chan.buffer,
            chan.buffer_max,
            chan.buffer.length - chan.buffer_max);
        chan.offset += nread;
        chan.buffer_max += nread}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_ml_input_scan_line(chanid)
     {var chan=caml_ml_channels[chanid],p=chan.buffer_curr;
      do
       if(p >= chan.buffer_max)
        {if(chan.buffer_curr > 0)
          {chan.buffer.set(chan.buffer.subarray(chan.buffer_curr),0);
           p -= chan.buffer_curr;
           chan.buffer_max -= chan.buffer_curr;
           chan.buffer_curr = 0}
         if(chan.buffer_max >= chan.buffer.length)return - chan.buffer_max;
         var prev_max=chan.buffer_max;
         caml_refill(chan);
         if(prev_max == chan.buffer_max)return - chan.buffer_max}
      while
      (chan.buffer[p++] != 10);
      return p - chan.buffer_curr}
    function caml_gc_minor(unit)
     {if(typeof globalThis.gc == "function")globalThis.gc(true);return 0}
    function caml_ml_condition_new(unit){return {condition:1}}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_ba_uint8_get64(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 7 >= ba.data.length)caml_array_bound_error();
      var
       b1=ba.get(ofs + 0),
       b2=ba.get(ofs + 1),
       b3=ba.get(ofs + 2),
       b4=ba.get(ofs + 3),
       b5=ba.get(ofs + 4),
       b6=ba.get(ofs + 5),
       b7=ba.get(ofs + 6),
       b8=ba.get(ofs + 7);
      return caml_int64_of_bytes([b8,b7,b6,b5,b4,b3,b2,b1])}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_ba_num_dims(ba){return ba.dims.length}
    function caml_return_exn_constant(tag){return tag}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (globalThis.RangeError
        &&
        e instanceof globalThis.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (globalThis.InternalError
        &&
        e instanceof globalThis.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof globalThis.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function jsoo_create_file(name,content)
     {var
       name=caml_string_of_jsbytes(name),
       content=caml_string_of_jsbytes(content);
      return caml_create_file(name,content)}
    function caml_fs_init()
     {var tmp=globalThis.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        jsoo_create_file(tmp[i].name,tmp[i].content);
      globalThis.jsoo_create_file = jsoo_create_file;
      globalThis.caml_fs_tmp = [];
      return 0}
    function caml_get_continuation_callstack(){return [0]}
    var caml_parser_trace=0;
    function caml_set_parser_trace(bool)
     {var oldflag=caml_parser_trace;caml_parser_trace = bool;return oldflag}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function num_digits_nat(nat,ofs,len)
     {for(var i=len - 1;i >= 0;i--)if(nat.data[ofs + i] != 0)return i + 1;
      return 1}
    function caml_hash_nat(x)
     {var len=num_digits_nat(x,0,x.data.length),h=0;
      for(var i=0;i < len;i++)h = caml_hash_mix_int(h,x.data[i]);
      return h}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    var caml_callback=caml_call_gen;
    function caml_js_wrap_callback_arguments(f)
     {return function()
       {var len=arguments.length,args=new Array(len);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_callback(f,[args])}}
    function caml_sys_chdir(dir)
     {var root=resolve_fs_device(dir);
      if(root.device.exists(root.rest))
       {if(root.rest)
         caml_current_dir = caml_trailing_slash(root.path + root.rest);
        else
         caml_current_dir = root.path;
        return 0}
      else
       caml_raise_no_such_file(caml_jsbytes_of_string(dir))}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_obj_update_tag(b,o,n)
     {if(b[0] == o){b[0] = n;return 1}return 0}
    var caml_ml_domain_unique_token_=[0];
    function caml_ml_domain_unique_token(unit)
     {return caml_ml_domain_unique_token_}
    function caml_lazy_update_to_forcing(o)
     {var t=caml_obj_tag(o);
      if(t != 246 && t != 250 && t != 244)return 4;
      if(caml_obj_update_tag(o,246,244))
       return 0;
      else
       {var field0=o[1];
        t = o[0];
        if(t == 244)
         return field0 == caml_ml_domain_unique_token(0)?1:2;
        else
         if(t == 250)return 3;else return 2}}
    function caml_gc_counters(){return [254,0,0,0]}
    function caml_gr_synchronize()
     {caml_failwith("caml_gr_synchronize not Implemented")}
    function caml_unix_closedir(dir_handle)
     {try
       {dir_handle.pointer.closeSync()}
      catch(e)
       {var unix_error=caml_named_value("Unix.Unix_error");
        caml_raise_with_args
         (unix_error,make_unix_err_args("EBADF","closedir",dir_handle.path))}}
    function caml_unix_opendir(path)
     {var root=resolve_fs_device(path);
      if(! root.device.opendir)
       caml_failwith("caml_unix_opendir: not implemented");
      var dir_handle=root.device.opendir(root.rest,true);
      return {pointer:dir_handle,path:path}}
    function caml_unix_rewinddir(dir_handle)
     {caml_unix_closedir(dir_handle);
      var new_dir_handle=caml_unix_opendir(dir_handle.path);
      dir_handle.pointer = new_dir_handle.pointer;
      return 0}
    function caml_raise_end_of_file()
     {caml_raise_constant(caml_global_data.End_of_file)}
    function caml_unix_readdir(dir_handle)
     {var entry;
      try
       {entry = dir_handle.pointer.readSync()}
      catch(e)
       {var unix_error=caml_named_value("Unix.Unix_error");
        caml_raise_with_args
         (unix_error,make_unix_err_args("EBADF","readdir",dir_handle.path))}
      if(entry === null)
       caml_raise_end_of_file();
      else
       return caml_string_of_jsstring(entry.name)}
    function caml_unix_findfirst(path)
     {var path_js=caml_jsstring_of_string(path);
      path_js = path_js.replace(/(^|[\\\/])\*\.\*$/,"");
      path = caml_string_of_jsstring(path_js);
      var
       dir_handle=caml_unix_opendir(path),
       first_entry=caml_unix_readdir(dir_handle);
      return [0,first_entry,dir_handle]}
    function caml_is_continuation_tag(t){return t == 245?1:0}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new Float32Array(1);
      float32a[0] = x;
      var int32a=new Int32Array(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var view;
      switch(kind)
       {case 0:view = Float32Array;break;
        case 1:view = Float64Array;break;
        case 2:view = Int8Array;break;
        case 3:view = Uint8Array;break;
        case 4:view = Int16Array;break;
        case 5:view = Uint16Array;break;
        case 6:view = Int32Array;break;
        case 7:view = Int32Array;break;
        case 8:view = Int32Array;break;
        case 9:view = Int32Array;break;
        case 10:view = Float32Array;break;
        case 11:view = Float64Array;break;
        case 12:view = Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new Int32Array(1);
      int32a[0] = x;
      var float32a=new Float32Array(int32a.buffer);
      return float32a[0]}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(caml_is_continuation_tag(tag_a))
              {caml_invalid_argument("compare: continuation value");break}
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
    function div_helper(a,b,c)
     {var
       x=a * 65536 + (b >>> 16),
       y=Math.floor(x / c) * 65536,
       z=x % c * 65536,
       w=z + (b & 0x0000FFFF);
      return [y + Math.floor(w / c),w % c]}
    function div_digit_nat(natq,ofsq,natr,ofsr,nat1,ofs1,len,nat2,ofs2)
     {var rem=nat1.data[ofs1 + len - 1] >>> 0;
      for(var i=len - 2;i >= 0;i--)
       {var x=div_helper(rem,nat1.data[ofs1 + i] >>> 0,nat2.data[ofs2] >>> 0);
        natq.data[ofsq + i] = x[0];
        rem = x[1]}
      natr.data[ofsr] = rem;
      return 0}
    function num_leading_zero_bits_in_digit(nat,ofs)
     {var a=nat.data[ofs],b=0;
      if(a & 0xFFFF0000){b += 16;a >>>= 16}
      if(a & 0xFF00){b += 8;a >>>= 8}
      if(a & 0xF0){b += 4;a >>>= 4}
      if(a & 12){b += 2;a >>>= 2}
      if(a & 2){b += 1;a >>>= 1}
      if(a & 1)b += 1;
      return 32 - b}
    function shift_left_nat(nat1,ofs1,len1,nat2,ofs2,nbits)
     {if(nbits == 0){nat2.data[ofs2] = 0;return 0}
      var wrap=0;
      for(var i=0;i < len1;i++)
       {var a=nat1.data[ofs1 + i] >>> 0;
        nat1.data[ofs1 + i] = a << nbits | wrap;
        wrap = a >>> 32 - nbits}
      nat2.data[ofs2] = wrap;
      return 0}
    function MlNat(x)
     {this.data = new Int32Array(x);this.length = this.data.length + 2}
    MlNat.prototype.caml_custom = "_nat";
    function create_nat(size)
     {var arr=new MlNat(size);
      for(var i=0;i < size;i++)arr.data[i] = - 1;
      return arr}
    function set_to_zero_nat(nat,ofs,len)
     {for(var i=0;i < len;i++)nat.data[ofs + i] = 0;return 0}
    function incr_nat(nat,ofs,len,carry_in)
     {var carry=carry_in;
      for(var i=0;i < len;i++)
       {var x=(nat.data[ofs + i] >>> 0) + carry;
        nat.data[ofs + i] = x | 0;
        if(x == x >>> 0){carry = 0;break}else carry = 1}
      return carry}
    function add_nat(nat1,ofs1,len1,nat2,ofs2,len2,carry_in)
     {var carry=carry_in;
      for(var i=0;i < len2;i++)
       {var
         x=
          (nat1.data[ofs1 + i] >>> 0) + (nat2.data[ofs2 + i] >>> 0) + carry;
        nat1.data[ofs1 + i] = x;
        if(x == x >>> 0)carry = 0;else carry = 1}
      return incr_nat(nat1,ofs1 + len2,len1 - len2,carry)}
    function nat_of_array(l){return new MlNat(l)}
    function mult_digit_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat3,ofs3)
     {var carry=0,a=nat3.data[ofs3] >>> 0;
      for(var i=0;i < len2;i++)
       {var
         x1=
          (nat1.data[ofs1 + i] >>> 0)
          +
          (nat2.data[ofs2 + i] >>> 0)
          *
          (a & 0x0000FFFF)
          +
          carry,
         x2=(nat2.data[ofs2 + i] >>> 0) * (a >>> 16);
        carry = Math.floor(x2 / 65536);
        var x3=x1 + x2 % 65536 * 65536;
        nat1.data[ofs1 + i] = x3;
        carry += Math.floor(x3 / 4294967296)}
      return len2 < len1 && carry
              ?add_nat
                (nat1,ofs1 + len2,len1 - len2,nat_of_array([carry]),0,1,0)
              :carry}
    function decr_nat(nat,ofs,len,carry_in)
     {var borrow=carry_in == 1?0:1;
      for(var i=0;i < len;i++)
       {var x=(nat.data[ofs + i] >>> 0) - borrow;
        nat.data[ofs + i] = x;
        if(x >= 0){borrow = 0;break}else borrow = 1}
      return borrow == 1?0:1}
    function sub_nat(nat1,ofs1,len1,nat2,ofs2,len2,carry_in)
     {var borrow=carry_in == 1?0:1;
      for(var i=0;i < len2;i++)
       {var
         x=
          (nat1.data[ofs1 + i] >>> 0) - (nat2.data[ofs2 + i] >>> 0) - borrow;
        nat1.data[ofs1 + i] = x;
        if(x >= 0)borrow = 0;else borrow = 1}
      return decr_nat(nat1,ofs1 + len2,len1 - len2,borrow == 1?0:1)}
    function compare_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {var a=num_digits_nat(nat1,ofs1,len1),b=num_digits_nat(nat2,ofs2,len2);
      if(a > b)return 1;
      if(a < b)return - 1;
      for(var i=len1 - 1;i >= 0;i--)
       {if(nat1.data[ofs1 + i] >>> 0 > nat2.data[ofs2 + i] >>> 0)return 1;
        if(nat1.data[ofs1 + i] >>> 0 < nat2.data[ofs2 + i] >>> 0)return - 1}
      return 0}
    function div_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {if(len2 == 1)
       {div_digit_nat(nat1,ofs1 + 1,nat1,ofs1,nat1,ofs1,len1,nat2,ofs2);
        return 0}
      var s=num_leading_zero_bits_in_digit(nat2,ofs2 + len2 - 1);
      shift_left_nat(nat2,ofs2,len2,nat_of_array([0]),0,s);
      shift_left_nat(nat1,ofs1,len1,nat_of_array([0]),0,s);
      var d=(nat2.data[ofs2 + len2 - 1] >>> 0) + 1,a=create_nat(len2 + 1);
      for(var i=len1 - 1;i >= len2;i--)
       {var
         quo=
          d == 4294967296
           ?nat1.data[ofs1 + i] >>> 0
           :div_helper
              (nat1.data[ofs1 + i] >>> 0,nat1.data[ofs1 + i - 1] >>> 0,d)
             [0];
        set_to_zero_nat(a,0,len2 + 1);
        mult_digit_nat(a,0,len2 + 1,nat2,ofs2,len2,nat_of_array([quo]),0);
        sub_nat(nat1,ofs1 + i - len2,len2 + 1,a,0,len2 + 1,1);
        while
         (nat1.data[ofs1 + i]
          !=
          0
          ||
          compare_nat(nat1,ofs1 + i - len2,len2,nat2,ofs2,len2)
          >=
          0)
         {quo = quo + 1;
          sub_nat(nat1,ofs1 + i - len2,len2 + 1,nat2,ofs2,len2,1)}
        nat1.data[ofs1 + i] = quo}
      shift_right_nat(nat1,ofs1,len2,nat_of_array([0]),0,s);
      shift_right_nat(nat2,ofs2,len2,nat_of_array([0]),0,s);
      return 0}
    function caml_ba_blit(src,dst)
     {if(dst.dims.length != src.dims.length)
       caml_invalid_argument("Bigarray.blit: dimension mismatch");
      for(var i=0;i < dst.dims.length;i++)
       if(dst.dims[i] != src.dims[i])
        caml_invalid_argument("Bigarray.blit: dimension mismatch");
      dst.data.set(src.data);
      return 0}
    function is_digit_int(nat,ofs){if(nat.data[ofs] >= 0)return 1;return 0}
    function caml_int64_div(x,y){return x.div(y)}
    function caml_js_html_entities(s)
     {var entity=/^&#?[0-9a-zA-Z]+;$/;
      if(s.match(entity))
       {var str,temp=document.createElement("p");
        temp.innerHTML = s;
        str = temp.textContent || temp.innerText;
        temp = null;
        return str}
      else
       caml_failwith("Invalid entity " + s)}
    function caml_string_unsafe_set(s,i,c)
     {return caml_bytes_unsafe_set(s,i,c)}
    function caml_int64_of_float(x)
     {if(x < 0)x = Math.ceil(x);
      return new
              MlInt64
              (x & 0xffffff,
               Math.floor(x * caml_int64_offset) & 0xffffff,
               Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff)}
    function caml_ml_channel_size_64(chanid)
     {var chan=caml_ml_channels[chanid];
      return caml_int64_of_float(chan.file.length())}
    function caml_ba_set_2(ba,i0,i1,v){ba.set(ba.offset([i0,i1]),v);return 0}
    var
     caml_argv=
      function()
        {var process=globalThis.process,main="a.out",args=[];
         if(process && process.argv && process.argv.length > 1)
          {var argv=process.argv;main = argv[1];args = argv.slice(2)}
         var p=caml_string_of_jsstring(main),args2=[0,p];
         for(var i=0;i < args.length;i++)
          args2.push(caml_string_of_jsstring(args[i]));
         return args2}
       (),
     caml_executable_name=caml_argv[1];
    function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s))}
    function serialize_nat(writer,nat,sz)
     {var len=nat.data.length;
      writer.write(32,len);
      for(var i=0;i < len;i++)writer.write(32,nat.data[i]);
      sz[0] = len * 4;
      sz[1] = len * 8}
    function caml_memprof_set(_control){return 0}
    function caml_sys_exit(code)
     {if(globalThis.quit)globalThis.quit(code);
      if(globalThis.process && globalThis.process.exit)
       globalThis.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_channel_descriptor(chanid)
     {var chan=caml_ml_channels[chanid];return chan.fd}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_ba_reshape(ba,vind)
     {vind = caml_js_from_array(vind);
      var new_dim=[],num_dims=vind.length;
      if(num_dims < 0 || num_dims > 16)
       caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
      var num_elts=1;
      for(var i=0;i < num_dims;i++)
       {new_dim[i] = vind[i];
        if(new_dim[i] < 0)
         caml_invalid_argument("Bigarray.reshape: negative dimension");
        num_elts = num_elts * new_dim[i]}
      var size=caml_ba_get_size(ba.dims);
      if(num_elts != size)
       caml_invalid_argument("Bigarray.reshape: size mismatch");
      return caml_ba_create_unsafe(ba.kind,ba.layout,new_dim,ba.data)}
    var caml_oo_last_id=0;
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_gr_fill_rect(x,y,w,h)
     {var s=caml_gr_state_get();
      s.context.fillRect(x,s.height - y,w,- h);
      return 0}
    function caml_bigstring_blit_string_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_string_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_uint8_array_of_string(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    function caml_gr_set_window_title(name)
     {var s=caml_gr_state_get();
      s.title = name;
      var jsname=caml_jsstring_of_string(name);
      if(s.set_title)s.set_title(jsname);
      return 0}
    function caml_get_global_data(){return caml_global_data}
    function caml_int64_shift_right_unsigned(x,s)
     {return x.shift_right_unsigned(s)}
    function caml_ba_uint8_get16(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 1 >= ba.data.length)caml_array_bound_error();
      var b1=ba.get(ofs),b2=ba.get(ofs + 1);
      return b1 | b2 << 8}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    var
     caml_MD5Transform=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         return function(w,buffer)
          {var a=w[0],b=w[1],c=w[2],d=w[3];
           a = ff(a,b,c,d,buffer[0],7,0xD76AA478);
           d = ff(d,a,b,c,buffer[1],12,0xE8C7B756);
           c = ff(c,d,a,b,buffer[2],17,0x242070DB);
           b = ff(b,c,d,a,buffer[3],22,0xC1BDCEEE);
           a = ff(a,b,c,d,buffer[4],7,0xF57C0FAF);
           d = ff(d,a,b,c,buffer[5],12,0x4787C62A);
           c = ff(c,d,a,b,buffer[6],17,0xA8304613);
           b = ff(b,c,d,a,buffer[7],22,0xFD469501);
           a = ff(a,b,c,d,buffer[8],7,0x698098D8);
           d = ff(d,a,b,c,buffer[9],12,0x8B44F7AF);
           c = ff(c,d,a,b,buffer[10],17,0xFFFF5BB1);
           b = ff(b,c,d,a,buffer[11],22,0x895CD7BE);
           a = ff(a,b,c,d,buffer[12],7,0x6B901122);
           d = ff(d,a,b,c,buffer[13],12,0xFD987193);
           c = ff(c,d,a,b,buffer[14],17,0xA679438E);
           b = ff(b,c,d,a,buffer[15],22,0x49B40821);
           a = gg(a,b,c,d,buffer[1],5,0xF61E2562);
           d = gg(d,a,b,c,buffer[6],9,0xC040B340);
           c = gg(c,d,a,b,buffer[11],14,0x265E5A51);
           b = gg(b,c,d,a,buffer[0],20,0xE9B6C7AA);
           a = gg(a,b,c,d,buffer[5],5,0xD62F105D);
           d = gg(d,a,b,c,buffer[10],9,0x02441453);
           c = gg(c,d,a,b,buffer[15],14,0xD8A1E681);
           b = gg(b,c,d,a,buffer[4],20,0xE7D3FBC8);
           a = gg(a,b,c,d,buffer[9],5,0x21E1CDE6);
           d = gg(d,a,b,c,buffer[14],9,0xC33707D6);
           c = gg(c,d,a,b,buffer[3],14,0xF4D50D87);
           b = gg(b,c,d,a,buffer[8],20,0x455A14ED);
           a = gg(a,b,c,d,buffer[13],5,0xA9E3E905);
           d = gg(d,a,b,c,buffer[2],9,0xFCEFA3F8);
           c = gg(c,d,a,b,buffer[7],14,0x676F02D9);
           b = gg(b,c,d,a,buffer[12],20,0x8D2A4C8A);
           a = hh(a,b,c,d,buffer[5],4,0xFFFA3942);
           d = hh(d,a,b,c,buffer[8],11,0x8771F681);
           c = hh(c,d,a,b,buffer[11],16,0x6D9D6122);
           b = hh(b,c,d,a,buffer[14],23,0xFDE5380C);
           a = hh(a,b,c,d,buffer[1],4,0xA4BEEA44);
           d = hh(d,a,b,c,buffer[4],11,0x4BDECFA9);
           c = hh(c,d,a,b,buffer[7],16,0xF6BB4B60);
           b = hh(b,c,d,a,buffer[10],23,0xBEBFBC70);
           a = hh(a,b,c,d,buffer[13],4,0x289B7EC6);
           d = hh(d,a,b,c,buffer[0],11,0xEAA127FA);
           c = hh(c,d,a,b,buffer[3],16,0xD4EF3085);
           b = hh(b,c,d,a,buffer[6],23,0x04881D05);
           a = hh(a,b,c,d,buffer[9],4,0xD9D4D039);
           d = hh(d,a,b,c,buffer[12],11,0xE6DB99E5);
           c = hh(c,d,a,b,buffer[15],16,0x1FA27CF8);
           b = hh(b,c,d,a,buffer[2],23,0xC4AC5665);
           a = ii(a,b,c,d,buffer[0],6,0xF4292244);
           d = ii(d,a,b,c,buffer[7],10,0x432AFF97);
           c = ii(c,d,a,b,buffer[14],15,0xAB9423A7);
           b = ii(b,c,d,a,buffer[5],21,0xFC93A039);
           a = ii(a,b,c,d,buffer[12],6,0x655B59C3);
           d = ii(d,a,b,c,buffer[3],10,0x8F0CCC92);
           c = ii(c,d,a,b,buffer[10],15,0xFFEFF47D);
           b = ii(b,c,d,a,buffer[1],21,0x85845DD1);
           a = ii(a,b,c,d,buffer[8],6,0x6FA87E4F);
           d = ii(d,a,b,c,buffer[15],10,0xFE2CE6E0);
           c = ii(c,d,a,b,buffer[6],15,0xA3014314);
           b = ii(b,c,d,a,buffer[13],21,0x4E0811A1);
           a = ii(a,b,c,d,buffer[4],6,0xF7537E82);
           d = ii(d,a,b,c,buffer[11],10,0xBD3AF235);
           c = ii(c,d,a,b,buffer[2],15,0x2AD7D2BB);
           b = ii(b,c,d,a,buffer[9],21,0xEB86D391);
           w[0] = add(a,w[0]);
           w[1] = add(b,w[1]);
           w[2] = add(c,w[2]);
           w[3] = add(d,w[3])}}
       ();
    function caml_MD5Update(ctx,input,input_len)
     {var in_buf=ctx.len & 0x3f,input_pos=0;
      ctx.len += input_len;
      if(in_buf)
       {var missing=64 - in_buf;
        if(input_len < missing)
         {ctx.b8.set(input.subarray(0,input_len),in_buf);return}
        ctx.b8.set(input.subarray(0,missing),in_buf);
        caml_MD5Transform(ctx.w,ctx.b32);
        input_len -= missing;
        input_pos += missing}
      while(input_len >= 64)
       {ctx.b8.set(input.subarray(input_pos,input_pos + 64),0);
        caml_MD5Transform(ctx.w,ctx.b32);
        input_len -= 64;
        input_pos += 64}
      if(input_len)
       ctx.b8.set(input.subarray(input_pos,input_pos + input_len),0)}
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_int64_to_float(x){return x.toFloat()}
    function caml_ba_get_1(ba,i0){return ba.get(ba.offset(i0))}
    function caml_bigstring_memcmp(s1,pos1,s2,pos2,len)
     {for(var i=0;i < len;i++)
       {var a=caml_ba_get_1(s1,pos1 + i),b=caml_ba_get_1(s2,pos2 + i);
        if(a < b)return - 1;
        if(a > b)return 1}
      return 0}
    function caml_new_string(s){return caml_string_of_jsbytes(s)}
    function caml_erf_float(x)
     {var
       a1=0.254829592,
       a2=- 0.284496736,
       a3=1.421413741,
       a4=- 1.453152027,
       a5=1.061405429,
       p=0.3275911,
       sign=1;
      if(x < 0)sign = - 1;
      x = Math.abs(x);
      var
       t=1.0 / (1.0 + p * x),
       y=
        1.0
        -
        ((((a5 * t + a4) * t + a3) * t + a2) * t + a1)
        *
        t
        *
        Math.exp(- (x * x));
      return sign * y}
    function caml_ba_uint8_get32(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 3 >= ba.data.length)caml_array_bound_error();
      var
       b1=ba.get(ofs + 0),
       b2=ba.get(ofs + 1),
       b3=ba.get(ofs + 2),
       b4=ba.get(ofs + 3);
      return b1 << 0 | b2 << 8 | b3 << 16 | b4 << 24}
    function caml_raw_backtrace_length(){return 0}
    function caml_str_initialize(unit){return 0}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_gr_clear_graph()
     {var s=caml_gr_state_get();
      s.canvas.width = s.width;
      s.canvas.height = s.height;
      return 0}
    function bigstring_to_array_buffer(bs){return bs.data.buffer}
    function caml_sys_const_naked_pointers_checked(_unit){return 0}
    function lxor_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] ^= nat2.data[ofs2];return 0}
    function caml_obj_add_offset(v,offset)
     {caml_failwith("Obj.add_offset is not supported")}
    function caml_final_release(){return 0}
    function caml_js_to_array(a)
     {var len=a.length,b=new Array(len + 1);
      b[0] = 0;
      for(var i=0;i < len;i++)b[i + 1] = a[i];
      return b}
    function caml_gr_plot(x,y)
     {var
       s=caml_gr_state_get(),
       im=s.context.createImageData(1,1),
       d=im.data,
       color=s.color;
      d[0] = color >> 16 & 0xff;
      d[1] = color >> 8 & 0xff,d[2] = color >> 0 & 0xff;
      d[3] = 0xFF;
      s.x = x;
      s.y = y;
      s.context.putImageData(im,x,s.height - y);
      return 0}
    function caml_bytes_set16(s,i,i16)
     {if(i >>> 0 >= s.l - 1)caml_bytes_bound_error();
      var b2=0xFF & i16 >> 8,b1=0xFF & i16;
      caml_bytes_unsafe_set(s,i + 0,b1);
      caml_bytes_unsafe_set(s,i + 1,b2);
      return 0}
    function caml_string_set16(s,i,i16){return caml_bytes_set16(s,i,i16)}
    function caml_bytes_set64(s,i,i64)
     {if(i >>> 0 >= s.l - 7)caml_bytes_bound_error();
      var a=caml_int64_to_bytes(i64);
      for(var j=0;j < 8;j++)caml_bytes_unsafe_set(s,i + 7 - j,a[j]);
      return 0}
    function caml_int64_bswap(x)
     {var y=caml_int64_to_bytes(x);
      return caml_int64_of_bytes([y[7],y[6],y[5],y[4],y[3],y[2],y[1],y[0]])}
    function caml_gc_major(unit)
     {if(typeof globalThis.gc == "function")globalThis.gc();return 0}
    function caml_lex_array(s)
     {s = caml_jsbytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var
       c,
       state=start_state,
       buffer=caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return - base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function caml_sys_file_exists(name)
     {var root=resolve_fs_device(name);return root.device.exists(root.rest)}
    function caml_convert_raw_backtrace_slot()
     {caml_failwith("caml_convert_raw_backtrace_slot")}
    function caml_array_sub(a,i,len)
     {var a2=new Array(len + 1);
      a2[0] = 0;
      for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
      return a2}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_gr_size_x(){var s=caml_gr_state_get();return s.width}
    function caml_ml_debug_info_status(){return 0}
    function caml_atomic_fetch_add(ref,i)
     {var old=ref[1];ref[1] += i;return old}
    var
     os_type=
      globalThis.process
       &&
       globalThis.process.platform
       &&
       globalThis.process.platform
       ==
       "win32"
       ?"Cygwin"
       :"Unix";
    function caml_sys_const_ostype_cygwin(){return os_type == "Cygwin"?1:0}
    function caml_cosh_float(x){return Math.cosh(x)}
    function MlMutex(){this.locked = false}
    function caml_ml_mutex_new(unit){return new MlMutex()}
    var caml_ephe_key_offset=3;
    function caml_ephe_check_key(x,i)
     {var weak=x[caml_ephe_key_offset + i];
      if(globalThis.WeakRef && weak instanceof globalThis.WeakRef)
       weak = weak.deref();
      return weak === undefined?0:1}
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_gr_text_size(txt)
     {var
       s=caml_gr_state_get(),
       w=s.context.measureText(caml_jsstring_of_string(txt)).width;
      return [0,w,s.text_size]}
    function caml_lex_run_mem(s,i,mem,curr_pos)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 0xff)return;
        var src=s.charCodeAt(i);
        i++;
        if(src == 0xff)
         mem[dst + 1] = curr_pos;
        else
         mem[dst + 1] = mem[src + 1]}}
    function caml_lex_run_tag(s,i,mem)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 0xff)return;
        var src=s.charCodeAt(i);
        i++;
        if(src == 0xff)mem[dst + 1] = - 1;else mem[dst + 1] = mem[src + 1]}}
    function caml_new_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_mem=10,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5,
       lex_base_code=6,
       lex_backtrk_code=7,
       lex_default_code=8,
       lex_trans_code=9,
       lex_check_code=10,
       lex_code=11;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      if(! tbl.lex_default_code)
       {tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
        tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
        tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
        tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
        tbl.lex_default_code = caml_lex_array(tbl[lex_default_code])}
      if(tbl.lex_code == null)
       tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
      var
       c,
       state=start_state,
       buffer=caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)
         {var pc_off=tbl.lex_base_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          return - base - 1}
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {var pc_off=tbl.lex_backtrk_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        var pstate=state;
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         {var base_code=tbl.lex_base_code[pstate],pc_off;
          if(tbl.lex_check_code[base_code + c] == pstate)
           pc_off = tbl.lex_trans_code[base_code + c];
          else
           pc_off = tbl.lex_default_code[pstate];
          if(pc_off > 0)
           caml_lex_run_mem
            (tbl.lex_code,pc_off,lexbuf[lex_mem],lexbuf[lex_curr_pos]);
          if(c == 256)lexbuf[lex_eof_reached] = 0}}}
    function caml_ba_uint8_set64(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 7 >= ba.data.length)caml_array_bound_error();
      var v=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)ba.set(ofs + i,v[7 - i]);
      return 0}
    function caml_sys_executable_name(a){return caml_executable_name}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_acosh_float(x){return Math.acosh(x)}
    function caml_MD5Init()
     {var
       buffer=new ArrayBuffer(64),
       b32=new Uint32Array(buffer),
       b8=new Uint8Array(buffer);
      return {len:0,
              w:new Uint32Array([0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476]),
              b32:b32,
              b8:b8}}
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer_curr == 0)return 0;
      if(chan.output)
       chan.output(caml_subarray_to_jsbytes(chan.buffer,0,chan.buffer_curr));
      else
       chan.file.write(chan.offset,chan.buffer,0,chan.buffer_curr);
      chan.offset += chan.buffer_curr;
      chan.buffer_curr = 0;
      return 0}
    function caml_seek_out(chanid,pos)
     {caml_ml_flush(chanid);
      var chan=caml_ml_channels[chanid];
      chan.offset = pos;
      return 0}
    function caml_ml_seek_out_64(chanid,pos)
     {var pos=caml_int64_to_float(pos);return caml_seek_out(chanid,pos)}
    function compare_nat_real(nat1,nat2)
     {return compare_nat(nat1,0,nat1.data.length,nat2,0,nat2.data.length)}
    function caml_gc_set(_control){return 0}
    function caml_js_get(o,f){return o[f]}
    function caml_unix_isatty(fileDescriptor)
     {if(fs_node_supported())
       {var tty=require("tty");return tty.isatty(fileDescriptor)?1:0}
      else
       return 0}
    function caml_ml_set_buffered(chanid,v)
     {caml_ml_channels[chanid].buffered = v;
      if(! v)caml_ml_flush(chanid);
      return 0}
    function caml_gc_compaction(){return 0}
    function caml_ephe_get_key(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_key");
      var weak=x[caml_ephe_key_offset + i];
      if(globalThis.WeakRef && weak instanceof globalThis.WeakRef)
       weak = weak.deref();
      return weak === undefined?0:[0,weak]}
    function caml_unix_localtime(t)
     {var
       d=new Date(t * 1000),
       d_num=d.getTime(),
       januaryfirst=new Date(d.getFullYear(),0,1).getTime(),
       doy=Math.floor((d_num - januaryfirst) / 86400000),
       jan=new Date(d.getFullYear(),0,1),
       jul=new Date(d.getFullYear(),6,1),
       stdTimezoneOffset=
        Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());
      return [0,
              d.getSeconds(),
              d.getMinutes(),
              d.getHours(),
              d.getDate(),
              d.getMonth(),
              d.getFullYear() - 1900,
              d.getDay(),
              doy,
              d.getTimezoneOffset() < stdTimezoneOffset | 0]}
    function caml_unix_mktime(tm)
     {var
       d=new Date(tm[6] + 1900,tm[5],tm[4],tm[3],tm[2],tm[1]).getTime(),
       t=Math.floor(d / 1000),
       tm2=caml_unix_localtime(t);
      return [0,t,tm2]}
    function caml_bigstring_blit_bytes_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_bytes_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_uint8_array_of_bytes(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    var caml_sys_fds=new Array(3);
    function caml_sys_close(fd)
     {var file=caml_sys_fds[fd];
      if(file)file.close();
      delete caml_sys_fds[fd];
      return 0}
    function caml_ml_close_channel(chanid)
     {var chan=caml_ml_channels[chanid];
      chan.opened = false;
      caml_sys_close(chan.fd);
      return 0}
    function caml_exn_with_js_backtrace(exn,force)
     {if(! exn.js_error || force || exn[0] == 248)
       exn.js_error
       =
       new (globalThis.Error)("Js exception containing backtrace");
      return exn}
    function caml_atomic_exchange(ref,v){var r=ref[1];ref[1] = v;return r}
    function caml_sys_isatty(_chan){return 0}
    function is_digit_zero(nat,ofs){if(nat.data[ofs] == 0)return 1;return 0}
    function caml_unix_lstat(name)
     {var root=resolve_fs_device(name);
      if(! root.device.lstat)
       caml_failwith("caml_unix_lstat: not implemented");
      return root.device.lstat(root.rest,true)}
    function caml_unix_lstat_64(name)
     {var r=caml_unix_lstat(name);r[9] = caml_int64_of_int32(r[9])}
    function caml_js_set(o,f,v){o[f] = v;return 0}
    function caml_array_get(array,index)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      return array[index + 1]}
    function caml_continuation_use_noexc(cont)
     {var stack=cont[1];cont[1] = 0;return stack}
    function caml_unix_rmdir(name)
     {var root=resolve_fs_device(name);
      if(! root.device.rmdir)
       caml_failwith("caml_unix_rmdir: not implemented");
      return root.device.rmdir(root.rest,true)}
    function caml_log2_float(x){return Math.log2(x)}
    function caml_gc_huge_fallback_count(unit){return 0}
    function caml_spacetime_only_works_for_native_code()
     {caml_failwith("Spacetime profiling only works for native code")}
    function caml_int64_sub(x,y){return x.sub(y)}
    function caml_seek_in(chanid,pos)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill != null)caml_raise_sys_error("Illegal seek");
      if
       (pos
        >=
        chan.offset
        -
        chan.buffer_max
        &&
        pos
        <=
        chan.offset
        &&
        chan.file.flags.binary)
       chan.buffer_curr = chan.buffer_max - (chan.offset - pos);
      else
       {chan.offset = pos;chan.buffer_curr = 0;chan.buffer_max = 0}
      return 0}
    function caml_ml_seek_in_64(chanid,pos)
     {var pos=caml_int64_to_float(pos);return caml_seek_in(chanid,pos)}
    var caml_domain_id=0;
    function caml_ml_mutex_unlock(t){t.locked = false;return 0}
    var caml_domain_latest_idx=1;
    function caml_domain_spawn(f,mutex)
     {var id=caml_domain_latest_idx++,old=caml_domain_id;
      caml_domain_id = id;
      caml_callback(f,[0]);
      caml_domain_id = old;
      caml_ml_mutex_unlock(mutex);
      return id}
    function caml_unix_mkdir(name,perm)
     {var root=resolve_fs_device(name);
      if(! root.device.mkdir)
       caml_failwith("caml_unix_mkdir: not implemented");
      return root.device.mkdir(root.rest,perm,true)}
    function caml_int64_shift_left(x,s){return x.shift_left(s)}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_sys_const_int_size(){return 32}
    function caml_js_wrap_callback(f)
     {return function()
       {var len=arguments.length;
        if(len > 0)
         {var args=new Array(len);
          for(var i=0;i < len;i++)args[i] = arguments[i]}
        else
         args = [undefined];
        var res=caml_callback(f,args);
        return res instanceof Function?caml_js_wrap_callback(res):res}}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        var res=caml_callback(f,args);
        return res instanceof Function?caml_js_wrap_callback(res):res}}
    function caml_is_js(){return 1}
    function caml_lazy_update_to_forward(o)
     {caml_obj_update_tag(o,244,250);return 0}
    function caml_ba_dim(ba,i)
     {if(i < 0 || i >= ba.dims.length)caml_invalid_argument("Bigarray.dim");
      return ba.dims[i]}
    function caml_ba_dim_1(ba){return caml_ba_dim(ba,0)}
    function caml_js_meth_call(o,f,args)
     {return o[caml_jsstring_of_string(f)].apply(o,caml_js_from_array(args))}
    var caml_ephe_data_offset=2;
    function caml_weak_create(n)
     {if(n < 0)caml_invalid_argument("Weak.create");
      var x=[251,"caml_ephe_list_head"];
      x.length = caml_ephe_key_offset + n;
      return x}
    function caml_ephe_create(n){var x=caml_weak_create(n);return x}
    function caml_js_to_byte_string(s){return caml_string_of_jsbytes(s)}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_maybe_print_stats(unit){return 0}
    function caml_bytes_get64(s,i)
     {if(i >>> 0 >= s.l - 7)caml_bytes_bound_error();
      var a=new Array(8);
      for(var j=0;j < 8;j++)a[7 - j] = caml_bytes_unsafe_get(s,i + j);
      return caml_int64_of_bytes(a)}
    function caml_unix_has_symlink(unit){return fs_node_supported()?1:0}
    function caml_ephe_set_key(x,i,v)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.set");
      if(v instanceof Object && globalThis.WeakRef)
       {if(x[1].register)x[1].register(v,undefined,v);
        x[caml_ephe_key_offset + i] = new (globalThis.WeakRef)(v)}
      else
       x[caml_ephe_key_offset + i] = v;
      return 0}
    function caml_ephe_unset_key(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.set");
      if
       (globalThis.WeakRef
        &&
        x[caml_ephe_key_offset + i] instanceof globalThis.WeakRef
        &&
        x[1].unregister)
       {var old=x[caml_ephe_key_offset + i].deref();
        if(old !== undefined)
         {var count=0;
          for(var j=caml_ephe_key_offset;j < x.length;j++)
           {var key=x[j];
            if(key instanceof globalThis.WeakRef)
             {key = key.deref();if(key === old)count++}}
          if(count == 1)x[1].unregister(old)}}
      x[caml_ephe_key_offset + i] = undefined;
      return 0}
    function caml_weak_set(x,i,v)
     {if(v == 0)caml_ephe_unset_key(x,i);else caml_ephe_set_key(x,i,v[1]);
      return 0}
    function caml_sys_remove(name)
     {var root=resolve_fs_device(name),ok=root.device.unlink(root.rest);
      if(ok == 0)caml_raise_no_such_file(caml_jsbytes_of_string(name));
      return 0}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get32(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 3)caml_string_bound_error();
      var
       b1=caml_string_unsafe_get(s,i),
       b2=caml_string_unsafe_get(s,i + 1),
       b3=caml_string_unsafe_get(s,i + 2),
       b4=caml_string_unsafe_get(s,i + 3);
      return b4 << 24 | b3 << 16 | b2 << 8 | b1}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_hypot_float(x,y){return Math.hypot(x,y)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_unix_inet_addr_of_string(){return 0}
    function caml_hash_mix_bytes_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_jsbytes(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_ml_bytes_content(s)
     {switch(s.t & 6)
       {default:caml_convert_string_to_bytes(s);case 0:return s.c;
        case 4:return s.c
        }}
    function caml_hash_mix_bytes(h,v)
     {var content=caml_ml_bytes_content(v);
      return typeof content === "string"
              ?caml_hash_mix_jsbytes(h,content)
              :caml_hash_mix_bytes_arr(h,content)}
    function caml_bytes_lessthan(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?1:0}
    function caml_erfc_float(x){return 1 - caml_erf_float(x)}
    function caml_gr_fill_poly(ar)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      s.context.moveTo(ar[1][1],s.height - ar[1][2]);
      for(var i=2;i < ar.length;i++)
       s.context.lineTo(ar[i][1],s.height - ar[i][2]);
      s.context.lineTo(ar[1][1],s.height - ar[1][2]);
      s.context.fill();
      return 0}
    function caml_gc_quick_stat(){return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
    function caml_ml_input_char(chanid)
     {var chan=caml_ml_channels[chanid];
      if(chan.buffer_curr >= chan.buffer_max)
       {chan.buffer_curr = 0;chan.buffer_max = 0;caml_refill(chan)}
      if(chan.buffer_curr >= chan.buffer_max)caml_raise_end_of_file();
      var res=chan.buffer[chan.buffer_curr];
      chan.buffer_curr++;
      return res}
    function caml_ml_input_int(chanid)
     {var chan=caml_ml_channels[chanid],res=0;
      for(var i=0;i < 4;i++)res = (res << 8) + caml_ml_input_char(chanid);
      return res}
    function caml_gr_display_mode()
     {caml_failwith("caml_gr_display_mode not Implemented")}
    function caml_obj_reachable_words(o){return 0}
    function nth_digit_nat(nat,ofs){return nat.data[ofs]}
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[5] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_sys_getcwd()
     {return caml_string_of_jsbytes(caml_current_dir)}
    function caml_int64_add(x,y){return x.add(y)}
    function caml_int64_mul(x,y){return x.mul(y)}
    function caml_int64_ult(x,y){return x.ucompare(y) < 0}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int64_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       base64=caml_int64_of_int32(base),
       threshold=
        new MlInt64(0xffffff,0xfffffff,0xffff).udivmod(base64).quotient,
       c=caml_string_unsafe_get(s,i),
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=caml_int64_of_int32(d);
      for(;;)
       {i++;
        c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        if(caml_int64_ult(threshold,res))caml_failwith("int_of_string");
        d = caml_int64_of_int32(d);
        res = caml_int64_add(caml_int64_mul(base64,res),d);
        if(caml_int64_ult(res,d))caml_failwith("int_of_string")}
      if(i != caml_ml_string_length(s))caml_failwith("int_of_string");
      if(base == 10 && caml_int64_ult(new MlInt64(0,0,0x8000),res))
       caml_failwith("int_of_string");
      if(sign < 0)res = caml_int64_neg(res);
      return res}
    function caml_ba_set_1(ba,i0,v){ba.set(ba.offset(i0),v);return 0}
    function caml_int64_xor(x,y){return x.xor(y)}
    function caml_int64_or(x,y){return x.or(y)}
    function caml_lxm_next(v)
     {function shift_l(x,k){return caml_int64_shift_left(x,k)}
      function shift_r(x,k){return caml_int64_shift_right_unsigned(x,k)}
      function or(a,b){return caml_int64_or(a,b)}
      function xor(a,b){return caml_int64_xor(a,b)}
      function add(a,b){return caml_int64_add(a,b)}
      function mul(a,b){return caml_int64_mul(a,b)}
      function rotl(x,k){return or(shift_l(x,k),shift_r(x,64 - k))}
      function get(a,i){return caml_ba_get_1(a,i)}
      function set(a,i,x){return caml_ba_set_1(a,i,x)}
      var
       M=caml_int64_of_string(caml_new_string("0xd1342543de82ef95")),
       daba=caml_int64_of_string(caml_new_string("0xdaba0b6eb09322e3")),
       z,
       q0,
       q1,
       st=v,
       a=get(st,0),
       s=get(st,1),
       x0=get(st,2),
       x1=get(st,3);
      z = add(s,x0);
      z = mul(xor(z,shift_r(z,32)),daba);
      z = mul(xor(z,shift_r(z,32)),daba);
      z = xor(z,shift_r(z,32));
      set(st,1,add(mul(s,M),a));
      var q0=x0,q1=x1;
      q1 = xor(q1,q0);
      q0 = rotl(q0,24);
      q0 = xor(xor(q0,q1),shift_l(q1,16));
      q1 = rotl(q1,37);
      set(st,2,q0);
      set(st,3,q1);
      return z}
    function caml_sys_const_big_endian(){return 0}
    function caml_list_to_js_array(l)
     {var a=[];for(;l !== 0;l = l[2])a.push(l[1]);return a}
    var
     caml_legacy_custom_code=false,
     caml_output_val=
      function()
        {function Writer(){this.chunk = []}
         Writer.prototype
         =
         {chunk_idx:20,
          block_len:0,
          obj_counter:0,
          size_32:0,
          size_64:0,
          write:
          function(size,value)
           {for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xFF},
          write_at:
          function(pos,size,value)
           {var pos=pos;
            for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[pos++] = value >> i & 0xFF},
          write_code:
          function(size,code,value)
           {this.chunk[this.chunk_idx++] = code;
            for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xFF},
          write_shared:
          function(offset)
           {if(offset < 1 << 8)
             this.write_code(8,0x04,offset);
            else
             if(offset < 1 << 16)
              this.write_code(16,0x05,offset);
             else
              this.write_code(32,0x06,offset)},
          pos:function(){return this.chunk_idx},
          finalize:
          function()
           {this.block_len = this.chunk_idx - 20;
            this.chunk_idx = 0;
            this.write(32,0x8495A6BE);
            this.write(32,this.block_len);
            this.write(32,this.obj_counter);
            this.write(32,this.size_32);
            this.write(32,this.size_64);
            return this.chunk}};
         return function(v,flags)
          {flags = caml_list_to_js_array(flags);
           var
            no_sharing=flags.indexOf(0) !== - 1,
            closures=flags.indexOf(1) !== - 1;
           if(closures)
            console.warn
             ("in caml_output_val: flag Marshal.Closures is not supported.");
           var
            writer=new Writer(),
            stack=[],
            intern_obj_table=no_sharing?null:new MlObjectTable();
           function memo(v)
            {if(no_sharing)return false;
             var existing_offset=intern_obj_table.recall(v);
             if(existing_offset)
              {writer.write_shared(existing_offset);return true}
             else
              {intern_obj_table.store(v);return false}}
           function extern_rec(v)
            {if(v.caml_custom)
              {if(memo(v))return;
               var
                name=v.caml_custom,
                ops=caml_custom_ops[name],
                sz_32_64=[0,0];
               if(! ops.serialize)
                caml_invalid_argument("output_value: abstract value (Custom)");
               if(caml_legacy_custom_code)
                {writer.write(8,0x12);
                 for(var i=0;i < name.length;i++)
                  writer.write(8,name.charCodeAt(i));
                 writer.write(8,0);
                 ops.serialize(writer,v,sz_32_64)}
               else
                if(ops.fixed_length == undefined)
                 {writer.write(8,0x18);
                  for(var i=0;i < name.length;i++)
                   writer.write(8,name.charCodeAt(i));
                  writer.write(8,0);
                  var header_pos=writer.pos();
                  for(var i=0;i < 12;i++)writer.write(8,0);
                  ops.serialize(writer,v,sz_32_64);
                  writer.write_at(header_pos,32,sz_32_64[0]);
                  writer.write_at(header_pos + 4,32,0);
                  writer.write_at(header_pos + 8,32,sz_32_64[1])}
                else
                 {writer.write(8,0x19);
                  for(var i=0;i < name.length;i++)
                   writer.write(8,name.charCodeAt(i));
                  writer.write(8,0);
                  var old_pos=writer.pos();
                  ops.serialize(writer,v,sz_32_64);
                  if(ops.fixed_length != writer.pos() - old_pos)
                   caml_failwith
                    ("output_value: incorrect fixed sizes specified by " + name)}
               writer.size_32 += 2 + (sz_32_64[0] + 3 >> 2);
               writer.size_64 += 2 + (sz_32_64[1] + 7 >> 3)}
             else
              if(v instanceof Array && v[0] === (v[0] | 0))
               {if(v[0] == 251)
                 caml_failwith("output_value: abstract value (Abstract)");
                if(caml_is_continuation_tag(v[0]))
                 caml_invalid_argument("output_value: continuation value");
                if(v.length > 1 && memo(v))return;
                if(v[0] < 16 && v.length - 1 < 8)
                 writer.write(8,0x80 + v[0] + (v.length - 1 << 4));
                else
                 writer.write_code(32,0x08,v.length - 1 << 10 | v[0]);
                writer.size_32 += v.length;
                writer.size_64 += v.length;
                if(v.length > 1)stack.push(v,1)}
              else
               if(caml_is_ml_bytes(v))
                {if(! caml_is_ml_bytes(caml_string_of_jsbytes("")))
                  caml_failwith
                   ("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
                 if(memo(v))return;
                 var len=caml_ml_bytes_length(v);
                 if(len < 0x20)
                  writer.write(8,0x20 + len);
                 else
                  if(len < 0x100)
                   writer.write_code(8,0x09,len);
                  else
                   writer.write_code(32,0x0A,len);
                 for(var i=0;i < len;i++)
                  writer.write(8,caml_bytes_unsafe_get(v,i));
                 writer.size_32 += 1 + ((len + 4) / 4 | 0);
                 writer.size_64 += 1 + ((len + 8) / 8 | 0)}
               else
                if(caml_is_ml_string(v))
                 {var len=caml_ml_string_length(v);
                  if(len < 0x20)
                   writer.write(8,0x20 + len);
                  else
                   if(len < 0x100)
                    writer.write_code(8,0x09,len);
                   else
                    writer.write_code(32,0x0A,len);
                  for(var i=0;i < len;i++)
                   writer.write(8,caml_string_unsafe_get(v,i));
                  writer.size_32 += 1 + ((len + 4) / 4 | 0);
                  writer.size_64 += 1 + ((len + 8) / 8 | 0)}
                else
                 if(v != (v | 0))
                  {var type_of_v=typeof v;
                   caml_failwith
                    ("output_value: abstract value (" + type_of_v + ")")}
                 else
                  if(v >= 0 && v < 0x40)
                   writer.write(8,0X40 + v);
                  else
                   if(v >= - (1 << 7) && v < 1 << 7)
                    writer.write_code(8,0x00,v);
                   else
                    if(v >= - (1 << 15) && v < 1 << 15)
                     writer.write_code(16,0x01,v);
                    else
                     writer.write_code(32,0x02,v)}
           extern_rec(v);
           while(stack.length > 0)
            {var i=stack.pop(),v=stack.pop();
             if(i + 1 < v.length)stack.push(v,i + 1);
             extern_rec(v[i])}
           if(intern_obj_table)
            writer.obj_counter = intern_obj_table.objs.length;
           writer.finalize();
           return writer.chunk}}
       ();
    function caml_string_of_array(a)
     {return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length))}
    function caml_output_value_to_string(v,flags)
     {return caml_string_of_array(caml_output_val(v,flags))}
    function caml_raise_not_a_dir(name)
     {caml_raise_sys_error(name + ": Not a directory")}
    function caml_sys_system_command(cmd)
     {var cmd=caml_jsstring_of_string(cmd);
      if(typeof require != "undefined")
       {var child_process=require("child_process");
        if(child_process && child_process.execSync)
         try
          {child_process.execSync(cmd,{stdio:"inherit"});return 0}
         catch(e){return 1}}
      else
       return 127}
    function caml_js_error_of_exception(exn)
     {if(exn.js_error)return exn.js_error;return null}
    function caml_unix_getuid(unit)
     {if(globalThis.process && globalThis.process.getuid)
       return globalThis.process.getuid();
      caml_raise_not_found()}
    function deserialize_nat(reader,sz)
     {var len=reader.read32s(),nat=new MlNat(len);
      for(var i=0;i < len;i++)nat.data[i] = reader.read32s();
      sz[0] = len * 4;
      return nat}
    function initialize_nat()
     {caml_custom_ops["_nat"]
      =
      {deserialize:deserialize_nat,serialize:serialize_nat,hash:caml_hash_nat}}
    function caml_gr_open_subwindow(a,b,c,d)
     {caml_failwith("caml_gr_open_subwindow not Implemented")}
    function caml_marshal_data_size(s,ofs)
     {function get32(s,i)
       {return caml_bytes_unsafe_get(s,i)
               <<
               24
               |
               caml_bytes_unsafe_get(s,i + 1)
               <<
               16
               |
               caml_bytes_unsafe_get(s,i + 2)
               <<
               8
               |
               caml_bytes_unsafe_get(s,i + 3)}
      if(get32(s,ofs) != (0x8495A6BE | 0))
       caml_failwith("Marshal.data_size: bad object");
      return get32(s,ofs + 4)}
    function MlStringReader(s,i)
     {this.s = caml_jsbytes_of_string(s);this.i = i}
    MlStringReader.prototype
    =
    {read8u:function(){return this.s.charCodeAt(this.i++)},
     read8s:function(){return this.s.charCodeAt(this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (s.charCodeAt(i)
               <<
               24
               |
               s.charCodeAt(i + 1)
               <<
               16
               |
               s.charCodeAt(i + 2)
               <<
               8
               |
               s.charCodeAt(i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return s.charCodeAt(i)
              <<
              24
              |
              s.charCodeAt(i + 1)
              <<
              16
              |
              s.charCodeAt(i + 2)
              <<
              8
              |
              s.charCodeAt(i + 3)},
     readstr:
     function(len)
      {var i=this.i;
       this.i = i + len;
       return caml_string_of_jsbytes(this.s.substring(i,i + len))}};
    function caml_float_of_bytes(a)
     {return caml_int64_float_of_bits(caml_int64_of_bytes(a))}
    function caml_input_value_from_reader(reader,ofs)
     {var
       _magic=reader.read32u(),
       _block_len=reader.read32u(),
       num_objects=reader.read32u(),
       _size_32=reader.read32u(),
       _size_64=reader.read32u(),
       stack=[],
       intern_obj_table=num_objects > 0?[]:null,
       obj_counter=0;
      function intern_rec()
       {var code=reader.read8u();
        if(code >= 0x40)
         if(code >= 0x80)
          {var tag=code & 0xF,size=code >> 4 & 0x7,v=[tag];
           if(size == 0)return v;
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           stack.push(v,size);
           return v}
         else
          return code & 0x3F;
        else
         if(code >= 0x20)
          {var len=code & 0x1F,v=reader.readstr(len);
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           return v}
         else
          switch(code)
           {case 0x00:return reader.read8s();
            case 0x01:return reader.read16s();
            case 0x02:return reader.read32s();
            case 0x03:caml_failwith("input_value: integer too large");break;
            case 0x04:
             var offset=reader.read8u();
             return intern_obj_table[obj_counter - offset];
            case 0x05:
             var offset=reader.read16u();
             return intern_obj_table[obj_counter - offset];
            case 0x06:
             var offset=reader.read32u();
             return intern_obj_table[obj_counter - offset];
            case 0x08:
             var
              header=reader.read32u(),
              tag=header & 0xFF,
              size=header >> 10,
              v=[tag];
             if(size == 0)return v;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             stack.push(v,size);
             return v;
            case 0x13:
             caml_failwith("input_value: data block too large");break;
            case 0x09:
             var len=reader.read8u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0A:
             var len=reader.read32u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0C:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[7 - i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0B:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0E:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0D:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x07:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0F:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x10:
            case 0x11:caml_failwith("input_value: code pointer");break;
            case 0x12:
            case 0x18:
            case 0x19:
             var c,s="";
             while((c = reader.read8u()) != 0)s += String.fromCharCode(c);
             var ops=caml_custom_ops[s],expected_size;
             if(! ops)
              caml_failwith("input_value: unknown custom block identifier");
             switch(code)
              {case 0x12:break;
               case 0x19:
                if(! ops.fixed_length)
                 caml_failwith
                  ("input_value: expected a fixed-size custom block");
                expected_size = ops.fixed_length;
                break;
               case 0x18:
                expected_size = reader.read32u();
                reader.read32s();
                reader.read32s();
                break
               }
             var old_pos=reader.i,size=[0],v=ops.deserialize(reader,size);
             if(expected_size != undefined)
              if(expected_size != size[0])
               caml_failwith
                ("input_value: incorrect length of serialized custom block");
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            default:caml_failwith("input_value: ill-formed message")}}
      var res=intern_rec();
      while(stack.length > 0)
       {var size=stack.pop(),v=stack.pop(),d=v.length;
        if(d < size)stack.push(v,size);
        v[d] = intern_rec()}
      if(typeof ofs != "number")ofs[0] = reader.i;
      return res}
    function caml_string_of_bytes(s){return s}
    function caml_input_value_from_bytes(s,ofs)
     {var
       reader=
        new
         MlStringReader
         (caml_string_of_bytes(s),typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    function caml_input_value(chanid)
     {var chan=caml_ml_channels[chanid],header=new Uint8Array(20);
      function block(buffer,offset,n)
       {var r=0;
        while(r < n)
         {if(chan.buffer_curr >= chan.buffer_max)
           {chan.buffer_curr = 0;chan.buffer_max = 0;caml_refill(chan)}
          if(chan.buffer_curr >= chan.buffer_max)break;
          buffer[offset + r] = chan.buffer[chan.buffer_curr];
          chan.buffer_curr++;
          r++}
        return r}
      var r=block(header,0,20);
      if(r == 0)
       caml_raise_end_of_file();
      else
       if(r < 20)caml_failwith("input_value: truncated object");
      var
       len=caml_marshal_data_size(caml_bytes_of_array(header),0),
       buf=new Uint8Array(len + 20);
      buf.set(header,0);
      var r=block(buf,20,len);
      if(r < len)
       caml_failwith("input_value: truncated object " + r + "  " + len);
      var
       offset=[0],
       res=caml_input_value_from_bytes(caml_bytes_of_array(buf),offset);
      chan.offset = chan.offset + offset[0];
      return res}
    function caml_input_value_to_outside_heap(c){return caml_input_value(c)}
    function caml_atomic_cas(ref,o,n)
     {if(ref[1] === o){ref[1] = n;return 1}return 0}
    function caml_copysign_float(x,y)
     {if(y == 0)y = 1 / y;x = Math.abs(x);return y < 0?- x:x}
    function caml_gr_set_text_size(size)
     {var s=caml_gr_state_get();
      s.text_size = size;
      s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
      return 0}
    function caml_atomic_load(ref){return ref[1]}
    function caml_MD5Final(ctx)
     {var in_buf=ctx.len & 0x3f;
      ctx.b8[in_buf] = 0x80;
      in_buf++;
      if(in_buf > 56)
       {for(var j=in_buf;j < 64;j++)ctx.b8[j] = 0;
        caml_MD5Transform(ctx.w,ctx.b32);
        for(var j=0;j < 56;j++)ctx.b8[j] = 0}
      else
       for(var j=in_buf;j < 56;j++)ctx.b8[j] = 0;
      ctx.b32[14] = ctx.len << 3;
      ctx.b32[15] = ctx.len >> 29 & 0x1FFFFFFF;
      caml_MD5Transform(ctx.w,ctx.b32);
      var t=new Uint8Array(16);
      for(var i=0;i < 4;i++)
       for(var j=0;j < 4;j++)t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xFF;
      return t}
    function caml_md5_bytes(s,ofs,len)
     {var ctx=caml_MD5Init(),a=caml_uint8_array_of_bytes(s);
      caml_MD5Update(ctx,a.subarray(ofs,ofs + len),len);
      return caml_string_of_array(caml_MD5Final(ctx))}
    function caml_ba_set_generic(ba,i,v)
     {ba.set(ba.offset(caml_js_from_array(i)),v);return 0}
    function caml_ml_condition_wait(t,mutext){return 0}
    function caml_bytes_lessequal(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c <= s2.c?1:0}
    function caml_string_lessequal(s1,s2){return caml_bytes_lessequal(s1,s2)}
    function caml_string_greaterequal(s1,s2)
     {return caml_string_lessequal(s2,s1)}
    function caml_nextafter_float(x,y)
     {if(isNaN(x) || isNaN(y))return NaN;
      if(x == y)return y;
      if(x == 0)return y < 0?- Math.pow(2,- 1074):Math.pow(2,- 1074);
      var bits=caml_int64_bits_of_float(x),one=caml_int64_of_int32(1);
      if(x < y == x > 0)
       bits = caml_int64_add(bits,one);
      else
       bits = caml_int64_sub(bits,one);
      return caml_int64_float_of_bits(bits)}
    function caml_gr_size_y(){var s=caml_gr_state_get();return s.height}
    function caml_pos_in(chanid)
     {var chan=caml_ml_channels[chanid];
      return chan.offset - (chan.buffer_max - chan.buffer_curr)}
    function caml_ml_pos_in(chanid){return caml_pos_in(chanid)}
    function caml_int64_and(x,y){return x.and(y)}
    function caml_sys_const_word_size(){return 32}
    function caml_unix_unlink(name)
     {var root=resolve_fs_device(name);
      if(! root.device.unlink)
       caml_failwith("caml_unix_unlink: not implemented");
      return root.device.unlink(root.rest,true)}
    function caml_sys_open_for_node(fd,flags)
     {if(flags.name)
       try
        {var fs=require("fs"),fd2=fs.openSync(flags.name,"rs");
         return new MlNodeFd(fd2,flags)}
       catch(e){}
      return new MlNodeFd(fd,flags)}
    function MlFakeFd_out(fd,flags)
     {MlFakeFile.call(this,caml_create_bytes(0));
      this.log = function(s){return 0};
      if(fd == 1 && typeof console.log == "function")
       this.log = console.log;
      else
       if(fd == 2 && typeof console.error == "function")
        this.log = console.error;
       else
        if(typeof console.log == "function")this.log = console.log;
      this.flags = flags}
    MlFakeFd_out.prototype.length = function(){return 0};
    MlFakeFd_out.prototype.write
    =
    function(offset,buf,pos,len)
     {if(this.log)
       {if
         (len
          >
          0
          &&
          pos
          >=
          0
          &&
          pos
          +
          len
          <=
          buf.length
          &&
          buf[pos + len - 1]
          ==
          10)
         len--;
        var src=caml_create_bytes(len);
        caml_blit_bytes(caml_bytes_of_array(buf),pos,src,0,len);
        this.log(src.toUtf16());
        return 0}
      caml_raise_sys_error(this.fd + ": file descriptor already closed")};
    MlFakeFd_out.prototype.read
    =
    function(offset,buf,pos,len)
     {caml_raise_sys_error(this.fd + ": file descriptor is write only")};
    MlFakeFd_out.prototype.close = function(){this.log = undefined};
    function caml_sys_open_internal(file,idx)
     {if(idx == undefined)idx = caml_sys_fds.length;
      caml_sys_fds[idx] = file;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var root=resolve_fs_device(name),file=root.device.open(root.rest,f);
      return caml_sys_open_internal(file,undefined)}
    (function()
       {function file(fd,flags)
         {return fs_node_supported()
                  ?caml_sys_open_for_node(fd,flags)
                  :new MlFakeFd_out(fd,flags)}
        caml_sys_open_internal
         (file(0,{rdonly:1,altname:"/dev/stdin",isCharacterDevice:true}),0);
        caml_sys_open_internal
         (file(1,{buffered:2,wronly:1,isCharacterDevice:true}),1);
        caml_sys_open_internal
         (file(2,{buffered:2,wronly:1,isCharacterDevice:true}),2)}
      ());
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    var
     re_match=
      function()
        {var
          re_word_letters=
           [0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0x03,
            0xFE,
            0xFF,
            0xFF,
            0x87,
            0xFE,
            0xFF,
            0xFF,
            0x07,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0xFF,
            0x7F,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
            0xFF],
          opcodes=
           {CHAR:0,
            CHARNORM:1,
            STRING:2,
            STRINGNORM:3,
            CHARCLASS:4,
            BOL:5,
            EOL:6,
            WORDBOUNDARY:7,
            BEGGROUP:8,
            ENDGROUP:9,
            REFGROUP:10,
            ACCEPT:11,
            SIMPLEOPT:12,
            SIMPLESTAR:13,
            SIMPLEPLUS:14,
            GOTO:15,
            PUSHBACK:16,
            SETMARK:17,
            CHECKPROGRESS:18};
         function is_word_letter(c)
          {return re_word_letters[c >> 3] >> (c & 7) & 1}
         function in_bitset(s,i)
          {return caml_string_get(s,i >> 3) >> (i & 7) & 1}
         function re_match_impl(re,s,pos,partial)
          {var
            prog=caml_js_from_array(re[1]),
            cpool=caml_js_from_array(re[2]),
            normtable=caml_jsbytes_of_string(re[3]),
            numgroups=re[4] | 0,
            numregisters=re[5] | 0,
            startchars=re[6] | 0,
            s=caml_uint8_array_of_string(s),
            pc=0,
            quit=false,
            stack=[],
            groups=new Array(numgroups),
            re_register=new Array(numregisters);
           for(var i=0;i < groups.length;i++)groups[i] = {start:- 1,end:- 1};
           groups[0].start = pos;
           function backtrack()
            {while(stack.length)
              {var item=stack.pop();
               if(item.undo)
                item.undo.obj[item.undo.prop] = item.undo.value;
               else
                if(item.pos){pc = item.pos.pc;pos = item.pos.txt;return}}
             quit = true}
           function push(item){stack.push(item)}
           function accept()
            {groups[0].end = pos;
             var result=new Array(1 + groups.length * 2);
             result[0] = 0;
             for(var i=0;i < groups.length;i++)
              {var g=groups[i];
               if(g.start < 0 || g.end < 0)g.start = g.end = - 1;
               result[2 * i + 1] = g.start;
               result[2 * i + 1 + 1] = g.end}
             return result}
           function prefix_match()
            {if(partial)return accept();else backtrack()}
           while(! quit)
            {var
              op=prog[pc] & 0xff,
              sarg=prog[pc] >> 8,
              uarg=sarg & 0xff,
              c=s[pos],
              group;
             pc++;
             switch(op)
              {case opcodes.CHAR:
                if(pos === s.length){prefix_match();break}
                if(c === uarg)pos++;else backtrack();
                break;
               case opcodes.CHARNORM:
                if(pos === s.length){prefix_match();break}
                if(normtable.charCodeAt(c) === uarg)pos++;else backtrack();
                break;
               case opcodes.STRING:
                for
                 (var arg=caml_jsbytes_of_string(cpool[uarg]),i=0;
                  i
                  <
                  arg.length;
                  i++)
                 {if(pos === s.length){prefix_match();break}
                  if(c === arg.charCodeAt(i))
                   c = s[++pos];
                  else
                   {backtrack();break}}
                break;
               case opcodes.STRINGNORM:
                for
                 (var arg=caml_jsbytes_of_string(cpool[uarg]),i=0;
                  i
                  <
                  arg.length;
                  i++)
                 {if(pos === s.length){prefix_match();break}
                  if(normtable.charCodeAt(c) === arg.charCodeAt(i))
                   c = s[++pos];
                  else
                   {backtrack();break}}
                break;
               case opcodes.CHARCLASS:
                if(pos === s.length){prefix_match();break}
                if(in_bitset(cpool[uarg],c))pos++;else backtrack();
                break;
               case opcodes.BOL:
                if(pos > 0 && s[pos - 1] != 10)backtrack();break;
               case opcodes.EOL:
                if(pos < s.length && s[pos] != 10)backtrack();break;
               case opcodes.WORDBOUNDARY:
                if(pos == 0)
                 {if(pos === s.length){prefix_match();break}
                  if(is_word_letter(s[0]))break;
                  backtrack()}
                else
                 if(pos === s.length)
                  {if(is_word_letter(s[pos - 1]))break;backtrack()}
                 else
                  {if(is_word_letter(s[pos - 1]) != is_word_letter(s[pos]))
                    break;
                   backtrack()}
                break;
               case opcodes.BEGGROUP:
                group = groups[uarg];
                push({undo:{obj:group,prop:"start",value:group.start}});
                group.start = pos;
                break;
               case opcodes.ENDGROUP:
                group = groups[uarg];
                push({undo:{obj:group,prop:"end",value:group.end}});
                group.end = pos;
                break;
               case opcodes.REFGROUP:
                group = groups[uarg];
                if(group.start < 0 || group.end < 0){backtrack();break}
                for(var i=group.start;i < group.end;i++)
                 {if(pos === s.length){prefix_match();break}
                  if(s[i] != s[pos]){backtrack();break}
                  pos++}
                break;
               case opcodes.SIMPLEOPT:if(in_bitset(cpool[uarg],c))pos++;break;
               case opcodes.SIMPLESTAR:
                while(in_bitset(cpool[uarg],c))c = s[++pos];break;
               case opcodes.SIMPLEPLUS:
                if(pos === s.length){prefix_match();break}
                if(in_bitset(cpool[uarg],c))
                 do c = s[++pos];while(in_bitset(cpool[uarg],c));
                else
                 backtrack();
                break;
               case opcodes.ACCEPT:return accept();
               case opcodes.GOTO:pc = pc + sarg;break;
               case opcodes.PUSHBACK:push({pos:{pc:pc + sarg,txt:pos}});break;
               case opcodes.SETMARK:
                push
                 ({undo:{obj:re_register,prop:uarg,value:re_register[uarg]}});
                re_register[uarg] = pos;
                break;
               case opcodes.CHECKPROGRESS:
                if(re_register[uarg] === pos)backtrack();break;
               default:throw new Error("Invalid bytecode")}}
           return 0}
         return re_match_impl}
       ();
    function re_search_backward(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.search_backward");
      while(pos >= 0){var res=re_match(re,s,pos,0);if(res)return res;pos--}
      return [0]}
    function caml_js_from_string(s){return caml_jsstring_of_string(s)}
    function caml_ba_sub(ba,ofs,len)
     {var changed_dim,mul=1;
      if(ba.layout == 0)
       {for(var i=1;i < ba.dims.length;i++)mul = mul * ba.dims[i];
        changed_dim = 0}
      else
       {for(var i=0;i < ba.dims.length - 1;i++)mul = mul * ba.dims[i];
        changed_dim = ba.dims.length - 1;
        ofs = ofs - 1}
      if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
       caml_invalid_argument("Bigarray.sub: bad sub-array");
      var new_dims=[];
      for(var i=0;i < ba.dims.length;i++)new_dims[i] = ba.dims[i];
      new_dims[changed_dim] = len;
      mul *= caml_ba_get_size_per_element(ba.kind);
      var new_data=ba.data.subarray(ofs * mul,(ofs + len) * mul);
      return caml_ba_create_unsafe(ba.kind,ba.layout,new_dims,new_data)}
    function caml_gc_full_major(unit)
     {if(typeof globalThis.gc == "function")globalThis.gc();return 0}
    function caml_ml_mutex_try_lock(t)
     {if(! t.locked){t.locked = true;return 1}return 0}
    function caml_bytes_set32(s,i,i32)
     {if(i >>> 0 >= s.l - 3)caml_bytes_bound_error();
      var
       b4=0xFF & i32 >> 24,
       b3=0xFF & i32 >> 16,
       b2=0xFF & i32 >> 8,
       b1=0xFF & i32;
      caml_bytes_unsafe_set(s,i + 0,b1);
      caml_bytes_unsafe_set(s,i + 1,b2);
      caml_bytes_unsafe_set(s,i + 2,b3);
      caml_bytes_unsafe_set(s,i + 3,b4);
      return 0}
    function caml_gr_sigio_signal(){return 0}
    function caml_ba_uint8_set32(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 3 >= ba.data.length)caml_array_bound_error();
      ba.set(ofs + 0,v & 0xff);
      ba.set(ofs + 1,v >>> 8 & 0xff);
      ba.set(ofs + 2,v >>> 16 & 0xff);
      ba.set(ofs + 3,v >>> 24 & 0xff);
      return 0}
    function caml_sys_const_ostype_unix(){return os_type == "Unix"?1:0}
    function caml_unix_gmtime(t)
     {var
       d=new Date(t * 1000),
       d_num=d.getTime(),
       januaryfirst=new Date(Date.UTC(d.getUTCFullYear(),0,1)).getTime(),
       doy=Math.floor((d_num - januaryfirst) / 86400000);
      return [0,
              d.getUTCSeconds(),
              d.getUTCMinutes(),
              d.getUTCHours(),
              d.getUTCDate(),
              d.getUTCMonth(),
              d.getUTCFullYear() - 1900,
              d.getUTCDay(),
              doy,
              false | 0]}
    function caml_signbit_float(x){if(x == 0)x = 1 / x;return x < 0?1:0}
    function caml_gr_set_line_width(w)
     {var s=caml_gr_state_get();
      s.line_width = w;
      s.context.lineWidth = w;
      return 0}
    function caml_gr_set_font(f)
     {var s=caml_gr_state_get();
      s.font = f;
      s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
      return 0}
    function caml_gr_set_color(color)
     {var s=caml_gr_state_get();
      function convert(number)
       {var str="" + number.toString(16);
        while(str.length < 2)str = "0" + str;
        return str}
      var r=color >> 16 & 0xff,g=color >> 8 & 0xff,b=color >> 0 & 0xff;
      s.color = color;
      var c_str="#" + convert(r) + convert(g) + convert(b);
      s.context.fillStyle = c_str;
      s.context.strokeStyle = c_str;
      return 0}
    function caml_gr_moveto(x,y)
     {var s=caml_gr_state_get();s.x = x;s.y = y;return 0}
    function caml_gr_resize_window(w,h)
     {var s=caml_gr_state_get();
      s.width = w;
      s.height = h;
      s.canvas.width = w;
      s.canvas.height = h;
      return 0}
    function caml_gr_state_init()
     {caml_gr_moveto(caml_gr_state.x,caml_gr_state.y);
      caml_gr_resize_window(caml_gr_state.width,caml_gr_state.height);
      caml_gr_set_line_width(caml_gr_state.line_width);
      caml_gr_set_text_size(caml_gr_state.text_size);
      caml_gr_set_font(caml_gr_state.font);
      caml_gr_set_color(caml_gr_state.color);
      caml_gr_set_window_title(caml_gr_state.title);
      caml_gr_state.context.textBaseline = "bottom"}
    function caml_gr_current_x(){var s=caml_gr_state_get();return s.x}
    function caml_ba_kind_of_typed_array(ta)
     {var kind;
      if(ta instanceof Float32Array)
       kind = 0;
      else
       if(ta instanceof Float64Array)
        kind = 1;
       else
        if(ta instanceof Int8Array)
         kind = 2;
        else
         if(ta instanceof Uint8Array)
          kind = 3;
         else
          if(ta instanceof Int16Array)
           kind = 4;
          else
           if(ta instanceof Uint16Array)
            kind = 5;
           else
            if(ta instanceof Int32Array)
             kind = 6;
            else
             if(ta instanceof Uint32Array)
              kind = 6;
             else
              caml_invalid_argument
               ("caml_ba_kind_of_typed_array: unsupported kind");
      return kind}
    function caml_ba_from_typed_array(ta)
     {var kind=caml_ba_kind_of_typed_array(ta);
      return caml_ba_create_unsafe(kind,0,[ta.length],ta)}
    function caml_ml_seek_out(chanid,pos){return caml_seek_out(chanid,pos)}
    function caml_js_typeof(o){return typeof o}
    function caml_hash_mix_string(h,v)
     {return caml_hash_mix_jsbytes(h,caml_jsbytes_of_string(v))}
    function caml_string_hash(h,v)
     {var h=caml_hash_mix_string(h,v),h=caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function caml_restore_raw_backtrace(exn,bt){return 0}
    function caml_gr_lineto(x,y)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      s.context.moveTo(s.x,s.height - s.y);
      s.context.lineTo(x,s.height - y);
      s.context.stroke();
      s.x = x;
      s.y = y;
      return 0}
    function caml_js_function_arity(f){return f.length}
    function caml_js_wrap_meth_callback_unsafe(f)
     {return function()
       {var len=caml_js_function_arity(f) - 1,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_callback(f,args)}}
    function caml_ba_dim_3(ba){return caml_ba_dim(ba,2)}
    function caml_is_special_exception(exn)
     {switch(exn[2]){case - 8:case - 11:case - 12:return 1;default:return 0}}
    function caml_format_exception(exn)
     {var r="";
      if(exn[0] == 0)
       {r += exn[1][1];
        if
         (exn.length
          ==
          3
          &&
          exn[2][0]
          ==
          0
          &&
          caml_is_special_exception(exn[1]))
         var bucket=exn[2],start=1;
        else
         var start=2,bucket=exn;
        r += "(";
        for(var i=start;i < bucket.length;i++)
         {if(i > start)r += ", ";
          var v=bucket[i];
          if(typeof v == "number")
           r += v.toString();
          else
           if(v instanceof MlBytes)
            r += '"' + v.toString() + '"';
           else
            if(typeof v == "string")
             r += '"' + v.toString() + '"';
            else
             r += "_"}
        r += ")"}
      else
       if(exn[0] == 248)r += exn[1];
      return r}
    function caml_fatal_uncaught_exception(err)
     {if(err instanceof Array && (err[0] == 0 || err[0] == 248))
       {var handler=caml_named_value("Printexc.handle_uncaught_exception");
        if(handler)
         caml_callback(handler,[err,false]);
        else
         {var
           msg=caml_format_exception(err),
           at_exit=caml_named_value("Pervasives.do_at_exit");
          if(at_exit)caml_callback(at_exit,[0]);
          console.error("Fatal error: exception " + msg + "\n")}}
      else
       throw err}
    function caml_ephe_check_data(x)
     {return x[caml_ephe_data_offset] === undefined?0:1}
    function caml_bytes_get16(s,i)
     {if(i >>> 0 >= s.l - 1)caml_bytes_bound_error();
      var b1=caml_bytes_unsafe_get(s,i),b2=caml_bytes_unsafe_get(s,i + 1);
      return b2 << 8 | b1}
    function caml_obj_make_forward(b,v){b[0] = 250;b[1] = v;return 0}
    function caml_js_from_bool(x){return ! ! x}
    function caml_ml_set_channel_name(chanid,name)
     {var chan=caml_ml_channels[chanid];chan.name = name;return 0}
    function caml_exp2_float(x){return Math.pow(2,x)}
    function caml_gr_close_graph()
     {var s=caml_gr_state_get();
      s.canvas.width = 0;
      s.canvas.height = 0;
      return 0}
    function caml_ml_domain_cpu_relax(unit){return 0}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_ml_input_block(chanid,ba,i,l)
     {var
       chan=caml_ml_channels[chanid],
       n=l,
       avail=chan.buffer_max - chan.buffer_curr;
      if(l <= avail)
       {ba.set(chan.buffer.subarray(chan.buffer_curr,chan.buffer_curr + l),i);
        chan.buffer_curr += l}
      else
       if(avail > 0)
        {ba.set
          (chan.buffer.subarray(chan.buffer_curr,chan.buffer_curr + avail),i);
         chan.buffer_curr += avail;
         n = avail}
       else
        {chan.buffer_curr = 0;
         chan.buffer_max = 0;
         caml_refill(chan);
         var avail=chan.buffer_max - chan.buffer_curr;
         if(n > avail)n = avail;
         ba.set(chan.buffer.subarray(chan.buffer_curr,chan.buffer_curr + n),i);
         chan.buffer_curr += n}
      return n}
    function caml_md5_chan(chanid,toread)
     {var ctx=caml_MD5Init(),buffer=new Uint8Array(4096);
      if(toread < 0)
       while(true)
        {var read=caml_ml_input_block(chanid,buffer,0,buffer.length);
         if(read == 0)break;
         caml_MD5Update(ctx,buffer.subarray(0,read),read)}
      else
       while(toread > 0)
        {var
          read=
           caml_ml_input_block
            (chanid,buffer,0,toread > buffer.length?buffer.length:toread);
         if(read == 0)caml_raise_end_of_file();
         caml_MD5Update(ctx,buffer.subarray(0,read),read);
         toread -= read}
      return caml_string_of_array(caml_MD5Final(ctx))}
    function caml_atanh_float(x){return Math.atanh(x)}
    function caml_ml_condition_signal(t){return 0}
    function caml_unix_findnext(dir_handle)
     {return caml_unix_readdir(dir_handle)}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var buffer=caml_uint8_array_of_bytes(buffer);
      buffer = buffer.subarray(offset,offset + len);
      if(chan.buffer_curr + buffer.length > chan.buffer.length)
       {var b=new Uint8Array(chan.buffer_curr + buffer.length);
        b.set(chan.buffer);
        chan.buffer = b}
      switch(chan.buffered)
       {case 0:
         chan.buffer.set(buffer,chan.buffer_curr);
         chan.buffer_curr += buffer.length;
         caml_ml_flush(chanid);
         break;
        case 1:
         chan.buffer.set(buffer,chan.buffer_curr);
         chan.buffer_curr += buffer.length;
         if(chan.buffer_curr >= chan.buffer.length)caml_ml_flush(chanid);
         break;
        case 2:
         var id=buffer.lastIndexOf(10);
         if(id < 0)
          {chan.buffer.set(buffer,chan.buffer_curr);
           chan.buffer_curr += buffer.length;
           if(chan.buffer_curr >= chan.buffer.length)caml_ml_flush(chanid)}
         else
          {chan.buffer.set(buffer.subarray(0,id + 1),chan.buffer_curr);
           chan.buffer_curr += id + 1;
           caml_ml_flush(chanid);
           chan.buffer.set(buffer.subarray(id + 1),chan.buffer_curr);
           chan.buffer_curr += buffer.length - id - 1}
         break
        }
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ml_domain_id(unit){return caml_domain_id}
    function caml_ephe_get_data(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,x[caml_ephe_data_offset]]}
    function caml_xmlhttprequest_create(unit)
     {if(typeof globalThis.XMLHttpRequest !== "undefined")
       try {return new (globalThis.XMLHttpRequest)()}catch(e){}
      if(typeof globalThis.activeXObject !== "undefined")
       {try
         {return new (globalThis.activeXObject)("Msxml2.XMLHTTP")}
        catch(e){}
        try
         {return new (globalThis.activeXObject)("Msxml3.XMLHTTP")}
        catch(e){}
        try
         {return new (globalThis.activeXObject)("Microsoft.XMLHTTP")}
        catch(e){}}
      caml_failwith("Cannot create a XMLHttpRequest")}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_ml_is_buffered(chanid)
     {return caml_ml_channels[chanid].buffered?1:0}
    function caml_array_append(a1,a2)
     {var l1=a1.length,l2=a2.length,l=l1 + l2 - 1,a=new Array(l);
      a[0] = 0;
      var i=1,j=1;
      for(;i < l1;i++)a[i] = a1[i];
      for(;i < l;i++,j++)a[i] = a2[j];
      return a}
    function caml_unix_gettimeofday(){return new Date().getTime() / 1000}
    function caml_unix_time(){return Math.floor(caml_unix_gettimeofday())}
    function caml_ml_set_channel_refill(chanid,f)
     {caml_ml_channels[chanid].refill = f;return 0}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_js_expr(s)
     {console.error("caml_js_expr: fallback to runtime evaluation\n");
      return eval(caml_jsstring_of_string(s))}
    function caml_ml_runtime_warnings_enabled(_unit)
     {return caml_runtime_warnings}
    function caml_output_value_to_bytes(v,flags)
     {return caml_bytes_of_array(caml_output_val(v,flags))}
    function caml_eventlog_resume(unit){return 0}
    function caml_md5_string(s,ofs,len)
     {return caml_md5_bytes(caml_bytes_of_string(s),ofs,len)}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_array_of_string(x){return caml_uint8_array_of_string(x)}
    function caml_jsoo_flags_use_js_string(unit){return 0}
    function caml_output_value_to_buffer(s,ofs,len,v,flags)
     {var t=caml_output_val(v,flags);
      if(t.length > len)caml_failwith("Marshal.to_buffer: buffer overflow");
      caml_blit_bytes(t,0,s,ofs,t.length);
      return 0}
    function re_replacement_text(repl,groups,orig)
     {var
       repl=caml_jsbytes_of_string(repl),
       len=repl.length,
       orig=caml_jsbytes_of_string(orig),
       res="",
       n=0,
       cur,
       start,
       end,
       c;
      while(n < len)
       {cur = repl.charAt(n++);
        if(cur != "\\")
         res += cur;
        else
         {if(n == len)
           caml_failwith("Str.replace: illegal backslash sequence");
          cur = repl.charAt(n++);
          switch(cur)
           {case "\\":res += cur;break;
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
             c = + cur;
             if(c * 2 >= groups.length - 1)
              caml_failwith("Str.replace: reference to unmatched group");
             start = caml_array_get(groups,c * 2);
             end = caml_array_get(groups,c * 2 + 1);
             if(start == - 1)
              caml_failwith("Str.replace: reference to unmatched group");
             res += orig.slice(start,end);
             break;
            default:res += "\\" + cur}}}
      return caml_string_of_jsbytes(res)}
    function caml_pure_js_expr(s)
     {console.error("caml_pure_js_expr: fallback to runtime evaluation\n");
      return eval(caml_jsstring_of_string(s))}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function blit_nat(nat1,ofs1,nat2,ofs2,len)
     {for(var i=0;i < len;i++)nat1.data[ofs1 + i] = nat2.data[ofs2 + i];
      return 0}
    function caml_bigstring_blit_ba_to_bytes(ba1,pos1,bytes2,pos2,len)
     {if(12 != ba1.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs1=ba1.offset(pos1);
      if(ofs1 + len > ba1.data.length)caml_array_bound_error();
      if(pos2 + len > caml_ml_bytes_length(bytes2))caml_array_bound_error();
      var slice=ba1.data.slice(ofs1,ofs1 + len);
      caml_blit_bytes(caml_bytes_of_array(slice),0,bytes2,pos2,len);
      return 0}
    function caml_unix_stat(name)
     {var root=resolve_fs_device(name);
      if(! root.device.stat)caml_failwith("caml_unix_stat: not implemented");
      return root.device.stat(root.rest,true)}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function jsoo_create_file_extern(name,content)
     {if(globalThis.jsoo_create_file)
       globalThis.jsoo_create_file(name,content);
      else
       {if(! globalThis.caml_fs_tmp)globalThis.caml_fs_tmp = [];
        globalThis.caml_fs_tmp.push({name:name,content:content})}
      return 0}
    function caml_unix_stat_64(name)
     {var r=caml_unix_stat(name);r[9] = caml_int64_of_int32(r[9])}
    function caml_to_js_string(s){return caml_jsstring_of_string(s)}
    function caml_ml_mutex_lock(t)
     {if(t.locked)
       caml_failwith("Mutex.lock: mutex already locked. Cannot wait.");
      else
       t.locked = true;
      return 0}
    function re_search_forward(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.search_forward");
      while(pos <= caml_ml_string_length(s))
       {var res=re_match(re,s,pos,0);if(res)return res;pos++}
      return [0]}
    var caml_blit_string_to_bigstring=caml_bigstring_blit_string_to_ba;
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_ml_seek_in(chanid,pos){return caml_seek_in(chanid,pos)}
    function caml_sys_read_directory(name)
     {var
       root=resolve_fs_device(name),
       a=root.device.readdir(root.rest),
       l=new Array(a.length + 1);
      l[0] = 0;
      for(var i=0;i < a.length;i++)l[i + 1] = caml_string_of_jsbytes(a[i]);
      return l}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_sys_const_ostype_win32(){return os_type == "Win32"?1:0}
    function caml_obj_is_block(x){return + (x instanceof Array)}
    function caml_obj_set_raw_field(o,i,v){return o[i + 1] = v}
    function caml_js_var(x)
     {var x=caml_jsstring_of_string(x);
      if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
       console.error
        ('caml_js_var: "'
         +
         x
         +
         '" is not a valid JavaScript variable. continuing ..');
      return eval(x)}
    function caml_trunc_float(x){return Math.trunc(x)}
    function caml_ephe_unset_data(x)
     {if(globalThis.FinalizationRegistry && globalThis.WeakRef)
       if(x[1] instanceof globalThis.FinalizationRegistry)
        for(var j=caml_ephe_key_offset;j < x.length;j++)
         {var key=x[j];
          if(key instanceof globalThis.WeakRef)
           {key = key.deref();if(key)x[1].unregister(key)}}
      x[caml_ephe_data_offset] = undefined;
      return 0}
    function caml_ephe_set_data(x,data)
     {if(globalThis.FinalizationRegistry && globalThis.WeakRef)
       if(! (x[1] instanceof globalThis.FinalizationRegistry))
        {x[1]
         =
         new
          (globalThis.FinalizationRegistry)
          (function(){caml_ephe_unset_data(x)});
         for(var j=caml_ephe_key_offset;j < x.length;j++)
          {var key=x[j];
           if(key instanceof globalThis.WeakRef)
            {key = key.deref();if(key)x[1].register(key,undefined,key)}}}
      x[caml_ephe_data_offset] = data;
      return 0}
    function caml_ephe_blit_data(src,dst)
     {var n=src[caml_ephe_data_offset];
      if(n === undefined)
       caml_ephe_unset_data(dst);
      else
       caml_ephe_set_data(dst,n);
      return 0}
    function caml_is_printable(c){return + (c > 31 && c < 127)}
    function caml_array_of_bytes(x){return caml_uint8_array_of_bytes(x)}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function re_partial_match(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.partial_match");
      var res=re_match(re,s,pos,1);
      return res?res:[0]}
    function caml_sys_random_seed()
     {if(globalThis.crypto)
       if(typeof globalThis.crypto.getRandomValues === "function")
        {var a=new Uint32Array(1);
         globalThis.crypto.getRandomValues(a);
         return [0,a[0]]}
       else
        if(globalThis.crypto.randomBytes === "function")
         {var buff=globalThis.crypto.randomBytes(4),a=new Uint32Array(buff);
          return [0,a[0]]}
      var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    var all_finalizers=new (globalThis.Set)();
    function caml_final_register_called_without_value(cb,a)
     {if(globalThis.FinalizationRegistry && a instanceof Object)
       {var
         x=
          new
           (globalThis.FinalizationRegistry)
           (function(x){all_finalizers.delete(x);cb(0);return});
        x.register(a,x);
        all_finalizers.add(x)}
      return 0}
    function caml_ba_get_2(ba,i0,i1){return ba.get(ba.offset([i0,i1]))}
    function caml_ba_uint8_set16(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 1 >= ba.data.length)caml_array_bound_error();
      ba.set(ofs + 0,v & 0xff);
      ba.set(ofs + 1,v >>> 8 & 0xff);
      return 0}
    function caml_lazy_reset_to_lazy(o)
     {caml_obj_update_tag(o,244,246);return 0}
    function caml_js_delete(o,f){delete o[f];return 0}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_list_mount_point()
     {var prev=0;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var old=prev;
        prev = [0,caml_string_of_jsbytes(jsoo_mount_point[i].path),old]}
      return prev}
    var
     caml_marshal_constants=
      {PREFIX_SMALL_BLOCK:0x80,
       PREFIX_SMALL_INT:0x40,
       PREFIX_SMALL_STRING:0x20,
       CODE_INT8:0x00,
       CODE_INT16:0x01,
       CODE_INT32:0x02,
       CODE_INT64:0x03,
       CODE_SHARED8:0x04,
       CODE_SHARED16:0x05,
       CODE_SHARED32:0x06,
       CODE_BLOCK32:0x08,
       CODE_BLOCK64:0x13,
       CODE_STRING8:0x09,
       CODE_STRING32:0x0A,
       CODE_DOUBLE_BIG:0x0B,
       CODE_DOUBLE_LITTLE:0x0C,
       CODE_DOUBLE_ARRAY8_BIG:0x0D,
       CODE_DOUBLE_ARRAY8_LITTLE:0x0E,
       CODE_DOUBLE_ARRAY32_BIG:0x0F,
       CODE_DOUBLE_ARRAY32_LITTLE:0x07,
       CODE_CODEPOINTER:0x10,
       CODE_INFIXPOINTER:0x11,
       CODE_CUSTOM:0x12,
       CODE_CUSTOM_LEN:0x18,
       CODE_CUSTOM_FIXED:0x19};
    function caml_obj_raw_field(o,i){return o[i + 1]}
    function caml_js_equals(x,y){return + (x == y)}
    function caml_obj_compare_and_swap(x,i,old,n)
     {if(x[i + 1] == old){x[i + 1] = n;return 1}return 0}
    function bigstring_to_typed_array(bs){return bs.data}
    function caml_gr_arc_aux(ctx,cx,cy,ry,rx,a1,a2)
     {while(a1 > a2)a2 += 360;
      a1 /= 180;
      a2 /= 180;
      var
       rot=0,
       xPos,
       yPos,
       xPos_prev,
       yPos_prev,
       space=2,
       num=(a2 - a1) * Math.PI * ((rx + ry) / 2) / space | 0,
       delta=(a2 - a1) * Math.PI / num,
       i=a1 * Math.PI;
      for(var j=0;j <= num;j++)
       {xPos
        =
        cx
        -
        rx
        *
        Math.sin(i)
        *
        Math.sin(rot * Math.PI)
        +
        ry
        *
        Math.cos(i)
        *
        Math.cos(rot * Math.PI);
        xPos = xPos.toFixed(2);
        yPos
        =
        cy
        +
        ry
        *
        Math.cos(i)
        *
        Math.sin(rot * Math.PI)
        +
        rx
        *
        Math.sin(i)
        *
        Math.cos(rot * Math.PI);
        yPos = yPos.toFixed(2);
        if(j == 0)
         ctx.moveTo(xPos,yPos);
        else
         if(xPos_prev != xPos || yPos_prev != yPos)ctx.lineTo(xPos,yPos);
        xPos_prev = xPos;
        yPos_prev = yPos;
        i -= delta}
      return 0}
    function caml_gr_fill_arc(x,y,rx,ry,a1,a2)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      caml_gr_arc_aux(s.context,x,s.height - y,rx,ry,a1,a2);
      s.context.fill();
      return 0}
    function caml_ba_slice(ba,vind)
     {vind = caml_js_from_array(vind);
      var num_inds=vind.length,index=[],sub_dims=[],ofs;
      if(num_inds > ba.dims.length)
       caml_invalid_argument("Bigarray.slice: too many indices");
      if(ba.layout == 0)
       {for(var i=0;i < num_inds;i++)index[i] = vind[i];
        for(;i < ba.dims.length;i++)index[i] = 0;
        sub_dims = ba.dims.slice(num_inds)}
      else
       {for(var i=0;i < num_inds;i++)
         index[ba.dims.length - num_inds + i] = vind[i];
        for(var i=0;i < ba.dims.length - num_inds;i++)index[i] = 1;
        sub_dims = ba.dims.slice(0,ba.dims.length - num_inds)}
      ofs = ba.offset(index);
      var
       size=caml_ba_get_size(sub_dims),
       size_per_element=caml_ba_get_size_per_element(ba.kind),
       new_data=
        ba.data.subarray
         (ofs * size_per_element,(ofs + size) * size_per_element);
      return caml_ba_create_unsafe(ba.kind,ba.layout,sub_dims,new_data)}
    function caml_js_wrap_callback_unsafe(f)
     {return function()
       {var len=caml_js_function_arity(f),args=new Array(len);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_callback(f,args)}}
    function caml_ba_kind(ba){return ba.kind}
    function caml_js_fun_call(f,a)
     {switch(a.length)
       {case 1:return f();
        case 2:return f(a[1]);
        case 3:return f(a[1],a[2]);
        case 4:return f(a[1],a[2],a[3]);
        case 5:return f(a[1],a[2],a[3],a[4]);
        case 6:return f(a[1],a[2],a[3],a[4],a[5]);
        case 7:return f(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return f(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      return f.apply(null,caml_js_from_array(a))}
    function caml_gc_major_slice(work){return 0}
    function caml_js_pure_expr(f){return caml_callback(f,[0])}
    function compare_digits_nat(nat1,ofs1,nat2,ofs2)
     {if(nat1.data[ofs1] > nat2.data[ofs2])return 1;
      if(nat1.data[ofs1] < nat2.data[ofs2])return - 1;
      return 0}
    function caml_ml_input(chanid,b,i,l)
     {var ba=caml_uint8_array_of_bytes(b);
      return caml_ml_input_block(chanid,ba,i,l)}
    function caml_gr_wait_event(_evl)
     {caml_failwith
       ("caml_gr_wait_event not Implemented: use Graphics_js instead")}
    function caml_gr_sigio_handler(){return 0}
    function caml_hash_mix_bigstring(h,bs)
     {return caml_hash_mix_bytes_arr(h,bs.data)}
    function caml_record_backtrace(){return 0}
    function caml_unix_cleanup(){}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function caml_sys_get_config()
     {return [0,caml_string_of_jsbytes(os_type),32,0]}
    function caml_obj_is_shared(x){return 1}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_asinh_float(x){return Math.asinh(x)}
    function caml_pos_out(chanid)
     {var chan=caml_ml_channels[chanid];return chan.offset + chan.buffer_curr}
    function bigstring_of_array_buffer(ab)
     {var ta=new Uint8Array(ab);
      return caml_ba_create_unsafe(12,0,[ta.length],ta)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_ba_init(){return 0}
    function caml_unix_filedescr_of_fd(x){return x}
    function re_string_match(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.string_match");
      var res=re_match(re,s,pos,0);
      return res?res:[0]}
    function BigStringReader(bs,i){this.s = bs;this.i = i}
    BigStringReader.prototype
    =
    {read8u:function(){return caml_ba_get_1(this.s,this.i++)},
     read8s:function(){return caml_ba_get_1(this.s,this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return caml_ba_get_1(s,i) << 8 | caml_ba_get_1(s,i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return caml_ba_get_1(s,i) << 24 >> 16 | caml_ba_get_1(s,i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (caml_ba_get_1(s,i)
               <<
               24
               |
               caml_ba_get_1(s,i + 1)
               <<
               16
               |
               caml_ba_get_1(s,i + 2)
               <<
               8
               |
               caml_ba_get_1(s,i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return caml_ba_get_1(s,i)
              <<
              24
              |
              caml_ba_get_1(s,i + 1)
              <<
              16
              |
              caml_ba_get_1(s,i + 2)
              <<
              8
              |
              caml_ba_get_1(s,i + 3)},
     readstr:
     function(len)
      {var i=this.i,arr=new Array(len);
       for(var j=0;j < len;j++)arr[j] = caml_ba_get_1(this.s,i + j);
       this.i = i + len;
       return caml_string_of_array(arr)}};
    function caml_gr_dump_image(im)
     {var data=[0];
      for(var i=0;i < im.height;i++)
       {data[i + 1] = [0];
        for(var j=0;j < im.width;j++)
         {var
           o=i * (im.width * 4) + j * 4,
           r=im.data[o + 0],
           g=im.data[o + 1],
           b=im.data[o + 2];
          data[i + 1][j + 1] = (r << 16) + (g << 8) + b}}
      return data}
    function caml_ba_get_generic(ba,i)
     {var ofs=ba.offset(caml_js_from_array(i));return ba.get(ofs)}
    function caml_unix_startup(){}
    function caml_get_exception_backtrace(){return 0}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_mount_autoload(name,f)
     {var path=caml_make_path(name),name=caml_trailing_slash(path.join("/"));
      jsoo_mount_point.push({path:name,device:new MlFakeDevice(name,f)});
      return 0}
    function caml_bigstring_blit_ba_to_ba(ba1,pos1,ba2,pos2,len)
     {if(12 != ba1.kind)
       caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
      if(12 != ba2.kind)
       caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs1=ba1.offset(pos1),ofs2=ba2.offset(pos2);
      if(ofs1 + len > ba1.data.length)caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=ba1.data.subarray(ofs1,ofs1 + len);
      ba2.data.set(slice,pos2);
      return 0}
    var caml_blit_bigstring_to_bigstring=caml_bigstring_blit_ba_to_ba;
    function caml_string_lessthan(s1,s2){return caml_bytes_lessthan(s1,s2)}
    function caml_string_greaterthan(s1,s2)
     {return caml_string_lessthan(s2,s1)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_ephe_get_data_copy(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,caml_obj_dup(x[caml_ephe_data_offset])]}
    function caml_memprof_start(rate,stack_size,tracker){return 0}
    function caml_sys_get_argv(a){return [0,caml_argv[1],caml_argv]}
    function caml_ml_domain_set_name(_name){return 0}
    function caml_js_to_bool(x){return + x}
    function caml_gr_create_image(x,y)
     {var s=caml_gr_state_get();return s.context.createImageData(x,y)}
    function caml_ephe_get_key_copy(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_copy");
      var y=caml_ephe_get_key(x,i);
      if(y === 0)return y;
      var z=y[1];
      if(z instanceof Array)return [0,caml_obj_dup(z)];
      return y}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_raw_backtrace_next_slot(){return 0}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && globalThis.toplevelReloc)
       n = caml_callback(globalThis.toplevelReloc,[name_opt]);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function mult_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat3,ofs3,len3)
     {var carry=0;
      for(var i=0;i < len3;i++)
       carry
       +=
       mult_digit_nat(nat1,ofs1 + i,len1 - i,nat2,ofs2,len2,nat3,ofs3 + i);
      return carry}
    function square_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {var carry=0;
      carry += add_nat(nat1,ofs1,len1,nat1,ofs1,len1,0);
      carry += mult_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat2,ofs2,len2);
      return carry}
    function caml_js_from_float(x){return x}
    function caml_floatarray_create(len)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 254;
      for(var i=1;i < len;i++)b[i] = 0;
      return b}
    function caml_gc_stat(){return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
    function caml_get_major_credit(n){return 0}
    function caml_sys_modify_argv(arg){caml_argv = arg;return 0}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === undefined)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_js_get_console()
     {var
       c=console,
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function caml_sys_unsafe_getenv(name){return caml_sys_getenv(name)}
    function caml_ml_open_descriptor_in(fd)
     {var file=caml_sys_fds[fd];
      if(file.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       refill=null,
       channel=
        {file:file,
         offset:file.flags.append?file.length():0,
         fd:fd,
         opened:true,
         out:false,
         buffer_curr:0,
         buffer_max:0,
         buffer:new Uint8Array(65536),
         refill:refill};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function bigstring_of_typed_array(ba)
     {var
       ta=
        new
         Uint8Array
         (ba.buffer,ba.byteOffset,ba.length * ba.BYTES_PER_ELEMENT);
      return caml_ba_create_unsafe(12,0,[ta.length],ta)}
    function caml_round_float(x){return Math.round(x)}
    function caml_ojs_new_arr(c,a)
     {switch(a.length)
       {case 0:return new c();
        case 1:return new c(a[0]);
        case 2:return new c(a[0],a[1]);
        case 3:return new c(a[0],a[1],a[2]);
        case 4:return new c(a[0],a[1],a[2],a[3]);
        case 5:return new c(a[0],a[1],a[2],a[3],a[4]);
        case 6:return new c(a[0],a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[0],a[1],a[2],a[3],a[4],a[5],a[6])
        }
      function F(){return c.apply(this,a)}
      F.prototype = c.prototype;
      return new F()}
    function complement_nat(nat,ofs,len)
     {for(var i=0;i < len;i++)
       nat.data[ofs + i] = (- 1 >>> 0) - (nat.data[ofs + i] >>> 0)}
    var caml_domain_dls=[0];
    function caml_domain_dls_set(a){caml_domain_dls = a}
    function caml_lazy_read_result(o){return caml_obj_tag(o) == 250?o[1]:o}
    var caml_js_regexps={amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};
    function caml_js_html_escape(s)
     {if(! caml_js_regexps.all.test(s))return s;
      return s.replace(caml_js_regexps.amp,"&amp;").replace
               (caml_js_regexps.lt,"&lt;").replace
              (caml_js_regexps.quot,"&quot;")}
    function caml_ba_dim_2(ba){return caml_ba_dim(ba,1)}
    function caml_js_wrap_meth_callback_arguments(f)
     {return function()
       {var len=arguments.length,args=new Array(len);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_callback(f,[this,args])}}
    function caml_sinh_float(x){return Math.sinh(x)}
    function caml_ldexp_float(x,exp)
     {exp |= 0;
      if(exp > 1023)
       {exp -= 1023;
        x *= Math.pow(2,1023);
        if(exp > 1023){exp -= 1023;x *= Math.pow(2,1023)}}
      if(exp < - 1023){exp += 1023;x *= Math.pow(2,- 1023)}
      x *= Math.pow(2,exp);
      return x}
    function caml_gr_state_set(ctx)
     {caml_gr_state = ctx;caml_gr_state_init();return 0}
    function caml_js_wrap_callback_strict(arity,f)
     {return function()
       {var
         n=arguments.length,
         args=new Array(arity),
         len=Math.min(arguments.length,arity);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_callback(f,args)}}
    function caml_gc_minor_words(unit){return 0}
    function caml_get_current_callstack(){return [0]}
    function land_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] &= nat2.data[ofs2];return 0}
    function caml_int64_mod(x,y){return x.mod(y)}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_int32_bswap(x)
     {return (x & 0x000000FF)
             <<
             24
             |
             (x & 0x0000FF00)
             <<
             8
             |
             (x & 0x00FF0000)
             >>>
             8
             |
             (x & 0xFF000000)
             >>>
             24}
    function caml_ba_set_3(ba,i0,i1,i2,v)
     {ba.set(ba.offset([i0,i1,i2]),v);return 0}
    function caml_js_instanceof(o,c){return o instanceof c?1:0}
    function caml_get_major_bucket(n){return 0}
    var caml_blit_bigstring_to_string=caml_bigstring_blit_ba_to_bytes;
    function set_digit_nat_native(nat,ofs,digit)
     {nat.data[ofs] = digit;return 0}
    function nth_digit_nat_native(nat,ofs){return nat.data[ofs]}
    function caml_string_set64(s,i,i64){return caml_bytes_set64(s,i,i64)}
    function caml_gr_state_create(canvas,w,h)
     {var context=canvas.getContext("2d");
      return {context:context,
              canvas:canvas,
              x:0,
              y:0,
              width:w,
              height:h,
              line_width:1,
              font:caml_string_of_jsbytes("fixed"),
              text_size:26,
              color:0x000000,
              title:caml_string_of_jsbytes("")}}
    function caml_gr_draw_arc(x,y,rx,ry,a1,a2)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      caml_gr_arc_aux(s.context,x,s.height - y,rx,ry,a1,a2);
      s.context.stroke();
      return 0}
    function caml_ba_map_file(vfd,kind,layout,shared,dims,pos)
     {caml_failwith("caml_ba_map_file not implemented")}
    function caml_ba_map_file_bytecode(argv,argn)
     {return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5])}
    function caml_ba_create_from(data1,data2,jstyp,kind,layout,dims)
     {if(data2 || caml_ba_get_size_per_element(kind) == 2)
       caml_invalid_argument
        ("caml_ba_create_from: use return caml_ba_create_unsafe");
      return caml_ba_create_unsafe(kind,layout,dims,data1)}
    function caml_tanh_float(x){return Math.tanh(x)}
    function caml_gr_draw_str(str)
     {var s=caml_gr_state_get(),m=s.context.measureText(str),dx=m.width;
      s.context.fillText(str,s.x,s.height - s.y);
      s.x += dx | 0;
      return 0}
    function caml_gr_draw_string(str)
     {caml_gr_draw_str(caml_jsstring_of_string(str));return 0}
    function caml_gr_draw_char(c)
     {caml_gr_draw_str(String.fromCharCode(c));return 0}
    function caml_unmount(name)
     {var
       path=caml_make_path(name),
       name=caml_trailing_slash(path.join("/")),
       idx=- 1;
      for(var i=0;i < jsoo_mount_point.length;i++)
       if(jsoo_mount_point[i].path == name)idx = i;
      if(idx > - 1)jsoo_mount_point.splice(idx,1);
      return 0}
    function caml_input_value_from_string(s,ofs)
     {var reader=new MlStringReader(s,typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    function caml_ml_pos_in_64(chanid)
     {return caml_int64_of_float(caml_pos_in(chanid))}
    function caml_gr_draw_image(im,x,y)
     {var s=caml_gr_state_get();
      if(! im.image)
       {var canvas=document.createElement("canvas");
        canvas.width = s.width;
        canvas.height = s.height;
        canvas.getContext("2d").putImageData(im,0,0);
        var image=new (globalThis.Image)();
        image.onload
        =
        function()
         {s.context.drawImage(image,x,s.height - im.height - y);
          im.image = image};
        image.src = canvas.toDataURL("image/png")}
      else
       s.context.drawImage(im.image,x,s.height - im.height - y);
      return 0}
    function caml_register_channel_for_spacetime(_channel){return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    function caml_sys_rmdir(name)
     {var root=resolve_fs_device(name);root.device.rmdir(root.rest);return 0}
    function caml_unix_symlink(to_dir,src,dst)
     {var src_root=resolve_fs_device(src),dst_root=resolve_fs_device(dst);
      if(src_root.device != dst_root.device)
       caml_failwith
        ("caml_unix_symlink: cannot symlink between two filesystems");
      if(! src_root.device.symlink)
       caml_failwith("caml_unix_symlink: not implemented");
      return src_root.device.symlink(to_dir,src_root.rest,dst_root.rest,true)}
    function caml_ml_pos_out(chanid){return caml_pos_out(chanid)}
    function caml_spacetime_enabled(_unit){return 0}
    function caml_bytes_notequal(s1,s2){return 1 - caml_bytes_equal(s1,s2)}
    function caml_runtime_parameters(_unit){return caml_string_of_jsbytes("")}
    function caml_js_object(a)
     {var o={};
      for(var i=1;i < a.length;i++)
       {var p=a[i];o[caml_jsstring_of_string(p[1])] = p[2]}
      return o}
    function caml_ba_create(kind,layout,dims_ml)
     {var
       dims=caml_js_from_array(dims_ml),
       data=caml_ba_create_buffer(kind,caml_ba_get_size(dims));
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_gr_remember_mode()
     {caml_failwith("caml_gr_remember_mode not Implemented")}
    function caml_fma_float(x,y,z)
     {var
       SPLIT=Math.pow(2,27) + 1,
       MIN_VALUE=Math.pow(2,- 1022),
       EPSILON=Math.pow(2,- 52),
       C=416,
       A=Math.pow(2,+ C),
       B=Math.pow(2,- C);
      function multiply(a,b)
       {var
         at=SPLIT * a,
         ahi=at - (at - a),
         alo=a - ahi,
         bt=SPLIT * b,
         bhi=bt - (bt - b),
         blo=b - bhi,
         p=a * b,
         e=ahi * bhi - p + ahi * blo + alo * bhi + alo * blo;
        return {p:p,e:e}}
      function add(a,b)
       {var s=a + b,v=s - a,e=a - (s - v) + (b - v);return {s:s,e:e}}
      function adjust(x,y)
       {return x !== 0 && y !== 0 && SPLIT * x - (SPLIT * x - x) === x
                ?x * (1 + (x < 0?- 1:+ 1) * (y < 0?- 1:+ 1) * EPSILON)
                :x}
      if
       (x
        ===
        0
        ||
        x
        !==
        x
        ||
        x
        ===
        +
        (1 / 0)
        ||
        x
        ===
        -
        (1 / 0)
        ||
        y
        ===
        0
        ||
        y
        !==
        y
        ||
        y
        ===
        +
        (1 / 0)
        ||
        y
        ===
        -
        (1 / 0))
       return x * y + z;
      if(z === 0)return x * y;
      if(z !== z || z === + (1 / 0) || z === - (1 / 0))return z;
      var scale=1;
      while(Math.abs(x) > A){scale *= A;x *= B}
      while(Math.abs(y) > A){scale *= A;y *= B}
      if(scale === 1 / 0)return x * y * scale;
      while(Math.abs(x) < B){scale *= B;x *= A}
      while(Math.abs(y) < B){scale *= B;y *= A}
      if(scale === 0)return z;
      var xs=x,ys=y,zs=z / scale;
      if(Math.abs(zs) > Math.abs(xs * ys) * 4 / EPSILON)return z;
      if(Math.abs(zs) < Math.abs(xs * ys) * EPSILON / 4 * EPSILON / 4)
       zs = (z < 0?- 1:+ 1) * MIN_VALUE;
      var
       xy=multiply(xs,ys),
       s=add(xy.p,zs),
       u=add(xy.e,s.e),
       i=add(s.s,u.s),
       f=i.s + adjust(i.e,u.e);
      if(f === 0)return f;
      var fs=f * scale;
      if(Math.abs(fs) > MIN_VALUE)return fs;
      return fs + adjust(f - fs / scale,i.e) * scale}
    function caml_recommended_domain_count(unit){return 1}
    function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8}
    function caml_ml_set_binary_mode(chanid,mode)
     {var chan=caml_ml_channels[chanid];
      chan.file.flags.text = ! mode;
      chan.file.flags.binary = mode;
      return 0}
    function caml_final_register(){return 0}
    function caml_gr_draw_rect(x,y,w,h)
     {var s=caml_gr_state_get();
      s.context.strokeRect(x,s.height - y,w,- h);
      return 0}
    function caml_string_get16(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 1)caml_string_bound_error();
      var b1=caml_string_unsafe_get(s,i),b2=caml_string_unsafe_get(s,i + 1);
      return b2 << 8 | b1}
    function caml_output_value(chanid,v,flags)
     {var s=caml_output_value_to_string(v,flags);
      caml_ml_output(chanid,s,0,caml_ml_string_length(s));
      return 0}
    function caml_ba_get_3(ba,i0,i1,i2){return ba.get(ba.offset([i0,i1,i2]))}
    function caml_ephe_blit_key(a1,i1,a2,i2,len)
     {caml_array_blit
       (a1,caml_ephe_key_offset + i1 - 1,a2,caml_ephe_key_offset + i2 - 1,len);
      return 0}
    var caml_initial_time=new Date().getTime() * 0.001;
    function caml_sys_time()
     {var now=new Date().getTime();return now * 0.001 - caml_initial_time}
    function caml_sys_time_include_children(b){return caml_sys_time()}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_unix_getpwuid(unit){caml_raise_not_found()}
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v && v.caml_custom)
         {if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
           {var hh=caml_custom_ops[v.caml_custom].hash(v);
            h = caml_hash_mix_int(h,hh);
            num--}}
        else
         if(v instanceof Array && v[0] === (v[0] | 0))
          switch(v[0])
           {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
            case 250:queue[--rd] = v[1];break;
            default:
             if(caml_is_continuation_tag(v[0]))break;
             var tag=v.length - 1 << 10 | v[0];
             h = caml_hash_mix_int(h,tag);
             for(i = 1,len = v.length;i < len;i++)
              {if(wr >= sz)break;queue[wr++] = v[i]}
             break}
         else
          if(caml_is_ml_bytes(v))
           {h = caml_hash_mix_bytes(h,v);num--}
          else
           if(caml_is_ml_string(v))
            {h = caml_hash_mix_string(h,v);num--}
           else
            if(typeof v === "string")
             {h = caml_hash_mix_jsbytes(h,v);num--}
            else
             if(v === (v | 0))
              {h = caml_hash_mix_int(h,v + v + 1);num--}
             else
              if(v === + v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function caml_ba_to_typed_array(ba){return ba.data}
    function caml_domain_dls_get(unit){return caml_domain_dls}
    function caml_bytes_get32(s,i)
     {if(i >>> 0 >= s.l - 3)caml_bytes_bound_error();
      var
       b1=caml_bytes_unsafe_get(s,i),
       b2=caml_bytes_unsafe_get(s,i + 1),
       b3=caml_bytes_unsafe_get(s,i + 2),
       b4=caml_bytes_unsafe_get(s,i + 3);
      return b4 << 24 | b3 << 16 | b2 << 8 | b1}
    function caml_frexp_float(x)
     {if(x == 0 || ! isFinite(x))return [0,x,0];
      var neg=x < 0;
      if(neg)x = - x;
      var exp=Math.max(- 1023,jsoo_floor_log2(x) + 1);
      x *= Math.pow(2,- exp);
      while(x < 0.5){x *= 2;exp--}
      while(x >= 1){x *= 0.5;exp++}
      if(neg)x = - x;
      return [0,x,exp]}
    function caml_string_get64(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 7)caml_string_bound_error();
      var a=new Array(8);
      for(var j=0;j < 8;j++)a[7 - j] = caml_string_unsafe_get(s,i + j);
      return caml_int64_of_bytes(a)}
    function caml_js_error_option_of_exception(exn)
     {if(exn.js_error)return [0,exn.js_error];return 0}
    function caml_ml_pos_out_64(chanid)
     {return caml_int64_of_float(caml_pos_out(chanid))}
    function caml_unix_findclose(dir_handle)
     {return caml_unix_closedir(dir_handle)}
    function caml_gr_close_subwindow(a)
     {caml_failwith("caml_gr_close_subwindow not Implemented")}
    function caml_floatarray_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_get_minor_free(unit){return 0}
    function caml_set_static_env(k,v)
     {if(! globalThis.jsoo_static_env)globalThis.jsoo_static_env = {};
      globalThis.jsoo_static_env[k] = v;
      return 0}
    function caml_ba_change_layout(ba,layout)
     {if(ba.layout == layout)return ba;
      var new_dims=[];
      for(var i=0;i < ba.dims.length;i++)
       new_dims[i] = ba.dims[ba.dims.length - i - 1];
      return caml_ba_create_unsafe(ba.kind,layout,new_dims,ba.data)}
    function caml_js_new(c,a)
     {switch(a.length)
       {case 1:return new c();
        case 2:return new c(a[1]);
        case 3:return new c(a[1],a[2]);
        case 4:return new c(a[1],a[2],a[3]);
        case 5:return new c(a[1],a[2],a[3],a[4]);
        case 6:return new c(a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return new c(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      function F(){return c.apply(this,caml_js_from_array(a))}
      F.prototype = c.prototype;
      return new F()}
    function caml_gr_current_y(){var s=caml_gr_state_get();return s.y}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    function jsoo_effect_not_supported()
     {caml_failwith("Effect handlers are not supported")}
    function caml_continuation_use_and_update_handler_noexc
     (cont,hval,hexn,heff)
     {var stack=caml_continuation_use_noexc(cont);
      stack[3] = [0,hval,hexn,heff];
      return stack}
    function caml_obj_truncate(x,s)
     {if(s <= 0 || s + 1 > x.length)caml_invalid_argument("Obj.truncate");
      if(x.length != s + 1)x.length = s + 1;
      return 0}
    function caml_js_to_string(s){return caml_string_of_jsstring(s)}
    function is_digit_odd(nat,ofs){if(nat.data[ofs] & 1)return 1;return 0}
    function caml_runtime_variant(_unit){return caml_string_of_jsbytes("")}
    function caml_ml_open_descriptor_out(fd)
     {var file=caml_sys_fds[fd];
      if(file.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       buffered=file.flags.buffered !== undefined?file.flags.buffered:1,
       channel=
        {file:file,
         offset:file.flags.append?file.length():0,
         fd:fd,
         opened:true,
         out:true,
         buffer_curr:0,
         buffer:new Uint8Array(65536),
         buffered:buffered};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_array_concat(l)
     {var a=[0];
      while(l !== 0)
       {var b=l[1];for(var i=1;i < b.length;i++)a.push(b[i]);l = l[2]}
      return a}
    function caml_gr_open_graph(info)
     {var info=caml_jsstring_of_string(info);
      function get(name)
       {var res=info.match("(^|,) *" + name + " *= *([a-zA-Z0-9_]+) *(,|$)");
        if(res)return res[2]}
      var specs=[];
      if(! (info == ""))specs.push(info);
      var target=get("target");
      if(! target)target = "";
      var status=get("status");
      if(! status)specs.push("status=1");
      var w=get("width");
      w = w?parseInt(w):200;
      specs.push("width=" + w);
      var h=get("height");
      h = h?parseInt(h):200;
      specs.push("height=" + h);
      var win=globalThis.open("about:blank",target,specs.join(","));
      if(! win)caml_failwith("Graphics.open_graph: cannot open the window");
      var doc=win.document,canvas=doc.createElement("canvas");
      canvas.width = w;
      canvas.height = h;
      var ctx=caml_gr_state_create(canvas,w,h);
      ctx.set_title = function(title){doc.title = title};
      caml_gr_state_set(ctx);
      var body=doc.body;
      body.style.margin = "0px";
      body.appendChild(canvas);
      return 0}
    function caml_make_float_vect(len)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 254;
      for(var i=1;i < len;i++)b[i] = 0;
      return b}
    function caml_cbrt_float(x){return Math.cbrt(x)}
    function caml_memprof_stop(unit){return 0}
    function caml_eventlog_pause(unit){return 0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_log1p_float(x){return Math.log1p(x)}
    function caml_lazy_make_forward(v){return [250,v]}
    function lor_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] |= nat2.data[ofs2];return 0}
    function caml_gr_blit_image(im,x,y)
     {var
       s=caml_gr_state_get(),
       im2=
        s.context.getImageData(x,s.height - im.height - y,im.width,im.height);
      for(var i=0;i < im2.data.length;i += 4)
       {im.data[i] = im2.data[i];
        im.data[i + 1] = im2.data[i + 1];
        im.data[i + 2] = im2.data[i + 2];
        im.data[i + 3] = im2.data[i + 3]}
      return 0}
    function caml_gr_window_id(a)
     {caml_failwith("caml_gr_window_id not Implemented")}
    function caml_js_on_ie()
     {var ua=globalThis.navigator?globalThis.navigator.userAgent:"";
      return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0}
    function caml_int64_shift_right(x,s){return x.shift_right(s)}
    function caml_ba_layout(ba){return ba.layout}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_array_set(array,index,newval)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      array[index + 1] = newval;
      return 0}
    function caml_alloc_stack(hv,hx,hf){return 0}
    function caml_bytes_greaterequal(s1,s2)
     {return caml_bytes_lessequal(s2,s1)}
    function set_digit_nat(nat,ofs,digit){nat.data[ofs] = digit;return 0}
    function caml_gr_doc_of_state(state)
     {if(state.canvas.ownerDocument)return state.canvas.ownerDocument}
    function caml_ml_output_int(chanid,i)
     {var
       arr=[i >> 24 & 0xFF,i >> 16 & 0xFF,i >> 8 & 0xFF,i & 0xFF],
       s=caml_string_of_array(arr);
      caml_ml_output(chanid,s,0,4);
      return 0}
    function caml_obj_with_tag(tag,x)
     {var l=x.length,a=new Array(l);
      a[0] = tag;
      for(var i=1;i < l;i++)a[i] = x[i];
      return a}
    function caml_ml_channel_size(chanid)
     {var chan=caml_ml_channels[chanid];return chan.file.length()}
    function caml_raw_backtrace_slot()
     {caml_invalid_argument
       ("Printexc.get_raw_backtrace_slot: index out of bounds")}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_js_wrap_meth_callback_strict(arity,f)
     {return function()
       {var args=new Array(arity + 1),len=Math.min(arguments.length,arity);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_callback(f,args)}}
    function caml_unix_readlink(name)
     {var root=resolve_fs_device(name);
      if(! root.device.readlink)
       caml_failwith("caml_unix_readlink: not implemented");
      return root.device.readlink(root.rest,true)}
    function caml_backtrace_status(){return 0}
    function caml_sys_argv(a){return caml_argv}
    function caml_install_signal_handler(){return 0}
    function caml_ba_fill(ba,v){ba.fill(v);return 0}
    function caml_modf_float(x)
     {if(isFinite(x))
       {var neg=1 / x < 0;
        x = Math.abs(x);
        var i=Math.floor(x),f=x - i;
        if(neg){i = - i;f = - f}
        return [0,f,i]}
      if(isNaN(x))return [0,NaN,NaN];
      return [0,1 / x,x]}
    function caml_gc_get(){return [0,0,0,0,0,0,0,0,0]}
    function caml_float_compare(x,y)
     {if(x === y)return 0;
      if(x < y)return - 1;
      if(x > y)return 1;
      if(x === x)return 1;
      if(y === y)return - 1;
      return 0}
    function caml_string_set32(s,i,i32){return caml_bytes_set32(s,i,i32)}
    function caml_parse_engine(tables,env,cmd,arg)
     {var
       ERRCODE=256,
       loop=6,
       testshift=7,
       shift=8,
       shift_recover=9,
       reduce=10,
       READ_TOKEN=0,
       RAISE_PARSE_ERROR=1,
       GROW_STACKS_1=2,
       GROW_STACKS_2=3,
       COMPUTE_SEMANTIC_ACTION=4,
       CALL_ERROR_FUNCTION=5,
       env_s_stack=1,
       env_v_stack=2,
       env_symb_start_stack=3,
       env_symb_end_stack=4,
       env_stacksize=5,
       env_stackbase=6,
       env_curr_char=7,
       env_lval=8,
       env_symb_start=9,
       env_symb_end=10,
       env_asp=11,
       env_rule_len=12,
       env_rule_number=13,
       env_sp=14,
       env_state=15,
       env_errflag=16,
       tbl_transl_const=2,
       tbl_transl_block=3,
       tbl_lhs=4,
       tbl_len=5,
       tbl_defred=6,
       tbl_dgoto=7,
       tbl_sindex=8,
       tbl_rindex=9,
       tbl_gindex=10,
       tbl_tablesize=11,
       tbl_table=12,
       tbl_check=13,
       tbl_names_const=15,
       tbl_names_block=16;
      function log(x)
       {var s=caml_string_of_jsbytes(x + "\n");
        caml_ml_output(2,s,0,caml_ml_string_length(s))}
      function token_name(names,number)
       {var str=caml_jsstring_of_string(names);
        if(str[0] == "\x00")return "<unknown token>";
        return str.split("\x00")[number]}
      function print_token(state,tok)
       {var token,kind;
        if(tok instanceof Array)
         {token = token_name(tables[tbl_names_block],tok[0]);
          if(typeof tok[1] == "number")
           kind = "" + tok[1];
          else
           if(typeof tok[1] == "string")
            kind = tok[1];
           else
            if(tok[1] instanceof MlBytes)
             kind = caml_jsbytes_of_string(tok[1]);
            else
             kind = "_";
          log("State " + state + ": read token " + token + "(" + kind + ")")}
        else
         {token = token_name(tables[tbl_names_const],tok);
          log("State " + state + ": read token " + token)}}
      if(! tables.dgoto)
       {tables.defred = caml_lex_array(tables[tbl_defred]);
        tables.sindex = caml_lex_array(tables[tbl_sindex]);
        tables.check = caml_lex_array(tables[tbl_check]);
        tables.rindex = caml_lex_array(tables[tbl_rindex]);
        tables.table = caml_lex_array(tables[tbl_table]);
        tables.len = caml_lex_array(tables[tbl_len]);
        tables.lhs = caml_lex_array(tables[tbl_lhs]);
        tables.gindex = caml_lex_array(tables[tbl_gindex]);
        tables.dgoto = caml_lex_array(tables[tbl_dgoto])}
      var
       res=0,
       n,
       n1,
       n2,
       state1,
       sp=env[env_sp],
       state=env[env_state],
       errflag=env[env_errflag];
      exit:
      for(;;)
       next:
       switch(cmd)
        {case 0:state = 0;errflag = 0;
         case 6:
          n = tables.defred[state];
          if(n != 0){cmd = reduce;break}
          if(env[env_curr_char] >= 0){cmd = testshift;break}
          res = READ_TOKEN;
          break exit;
         case 1:
          if(arg instanceof Array)
           {env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
            env[env_lval] = arg[1]}
          else
           {env[env_curr_char] = tables[tbl_transl_const][arg + 1];
            env[env_lval] = 0}
          if(caml_parser_trace)print_token(state,arg);
         case 7:
          n1 = tables.sindex[state];
          n2 = n1 + env[env_curr_char];
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
           {cmd = shift;break}
          n1 = tables.rindex[state];
          n2 = n1 + env[env_curr_char];
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
           {n = tables.table[n2];cmd = reduce;break}
          if(errflag <= 0){res = CALL_ERROR_FUNCTION;break exit}
         case 5:
          if(errflag < 3)
           {errflag = 3;
            for(;;)
             {state1 = env[env_s_stack][sp + 1];
              n1 = tables.sindex[state1];
              n2 = n1 + ERRCODE;
              if
               (n1
                !=
                0
                &&
                n2
                >=
                0
                &&
                n2
                <=
                tables[tbl_tablesize]
                &&
                tables.check[n2]
                ==
                ERRCODE)
               {if(caml_parser_trace)log("Recovering in state " + state1);
                cmd = shift_recover;
                break next}
              else
               {if(caml_parser_trace)log("Discarding state " + state1);
                if(sp <= env[env_stackbase])
                 {if(caml_parser_trace)log("No more states to discard");
                  return RAISE_PARSE_ERROR}
                sp--}}}
          else
           {if(env[env_curr_char] == 0)return RAISE_PARSE_ERROR;
            if(caml_parser_trace)log("Discarding last token read");
            env[env_curr_char] = - 1;
            cmd = loop;
            break}
         case 8:env[env_curr_char] = - 1;if(errflag > 0)errflag--;
         case 9:
          if(caml_parser_trace)
           log("State " + state + ": shift to state " + tables.table[n2]);
          state = tables.table[n2];
          sp++;
          if(sp >= env[env_stacksize]){res = GROW_STACKS_1;break exit}
         case 2:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = env[env_lval];
          env[env_symb_start_stack][sp + 1] = env[env_symb_start];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end];
          cmd = loop;
          break;
         case 10:
          if(caml_parser_trace)
           log("State " + state + ": reduce by rule " + n);
          var m=tables.len[n];
          env[env_asp] = sp;
          env[env_rule_number] = n;
          env[env_rule_len] = m;
          sp = sp - m + 1;
          m = tables.lhs[n];
          state1 = env[env_s_stack][sp];
          n1 = tables.gindex[m];
          n2 = n1 + state1;
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            state1)
           state = tables.table[n2];
          else
           state = tables.dgoto[m];
          if(sp >= env[env_stacksize]){res = GROW_STACKS_2;break exit}
         case 3:res = COMPUTE_SEMANTIC_ACTION;break exit;
         case 4:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = arg;
          var asp=env[env_asp];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
          if(sp > asp)
           env[env_symb_start_stack][sp + 1]
           =
           env[env_symb_end_stack][asp + 1];
          cmd = loop;
          break;
         default:return RAISE_PARSE_ERROR}
      env[env_sp] = sp;
      env[env_state] = state;
      env[env_errflag] = errflag;
      return res}
    function caml_jsoo_flags_effects(unit){return 0}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_array_fill(array,ofs,len,v)
     {for(var i=0;i < len;i++)array[ofs + i + 1] = v;return 0}
    function caml_sys_mkdir(name,perm)
     {var root=resolve_fs_device(name);
      root.device.mkdir(root.rest,perm);
      return 0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_bytes_greaterthan(s1,s2){return caml_bytes_lessthan(s2,s1)}
    function caml_gr_make_image(arr)
     {var
       s=caml_gr_state_get(),
       h=arr.length - 1,
       w=arr[1].length - 1,
       im=s.context.createImageData(w,h);
      for(var i=0;i < h;i++)
       for(var j=0;j < w;j++)
        {var c=arr[i + 1][j + 1],o=i * (w * 4) + j * 4;
         if(c == - 1)
          {im.data[o + 0] = 0;
           im.data[o + 1] = 0;
           im.data[o + 2] = 0;
           im.data[o + 3] = 0}
         else
          {im.data[o + 0] = c >> 16 & 0xff;
           im.data[o + 1] = c >> 8 & 0xff;
           im.data[o + 2] = c >> 0 & 0Xff;
           im.data[o + 3] = 0xff}}
      return im}
    function caml_ml_set_channel_output(chanid,f)
     {var chan=caml_ml_channels[chanid];
      chan.output = function(s){f(s)};
      return 0}
    function caml_read_file_content(name)
     {var
       name=typeof name == "string"?caml_string_of_jsbytes(name):name,
       root=resolve_fs_device(name);
      if(root.device.exists(root.rest))
       {var
         file=root.device.open(root.rest,{rdonly:1}),
         len=file.length(),
         buf=new Uint8Array(len);
        file.read(0,buf,0,len);
        return caml_string_of_array(buf)}
      caml_raise_no_such_file(caml_jsbytes_of_string(name))}
    function caml_js_to_float(x){return x}
    function caml_setup_uncaught_exception_handler()
     {var process=globalThis.process;
      if(process && process.on)
       process.on
        ("uncaughtException",
         function(err,origin)
          {caml_fatal_uncaught_exception(err);process.exit(2)});
      else
       if(globalThis.addEventListener)
        globalThis.addEventListener
         ("error",
          function(event)
           {if(event.error)caml_fatal_uncaught_exception(event.error)})}
    caml_setup_uncaught_exception_handler();
    globalThis.jsoo_runtime
    =
    {caml_alloc_stack:caml_alloc_stack,
     caml_continuation_use_noexc:caml_continuation_use_noexc,
     caml_continuation_use_and_update_handler_noexc:
     caml_continuation_use_and_update_handler_noexc,
     caml_get_continuation_callstack:caml_get_continuation_callstack,
     caml_ml_condition_new:caml_ml_condition_new,
     caml_ml_condition_wait:caml_ml_condition_wait,
     caml_ml_condition_broadcast:caml_ml_condition_broadcast,
     caml_ml_condition_signal:caml_ml_condition_signal,
     jsoo_effect_not_supported:jsoo_effect_not_supported,
     MlMutex:MlMutex,
     caml_ml_mutex_new:caml_ml_mutex_new,
     caml_ml_mutex_lock:caml_ml_mutex_lock,
     caml_ml_mutex_try_lock:caml_ml_mutex_try_lock,
     caml_ml_mutex_unlock:caml_ml_mutex_unlock,
     caml_lxm_next:caml_lxm_next,
     caml_domain_dls:caml_domain_dls,
     caml_domain_dls_set:caml_domain_dls_set,
     caml_domain_dls_get:caml_domain_dls_get,
     caml_atomic_load:caml_atomic_load,
     caml_atomic_cas:caml_atomic_cas,
     caml_atomic_fetch_add:caml_atomic_fetch_add,
     caml_atomic_exchange:caml_atomic_exchange,
     caml_ml_domain_unique_token:caml_ml_domain_unique_token,
     caml_ml_domain_set_name:caml_ml_domain_set_name,
     caml_recommended_domain_count:caml_recommended_domain_count,
     caml_domain_id:caml_domain_id,
     caml_domain_spawn:caml_domain_spawn,
     caml_ml_domain_id:caml_ml_domain_id,
     caml_ml_domain_cpu_relax:caml_ml_domain_cpu_relax,
     caml_ephe_key_offset:caml_ephe_key_offset,
     caml_ephe_data_offset:caml_ephe_data_offset,
     caml_ephe_set_key:caml_ephe_set_key,
     caml_ephe_unset_key:caml_ephe_unset_key,
     caml_ephe_create:caml_ephe_create,
     caml_weak_create:caml_weak_create,
     caml_weak_set:caml_weak_set,
     caml_ephe_get_key:caml_ephe_get_key,
     caml_ephe_get_key_copy:caml_ephe_get_key_copy,
     caml_ephe_check_key:caml_ephe_check_key,
     caml_ephe_blit_key:caml_ephe_blit_key,
     caml_ephe_blit_data:caml_ephe_blit_data,
     caml_ephe_get_data:caml_ephe_get_data,
     caml_ephe_get_data_copy:caml_ephe_get_data_copy,
     caml_ephe_set_data:caml_ephe_set_data,
     caml_ephe_unset_data:caml_ephe_unset_data,
     caml_ephe_check_data:caml_ephe_check_data,
     caml_unix_gettimeofday:caml_unix_gettimeofday,
     caml_unix_time:caml_unix_time,
     caml_unix_gmtime:caml_unix_gmtime,
     caml_unix_localtime:caml_unix_localtime,
     caml_unix_mktime:caml_unix_mktime,
     caml_unix_startup:caml_unix_startup,
     caml_unix_cleanup:caml_unix_cleanup,
     caml_unix_filedescr_of_fd:caml_unix_filedescr_of_fd,
     caml_unix_isatty:caml_unix_isatty,
     make_unix_err_args:make_unix_err_args,
     caml_unix_stat:caml_unix_stat,
     caml_unix_stat_64:caml_unix_stat_64,
     caml_unix_lstat:caml_unix_lstat,
     caml_unix_lstat_64:caml_unix_lstat_64,
     caml_unix_mkdir:caml_unix_mkdir,
     caml_unix_rmdir:caml_unix_rmdir,
     caml_unix_symlink:caml_unix_symlink,
     caml_unix_readlink:caml_unix_readlink,
     caml_unix_unlink:caml_unix_unlink,
     caml_unix_getuid:caml_unix_getuid,
     caml_unix_getpwuid:caml_unix_getpwuid,
     caml_unix_has_symlink:caml_unix_has_symlink,
     caml_unix_opendir:caml_unix_opendir,
     caml_unix_readdir:caml_unix_readdir,
     caml_unix_closedir:caml_unix_closedir,
     caml_unix_rewinddir:caml_unix_rewinddir,
     caml_unix_findfirst:caml_unix_findfirst,
     caml_unix_findnext:caml_unix_findnext,
     caml_unix_findclose:caml_unix_findclose,
     caml_unix_inet_addr_of_string:caml_unix_inet_addr_of_string,
     re_match:re_match,
     re_search_forward:re_search_forward,
     re_search_backward:re_search_backward,
     re_string_match:re_string_match,
     re_partial_match:re_partial_match,
     re_replacement_text:re_replacement_text,
     caml_str_initialize:caml_str_initialize,
     caml_raise_sys_error:caml_raise_sys_error,
     caml_sys_exit:caml_sys_exit,
     caml_is_special_exception:caml_is_special_exception,
     caml_format_exception:caml_format_exception,
     caml_fatal_uncaught_exception:caml_fatal_uncaught_exception,
     caml_set_static_env:caml_set_static_env,
     caml_sys_getenv:caml_sys_getenv,
     caml_sys_unsafe_getenv:caml_sys_unsafe_getenv,
     caml_argv:caml_argv,
     caml_executable_name:caml_executable_name,
     caml_sys_get_argv:caml_sys_get_argv,
     caml_sys_argv:caml_sys_argv,
     caml_sys_modify_argv:caml_sys_modify_argv,
     caml_sys_executable_name:caml_sys_executable_name,
     caml_sys_system_command:caml_sys_system_command,
     caml_sys_time:caml_sys_time,
     caml_sys_time_include_children:caml_sys_time_include_children,
     caml_sys_random_seed:caml_sys_random_seed,
     caml_sys_const_big_endian:caml_sys_const_big_endian,
     caml_sys_const_word_size:caml_sys_const_word_size,
     caml_sys_const_int_size:caml_sys_const_int_size,
     caml_sys_const_max_wosize:caml_sys_const_max_wosize,
     caml_sys_const_ostype_unix:caml_sys_const_ostype_unix,
     caml_sys_const_ostype_win32:caml_sys_const_ostype_win32,
     caml_sys_const_ostype_cygwin:caml_sys_const_ostype_cygwin,
     caml_sys_const_backend_type:caml_sys_const_backend_type,
     os_type:os_type,
     caml_sys_get_config:caml_sys_get_config,
     caml_sys_isatty:caml_sys_isatty,
     caml_runtime_variant:caml_runtime_variant,
     caml_runtime_parameters:caml_runtime_parameters,
     caml_install_signal_handler:caml_install_signal_handler,
     caml_runtime_warnings:caml_runtime_warnings,
     caml_ml_enable_runtime_warnings:caml_ml_enable_runtime_warnings,
     caml_ml_runtime_warnings_enabled:caml_ml_runtime_warnings_enabled,
     caml_spacetime_enabled:caml_spacetime_enabled,
     caml_sys_const_naked_pointers_checked:
     caml_sys_const_naked_pointers_checked,
     caml_register_channel_for_spacetime:caml_register_channel_for_spacetime,
     caml_spacetime_only_works_for_native_code:
     caml_spacetime_only_works_for_native_code,
     caml_call_gen:caml_call_gen,
     caml_named_values:caml_named_values,
     caml_register_named_value:caml_register_named_value,
     caml_named_value:caml_named_value,
     caml_global_data:caml_global_data,
     caml_register_global:caml_register_global,
     caml_get_global_data:caml_get_global_data,
     caml_is_printable:caml_is_printable,
     caml_maybe_print_stats:caml_maybe_print_stats,
     caml_parser_trace:caml_parser_trace,
     caml_parse_engine:caml_parse_engine,
     caml_set_parser_trace:caml_set_parser_trace,
     caml_update_dummy:caml_update_dummy,
     caml_obj_is_block:caml_obj_is_block,
     caml_obj_tag:caml_obj_tag,
     caml_obj_set_tag:caml_obj_set_tag,
     caml_obj_block:caml_obj_block,
     caml_obj_with_tag:caml_obj_with_tag,
     caml_obj_dup:caml_obj_dup,
     caml_obj_truncate:caml_obj_truncate,
     caml_obj_make_forward:caml_obj_make_forward,
     caml_obj_compare_and_swap:caml_obj_compare_and_swap,
     caml_obj_is_shared:caml_obj_is_shared,
     caml_lazy_make_forward:caml_lazy_make_forward,
     caml_get_public_method:caml_get_public_method,
     caml_oo_last_id:caml_oo_last_id,
     caml_set_oo_id:caml_set_oo_id,
     caml_fresh_oo_id:caml_fresh_oo_id,
     caml_obj_raw_field:caml_obj_raw_field,
     caml_obj_set_raw_field:caml_obj_set_raw_field,
     caml_obj_reachable_words:caml_obj_reachable_words,
     caml_obj_add_offset:caml_obj_add_offset,
     caml_obj_update_tag:caml_obj_update_tag,
     caml_lazy_update_to_forcing:caml_lazy_update_to_forcing,
     caml_lazy_update_to_forward:caml_lazy_update_to_forward,
     caml_lazy_reset_to_lazy:caml_lazy_reset_to_lazy,
     caml_lazy_read_result:caml_lazy_read_result,
     caml_is_continuation_tag:caml_is_continuation_tag,
     initialize_nat:initialize_nat,
     MlNat:MlNat,
     caml_hash_nat:caml_hash_nat,
     nat_of_array:nat_of_array,
     create_nat:create_nat,
     set_to_zero_nat:set_to_zero_nat,
     blit_nat:blit_nat,
     set_digit_nat:set_digit_nat,
     nth_digit_nat:nth_digit_nat,
     set_digit_nat_native:set_digit_nat_native,
     nth_digit_nat_native:nth_digit_nat_native,
     num_digits_nat:num_digits_nat,
     num_leading_zero_bits_in_digit:num_leading_zero_bits_in_digit,
     is_digit_int:is_digit_int,
     is_digit_zero:is_digit_zero,
     is_digit_odd:is_digit_odd,
     incr_nat:incr_nat,
     add_nat:add_nat,
     complement_nat:complement_nat,
     decr_nat:decr_nat,
     sub_nat:sub_nat,
     mult_digit_nat:mult_digit_nat,
     mult_nat:mult_nat,
     square_nat:square_nat,
     shift_left_nat:shift_left_nat,
     div_helper:div_helper,
     div_digit_nat:div_digit_nat,
     div_nat:div_nat,
     shift_right_nat:shift_right_nat,
     compare_digits_nat:compare_digits_nat,
     compare_nat:compare_nat,
     compare_nat_real:compare_nat_real,
     land_digit_nat:land_digit_nat,
     lor_digit_nat:lor_digit_nat,
     lxor_digit_nat:lxor_digit_nat,
     serialize_nat:serialize_nat,
     deserialize_nat:deserialize_nat,
     caml_str_repeat:caml_str_repeat,
     caml_subarray_to_jsbytes:caml_subarray_to_jsbytes,
     caml_utf8_of_utf16:caml_utf8_of_utf16,
     caml_utf16_of_utf8:caml_utf16_of_utf8,
     jsoo_is_ascii:jsoo_is_ascii,
     caml_bytes_unsafe_get:caml_bytes_unsafe_get,
     caml_bytes_unsafe_set:caml_bytes_unsafe_set,
     caml_string_bound_error:caml_string_bound_error,
     caml_bytes_bound_error:caml_bytes_bound_error,
     caml_string_get:caml_string_get,
     caml_string_get16:caml_string_get16,
     caml_bytes_get16:caml_bytes_get16,
     caml_string_get32:caml_string_get32,
     caml_bytes_get32:caml_bytes_get32,
     caml_string_get64:caml_string_get64,
     caml_bytes_get64:caml_bytes_get64,
     caml_bytes_get:caml_bytes_get,
     caml_string_set:caml_string_set,
     caml_bytes_set16:caml_bytes_set16,
     caml_string_set16:caml_string_set16,
     caml_bytes_set32:caml_bytes_set32,
     caml_string_set32:caml_string_set32,
     caml_bytes_set64:caml_bytes_set64,
     caml_string_set64:caml_string_set64,
     caml_bytes_set:caml_bytes_set,
     caml_bytes_of_utf16_jsstring:caml_bytes_of_utf16_jsstring,
     MlBytes:MlBytes,
     caml_convert_string_to_bytes:caml_convert_string_to_bytes,
     caml_convert_bytes_to_array:caml_convert_bytes_to_array,
     caml_uint8_array_of_bytes:caml_uint8_array_of_bytes,
     caml_uint8_array_of_string:caml_uint8_array_of_string,
     caml_create_string:caml_create_string,
     caml_create_bytes:caml_create_bytes,
     caml_string_of_array:caml_string_of_array,
     caml_bytes_of_array:caml_bytes_of_array,
     caml_bytes_compare:caml_bytes_compare,
     caml_bytes_equal:caml_bytes_equal,
     caml_string_notequal:caml_string_notequal,
     caml_bytes_notequal:caml_bytes_notequal,
     caml_bytes_lessequal:caml_bytes_lessequal,
     caml_bytes_lessthan:caml_bytes_lessthan,
     caml_string_greaterequal:caml_string_greaterequal,
     caml_bytes_greaterequal:caml_bytes_greaterequal,
     caml_string_greaterthan:caml_string_greaterthan,
     caml_bytes_greaterthan:caml_bytes_greaterthan,
     caml_fill_bytes:caml_fill_bytes,
     caml_blit_bytes:caml_blit_bytes,
     caml_blit_string:caml_blit_string,
     caml_ml_bytes_length:caml_ml_bytes_length,
     caml_bytes_of_jsbytes:caml_bytes_of_jsbytes,
     caml_string_unsafe_get:caml_string_unsafe_get,
     caml_string_unsafe_set:caml_string_unsafe_set,
     caml_ml_string_length:caml_ml_string_length,
     caml_string_compare:caml_string_compare,
     caml_string_equal:caml_string_equal,
     caml_string_lessequal:caml_string_lessequal,
     caml_string_lessthan:caml_string_lessthan,
     caml_string_of_bytes:caml_string_of_bytes,
     caml_bytes_of_string:caml_bytes_of_string,
     caml_string_of_jsbytes:caml_string_of_jsbytes,
     caml_jsbytes_of_string:caml_jsbytes_of_string,
     caml_jsstring_of_string:caml_jsstring_of_string,
     caml_string_of_jsstring:caml_string_of_jsstring,
     caml_is_ml_bytes:caml_is_ml_bytes,
     caml_ml_bytes_content:caml_ml_bytes_content,
     caml_is_ml_string:caml_is_ml_string,
     caml_js_to_byte_string:caml_js_to_byte_string,
     caml_new_string:caml_new_string,
     caml_js_from_string:caml_js_from_string,
     caml_to_js_string:caml_to_js_string,
     caml_js_to_string:caml_js_to_string,
     caml_array_of_string:caml_array_of_string,
     caml_array_of_bytes:caml_array_of_bytes,
     caml_md5_chan:caml_md5_chan,
     caml_md5_string:caml_md5_string,
     caml_MD5Transform:caml_MD5Transform,
     caml_MD5Init:caml_MD5Init,
     caml_MD5Update:caml_MD5Update,
     caml_MD5Final:caml_MD5Final,
     caml_md5_bytes:caml_md5_bytes,
     caml_marshal_constants:caml_marshal_constants,
     MlStringReader:MlStringReader,
     BigStringReader:BigStringReader,
     caml_float_of_bytes:caml_float_of_bytes,
     caml_input_value_from_string:caml_input_value_from_string,
     caml_input_value_from_bytes:caml_input_value_from_bytes,
     caml_int64_unmarshal:caml_int64_unmarshal,
     caml_int64_marshal:caml_int64_marshal,
     caml_int32_unmarshal:caml_int32_unmarshal,
     caml_nativeint_unmarshal:caml_nativeint_unmarshal,
     caml_custom_ops:caml_custom_ops,
     caml_input_value_from_reader:caml_input_value_from_reader,
     caml_marshal_data_size:caml_marshal_data_size,
     MlObjectTable:MlObjectTable,
     caml_legacy_custom_code:caml_legacy_custom_code,
     caml_output_val:caml_output_val,
     caml_output_value_to_string:caml_output_value_to_string,
     caml_output_value_to_bytes:caml_output_value_to_bytes,
     caml_output_value_to_buffer:caml_output_value_to_buffer,
     caml_lex_array:caml_lex_array,
     caml_lex_engine:caml_lex_engine,
     caml_new_lex_engine:caml_new_lex_engine,
     caml_js_on_ie:caml_js_on_ie,
     caml_js_html_escape:caml_js_html_escape,
     caml_js_html_entities:caml_js_html_entities,
     caml_js_get_console:caml_js_get_console,
     caml_xmlhttprequest_create:caml_xmlhttprequest_create,
     caml_js_error_of_exception:caml_js_error_of_exception,
     caml_js_pure_expr:caml_js_pure_expr,
     caml_js_set:caml_js_set,
     caml_js_get:caml_js_get,
     caml_js_delete:caml_js_delete,
     caml_js_instanceof:caml_js_instanceof,
     caml_js_typeof:caml_js_typeof,
     caml_trampoline:caml_trampoline,
     caml_trampoline_return:caml_trampoline_return,
     caml_callback:caml_callback,
     caml_is_js:caml_is_js,
     caml_jsoo_flags_use_js_string:caml_jsoo_flags_use_js_string,
     caml_jsoo_flags_effects:caml_jsoo_flags_effects,
     caml_wrap_exception:caml_wrap_exception,
     caml_exn_with_js_backtrace:caml_exn_with_js_backtrace,
     caml_js_error_option_of_exception:caml_js_error_option_of_exception,
     caml_js_from_bool:caml_js_from_bool,
     caml_js_to_bool:caml_js_to_bool,
     caml_js_from_float:caml_js_from_float,
     caml_js_to_float:caml_js_to_float,
     caml_js_from_array:caml_js_from_array,
     caml_js_to_array:caml_js_to_array,
     caml_list_of_js_array:caml_list_of_js_array,
     caml_list_to_js_array:caml_list_to_js_array,
     caml_js_var:caml_js_var,
     caml_js_call:caml_js_call,
     caml_js_fun_call:caml_js_fun_call,
     caml_js_meth_call:caml_js_meth_call,
     caml_js_new:caml_js_new,
     caml_ojs_new_arr:caml_ojs_new_arr,
     caml_js_wrap_callback:caml_js_wrap_callback,
     caml_js_wrap_callback_arguments:caml_js_wrap_callback_arguments,
     caml_js_wrap_callback_strict:caml_js_wrap_callback_strict,
     caml_js_wrap_callback_unsafe:caml_js_wrap_callback_unsafe,
     caml_js_wrap_meth_callback:caml_js_wrap_meth_callback,
     caml_js_wrap_meth_callback_arguments:caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback_strict:caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_unsafe:caml_js_wrap_meth_callback_unsafe,
     caml_js_function_arity:caml_js_function_arity,
     caml_js_equals:caml_js_equals,
     caml_js_eval_string:caml_js_eval_string,
     caml_js_expr:caml_js_expr,
     caml_pure_js_expr:caml_pure_js_expr,
     caml_js_object:caml_js_object,
     caml_sys_fds:caml_sys_fds,
     caml_sys_close:caml_sys_close,
     caml_sys_open:caml_sys_open,
     caml_ml_set_channel_name:caml_ml_set_channel_name,
     caml_ml_channels:caml_ml_channels,
     caml_ml_out_channels_list:caml_ml_out_channels_list,
     caml_ml_open_descriptor_out:caml_ml_open_descriptor_out,
     caml_ml_open_descriptor_in:caml_ml_open_descriptor_in,
     caml_channel_descriptor:caml_channel_descriptor,
     caml_ml_set_binary_mode:caml_ml_set_binary_mode,
     caml_ml_close_channel:caml_ml_close_channel,
     caml_ml_channel_size:caml_ml_channel_size,
     caml_ml_channel_size_64:caml_ml_channel_size_64,
     caml_ml_set_channel_output:caml_ml_set_channel_output,
     caml_ml_set_channel_refill:caml_ml_set_channel_refill,
     caml_refill:caml_refill,
     caml_ml_input:caml_ml_input,
     caml_ml_input_block:caml_ml_input_block,
     caml_input_value:caml_input_value,
     caml_input_value_to_outside_heap:caml_input_value_to_outside_heap,
     caml_ml_input_char:caml_ml_input_char,
     caml_ml_input_int:caml_ml_input_int,
     caml_seek_in:caml_seek_in,
     caml_ml_seek_in:caml_ml_seek_in,
     caml_ml_seek_in_64:caml_ml_seek_in_64,
     caml_pos_in:caml_pos_in,
     caml_ml_pos_in:caml_ml_pos_in,
     caml_ml_pos_in_64:caml_ml_pos_in_64,
     caml_ml_input_scan_line:caml_ml_input_scan_line,
     caml_ml_flush:caml_ml_flush,
     caml_ml_output_bytes:caml_ml_output_bytes,
     caml_ml_output:caml_ml_output,
     caml_ml_output_char:caml_ml_output_char,
     caml_output_value:caml_output_value,
     caml_seek_out:caml_seek_out,
     caml_ml_seek_out:caml_ml_seek_out,
     caml_ml_seek_out_64:caml_ml_seek_out_64,
     caml_pos_out:caml_pos_out,
     caml_ml_pos_out:caml_ml_pos_out,
     caml_ml_pos_out_64:caml_ml_pos_out_64,
     caml_ml_output_int:caml_ml_output_int,
     caml_ml_is_buffered:caml_ml_is_buffered,
     caml_ml_set_buffered:caml_ml_set_buffered,
     caml_format_int:caml_format_int,
     caml_parse_sign_and_base:caml_parse_sign_and_base,
     caml_parse_digit:caml_parse_digit,
     caml_int_of_string:caml_int_of_string,
     caml_mul:caml_mul,
     caml_div:caml_div,
     caml_mod:caml_mod,
     caml_bswap16:caml_bswap16,
     caml_int32_bswap:caml_int32_bswap,
     caml_int64_bswap:caml_int64_bswap,
     caml_int64_offset:caml_int64_offset,
     MlInt64:MlInt64,
     caml_int64_ult:caml_int64_ult,
     caml_int64_compare:caml_int64_compare,
     caml_int64_neg:caml_int64_neg,
     caml_int64_add:caml_int64_add,
     caml_int64_sub:caml_int64_sub,
     caml_int64_mul:caml_int64_mul,
     caml_int64_is_zero:caml_int64_is_zero,
     caml_int64_is_negative:caml_int64_is_negative,
     caml_int64_and:caml_int64_and,
     caml_int64_or:caml_int64_or,
     caml_int64_xor:caml_int64_xor,
     caml_int64_shift_left:caml_int64_shift_left,
     caml_int64_shift_right_unsigned:caml_int64_shift_right_unsigned,
     caml_int64_shift_right:caml_int64_shift_right,
     caml_int64_div:caml_int64_div,
     caml_int64_mod:caml_int64_mod,
     caml_int64_of_int32:caml_int64_of_int32,
     caml_int64_to_int32:caml_int64_to_int32,
     caml_int64_to_float:caml_int64_to_float,
     caml_int64_of_float:caml_int64_of_float,
     caml_int64_format:caml_int64_format,
     caml_int64_of_string:caml_int64_of_string,
     caml_int64_create_lo_mi_hi:caml_int64_create_lo_mi_hi,
     caml_int64_create_lo_hi:caml_int64_create_lo_hi,
     caml_int64_lo32:caml_int64_lo32,
     caml_int64_hi32:caml_int64_hi32,
     caml_int64_of_bytes:caml_int64_of_bytes,
     caml_int64_to_bytes:caml_int64_to_bytes,
     caml_int64_hash:caml_int64_hash,
     jsoo_floor_log2:jsoo_floor_log2,
     caml_int64_bits_of_float:caml_int64_bits_of_float,
     caml_int32_bits_of_float:caml_int32_bits_of_float,
     caml_hexstring_of_float:caml_hexstring_of_float,
     caml_int64_float_of_bits:caml_int64_float_of_bits,
     caml_nextafter_float:caml_nextafter_float,
     caml_trunc_float:caml_trunc_float,
     caml_int32_float_of_bits:caml_int32_float_of_bits,
     caml_classify_float:caml_classify_float,
     caml_modf_float:caml_modf_float,
     caml_ldexp_float:caml_ldexp_float,
     caml_frexp_float:caml_frexp_float,
     caml_float_compare:caml_float_compare,
     caml_copysign_float:caml_copysign_float,
     caml_signbit_float:caml_signbit_float,
     caml_expm1_float:caml_expm1_float,
     caml_exp2_float:caml_exp2_float,
     caml_log1p_float:caml_log1p_float,
     caml_log2_float:caml_log2_float,
     caml_hypot_float:caml_hypot_float,
     caml_log10_float:caml_log10_float,
     caml_cosh_float:caml_cosh_float,
     caml_acosh_float:caml_acosh_float,
     caml_sinh_float:caml_sinh_float,
     caml_asinh_float:caml_asinh_float,
     caml_tanh_float:caml_tanh_float,
     caml_atanh_float:caml_atanh_float,
     caml_round_float:caml_round_float,
     caml_cbrt_float:caml_cbrt_float,
     caml_erf_float:caml_erf_float,
     caml_erfc_float:caml_erfc_float,
     caml_fma_float:caml_fma_float,
     caml_format_float:caml_format_float,
     caml_float_of_string:caml_float_of_string,
     caml_hash_mix_int:caml_hash_mix_int,
     caml_hash_mix_final:caml_hash_mix_final,
     caml_hash_mix_float:caml_hash_mix_float,
     caml_hash_mix_int64:caml_hash_mix_int64,
     caml_hash_mix_jsbytes:caml_hash_mix_jsbytes,
     caml_hash_mix_bytes_arr:caml_hash_mix_bytes_arr,
     caml_hash_mix_bytes:caml_hash_mix_bytes,
     caml_hash_mix_string:caml_hash_mix_string,
     caml_hash:caml_hash,
     caml_string_hash:caml_string_hash,
     caml_gr_state:caml_gr_state,
     caml_gr_state_get:caml_gr_state_get,
     caml_gr_state_set:caml_gr_state_set,
     caml_gr_open_graph:caml_gr_open_graph,
     caml_gr_state_init:caml_gr_state_init,
     caml_gr_state_create:caml_gr_state_create,
     caml_gr_doc_of_state:caml_gr_doc_of_state,
     caml_gr_close_graph:caml_gr_close_graph,
     caml_gr_set_window_title:caml_gr_set_window_title,
     caml_gr_resize_window:caml_gr_resize_window,
     caml_gr_clear_graph:caml_gr_clear_graph,
     caml_gr_size_x:caml_gr_size_x,
     caml_gr_size_y:caml_gr_size_y,
     caml_gr_set_color:caml_gr_set_color,
     caml_gr_plot:caml_gr_plot,
     caml_gr_point_color:caml_gr_point_color,
     caml_gr_moveto:caml_gr_moveto,
     caml_gr_current_x:caml_gr_current_x,
     caml_gr_current_y:caml_gr_current_y,
     caml_gr_lineto:caml_gr_lineto,
     caml_gr_draw_rect:caml_gr_draw_rect,
     caml_gr_arc_aux:caml_gr_arc_aux,
     caml_gr_draw_arc:caml_gr_draw_arc,
     caml_gr_set_line_width:caml_gr_set_line_width,
     caml_gr_fill_rect:caml_gr_fill_rect,
     caml_gr_fill_poly:caml_gr_fill_poly,
     caml_gr_fill_arc:caml_gr_fill_arc,
     caml_gr_draw_str:caml_gr_draw_str,
     caml_gr_draw_char:caml_gr_draw_char,
     caml_gr_draw_string:caml_gr_draw_string,
     caml_gr_set_font:caml_gr_set_font,
     caml_gr_set_text_size:caml_gr_set_text_size,
     caml_gr_text_size:caml_gr_text_size,
     caml_gr_make_image:caml_gr_make_image,
     caml_gr_dump_image:caml_gr_dump_image,
     caml_gr_draw_image:caml_gr_draw_image,
     caml_gr_create_image:caml_gr_create_image,
     caml_gr_blit_image:caml_gr_blit_image,
     caml_gr_sigio_handler:caml_gr_sigio_handler,
     caml_gr_sigio_signal:caml_gr_sigio_signal,
     caml_gr_wait_event:caml_gr_wait_event,
     caml_gr_synchronize:caml_gr_synchronize,
     caml_gr_remember_mode:caml_gr_remember_mode,
     caml_gr_display_mode:caml_gr_display_mode,
     caml_gr_window_id:caml_gr_window_id,
     caml_gr_open_subwindow:caml_gr_open_subwindow,
     caml_gr_close_subwindow:caml_gr_close_subwindow,
     caml_gc_minor:caml_gc_minor,
     caml_gc_major:caml_gc_major,
     caml_gc_full_major:caml_gc_full_major,
     caml_gc_compaction:caml_gc_compaction,
     caml_gc_counters:caml_gc_counters,
     caml_gc_quick_stat:caml_gc_quick_stat,
     caml_gc_stat:caml_gc_stat,
     caml_gc_set:caml_gc_set,
     caml_gc_get:caml_gc_get,
     caml_memprof_set:caml_memprof_set,
     caml_final_register:caml_final_register,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_release:caml_final_release,
     caml_memprof_start:caml_memprof_start,
     caml_memprof_stop:caml_memprof_stop,
     caml_eventlog_resume:caml_eventlog_resume,
     caml_eventlog_pause:caml_eventlog_pause,
     caml_gc_huge_fallback_count:caml_gc_huge_fallback_count,
     caml_gc_major_slice:caml_gc_major_slice,
     caml_gc_minor_words:caml_gc_minor_words,
     caml_get_minor_free:caml_get_minor_free,
     caml_get_major_bucket:caml_get_major_bucket,
     caml_get_major_credit:caml_get_major_credit,
     fs_node_supported:fs_node_supported,
     MlNodeDevice:MlNodeDevice,
     MlNodeFd:MlNodeFd,
     caml_sys_open_for_node:caml_sys_open_for_node,
     MlFakeDevice:MlFakeDevice,
     MlFakeFile:MlFakeFile,
     MlFakeFd_out:MlFakeFd_out,
     MlFakeFd:MlFakeFd,
     caml_trailing_slash:caml_trailing_slash,
     caml_current_dir:caml_current_dir,
     caml_get_root:caml_get_root,
     caml_root:caml_root,
     MlFile:MlFile,
     path_is_absolute:path_is_absolute,
     caml_make_path:caml_make_path,
     jsoo_mount_point:jsoo_mount_point,
     caml_list_mount_point:caml_list_mount_point,
     resolve_fs_device:resolve_fs_device,
     caml_mount_autoload:caml_mount_autoload,
     caml_unmount:caml_unmount,
     caml_sys_getcwd:caml_sys_getcwd,
     caml_sys_chdir:caml_sys_chdir,
     caml_raise_no_such_file:caml_raise_no_such_file,
     caml_raise_not_a_dir:caml_raise_not_a_dir,
     caml_sys_file_exists:caml_sys_file_exists,
     caml_sys_read_directory:caml_sys_read_directory,
     caml_sys_remove:caml_sys_remove,
     caml_sys_is_directory:caml_sys_is_directory,
     caml_sys_rename:caml_sys_rename,
     caml_sys_mkdir:caml_sys_mkdir,
     caml_sys_rmdir:caml_sys_rmdir,
     caml_ba_map_file:caml_ba_map_file,
     caml_ba_map_file_bytecode:caml_ba_map_file_bytecode,
     jsoo_create_file_extern:jsoo_create_file_extern,
     caml_fs_init:caml_fs_init,
     caml_create_file:caml_create_file,
     jsoo_create_file:jsoo_create_file,
     caml_read_file_content:caml_read_file_content,
     caml_parse_format:caml_parse_format,
     caml_finish_formatting:caml_finish_formatting,
     caml_raise_constant:caml_raise_constant,
     caml_return_exn_constant:caml_return_exn_constant,
     caml_raise_with_arg:caml_raise_with_arg,
     caml_raise_with_args:caml_raise_with_args,
     caml_raise_with_string:caml_raise_with_string,
     caml_failwith:caml_failwith,
     caml_invalid_argument:caml_invalid_argument,
     caml_raise_end_of_file:caml_raise_end_of_file,
     caml_raise_zero_divide:caml_raise_zero_divide,
     caml_raise_not_found:caml_raise_not_found,
     caml_array_bound_error:caml_array_bound_error,
     caml_compare_val_tag:caml_compare_val_tag,
     caml_compare_val_get_custom:caml_compare_val_get_custom,
     caml_compare_val_number_custom:caml_compare_val_number_custom,
     caml_compare_val:caml_compare_val,
     caml_compare:caml_compare,
     caml_int_compare:caml_int_compare,
     caml_equal:caml_equal,
     caml_notequal:caml_notequal,
     caml_greaterequal:caml_greaterequal,
     caml_greaterthan:caml_greaterthan,
     caml_lessequal:caml_lessequal,
     caml_lessthan:caml_lessthan,
     caml_blit_bigstring_to_bigstring:caml_blit_bigstring_to_bigstring,
     caml_blit_bigstring_to_string:caml_blit_bigstring_to_string,
     caml_blit_string_to_bigstring:caml_blit_string_to_bigstring,
     caml_hash_mix_bigstring:caml_hash_mix_bigstring,
     bigstring_to_array_buffer:bigstring_to_array_buffer,
     bigstring_to_typed_array:bigstring_to_typed_array,
     bigstring_of_array_buffer:bigstring_of_array_buffer,
     bigstring_of_typed_array:bigstring_of_typed_array,
     caml_bigstring_memcmp:caml_bigstring_memcmp,
     caml_bigstring_blit_ba_to_ba:caml_bigstring_blit_ba_to_ba,
     caml_bigstring_blit_string_to_ba:caml_bigstring_blit_string_to_ba,
     caml_bigstring_blit_bytes_to_ba:caml_bigstring_blit_bytes_to_ba,
     caml_bigstring_blit_ba_to_bytes:caml_bigstring_blit_ba_to_bytes,
     caml_ba_init:caml_ba_init,
     caml_ba_get_size:caml_ba_get_size,
     caml_ba_get_size_per_element:caml_ba_get_size_per_element,
     caml_ba_create_buffer:caml_ba_create_buffer,
     caml_ba_custom_name:caml_ba_custom_name,
     Ml_Bigarray:Ml_Bigarray,
     Ml_Bigarray_c_1_1:Ml_Bigarray_c_1_1,
     caml_ba_compare:caml_ba_compare,
     caml_ba_create_unsafe:caml_ba_create_unsafe,
     caml_ba_create:caml_ba_create,
     caml_ba_change_layout:caml_ba_change_layout,
     caml_ba_kind:caml_ba_kind,
     caml_ba_layout:caml_ba_layout,
     caml_ba_num_dims:caml_ba_num_dims,
     caml_ba_dim:caml_ba_dim,
     caml_ba_dim_1:caml_ba_dim_1,
     caml_ba_dim_2:caml_ba_dim_2,
     caml_ba_dim_3:caml_ba_dim_3,
     caml_ba_get_generic:caml_ba_get_generic,
     caml_ba_uint8_get16:caml_ba_uint8_get16,
     caml_ba_uint8_get32:caml_ba_uint8_get32,
     caml_ba_uint8_get64:caml_ba_uint8_get64,
     caml_ba_get_1:caml_ba_get_1,
     caml_ba_get_2:caml_ba_get_2,
     caml_ba_get_3:caml_ba_get_3,
     caml_ba_set_generic:caml_ba_set_generic,
     caml_ba_uint8_set16:caml_ba_uint8_set16,
     caml_ba_uint8_set32:caml_ba_uint8_set32,
     caml_ba_uint8_set64:caml_ba_uint8_set64,
     caml_ba_set_1:caml_ba_set_1,
     caml_ba_set_2:caml_ba_set_2,
     caml_ba_set_3:caml_ba_set_3,
     caml_ba_fill:caml_ba_fill,
     caml_ba_blit:caml_ba_blit,
     caml_ba_sub:caml_ba_sub,
     caml_ba_slice:caml_ba_slice,
     caml_ba_reshape:caml_ba_reshape,
     caml_ba_serialize:caml_ba_serialize,
     caml_ba_deserialize:caml_ba_deserialize,
     caml_ba_create_from:caml_ba_create_from,
     caml_ba_hash:caml_ba_hash,
     caml_ba_to_typed_array:caml_ba_to_typed_array,
     caml_ba_kind_of_typed_array:caml_ba_kind_of_typed_array,
     caml_ba_from_typed_array:caml_ba_from_typed_array,
     caml_ml_debug_info_status:caml_ml_debug_info_status,
     caml_backtrace_status:caml_backtrace_status,
     caml_get_exception_backtrace:caml_get_exception_backtrace,
     caml_get_exception_raw_backtrace:caml_get_exception_raw_backtrace,
     caml_record_backtrace:caml_record_backtrace,
     caml_convert_raw_backtrace:caml_convert_raw_backtrace,
     caml_raw_backtrace_length:caml_raw_backtrace_length,
     caml_raw_backtrace_next_slot:caml_raw_backtrace_next_slot,
     caml_raw_backtrace_slot:caml_raw_backtrace_slot,
     caml_restore_raw_backtrace:caml_restore_raw_backtrace,
     caml_get_current_callstack:caml_get_current_callstack,
     caml_convert_raw_backtrace_slot:caml_convert_raw_backtrace_slot,
     caml_array_sub:caml_array_sub,
     caml_array_append:caml_array_append,
     caml_array_concat:caml_array_concat,
     caml_array_blit:caml_array_blit,
     caml_floatarray_blit:caml_floatarray_blit,
     caml_array_set:caml_array_set,
     caml_array_get:caml_array_get,
     caml_array_fill:caml_array_fill,
     caml_check_bound:caml_check_bound,
     caml_make_vect:caml_make_vect,
     caml_make_float_vect:caml_make_float_vect,
     caml_floatarray_create:caml_floatarray_create};
    caml_fs_init();
    caml_register_global
     (0,[248,caml_string_of_jsbytes("Out_of_memory"),-1],"Out_of_memory");
    caml_register_global
     (1,[248,caml_string_of_jsbytes("Sys_error"),-2],"Sys_error");
    caml_register_global
     (2,[248,caml_string_of_jsbytes("Failure"),-3],"Failure");
    caml_register_global
     (3,
      [248,caml_string_of_jsbytes("Invalid_argument"),-4],
      "Invalid_argument");
    caml_register_global
     (4,[248,caml_string_of_jsbytes("End_of_file"),-5],"End_of_file");
    caml_register_global
     (5,
      [248,caml_string_of_jsbytes("Division_by_zero"),-6],
      "Division_by_zero");
    caml_register_global
     (6,[248,caml_string_of_jsbytes("Not_found"),-7],"Not_found");
    caml_register_global
     (7,[248,caml_string_of_jsbytes("Match_failure"),-8],"Match_failure");
    caml_register_global
     (8,[248,caml_string_of_jsbytes("Stack_overflow"),-9],"Stack_overflow");
    caml_register_global
     (9,[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],"Sys_blocked_io");
    caml_register_global
     (10,[248,caml_string_of_jsbytes("Assert_failure"),-11],"Assert_failure");
    caml_register_global
     (11,
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
      "Undefined_recursive_module");
    return}
  (globalThis));


//# 1 "../.js/default/stdlib/stdlib.cma.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_alloc_stack=runtime.caml_alloc_stack,
     caml_array_concat=runtime.caml_array_concat,
     caml_array_get=runtime.caml_array_get,
     caml_array_set=runtime.caml_array_set,
     caml_array_sub=runtime.caml_array_sub,
     caml_atomic_cas=runtime.caml_atomic_cas,
     caml_atomic_exchange=runtime.caml_atomic_exchange,
     caml_atomic_fetch_add=runtime.caml_atomic_fetch_add,
     caml_atomic_load=runtime.caml_atomic_load,
     caml_ba_blit=runtime.caml_ba_blit,
     caml_ba_change_layout=runtime.caml_ba_change_layout,
     caml_ba_create=runtime.caml_ba_create,
     caml_ba_dim_1=runtime.caml_ba_dim_1,
     caml_ba_dim_2=runtime.caml_ba_dim_2,
     caml_ba_kind=runtime.caml_ba_kind,
     caml_ba_num_dims=runtime.caml_ba_num_dims,
     caml_ba_reshape=runtime.caml_ba_reshape,
     caml_ba_set_1=runtime.caml_ba_set_1,
     caml_ba_set_2=runtime.caml_ba_set_2,
     caml_ba_set_3=runtime.caml_ba_set_3,
     caml_ba_set_generic=runtime.caml_ba_set_generic,
     caml_ba_slice=runtime.caml_ba_slice,
     caml_blit_bytes=runtime.caml_blit_bytes,
     caml_blit_string=runtime.caml_blit_string,
     caml_bswap16=runtime.caml_bswap16,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_get16=runtime.caml_bytes_get16,
     caml_bytes_get32=runtime.caml_bytes_get32,
     caml_bytes_get64=runtime.caml_bytes_get64,
     caml_bytes_of_string=runtime.caml_bytes_of_string,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_bytes_set16=runtime.caml_bytes_set16,
     caml_bytes_set32=runtime.caml_bytes_set32,
     caml_bytes_set64=runtime.caml_bytes_set64,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_continuation_use_noexc=runtime.caml_continuation_use_noexc,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_div=runtime.caml_div,
     caml_domain_dls_set=runtime.caml_domain_dls_set,
     caml_ephe_blit_key=runtime.caml_ephe_blit_key,
     caml_ephe_check_key=runtime.caml_ephe_check_key,
     caml_ephe_get_key=runtime.caml_ephe_get_key,
     caml_ephe_get_key_copy=runtime.caml_ephe_get_key_copy,
     caml_ephe_set_key=runtime.caml_ephe_set_key,
     caml_ephe_unset_key=runtime.caml_ephe_unset_key,
     caml_equal=runtime.caml_equal,
     caml_fill_bytes=runtime.caml_fill_bytes,
     caml_float_compare=runtime.caml_float_compare,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_floatarray_blit=runtime.caml_floatarray_blit,
     caml_floatarray_create=runtime.caml_floatarray_create,
     caml_format_float=runtime.caml_format_float,
     caml_format_int=runtime.caml_format_int,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_get_exception_raw_backtra=runtime.caml_get_exception_raw_backtrace,
     caml_get_public_method=runtime.caml_get_public_method,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_hash=runtime.caml_hash,
     caml_input_value=runtime.caml_input_value,
     caml_int32_bswap=runtime.caml_int32_bswap,
     caml_int64_add=runtime.caml_int64_add,
     caml_int64_bswap=runtime.caml_int64_bswap,
     caml_int64_compare=runtime.caml_int64_compare,
     caml_int64_float_of_bits=runtime.caml_int64_float_of_bits,
     caml_int64_format=runtime.caml_int64_format,
     caml_int64_mul=runtime.caml_int64_mul,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_of_string=runtime.caml_int64_of_string,
     caml_int64_shift_right_unsigne=runtime.caml_int64_shift_right_unsigned,
     caml_int64_sub=runtime.caml_int64_sub,
     caml_int64_to_int32=runtime.caml_int64_to_int32,
     caml_int_compare=runtime.caml_int_compare,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_lazy_update_to_forward=runtime.caml_lazy_update_to_forward,
     caml_lessequal=runtime.caml_lessequal,
     caml_lessthan=runtime.caml_lessthan,
     caml_lxm_next=runtime.caml_lxm_next,
     caml_make_vect=runtime.caml_make_vect,
     caml_marshal_data_size=runtime.caml_marshal_data_size,
     caml_md5_string=runtime.caml_md5_string,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_channel_size=runtime.caml_ml_channel_size,
     caml_ml_channel_size_64=runtime.caml_ml_channel_size_64,
     caml_ml_close_channel=runtime.caml_ml_close_channel,
     caml_ml_condition_broadcast=runtime.caml_ml_condition_broadcast,
     caml_ml_condition_new=runtime.caml_ml_condition_new,
     caml_ml_condition_signal=runtime.caml_ml_condition_signal,
     caml_ml_condition_wait=runtime.caml_ml_condition_wait,
     caml_ml_domain_id=runtime.caml_ml_domain_id,
     caml_ml_flush=runtime.caml_ml_flush,
     caml_ml_input=runtime.caml_ml_input,
     caml_ml_input_char=runtime.caml_ml_input_char,
     caml_ml_mutex_lock=runtime.caml_ml_mutex_lock,
     caml_ml_mutex_new=runtime.caml_ml_mutex_new,
     caml_ml_mutex_unlock=runtime.caml_ml_mutex_unlock,
     caml_ml_open_descriptor_in=runtime.caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out=runtime.caml_ml_open_descriptor_out,
     caml_ml_output=runtime.caml_ml_output,
     caml_ml_output_bytes=runtime.caml_ml_output_bytes,
     caml_ml_output_char=runtime.caml_ml_output_char,
     caml_ml_pos_in=runtime.caml_ml_pos_in,
     caml_ml_set_binary_mode=runtime.caml_ml_set_binary_mode,
     caml_ml_set_channel_name=runtime.caml_ml_set_channel_name,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_mul=runtime.caml_mul,
     caml_nextafter_float=runtime.caml_nextafter_float,
     caml_notequal=runtime.caml_notequal,
     caml_obj_block=runtime.caml_obj_block,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_output_value=runtime.caml_output_value,
     caml_register_global=runtime.caml_register_global,
     caml_register_named_value=runtime.caml_register_named_value,
     caml_restore_raw_backtrace=runtime.caml_restore_raw_backtrace,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_signbit_float=runtime.caml_signbit_float,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_hash=runtime.caml_string_hash,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_bytes=runtime.caml_string_of_bytes,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_unsafe_get=runtime.caml_string_unsafe_get,
     caml_sys_argv=runtime.caml_sys_argv,
     caml_sys_getenv=runtime.caml_sys_getenv,
     caml_sys_open=runtime.caml_sys_open,
     caml_sys_random_seed=runtime.caml_sys_random_seed,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception,
     jsoo_effect_not_supported=runtime.jsoo_effect_not_supported;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$0=caml_string_of_jsbytes("%,"),
     cst_really_input=caml_string_of_jsbytes("really_input"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_output_substring=caml_string_of_jsbytes("output_substring"),
     cst_output=caml_string_of_jsbytes("output"),
     cst_12g=caml_string_of_jsbytes("%.12g"),
     cst=caml_string_of_jsbytes("."),
     cst_false$1=caml_string_of_jsbytes("false"),
     cst_true$1=caml_string_of_jsbytes("true"),
     cst_false$0=caml_string_of_jsbytes("false"),
     cst_true$0=caml_string_of_jsbytes("true"),
     cst_bool_of_string=caml_string_of_jsbytes("bool_of_string"),
     cst_true=caml_string_of_jsbytes("true"),
     cst_false=caml_string_of_jsbytes("false"),
     cst_char_of_int=caml_string_of_jsbytes("char_of_int"),
     cst_Stdlib_Exit=caml_string_of_jsbytes("Stdlib.Exit"),
     cst_Stdlib_Sys_Break=caml_string_of_jsbytes("Stdlib.Sys.Break"),
     ocaml_version=caml_string_of_jsbytes("5.0.0~beta2"),
     ocaml_release=[0,5,0,0,[0,[0,1,caml_string_of_jsbytes("beta2")]]],
     cst_Obj_Ephemeron_blit_key=
      caml_string_of_jsbytes("Obj.Ephemeron.blit_key"),
     cst_Obj_Ephemeron_check_key=
      caml_string_of_jsbytes("Obj.Ephemeron.check_key"),
     cst_Obj_Ephemeron_unset_key=
      caml_string_of_jsbytes("Obj.Ephemeron.unset_key"),
     cst_Obj_Ephemeron_set_key=caml_string_of_jsbytes("Obj.Ephemeron.set_key"),
     cst_Obj_Ephemeron_get_key_copy=
      caml_string_of_jsbytes("Obj.Ephemeron.get_key_copy"),
     cst_Obj_Ephemeron_get_key=caml_string_of_jsbytes("Obj.Ephemeron.get_key"),
     cst_Obj_Ephemeron_create=caml_string_of_jsbytes("Obj.Ephemeron.create"),
     cst_Obj_extension_constructor$0=
      caml_string_of_jsbytes("Obj.extension_constructor"),
     cst_Obj_extension_constructor=
      caml_string_of_jsbytes("Obj.extension_constructor"),
     cst_CamlinternalLazy_Undefined=
      caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
     cst_Seq_drop=caml_string_of_jsbytes("Seq.drop"),
     cst_Seq_take=caml_string_of_jsbytes("Seq.take"),
     cst_Seq_init=caml_string_of_jsbytes("Seq.init"),
     cst_Stdlib_Seq_Forced_twice=
      caml_string_of_jsbytes("Stdlib.Seq.Forced_twice"),
     cst_option_is_None=caml_string_of_jsbytes("option is None"),
     cst_result_is_Ok=caml_string_of_jsbytes("result is Ok _"),
     cst_result_is_Error=caml_string_of_jsbytes("result is Error _"),
     cst_true$2=caml_string_of_jsbytes("true"),
     cst_false$2=caml_string_of_jsbytes("false"),
     cst$1=caml_string_of_jsbytes("\\\\"),
     cst$2=caml_string_of_jsbytes("\\'"),
     cst_b=caml_string_of_jsbytes("\\b"),
     cst_t=caml_string_of_jsbytes("\\t"),
     cst_n=caml_string_of_jsbytes("\\n"),
     cst_r=caml_string_of_jsbytes("\\r"),
     cst_Char_chr=caml_string_of_jsbytes("Char.chr"),
     cst_is_not_a_latin1_character=
      caml_string_of_jsbytes(" is not a latin1 character"),
     cst_04X=caml_string_of_jsbytes("%04X"),
     cst_U=caml_string_of_jsbytes("U+"),
     cst_is_not_an_Unicode_scalar_v=
      caml_string_of_jsbytes(" is not an Unicode scalar value"),
     cst_X=caml_string_of_jsbytes("%X"),
     err_no_pred=caml_string_of_jsbytes("U+0000 has no predecessor"),
     err_no_succ=caml_string_of_jsbytes("U+10FFFF has no successor"),
     cst_List_map2=caml_string_of_jsbytes("List.map2"),
     cst_List_iter2=caml_string_of_jsbytes("List.iter2"),
     cst_List_fold_left2=caml_string_of_jsbytes("List.fold_left2"),
     cst_List_fold_right2=caml_string_of_jsbytes("List.fold_right2"),
     cst_List_for_all2=caml_string_of_jsbytes("List.for_all2"),
     cst_List_exists2=caml_string_of_jsbytes("List.exists2"),
     cst_List_combine=caml_string_of_jsbytes("List.combine"),
     cst_List_rev_map2=caml_string_of_jsbytes("List.rev_map2"),
     cst_List_init=caml_string_of_jsbytes("List.init"),
     cst_List_nth$0=caml_string_of_jsbytes("List.nth"),
     cst_nth=caml_string_of_jsbytes("nth"),
     cst_List_nth=caml_string_of_jsbytes("List.nth"),
     cst_tl=caml_string_of_jsbytes("tl"),
     cst_hd=caml_string_of_jsbytes("hd"),
     cst_index_out_of_bounds$2=caml_string_of_jsbytes("index out of bounds"),
     cst_index_out_of_bounds$1=caml_string_of_jsbytes("index out of bounds"),
     cst_index_out_of_bounds$0=caml_string_of_jsbytes("index out of bounds"),
     cst_index_out_of_bounds=caml_string_of_jsbytes("index out of bounds"),
     cst_Bytes_of_seq_cannot_grow_b=
      caml_string_of_jsbytes("Bytes.of_seq: cannot grow bytes"),
     cst_String_rcontains_from_Byte=
      caml_string_of_jsbytes("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes=
      caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Byt=
      caml_string_of_jsbytes("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_r=
      caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Byte=
      caml_string_of_jsbytes("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_in=
      caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     cst_Bytes_concat=caml_string_of_jsbytes("Bytes.concat"),
     cst_String_blit_Bytes_blit_str=
      caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     cst_Bytes_blit=caml_string_of_jsbytes("Bytes.blit"),
     cst_String_fill_Bytes_fill=
      caml_string_of_jsbytes("String.fill / Bytes.fill"),
     cst_Bytes_extend=caml_string_of_jsbytes("Bytes.extend"),
     cst_String_sub_Bytes_sub=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     cst_String_rcontains_from_Byte$0=
      caml_string_of_jsbytes("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes$0=
      caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Byt$0=
      caml_string_of_jsbytes("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_r$0=
      caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Byte$0=
      caml_string_of_jsbytes("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_in$0=
      caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     cst$4=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_String_concat=caml_string_of_jsbytes("String.concat"),
     empty$1=caml_string_of_jsbytes(""),
     cst$5=caml_string_of_jsbytes("()"),
     cst_Marshal_from_bytes=caml_string_of_jsbytes("Marshal.from_bytes"),
     cst_Marshal_from_bytes$0=caml_string_of_jsbytes("Marshal.from_bytes"),
     cst_Marshal_data_size=caml_string_of_jsbytes("Marshal.data_size"),
     cst_Marshal_to_buffer_substrin=
      caml_string_of_jsbytes("Marshal.to_buffer: substring out of bounds"),
     cst_Array_combine=caml_string_of_jsbytes("Array.combine"),
     cst_Array_exists2=caml_string_of_jsbytes("Array.exists2"),
     cst_Array_for_all2=caml_string_of_jsbytes("Array.for_all2"),
     cst_Array_map2_arrays_must_hav=
      caml_string_of_jsbytes("Array.map2: arrays must have the same length"),
     cst_Array_iter2_arrays_must_ha=
      caml_string_of_jsbytes("Array.iter2: arrays must have the same length"),
     cst_Array_blit=caml_string_of_jsbytes("Array.blit"),
     cst_Array_fill=caml_string_of_jsbytes("Array.fill"),
     cst_Array_sub=caml_string_of_jsbytes("Array.sub"),
     cst_Array_init=caml_string_of_jsbytes("Array.init"),
     cst_Stdlib_Array_Bottom=caml_string_of_jsbytes("Stdlib.Array.Bottom"),
     cst_Float_Array_map2_arrays_mu=
      caml_string_of_jsbytes
       ("Float.Array.map2: arrays must have the same length"),
     cst_Float_Array_iter2_arrays_m=
      caml_string_of_jsbytes
       ("Float.Array.iter2: arrays must have the same length"),
     cst_Float_array_blit=caml_string_of_jsbytes("Float.array.blit"),
     cst_Float_array_blit$0=caml_string_of_jsbytes("Float.array.blit"),
     cst_Float_Array_fill=caml_string_of_jsbytes("Float.Array.fill"),
     cst_Float_Array_sub=caml_string_of_jsbytes("Float.Array.sub"),
     cst_Float_Array_concat=caml_string_of_jsbytes("Float.Array.concat"),
     cst_Float_Array_init=caml_string_of_jsbytes("Float.Array.init"),
     cst_Stdlib_Float_Array_Bottom=
      caml_string_of_jsbytes("Stdlib.Float.Array.Bottom"),
     cst_d=caml_string_of_jsbytes("%d"),
     cst_d$0=caml_string_of_jsbytes("%d"),
     zero$2=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     one$2=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     minus_one$2=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     min_int$2=runtime.caml_int64_create_lo_mi_hi(0,0,32768),
     max_int$2=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,32767),
     cst_d$1=caml_string_of_jsbytes("%d"),
     cst_Lexing_lex_refill_cannot_g=
      caml_string_of_jsbytes("Lexing.lex_refill: cannot grow buffer"),
     dummy_pos=[0,caml_string_of_jsbytes(""),0,0,-1],
     zero_pos=[0,caml_string_of_jsbytes(""),1,0,0],
     cst_syntax_error=caml_string_of_jsbytes("syntax error"),
     cst_Stdlib_Parsing_YYexit=caml_string_of_jsbytes("Stdlib.Parsing.YYexit"),
     cst_Stdlib_Parsing_Parse_error=
      caml_string_of_jsbytes("Stdlib.Parsing.Parse_error"),
     cst_Set_remove_min_elt=caml_string_of_jsbytes("Set.remove_min_elt"),
     cst_Set_bal=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$0=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$1=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$2=caml_string_of_jsbytes("Set.bal"),
     cst_Map_remove_min_elt=caml_string_of_jsbytes("Map.remove_min_elt"),
     cst_Map_bal=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$0=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$1=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$2=caml_string_of_jsbytes("Map.bal"),
     cst_Stdlib_Stack_Empty=caml_string_of_jsbytes("Stdlib.Stack.Empty"),
     cst_Stdlib_Queue_Empty=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     cst_Buffer_truncate=caml_string_of_jsbytes("Buffer.truncate"),
     cst_Buffer_add_channel=caml_string_of_jsbytes("Buffer.add_channel"),
     cst_Buffer_add_substring_add_s=
      caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
     cst_Buffer_add_cannot_grow_buf=
      caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     cst_Buffer_nth=caml_string_of_jsbytes("Buffer.nth"),
     cst_Buffer_blit=caml_string_of_jsbytes("Buffer.blit"),
     cst_Buffer_sub=caml_string_of_jsbytes("Buffer.sub"),
     cst_Semaphore_Counting_release=
      caml_string_of_jsbytes("Semaphore.Counting.release: overflow"),
     cst_Semaphore_Counting_init_wr=
      caml_string_of_jsbytes("Semaphore.Counting.init: wrong initial value"),
     cst_internal_error_Am_I_alread=
      caml_string_of_jsbytes("internal error: Am I already finished?"),
     cst_first_domain_already_spawn=
      caml_string_of_jsbytes("first domain already spawned"),
     cst_c=caml_string_of_jsbytes("%c"),
     cst_s=caml_string_of_jsbytes("%s"),
     cst_i=caml_string_of_jsbytes("%i"),
     cst_li=caml_string_of_jsbytes("%li"),
     cst_ni=caml_string_of_jsbytes("%ni"),
     cst_Li=caml_string_of_jsbytes("%Li"),
     cst_f=caml_string_of_jsbytes("%f"),
     cst_B=caml_string_of_jsbytes("%B"),
     cst$16=caml_string_of_jsbytes("%{"),
     cst$17=caml_string_of_jsbytes("%}"),
     cst$18=caml_string_of_jsbytes("%("),
     cst$19=caml_string_of_jsbytes("%)"),
     cst_a=caml_string_of_jsbytes("%a"),
     cst_t$0=caml_string_of_jsbytes("%t"),
     cst$20=caml_string_of_jsbytes("%?"),
     cst_r$0=caml_string_of_jsbytes("%r"),
     cst_r$1=caml_string_of_jsbytes("%_r"),
     cst_u$0=caml_string_of_jsbytes("%u"),
     cst_Printf_bad_conversion=
      caml_string_of_jsbytes("Printf: bad conversion %["),
     cst_Printf_bad_conversion$0=
      caml_string_of_jsbytes("Printf: bad conversion %_"),
     cst$25=caml_string_of_jsbytes("@{"),
     cst$26=caml_string_of_jsbytes("@["),
     cst$27=caml_string_of_jsbytes("@{"),
     cst$28=caml_string_of_jsbytes("@["),
     cst$29=caml_string_of_jsbytes("@{"),
     cst$30=caml_string_of_jsbytes("@["),
     cst_0=caml_string_of_jsbytes("0"),
     cst_padding=caml_string_of_jsbytes("padding"),
     cst_precision=caml_string_of_jsbytes("precision"),
     cst$35=caml_string_of_jsbytes("'*'"),
     cst$33=caml_string_of_jsbytes("'-'"),
     cst_0$2=caml_string_of_jsbytes("'0'"),
     cst$34=caml_string_of_jsbytes("'*'"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst_0$1=caml_string_of_jsbytes("0"),
     cst_precision$0=caml_string_of_jsbytes("precision"),
     cst_precision$1=caml_string_of_jsbytes("precision"),
     cst$36=caml_string_of_jsbytes("'+'"),
     cst$37=caml_string_of_jsbytes("'#'"),
     cst$38=caml_string_of_jsbytes("' '"),
     cst_padding$0=caml_string_of_jsbytes("`padding'"),
     cst_precision$2=caml_string_of_jsbytes("`precision'"),
     cst$39=caml_string_of_jsbytes("'+'"),
     cst$40=caml_string_of_jsbytes("'_'"),
     sub_format=[0,0,caml_string_of_jsbytes("")],
     formatting_lit=[0,caml_string_of_jsbytes("@;"),1,0],
     cst_digit=caml_string_of_jsbytes("digit"),
     cst_character=caml_string_of_jsbytes("character ')'"),
     cst_character$0=caml_string_of_jsbytes("character '}'"),
     cst$44=caml_string_of_jsbytes("'#'"),
     cst$41=caml_string_of_jsbytes("'+'"),
     cst$42=caml_string_of_jsbytes("'+'"),
     cst$43=caml_string_of_jsbytes("' '"),
     cst$45=caml_string_of_jsbytes("'+'"),
     cst_non_zero_widths_are_unsupp=
      caml_string_of_jsbytes
       ("non-zero widths are unsupported for %c conversions"),
     cst_unexpected_end_of_format=
      caml_string_of_jsbytes("unexpected end of format"),
     cst$31=caml_string_of_jsbytes(""),
     cst$32=caml_string_of_jsbytes(""),
     cst_b$0=caml_string_of_jsbytes("b"),
     cst_h=caml_string_of_jsbytes("h"),
     cst_hov=caml_string_of_jsbytes("hov"),
     cst_hv=caml_string_of_jsbytes("hv"),
     cst_v=caml_string_of_jsbytes("v"),
     cst_nan=caml_string_of_jsbytes("nan"),
     cst_neg_infinity=caml_string_of_jsbytes("neg_infinity"),
     cst_infinity=caml_string_of_jsbytes("infinity"),
     cst$24=caml_string_of_jsbytes("."),
     cst_nd$0=caml_string_of_jsbytes("%+nd"),
     cst_nd$1=caml_string_of_jsbytes("% nd"),
     cst_ni$1=caml_string_of_jsbytes("%+ni"),
     cst_ni$2=caml_string_of_jsbytes("% ni"),
     cst_nx=caml_string_of_jsbytes("%nx"),
     cst_nx$0=caml_string_of_jsbytes("%#nx"),
     cst_nX=caml_string_of_jsbytes("%nX"),
     cst_nX$0=caml_string_of_jsbytes("%#nX"),
     cst_no=caml_string_of_jsbytes("%no"),
     cst_no$0=caml_string_of_jsbytes("%#no"),
     cst_nd=caml_string_of_jsbytes("%nd"),
     cst_ni$0=caml_string_of_jsbytes("%ni"),
     cst_nu=caml_string_of_jsbytes("%nu"),
     cst_ld$0=caml_string_of_jsbytes("%+ld"),
     cst_ld$1=caml_string_of_jsbytes("% ld"),
     cst_li$1=caml_string_of_jsbytes("%+li"),
     cst_li$2=caml_string_of_jsbytes("% li"),
     cst_lx=caml_string_of_jsbytes("%lx"),
     cst_lx$0=caml_string_of_jsbytes("%#lx"),
     cst_lX=caml_string_of_jsbytes("%lX"),
     cst_lX$0=caml_string_of_jsbytes("%#lX"),
     cst_lo=caml_string_of_jsbytes("%lo"),
     cst_lo$0=caml_string_of_jsbytes("%#lo"),
     cst_ld=caml_string_of_jsbytes("%ld"),
     cst_li$0=caml_string_of_jsbytes("%li"),
     cst_lu=caml_string_of_jsbytes("%lu"),
     cst_Ld$0=caml_string_of_jsbytes("%+Ld"),
     cst_Ld$1=caml_string_of_jsbytes("% Ld"),
     cst_Li$1=caml_string_of_jsbytes("%+Li"),
     cst_Li$2=caml_string_of_jsbytes("% Li"),
     cst_Lx=caml_string_of_jsbytes("%Lx"),
     cst_Lx$0=caml_string_of_jsbytes("%#Lx"),
     cst_LX=caml_string_of_jsbytes("%LX"),
     cst_LX$0=caml_string_of_jsbytes("%#LX"),
     cst_Lo=caml_string_of_jsbytes("%Lo"),
     cst_Lo$0=caml_string_of_jsbytes("%#Lo"),
     cst_Ld=caml_string_of_jsbytes("%Ld"),
     cst_Li$0=caml_string_of_jsbytes("%Li"),
     cst_Lu=caml_string_of_jsbytes("%Lu"),
     cst_d$3=caml_string_of_jsbytes("%+d"),
     cst_d$4=caml_string_of_jsbytes("% d"),
     cst_i$1=caml_string_of_jsbytes("%+i"),
     cst_i$2=caml_string_of_jsbytes("% i"),
     cst_x=caml_string_of_jsbytes("%x"),
     cst_x$0=caml_string_of_jsbytes("%#x"),
     cst_X$0=caml_string_of_jsbytes("%X"),
     cst_X$1=caml_string_of_jsbytes("%#X"),
     cst_o=caml_string_of_jsbytes("%o"),
     cst_o$0=caml_string_of_jsbytes("%#o"),
     cst_d$2=caml_string_of_jsbytes("%d"),
     cst_i$0=caml_string_of_jsbytes("%i"),
     cst_u=caml_string_of_jsbytes("%u"),
     cst$21=caml_string_of_jsbytes("%!"),
     cst$22=caml_string_of_jsbytes("@{"),
     cst$23=caml_string_of_jsbytes("@["),
     cst_0c=caml_string_of_jsbytes("0c"),
     cst$15=caml_string_of_jsbytes("%%"),
     cst$7=caml_string_of_jsbytes("@]"),
     cst$8=caml_string_of_jsbytes("@}"),
     cst$9=caml_string_of_jsbytes("@?"),
     cst$10=caml_string_of_jsbytes("@\n"),
     cst$11=caml_string_of_jsbytes("@."),
     cst$12=caml_string_of_jsbytes("@@"),
     cst$13=caml_string_of_jsbytes("@%"),
     cst$14=caml_string_of_jsbytes("@"),
     cst$6=caml_string_of_jsbytes(".*"),
     cst_CamlinternalFormat_Type_mi=
      caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     cst$53=caml_string_of_jsbytes(""),
     cst$54=caml_string_of_jsbytes("\n"),
     cst_a_boolean=caml_string_of_jsbytes("a boolean"),
     cst_an_integer=caml_string_of_jsbytes("an integer"),
     cst_an_integer$0=caml_string_of_jsbytes("an integer"),
     cst_a_float=caml_string_of_jsbytes("a float"),
     cst_a_float$0=caml_string_of_jsbytes("a float"),
     cst$50=caml_string_of_jsbytes(""),
     cst$51=caml_string_of_jsbytes(" "),
     cst$52=caml_string_of_jsbytes(""),
     cst_one_of=caml_string_of_jsbytes("one of: "),
     cst_Arg_Expand_is_is_only_allo=
      caml_string_of_jsbytes
       ("Arg.Expand is is only allowed with Arg.parse_and_expand_argv_dynamic"),
     cst_no_argument=caml_string_of_jsbytes("no argument"),
     cst$49=caml_string_of_jsbytes("(?)"),
     cst_help$3=caml_string_of_jsbytes("--help"),
     cst_help$4=caml_string_of_jsbytes("-help"),
     cst_help$2=caml_string_of_jsbytes("-help"),
     cst_Display_this_list_of_optio=
      caml_string_of_jsbytes(" Display this list of options"),
     cst_help=caml_string_of_jsbytes("-help"),
     cst_help$1=caml_string_of_jsbytes("--help"),
     cst_Display_this_list_of_optio$0=
      caml_string_of_jsbytes(" Display this list of options"),
     cst_help$0=caml_string_of_jsbytes("--help"),
     cst$46=caml_string_of_jsbytes("}"),
     cst$47=caml_string_of_jsbytes("|"),
     cst$48=caml_string_of_jsbytes("{"),
     cst_none=caml_string_of_jsbytes("<none>"),
     cst_Stdlib_Arg_Bad=caml_string_of_jsbytes("Stdlib.Arg.Bad"),
     cst_Stdlib_Arg_Help=caml_string_of_jsbytes("Stdlib.Arg.Help"),
     cst_Stdlib_Arg_Stop=caml_string_of_jsbytes("Stdlib.Arg.Stop"),
     cst$56=caml_string_of_jsbytes(""),
     cst_Fatal_error_out_of_memory_=
      caml_string_of_jsbytes
       ("Fatal error: out of memory in uncaught exception handler"),
     cst$60=caml_string_of_jsbytes(""),
     cst_Program_not_linked_with_g_=
      caml_string_of_jsbytes
       ("(Program not linked with -g, cannot print stack backtrace)\n"),
     cst_Raised_at=caml_string_of_jsbytes("Raised at"),
     cst_Re_raised_at=caml_string_of_jsbytes("Re-raised at"),
     cst_Raised_by_primitive_operat=
      caml_string_of_jsbytes("Raised by primitive operation at"),
     cst_Called_from=caml_string_of_jsbytes("Called from"),
     cst_inlined=caml_string_of_jsbytes(" (inlined)"),
     cst$59=caml_string_of_jsbytes(""),
     partial=[4,0,0,0,[12,45,[4,0,0,0,0]]],
     cst_Out_of_memory=caml_string_of_jsbytes("Out of memory"),
     cst_Stack_overflow=caml_string_of_jsbytes("Stack overflow"),
     cst_Pattern_matching_failed=
      caml_string_of_jsbytes("Pattern matching failed"),
     cst_Assertion_failed=caml_string_of_jsbytes("Assertion failed"),
     cst_Undefined_recursive_module=
      caml_string_of_jsbytes("Undefined recursive module"),
     cst$57=caml_string_of_jsbytes(""),
     cst$58=caml_string_of_jsbytes(""),
     cst$55=caml_string_of_jsbytes("_"),
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     cst_Fun_Finally_raised=caml_string_of_jsbytes("Fun.Finally_raised: "),
     cst_Stdlib_Fun_Finally_raised=
      caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     cst_Digest_from_hex$0=caml_string_of_jsbytes("Digest.from_hex"),
     cst_Digest_from_hex=caml_string_of_jsbytes("Digest.from_hex"),
     cst_Digest_to_hex=caml_string_of_jsbytes("Digest.to_hex"),
     cst_Digest_substring=caml_string_of_jsbytes("Digest.substring"),
     cst_Bigarray_array3_of_genarra=
      caml_string_of_jsbytes("Bigarray.array3_of_genarray"),
     cst_Bigarray_array2_of_genarra=
      caml_string_of_jsbytes("Bigarray.array2_of_genarray"),
     cst_Bigarray_array1_of_genarra=
      caml_string_of_jsbytes("Bigarray.array1_of_genarray"),
     cst_Bigarray_array0_of_genarra=
      caml_string_of_jsbytes("Bigarray.array0_of_genarray"),
     cst_Bigarray_Array3_of_array_n=
      caml_string_of_jsbytes("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array3_of_array_n$0=
      caml_string_of_jsbytes("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array2_of_array_n=
      caml_string_of_jsbytes("Bigarray.Array2.of_array: non-rectangular data"),
     cst_Random_int64=caml_string_of_jsbytes("Random.int64"),
     cst_Random_int32=caml_string_of_jsbytes("Random.int32"),
     cst_Random_full_int=caml_string_of_jsbytes("Random.full_int"),
     cst_Random_int=caml_string_of_jsbytes("Random.int"),
     cst_Hashtbl_unsupported_hash_t=
      caml_string_of_jsbytes("Hashtbl: unsupported hash table format"),
     cst_OCAMLRUNPARAM=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     cst_CAMLRUNPARAM=caml_string_of_jsbytes("CAMLRUNPARAM"),
     cst$61=caml_string_of_jsbytes(""),
     cst_Weak_Make_hash_bucket_cann=
      caml_string_of_jsbytes("Weak.Make: hash bucket cannot grow more"),
     cst_Weak_fill=caml_string_of_jsbytes("Weak.fill"),
     cst_Weak_blit=caml_string_of_jsbytes("Weak.blit"),
     cst_Weak_check=caml_string_of_jsbytes("Weak.check"),
     cst_Weak_get_copy=caml_string_of_jsbytes("Weak.get_copy"),
     cst_Weak_get=caml_string_of_jsbytes("Weak.get"),
     cst_Weak_set=caml_string_of_jsbytes("Weak.set"),
     cst_Weak_create=caml_string_of_jsbytes("Weak.create"),
     cst$78=caml_string_of_jsbytes("."),
     cst$75=caml_string_of_jsbytes(">"),
     cst$76=caml_string_of_jsbytes("<\/"),
     cst$77=caml_string_of_jsbytes(""),
     cst$72=caml_string_of_jsbytes(">"),
     cst$73=caml_string_of_jsbytes("<"),
     cst$74=caml_string_of_jsbytes(""),
     cst$71=caml_string_of_jsbytes("\n"),
     cst_Format_pp_set_geometry=
      caml_string_of_jsbytes("Format.pp_set_geometry: "),
     cst$67=caml_string_of_jsbytes(""),
     cst$68=caml_string_of_jsbytes(""),
     cst$69=caml_string_of_jsbytes(""),
     cst$70=caml_string_of_jsbytes(""),
     cst$63=caml_string_of_jsbytes(""),
     cst$64=caml_string_of_jsbytes(""),
     cst$65=caml_string_of_jsbytes(""),
     cst$66=caml_string_of_jsbytes(""),
     cst$62=caml_string_of_jsbytes(""),
     cst_Stdlib_Format_String_tag=
      caml_string_of_jsbytes("Stdlib.Format.String_tag"),
     cst_end_of_input_not_found=
      caml_string_of_jsbytes("end of input not found"),
     cst_scanf_bad_conversion_a=
      caml_string_of_jsbytes('scanf: bad conversion "%a"'),
     cst_scanf_bad_conversion_t=
      caml_string_of_jsbytes('scanf: bad conversion "%t"'),
     cst_scanf_missing_reader=caml_string_of_jsbytes("scanf: missing reader"),
     cst_scanf_bad_conversion_custo=
      caml_string_of_jsbytes('scanf: bad conversion "%?" (custom converter)'),
     cst_scanf_bad_conversion=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$0=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$1=
      caml_string_of_jsbytes('scanf: bad conversion "%-"'),
     cst_scanf_bad_conversion$2=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst$84=caml_string_of_jsbytes('"'),
     cst$85=caml_string_of_jsbytes('"'),
     cst$82=caml_string_of_jsbytes('"'),
     cst$83=caml_string_of_jsbytes('"'),
     cst$81=caml_string_of_jsbytes('"'),
     cst_in_format=caml_string_of_jsbytes(' in format "'),
     cst_an=caml_string_of_jsbytes("an"),
     cst_x$1=caml_string_of_jsbytes("x"),
     cst_nfinity=caml_string_of_jsbytes("nfinity"),
     cst_digits=caml_string_of_jsbytes("digits"),
     cst_decimal_digits=caml_string_of_jsbytes("decimal digits"),
     cst_0b=caml_string_of_jsbytes("0b"),
     cst_0o=caml_string_of_jsbytes("0o"),
     cst_0u=caml_string_of_jsbytes("0u"),
     cst_0x=caml_string_of_jsbytes("0x"),
     cst_false$3=caml_string_of_jsbytes("false"),
     cst_true$3=caml_string_of_jsbytes("true"),
     cst_not_a_valid_float_in_hexad=
      caml_string_of_jsbytes("not a valid float in hexadecimal notation"),
     cst_no_dot_or_exponent_part_fo=
      caml_string_of_jsbytes("no dot or exponent part found in float token"),
     cst$80=caml_string_of_jsbytes("-"),
     cst_unnamed_function=caml_string_of_jsbytes("unnamed function"),
     cst_unnamed_character_string=
      caml_string_of_jsbytes("unnamed character string"),
     cst_unnamed_Stdlib_input_chann=
      caml_string_of_jsbytes("unnamed Stdlib input channel"),
     cst$79=caml_string_of_jsbytes("-"),
     cst_Stdlib_Scanf_Scan_failure=
      caml_string_of_jsbytes("Stdlib.Scanf.Scan_failure"),
     cst_binary=caml_string_of_jsbytes("binary"),
     cst_octal=caml_string_of_jsbytes("octal"),
     cst_hexadecimal=caml_string_of_jsbytes("hexadecimal"),
     cst_a_Char=caml_string_of_jsbytes("a Char"),
     cst_a_String=caml_string_of_jsbytes("a String"),
     cst$86=caml_string_of_jsbytes(""),
     cst_CamlinternalMod_update_mod=
      caml_string_of_jsbytes("CamlinternalMod.update_mod: not a module"),
     cst_CamlinternalMod_init_mod_n=
      caml_string_of_jsbytes("CamlinternalMod.init_mod: not a module"),
     cst_Filename_chop_extension=
      caml_string_of_jsbytes("Filename.chop_extension"),
     cst$114=caml_string_of_jsbytes(""),
     cst_Filename_chop_suffix=caml_string_of_jsbytes("Filename.chop_suffix"),
     cst$113=caml_string_of_jsbytes(""),
     cst_2_1$0=caml_string_of_jsbytes(" 2>&1"),
     cst_2$0=caml_string_of_jsbytes(" 2>"),
     cst$112=caml_string_of_jsbytes(""),
     cst$104=caml_string_of_jsbytes(" >"),
     cst$111=caml_string_of_jsbytes(""),
     cst$105=caml_string_of_jsbytes(" <"),
     cst$110=caml_string_of_jsbytes(""),
     cst$106=caml_string_of_jsbytes(" "),
     cst$107=caml_string_of_jsbytes(" "),
     cst$108=caml_string_of_jsbytes('"'),
     cst$109=caml_string_of_jsbytes(""),
     cst_Filename_quote_command_bad=
      caml_string_of_jsbytes("Filename.quote_command: bad file name "),
     cst$102=caml_string_of_jsbytes('"'),
     cst$103=caml_string_of_jsbytes('"'),
     cst$100=caml_string_of_jsbytes("./"),
     cst$99=caml_string_of_jsbytes(".\\"),
     cst$98=caml_string_of_jsbytes("../"),
     cst$97=caml_string_of_jsbytes("..\\"),
     cst_2_1=caml_string_of_jsbytes(" 2>&1"),
     cst_2=caml_string_of_jsbytes(" 2>"),
     cst$96=caml_string_of_jsbytes(""),
     cst$91=caml_string_of_jsbytes(" >"),
     cst$95=caml_string_of_jsbytes(""),
     cst$92=caml_string_of_jsbytes(" <"),
     cst$94=caml_string_of_jsbytes(""),
     cst$93=caml_string_of_jsbytes(" "),
     cst$90=caml_string_of_jsbytes("./"),
     cst$89=caml_string_of_jsbytes("../"),
     cst$88=caml_string_of_jsbytes(""),
     cst$87=caml_string_of_jsbytes(""),
     null$0=caml_string_of_jsbytes("/dev/null"),
     current_dir_name=caml_string_of_jsbytes("."),
     parent_dir_name=caml_string_of_jsbytes(".."),
     dir_sep=caml_string_of_jsbytes("/"),
     cst_TMPDIR=caml_string_of_jsbytes("TMPDIR"),
     cst_tmp=caml_string_of_jsbytes("/tmp"),
     quotequote=caml_string_of_jsbytes("'\\''"),
     null$1=caml_string_of_jsbytes("NUL"),
     current_dir_name$0=caml_string_of_jsbytes("."),
     parent_dir_name$0=caml_string_of_jsbytes(".."),
     dir_sep$0=caml_string_of_jsbytes("\\"),
     cst_TEMP=caml_string_of_jsbytes("TEMP"),
     cst$101=caml_string_of_jsbytes("."),
     null$2=caml_string_of_jsbytes("/dev/null"),
     current_dir_name$1=caml_string_of_jsbytes("."),
     parent_dir_name$1=caml_string_of_jsbytes(".."),
     dir_sep$1=caml_string_of_jsbytes("/"),
     cst_Cygwin=caml_string_of_jsbytes("Cygwin"),
     cst_Win32=caml_string_of_jsbytes("Win32"),
     zero$4=[254,0.,0.],
     one$4=[254,1.,0.],
     i=[254,0.,1.],
     cst_In_channel_input_all_chann=
      caml_string_of_jsbytes
       ("In_channel.input_all: channel content is larger than maximum string length"),
     cst_impossible=caml_string_of_jsbytes("impossible"),
     cst_Initial_setup=caml_string_of_jsbytes("Initial_setup__"),
     cst_E=caml_string_of_jsbytes("E"),
     cst_Stdlib_Effect_Unhandled=
      caml_string_of_jsbytes("Stdlib.Effect.Unhandled"),
     cst_Stdlib_Effect_Continuation=
      caml_string_of_jsbytes("Stdlib.Effect.Continuation_already_resumed"),
     cst_Stdlib_Effect_Should_not_s=
      caml_string_of_jsbytes("Stdlib.Effect.Should_not_see_this__"),
     cst_Effect_Unhandled=caml_string_of_jsbytes("Effect.Unhandled"),
     cst_Effect_Continuation_alread=
      caml_string_of_jsbytes("Effect.Continuation_already_resumed"),
     Invalid_argument=global_data.Invalid_argument,
     Failure=global_data.Failure,
     Match_failure=global_data.Match_failure,
     Assert_failure=global_data.Assert_failure,
     Not_found=global_data.Not_found,
     Out_of_memory=global_data.Out_of_memory,
     Stack_overflow=global_data.Stack_overflow,
     Sys_error=global_data.Sys_error,
     End_of_file=global_data.End_of_file,
     Division_by_zero=global_data.Division_by_zero,
     Sys_blocked_io=global_data.Sys_blocked_io,
     Undefined_recursive_module=global_data.Undefined_recursive_module,
     _l_=[0,0,[0,6,0]],
     _k_=[0,0,[0,7,0]],
     _j_=[0,1,[0,3,[0,4,[0,6,0]]]],
     _i_=[0,1,[0,3,[0,4,[0,7,0]]]],
     _g_=[0,1],
     _h_=[0,0],
     _a_=runtime.caml_int64_create_lo_mi_hi(0,0,32752),
     _b_=runtime.caml_int64_create_lo_mi_hi(0,0,65520),
     _c_=runtime.caml_int64_create_lo_mi_hi(1,0,32752),
     _d_=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,32751),
     _e_=runtime.caml_int64_create_lo_mi_hi(0,0,16),
     _f_=runtime.caml_int64_create_lo_mi_hi(0,0,15536),
     _n_=[0,caml_string_of_jsbytes("obj.ml"),97,4],
     _t_=[0,caml_string_of_jsbytes("seq.ml"),596,4],
     _z_=[0,caml_string_of_jsbytes("uchar.ml"),88,18],
     _y_=[0,caml_string_of_jsbytes("uchar.ml"),91,7],
     _x_=[0,caml_string_of_jsbytes("uchar.ml"),80,18],
     _w_=[0,caml_string_of_jsbytes("uchar.ml"),85,7],
     _C_=[0,0,0],
     _I_=[0,caml_string_of_jsbytes("bytes.ml"),820,20],
     _H_=[0,caml_string_of_jsbytes("bytes.ml"),831,9],
     _G_=[0,caml_string_of_jsbytes("bytes.ml"),766,20],
     _F_=[0,caml_string_of_jsbytes("bytes.ml"),777,9],
     _E_=[0,caml_string_of_jsbytes("bytes.ml"),654,20],
     _D_=[0,caml_string_of_jsbytes("bytes.ml"),679,9],
     _J_=[0,caml_string_of_jsbytes("array.ml"),319,4],
     _L_=[0,caml_string_of_jsbytes("float.ml"),395,6],
     _K_=[0,caml_string_of_jsbytes("float.ml"),222,14],
     _W_=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     _V_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _U_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _T_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _X_=[0,0,0,0],
     _Y_=[0,0,0],
     _Z_=[0,caml_string_of_jsbytes("set.ml"),570,18],
     ___=[0,0,0,0],
     _$_=[0,caml_string_of_jsbytes("map.ml"),400,10],
     _aa_=[0,0,0],
     _ab_=[0,caml_string_of_jsbytes("buffer.ml"),220,9],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _ap_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _ah_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _aq_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _ai_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _ar_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _aj_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _as_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _ak_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _at_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _al_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _an_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _ao_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _ag_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _am_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _av_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _aw_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _ax_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _ay_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _az_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1830,8],
     _a3_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _a2_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _aF_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", duplicate flag "),[1,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, duplicate flag %C")],
     _aG_=[0,1,0],
     _aH_=[0,0],
     _aI_=[1,0],
     _aJ_=[1,1],
     _aL_=[1,1],
     _aK_=[1,1],
     _aP_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", flag "),
            [1,
             [11,
              caml_string_of_jsbytes(" is only allowed after the '"),
              [12,
               37,
               [11,
                caml_string_of_jsbytes("', before padding and precision"),
                0]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
     _aM_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(', invalid conversion "'),
            [12,37,[0,[12,34,0]]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
     _aN_=[0,0],
     _aO_=[0,0],
     _aQ_=[0,[12,64,0]],
     _aR_=[0,caml_string_of_jsbytes("@ "),1,0],
     _aS_=[0,caml_string_of_jsbytes("@,"),0,0],
     _aT_=[2,60],
     _aU_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": '"),
          [12,
           37,
           [11,
            caml_string_of_jsbytes
             ("' alone is not accepted in character sets, use "),
            [12,
             37,
             [12,
              37,
              [11,
               caml_string_of_jsbytes(" instead at position "),
               [4,0,0,0,[12,46,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
     _aV_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": integer "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" is greater than the limit "),
            [4,0,0,0,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: integer %d is greater than the limit %d")],
     _aW_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2837,11],
     _aX_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(': unclosed sub-format, expected "'),
          [12,
           37,
           [0,
            [11,caml_string_of_jsbytes('" at character number '),[4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
     _aY_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2899,34],
     _aZ_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2935,28],
     _a0_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2957,11],
     _a1_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,
             0,
             [11,
              caml_string_of_jsbytes(" is incompatible with '"),
              [0,[11,caml_string_of_jsbytes("' in sub-format "),[3,0,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
     _aE_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,0,[11,caml_string_of_jsbytes(" expected, read "),[1,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s expected, read %C")],
     _aD_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", '"),
            [0,[11,caml_string_of_jsbytes("' without "),[2,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, '%c' without %s")],
     _aC_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", "),[2,0,0]]]]]],
       caml_string_of_jsbytes("invalid format %S: at character number %d, %s")],
     _aB_=
      [0,
       [11,caml_string_of_jsbytes("invalid box description "),[3,0,0]],
       caml_string_of_jsbytes("invalid box description %S")],
     _aA_=[0,0,4],
     _au_=[0,103],
     _ad_=[0,0,0],
     _bn_=[0,[2,0,[0,0]],caml_string_of_jsbytes("%s%c")],
     _bh_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bi_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bf_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bg_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bd_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _be_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a9_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": unknown option '"),
         [2,0,[11,caml_string_of_jsbytes("'.\n"),0]]]],
       caml_string_of_jsbytes("%s: unknown option '%s'.\n")],
     _ba_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": wrong argument '"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("'; option '"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("' expects "),
             [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]]]]]],
       caml_string_of_jsbytes
        ("%s: wrong argument '%s'; option '%s' expects %s.\n")],
     _bb_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": option '"),
         [2,0,[11,caml_string_of_jsbytes("' needs an argument.\n"),0]]]],
       caml_string_of_jsbytes("%s: option '%s' needs an argument.\n")],
     _bc_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": "),
         [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]],
       caml_string_of_jsbytes("%s: %s.\n")],
     _a__=[0,caml_string_of_jsbytes("-help")],
     _a$_=[0,caml_string_of_jsbytes("--help")],
     _a8_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a7_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _a6_=[0,caml_string_of_jsbytes("-help")],
     _a4_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[12,10,0]]]]],
       caml_string_of_jsbytes("  %s %s\n")],
     _a5_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[2,0,[12,10,0]]]]]],
       caml_string_of_jsbytes("  %s %s%s\n")],
     _bs_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bE_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bF_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Fatal error in uncaught exception handler: exception "),
        [2,0,[12,10,0]]],
       caml_string_of_jsbytes
        ("Fatal error in uncaught exception handler: exception %s\n")],
     _bD_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bB_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bz_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bA_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_string_of_jsbytes
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bx_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(' in file "'),
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11,
               caml_string_of_jsbytes(", line "),
               [4,0,0,0,[11,caml_string_of_jsbytes(", characters "),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ('%s %s in file "%s"%s, line %d, characters %d-%d')],
     _by_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _bw_=
      [0,
       [11,caml_string_of_jsbytes("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Uncaught exception: %s\n")],
     _bv_=
      [0,
       [11,caml_string_of_jsbytes("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Uncaught exception: %s\n")],
     _bt_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _bu_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _br_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bq_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bC_=
      [0,
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file not found)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file appears to be corrupt)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file has wrong magic number)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)")],
     _bM_=
      [0,
       [11,
        caml_string_of_jsbytes("minor_collections:      "),
        [4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("minor_collections:      %d\n")],
     _bN_=
      [0,
       [11,
        caml_string_of_jsbytes("major_collections:      "),
        [4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("major_collections:      %d\n")],
     _bO_=
      [0,
       [11,
        caml_string_of_jsbytes("compactions:            "),
        [4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("compactions:            %d\n")],
     _bP_=
      [0,
       [11,
        caml_string_of_jsbytes("forced_major_collections: "),
        [4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("forced_major_collections: %d\n")],
     _bQ_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bR_=[0,[8,[0,0,0],0,[0,0],0],caml_string_of_jsbytes("%.0f")],
     _bS_=
      [0,
       [11,
        caml_string_of_jsbytes("minor_words:    "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("minor_words:    %*.0f\n")],
     _bT_=
      [0,
       [11,
        caml_string_of_jsbytes("promoted_words: "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("promoted_words: %*.0f\n")],
     _bU_=
      [0,
       [11,
        caml_string_of_jsbytes("major_words:    "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("major_words:    %*.0f\n")],
     _bV_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bW_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bX_=
      [0,
       [11,caml_string_of_jsbytes("top_heap_words: "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("top_heap_words: %*d\n")],
     _bY_=
      [0,
       [11,caml_string_of_jsbytes("heap_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("heap_words:     %*d\n")],
     _bZ_=
      [0,
       [11,caml_string_of_jsbytes("live_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("live_words:     %*d\n")],
     _b0_=
      [0,
       [11,caml_string_of_jsbytes("free_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("free_words:     %*d\n")],
     _b1_=
      [0,
       [11,caml_string_of_jsbytes("largest_free:   "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("largest_free:   %*d\n")],
     _b2_=
      [0,
       [11,caml_string_of_jsbytes("fragments:      "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("fragments:      %*d\n")],
     _b3_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _b4_=
      [0,
       [11,caml_string_of_jsbytes("live_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("live_blocks: %d\n")],
     _b5_=
      [0,
       [11,caml_string_of_jsbytes("free_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("free_blocks: %d\n")],
     _b6_=
      [0,
       [11,caml_string_of_jsbytes("heap_chunks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("heap_chunks: %d\n")],
     _cm_=runtime.caml_int64_create_lo_mi_hi(14371852,15349651,22696),
     _cn_=runtime.caml_int64_create_lo_mi_hi(12230193,11438743,35013),
     _co_=runtime.caml_int64_create_lo_mi_hi(1424933,15549263,2083),
     _cp_=runtime.caml_int64_create_lo_mi_hi(9492471,4696708,43520),
     _ci_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _ck_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _cl_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _cj_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _cd_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _ce_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _ch_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _cf_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _cg_=runtime.caml_int64_create_lo_mi_hi(2,0,0),
     _cs_=[0,0],
     _cy_=[3,0,3],
     _cx_=[1,caml_string_of_jsbytes("max_indent < 2")],
     _cv_=[1,caml_string_of_jsbytes("margin <= max_indent")],
     _cw_=[0,0],
     _cu_=[0,caml_string_of_jsbytes("")],
     _ct_=[0,caml_string_of_jsbytes(""),0,caml_string_of_jsbytes("")],
     _cT_=[0,91],
     _cS_=[0,123],
     _cU_=[0,caml_string_of_jsbytes("scanf.ml"),1414,13],
     _cV_=[0,[3,0,[10,0]],caml_string_of_jsbytes("%S%!")],
     _cR_=[0,37,caml_string_of_jsbytes("")],
     _cQ_=
      [0,
       [11,
        caml_string_of_jsbytes("scanf: bad input at char number "),
        [4,3,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]],
       caml_string_of_jsbytes("scanf: bad input at char number %i: %s")],
     _cP_=
      [0,
       [11,
        caml_string_of_jsbytes("the character "),
        [1,[11,caml_string_of_jsbytes(" cannot start a boolean"),0]]],
       caml_string_of_jsbytes("the character %C cannot start a boolean")],
     _cO_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character hexadecimal encoding \\"),
        [0,[0,0]]],
       caml_string_of_jsbytes("bad character hexadecimal encoding \\%c%c")],
     _cN_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character decimal encoding \\"),
        [0,[0,[0,0]]]],
       caml_string_of_jsbytes("bad character decimal encoding \\%c%c%c")],
     _cM_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,
         [11,
          caml_string_of_jsbytes(" is not a valid "),
          [2,0,[11,caml_string_of_jsbytes(" digit"),0]]]]],
       caml_string_of_jsbytes("character %C is not a valid %s digit")],
     _cL_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,[11,caml_string_of_jsbytes(" is not a decimal digit"),0]]],
       caml_string_of_jsbytes("character %C is not a decimal digit")],
     _cK_=[0,caml_string_of_jsbytes("scanf.ml"),516,9],
     _cJ_=
      [0,
       [11,caml_string_of_jsbytes("invalid boolean '"),[2,0,[12,39,0]]],
       caml_string_of_jsbytes("invalid boolean '%s'")],
     _cI_=
      [0,
       [11,
        caml_string_of_jsbytes("looking for "),
        [1,[11,caml_string_of_jsbytes(", found "),[1,0]]]],
       caml_string_of_jsbytes("looking for %C, found %C")],
     _cH_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: premature end of file occurred before end of token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: premature end of file occurred before end of token")],
     _cG_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: the specified length was too short for token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: the specified length was too short for token")],
     _cF_=
      [0,
       [11,caml_string_of_jsbytes("illegal escape character "),[1,0]],
       caml_string_of_jsbytes("illegal escape character %C")],
     _c2_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),439,17],
     _c1_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),421,13],
     _c0_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),418,13],
     _cZ_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),415,13],
     _cY_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),412,13],
     _cX_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),409,13],
     _cW_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),281,50],
     _c3_=[0,caml_string_of_jsbytes("camlinternalMod.ml"),72,5],
     _c4_=[0,caml_string_of_jsbytes("camlinternalMod.ml"),81,2],
     _c7_=[0,0],
     _c6_=[0,0],
     _c5_=[0,0],
     _dq_=[0,7,0],
     _dp_=[0,1,[0,3,[0,5,0]]],
     _dm_=[0,[2,0,[4,6,[0,2,6],0,[2,0,0]]],caml_string_of_jsbytes("%s%06x%s")],
     _c9_=[0,caml_string_of_jsbytes('"'),0],
     _dr_=[254,0.,0.],
     _ds_=[0,0],
     _dt_=
      [0,
       [11,caml_string_of_jsbytes("Stdlib.Effect.Unhandled("),[2,0,[12,41,0]]],
       caml_string_of_jsbytes("Stdlib.Effect.Unhandled(%s)")];
    function erase_rel(param)
     {if(typeof param === "number")return 0;
      switch(param[0])
       {case 0:var rest=param[1];return [0,erase_rel(rest)];
        case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
        case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
        case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
        case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
        case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
        case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
        case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
        case 8:
         var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
        case 9:
         var rest$8=param[3],ty1=param[1];
         return [9,ty1,ty1,erase_rel(rest$8)];
        case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
        case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
        case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
        case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
        default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")return fmtty2;
      switch(fmtty1[0])
       {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
        case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
        case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
        case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
        case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
        case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
        case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
        case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
        case 8:
         var rest$7=fmtty1[2],ty=fmtty1[1];
         return [8,ty,concat_fmtty(rest$7,fmtty2)];
        case 9:
         var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
         return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
        case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
        case 11:
         var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
        case 12:
         var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
        case 13:
         var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
        default:var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")return fmt2;
      switch(fmt1[0])
       {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
        case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
        case 2:
         var rest$1=fmt1[2],pad=fmt1[1];
         return [2,pad,concat_fmt(rest$1,fmt2)];
        case 3:
         var rest$2=fmt1[2],pad$0=fmt1[1];
         return [3,pad$0,concat_fmt(rest$2,fmt2)];
        case 4:
         var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
         return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
        case 5:
         var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
         return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
        case 6:
         var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
         return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
        case 7:
         var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
         return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
        case 8:
         var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
         return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
        case 9:
         var rest$8=fmt1[2],pad$6=fmt1[1];
         return [9,pad$6,concat_fmt(rest$8,fmt2)];
        case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
        case 11:
         var rest$10=fmt1[2],str=fmt1[1];
         return [11,str,concat_fmt(rest$10,fmt2)];
        case 12:
         var rest$11=fmt1[2],chr=fmt1[1];
         return [12,chr,concat_fmt(rest$11,fmt2)];
        case 13:
         var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
         return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
        case 14:
         var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
         return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
        case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
        case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
        case 17:
         var rest$16=fmt1[2],fmting_lit=fmt1[1];
         return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
        case 18:
         var rest$17=fmt1[2],fmting_gen=fmt1[1];
         return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
        case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
        case 20:
         var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
         return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
        case 21:
         var rest$20=fmt1[2],counter=fmt1[1];
         return [21,counter,concat_fmt(rest$20,fmt2)];
        case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
        case 23:
         var rest$22=fmt1[2],ign=fmt1[1];
         return [23,ign,concat_fmt(rest$22,fmt2)];
        default:
         var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
         return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    var CamlinternalFormatBasics=[0,concat_fmtty,erase_rel,concat_fmt];
    caml_register_global
     (748,CamlinternalFormatBasics,"CamlinternalFormatBasics");
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=[248,cst_Stdlib_Exit,caml_fresh_oo_id(0)];
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function lnot(x){return x ^ -1}
    var
     infinity=caml_int64_float_of_bits(_a_),
     neg_infinity=caml_int64_float_of_bits(_b_),
     nan=caml_int64_float_of_bits(_c_),
     max_float=caml_int64_float_of_bits(_d_),
     min_float=caml_int64_float_of_bits(_e_),
     epsilon=caml_int64_float_of_bits(_f_),
     max_int=2147483647,
     min_int=-2147483648;
    function cat(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function char_of_int(n)
     {if(0 <= n && 255 >= n)return n;return invalid_arg(cst_char_of_int)}
    function string_of_bool(b){return b?cst_true:cst_false}
    function bool_of_string(param)
     {return caml_string_notequal(param,cst_false$0)
              ?caml_string_notequal(param,cst_true$0)
                ?invalid_arg(cst_bool_of_string)
                :1
              :0}
    function bool_of_string_opt(param)
     {return caml_string_notequal(param,cst_false$1)
              ?caml_string_notequal(param,cst_true$1)?0:_g_
              :_h_}
    function string_of_int(n){return caml_string_of_jsbytes("" + n)}
    function int_of_string_opt(s)
     {try
       {var _DB_=[0,caml_int_of_string(s)];return _DB_}
      catch(_DC_)
       {_DC_ = caml_wrap_exception(_DC_);
        if(_DC_[1] === Failure)return 0;
        throw _DC_}}
    function valid_float_lexem(s)
     {var l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return cat(s,cst);
        var match=caml_string_get(s,i),switch$0=0;
        if(48 <= match)
         {if(58 > match)switch$0 = 1}
        else
         if(45 === match)switch$0 = 1;
        if(! switch$0)return s;
        var i$0=i + 1 | 0,i=i$0}}
    function to_string(f)
     {return valid_float_lexem(caml_format_float(cst_12g,f))}
    function of_string_opt(s)
     {try
       {var _Dz_=[0,caml_float_of_string(s)];return _Dz_}
      catch(_DA_)
       {_DA_ = caml_wrap_exception(_DA_);
        if(_DA_[1] === Failure)return 0;
        throw _DA_}}
    function append(l1,l2)
     {if(! l1)return l2;var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}
    var
     stdin=caml_ml_open_descriptor_in(0),
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function open_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_out(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_text(name){return open_gen(_i_,438,name)}
    function open_bin(name){return open_gen(_j_,438,name)}
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(! param$0)return 0;
          var l=param$0[2],a=param$0[1];
          try
           {caml_ml_flush(a)}
          catch(_Dy_)
           {_Dy_ = caml_wrap_exception(_Dy_);
            if(_Dy_[1] !== Sys_error)throw _Dy_}
          var param$0=l}}
      return iter(runtime.caml_ml_out_channels_list(0))}
    function output_bytes(oc,s)
     {return caml_ml_output_bytes(oc,s,0,caml_ml_bytes_length(s))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function output(oc,s,ofs,len)
     {if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
       return caml_ml_output_bytes(oc,s,ofs,len);
      return invalid_arg(cst_output)}
    function output_substring(oc,s,ofs,len)
     {if(0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
       return caml_ml_output(oc,s,ofs,len);
      return invalid_arg(cst_output_substring)}
    function output_value(chan,v){return caml_output_value(chan,v,0)}
    function close(oc){caml_ml_flush(oc);return caml_ml_close_channel(oc)}
    function close_noerr(oc)
     {try {caml_ml_flush(oc)}catch(_Dx_){}
      try
       {var _Dv_=caml_ml_close_channel(oc);return _Dv_}
      catch(_Dw_){return 0}}
    function open_gen$0(mode,perm,name)
     {var c=caml_ml_open_descriptor_in(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_text$0(name){return open_gen$0(_k_,0,name)}
    function open_bin$0(name){return open_gen$0(_l_,0,name)}
    function input(ic,s,ofs,len)
     {if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
       return caml_ml_input(ic,s,ofs,len);
      return invalid_arg(cst_input)}
    function unsafe_really_input(ic,s,ofs,len)
     {var ofs$0=ofs,len$0=len;
      for(;;)
       {if(0 >= len$0)return 0;
        var r=caml_ml_input(ic,s,ofs$0,len$0);
        if(0 === r)throw End_of_file;
        var len$1=len$0 - r | 0,ofs$1=ofs$0 + r | 0,ofs$0=ofs$1,len$0=len$1}}
    function really_input(ic,s,ofs,len)
     {if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
       return unsafe_really_input(ic,s,ofs,len);
      return invalid_arg(cst_really_input)}
    function really_input_string(ic,len)
     {var s=caml_create_bytes(len);
      really_input(ic,s,0,len);
      return caml_string_of_bytes(s)}
    function input_line(chan)
     {function build_result(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         {if(! param$0)return buf;
          var tl=param$0[2],hd=param$0[1],len=caml_ml_bytes_length(hd);
          caml_blit_bytes(hd,0,buf,pos$0 - len | 0,len);
          var pos$1=pos$0 - len | 0,pos$0=pos$1,param$0=tl}}
      var accu=0,len=0;
      for(;;)
       {var n=runtime.caml_ml_input_scan_line(chan);
        if(0 === n)
         {if(! accu)throw End_of_file;
          var _Du_=build_result(caml_create_bytes(len),len,accu)}
        else
         {if(0 >= n)
           {var beg=caml_create_bytes(- n | 0);
            caml_ml_input(chan,beg,0,- n | 0);
            var len$1=len - n | 0,accu$0=[0,beg,accu],accu=accu$0,len=len$1;
            continue}
          var res=caml_create_bytes(n - 1 | 0);
          caml_ml_input(chan,res,0,n - 1 | 0);
          caml_ml_input_char(chan);
          if(accu)
           var
            len$0=(len + n | 0) - 1 | 0,
            _Du_=build_result(caml_create_bytes(len$0),len$0,[0,res,accu]);
          else
           var _Du_=res}
        return caml_string_of_bytes(_Du_)}}
    function close_noerr$0(ic)
     {try
       {var _Ds_=caml_ml_close_channel(ic);return _Ds_}
      catch(_Dt_){return 0}}
    function print_char(c){return caml_ml_output_char(stdout,c)}
    function print_string(s){return output_string(stdout,s)}
    function print_bytes(s){return output_bytes(stdout,s)}
    function print_int(i)
     {return output_string(stdout,caml_string_of_jsbytes("" + i))}
    function print_float(f){return output_string(stdout,to_string(f))}
    function print_endline(s)
     {output_string(stdout,s);
      caml_ml_output_char(stdout,10);
      return caml_ml_flush(stdout)}
    function print_newline(param)
     {caml_ml_output_char(stdout,10);return caml_ml_flush(stdout)}
    function prerr_char(c){return caml_ml_output_char(stderr,c)}
    function prerr_string(s){return output_string(stderr,s)}
    function prerr_bytes(s){return output_bytes(stderr,s)}
    function prerr_int(i)
     {return output_string(stderr,caml_string_of_jsbytes("" + i))}
    function prerr_float(f){return output_string(stderr,to_string(f))}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    function prerr_newline(param)
     {caml_ml_output_char(stderr,10);return caml_ml_flush(stderr)}
    function read_line(param){caml_ml_flush(stdout);return input_line(stdin)}
    function read_int(param){return caml_int_of_string(read_line(0))}
    function read_int_opt(param){return int_of_string_opt(read_line(0))}
    function read_float(param){return caml_float_of_string(read_line(0))}
    function read_float_opt(param){return of_string_opt(read_line(0))}
    function string_of_format(param){var str=param[2];return str}
    function symbol(param,_Dq_)
     {var
       str2=_Dq_[2],
       fmt2=_Dq_[1],
       str1=param[2],
       fmt1=param[1],
       _Dr_=cat(str1,cat(cst$0,str2));
      return [0,concat_fmt(fmt1,fmt2),_Dr_]}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {for(;;)
       {var
         f_yet_to_run=[0,1],
         old_exit=caml_atomic_load(exit_function),
         new_exit$0=
          function(f_yet_to_run,old_exit)
           {function new_exit(param)
             {if(caml_atomic_cas(f_yet_to_run,1,0))caml_call1(f,0);
              return caml_call1(old_exit,0)}
            return new_exit},
         new_exit=new_exit$0(f_yet_to_run,old_exit),
         success=caml_atomic_cas(exit_function,old_exit,new_exit),
         _Dp_=1 - success;
        if(_Dp_)continue;
        return _Dp_}}
    var do_domain_local_at_exit=[0,function(param){return 0}];
    function do_at_exit(param)
     {caml_call1(do_domain_local_at_exit[1],0);
      return caml_call1(caml_atomic_load(exit_function),0)}
    function exit(retcode)
     {do_at_exit(0);return runtime.caml_sys_exit(retcode)}
    caml_register_named_value
     (caml_string_of_jsbytes("Pervasives.do_at_exit"),do_at_exit);
    var
     _m_=
      [0,
       runtime.caml_ml_seek_out_64,
       runtime.caml_ml_pos_out_64,
       caml_ml_channel_size_64,
       runtime.caml_ml_seek_in_64,
       runtime.caml_ml_pos_in_64,
       caml_ml_channel_size_64],
     set_binary_mode=caml_ml_set_binary_mode,
     close$0=caml_ml_close_channel,
     set_binary_mode$0=caml_ml_set_binary_mode,
     output_byte=caml_ml_output_char,
     output_char=caml_ml_output_char,
     flush=caml_ml_flush,
     Stdlib=
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon,
       cat,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       to_string,
       of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_text,
       open_bin,
       open_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       runtime.caml_ml_output_int,
       output_value,
       runtime.caml_ml_seek_out,
       runtime.caml_ml_pos_out,
       caml_ml_channel_size,
       close,
       close_noerr,
       set_binary_mode$0,
       open_text$0,
       open_bin$0,
       open_gen$0,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       runtime.caml_ml_input_int,
       caml_input_value,
       runtime.caml_ml_seek_in,
       caml_ml_pos_in,
       caml_ml_channel_size,
       close$0,
       close_noerr$0,
       set_binary_mode,
       _m_,
       string_of_format,
       symbol,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit];
    caml_register_global(761,Stdlib,"Stdlib");
    function left(v){return [0,v]}
    function right(v){return [1,v]}
    function is_left(param){return 0 === param[0]?1:0}
    function is_right(param){return 0 === param[0]?0:1}
    function find_left(param)
     {if(0 !== param[0])return 0;var v=param[1];return [0,v]}
    function find_right(param)
     {if(0 === param[0])return 0;var v=param[1];return [0,v]}
    function map_left(f,e)
     {if(0 !== e[0])return e;var v=e[1];return [0,caml_call1(f,v)]}
    function map_right(f,e)
     {if(0 === e[0])return e;var v=e[1];return [1,caml_call1(f,v)]}
    function map(left,right,param)
     {if(0 === param[0]){var v=param[1];return [0,caml_call1(left,v)]}
      var v$0=param[1];
      return [1,caml_call1(right,v$0)]}
    function fold(left,right,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(left,v)}
      var v$0=param[1];
      return caml_call1(right,v$0)}
    function equal(left,right,e1,e2)
     {if(0 === e1[0])
       {var _Dn_=e1[1];
        if(0 === e2[0]){var v2=e2[1];return caml_call2(left,_Dn_,v2)}}
      else
       {var _Do_=e1[1];
        if(0 !== e2[0]){var v2$0=e2[1];return caml_call2(right,_Do_,v2$0)}}
      return 0}
    function compare(left,right,e1,e2)
     {if(0 === e1[0])
       {var _Dl_=e1[1];
        if(0 !== e2[0])return -1;
        var v2=e2[1];
        return caml_call2(left,_Dl_,v2)}
      var _Dm_=e1[1];
      if(0 === e2[0])return 1;
      var v2$0=e2[1];
      return caml_call2(right,_Dm_,v2$0)}
    var
     Stdlib_Either=
      [0,
       left,
       right,
       is_left,
       is_right,
       find_left,
       find_right,
       map_left,
       map_right,
       map,
       fold,
       fold,
       fold,
       equal,
       compare];
    caml_register_global(762,Stdlib_Either,"Stdlib__Either");
    var
     executable_name=runtime.caml_sys_executable_name(0),
     match=runtime.caml_sys_get_config(0),
     os_type=match[1],
     match$0=[0,caml_string_of_jsbytes("js_of_ocaml")],
     unix=runtime.caml_sys_const_ostype_unix(0),
     win32=runtime.caml_sys_const_ostype_win32(0),
     cygwin=runtime.caml_sys_const_ostype_cygwin(0),
     max_array_length=runtime.caml_sys_const_max_wosize(0),
     max_floatarray_length=max_array_length / 2 | 0,
     max_string_length=(4 * max_array_length | 0) - 1 | 0,
     big_endian=0,
     match$1=32,
     int_size=32;
    function getenv_opt(s)
     {try
       {var _Dj_=[0,caml_sys_getenv(s)];return _Dj_}
      catch(_Dk_)
       {_Dk_ = caml_wrap_exception(_Dk_);
        if(_Dk_ === Not_found)return 0;
        throw _Dk_}}
    var interactive=[0,0];
    function set_signal(sig_num,sig_beh){return 0}
    var
     Break=[248,cst_Stdlib_Sys_Break,caml_fresh_oo_id(0)],
     sigabrt=-1,
     sigalrm=-2,
     sigfpe=-3,
     sighup=-4,
     sigill=-5,
     sigint=-6,
     sigkill=-7,
     sigpipe=-8,
     sigquit=-9,
     sigsegv=-10,
     sigterm=-11,
     sigusr1=-12,
     sigusr2=-13,
     sigchld=-14,
     sigcont=-15,
     sigstop=-16,
     sigtstp=-17,
     sigttin=-18,
     sigttou=-19,
     sigvtalrm=-20,
     sigprof=-21,
     sigbus=-22,
     sigpoll=-23,
     sigsys=-24,
     sigtrap=-25,
     sigurg=-26,
     sigxcpu=-27,
     sigxfsz=-28;
    function catch_break(on){return on?0:0}
    var development_version=1;
    function Make(_Di_,_Dh_){return [0,1]}
    var
     Immediate64=[0,Make],
     Stdlib_Sys=
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       match$0,
       unix,
       win32,
       cygwin,
       match$1,
       int_size,
       big_endian,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       sigabrt,
       sigalrm,
       sigfpe,
       sighup,
       sigill,
       sigint,
       sigkill,
       sigpipe,
       sigquit,
       sigsegv,
       sigterm,
       sigusr1,
       sigusr2,
       sigchld,
       sigcont,
       sigstop,
       sigtstp,
       sigttin,
       sigttou,
       sigvtalrm,
       sigprof,
       sigbus,
       sigpoll,
       sigsys,
       sigtrap,
       sigurg,
       sigxcpu,
       sigxfsz,
       Break,
       catch_break,
       ocaml_version,
       development_version,
       ocaml_release,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
    caml_register_global(763,Stdlib_Sys,"Stdlib__Sys");
    function is_block(a){return 1 - (typeof a === "number"?1:0)}
    function double_field(x,i){return caml_array_get(x,i)}
    function set_double_field(x,i,v){return caml_array_set(x,i,v)}
    var
     first_non_constant_constructor=0,
     last_non_constant_constructor_=243,
     forcing_tag=244,
     cont_tag=245,
     lazy_tag=246,
     closure_tag=247,
     object_tag=248,
     infix_tag=249,
     forward_tag=250,
     no_scan_tag=251,
     abstract_tag=251,
     string_tag=252,
     double_tag=253,
     double_array_tag=254,
     custom_tag=255,
     int_tag=1000,
     out_of_heap_tag=1001,
     unaligned_tag=1002;
    function info(obj)
     {if(caml_obj_tag(obj) !== 247)throw [0,Assert_failure,_n_];
      var
       info=runtime.caml_obj_raw_field(obj,1),
       arity=info >> 24,
       start_env=info << 8 >>> 9 | 0;
      return [0,arity,start_env]}
    function of_val(x)
     {var switch$0=0;
      if(is_block(x) && caml_obj_tag(x) !== 248 && 1 <= x.length - 1)
       {var slot=x[1];switch$0 = 1}
      if(! switch$0)var slot=x;
      var switch$1=0;
      if(is_block(slot) && caml_obj_tag(slot) === 248)
       {var name=slot[1];switch$1 = 1}
      if(! switch$1)var name=invalid_arg(cst_Obj_extension_constructor$0);
      return caml_obj_tag(name) === 252
              ?slot
              :invalid_arg(cst_Obj_extension_constructor)}
    function name(slot){return slot[1]}
    function id(slot){return slot[2]}
    var
     Extension_constructor=[0,of_val,name,id],
     max_ephe_length=max_array_length - 2 | 0;
    function create(l)
     {var _Df_=0 <= l?1:0,_Dg_=_Df_?l <= max_ephe_length?1:0:_Df_;
      if(1 - _Dg_)invalid_arg(cst_Obj_Ephemeron_create);
      return runtime.caml_ephe_create(l)}
    function length(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset(e,o,msg)
     {var _Dc_=0 <= o?1:0,_Dd_=_Dc_?o < length(e)?1:0:_Dc_,_De_=1 - _Dd_;
      return _De_?invalid_arg(msg):_De_}
    function get_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_get_key);
      return caml_ephe_get_key(e,o)}
    function get_key_copy(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_get_key_copy);
      return caml_ephe_get_key_copy(e,o)}
    function set_key(e,o,x)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_set_key);
      return caml_ephe_set_key(e,o,x)}
    function unset_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_unset_key);
      return caml_ephe_unset_key(e,o)}
    function check_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_check_key);
      return caml_ephe_check_key(e,o)}
    function blit_key(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        (length(e1) - l | 0)
        >=
        o1
        &&
        0
        <=
        o2
        &&
        (length(e2) - l | 0)
        >=
        o2)
       {var _Da_=0 !== l?1:0,_Db_=_Da_?caml_ephe_blit_key(e1,o1,e2,o2,l):_Da_;
        return _Db_}
      return invalid_arg(cst_Obj_Ephemeron_blit_key)}
    var
     _o_=
      [0,
       create,
       length,
       get_key,
       get_key_copy,
       set_key,
       unset_key,
       check_key,
       blit_key,
       runtime.caml_ephe_get_data,
       runtime.caml_ephe_get_data_copy,
       runtime.caml_ephe_set_data,
       runtime.caml_ephe_unset_data,
       runtime.caml_ephe_check_data,
       runtime.caml_ephe_blit_data,
       max_ephe_length],
     Stdlib_Obj=
      [0,
       is_block,
       double_field,
       set_double_field,
       first_non_constant_constructor,
       last_non_constant_constructor_,
       forcing_tag,
       cont_tag,
       lazy_tag,
       closure_tag,
       object_tag,
       infix_tag,
       forward_tag,
       no_scan_tag,
       abstract_tag,
       string_tag,
       double_tag,
       double_array_tag,
       custom_tag,
       int_tag,
       out_of_heap_tag,
       unaligned_tag,
       [0,info],
       Extension_constructor,
       _o_];
    caml_register_global(764,Stdlib_Obj,"Stdlib__Obj");
    function set(r,x){caml_atomic_exchange(r,x);return 0}
    function incr(r){caml_atomic_fetch_add(r,1);return 0}
    function decr(r){caml_atomic_fetch_add(r,-1);return 0}
    var
     _p_=caml_atomic_fetch_add,
     _q_=caml_atomic_cas,
     _r_=caml_atomic_exchange,
     _s_=caml_atomic_load,
     Stdlib_Atomic=
      [0,function(_C$_){return [0,_C$_]},_s_,set,_r_,_q_,_p_,incr,decr];
    caml_register_global(765,Stdlib_Atomic,"Stdlib__Atomic");
    var Undefined=[248,cst_CamlinternalLazy_Undefined,caml_fresh_oo_id(0)];
    function do_force_block(b)
     {var closure=b[1];
      b[1] = 0;
      try
       {var result=caml_call1(closure,0);
        b[1] = result;
        caml_lazy_update_to_forward(b);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);
        b[1] = function(param){throw e};
        runtime.caml_lazy_reset_to_lazy(b);
        throw e}}
    function force_gen_lazy_block(only_val,blk)
     {var match=runtime.caml_lazy_update_to_forcing(blk);
      if(0 !== match)throw Undefined;
      if(! only_val)return do_force_block(blk);
      var closure=blk[1];
      blk[1] = 0;
      var result=caml_call1(closure,0);
      blk[1] = result;
      caml_lazy_update_to_forward(blk);
      return result}
    function force_lazy_block(blk){return force_gen_lazy_block(0,blk)}
    function force_gen(only_val,lzv)
     {var t=caml_obj_tag(lzv);
      if(t === 250)return lzv[1];
      if(t === 244)throw Undefined;
      return t !== 246?lzv:force_gen_lazy_block(only_val,lzv)}
    var CamlinternalLazy=[0,Undefined,force_lazy_block,force_gen];
    caml_register_global(766,CamlinternalLazy,"CamlinternalLazy");
    function force_val(l){return force_gen(1,l)}
    function to_lazy(f){var x=caml_obj_block(246,1);x[1] = f;return x}
    function from_val(v)
     {var t=caml_obj_tag(v);
      if(t !== 250 && t !== 246 && t !== 244 && t !== 253)return v;
      return runtime.caml_lazy_make_forward(v)}
    function is_val(l){return caml_obj_tag(l) !== 246?1:0}
    function map$0(f,x)
     {return [246,
              function(_C8_)
               {var _C9_=caml_obj_tag(x);
                if(250 === _C9_)
                 var _C__=x[1];
                else
                 {var switch$0=0;
                  if(246 === _C9_ || 244 === _C9_)
                   switch$0 = 1;
                  else
                   var _C__=x;
                  if(switch$0)var _C__=force_lazy_block(x)}
                return caml_call1(f,_C__)}]}
    function map_val(f,x)
     {if(! is_val(x))
       return [246,
               function(_C5_)
                {var _C6_=caml_obj_tag(x);
                 if(250 === _C6_)
                  var _C7_=x[1];
                 else
                  {var switch$0=0;
                   if(246 === _C6_ || 244 === _C6_)
                    switch$0 = 1;
                   else
                    var _C7_=x;
                   if(switch$0)var _C7_=force_lazy_block(x)}
                 return caml_call1(f,_C7_)}];
      var _C3_=caml_obj_tag(x);
      if(250 === _C3_)
       var _C4_=x[1];
      else
       {var switch$0=0;
        if(246 === _C3_ || 244 === _C3_)switch$0 = 1;else var _C4_=x;
        if(switch$0)var _C4_=force_lazy_block(x)}
      return from_val(caml_call1(f,_C4_))}
    var
     Stdlib_Lazy=
      [0,Undefined,map$0,is_val,from_val,map_val,to_lazy,force_val];
    caml_register_global(767,Stdlib_Lazy,"Stdlib__Lazy");
    function empty(param){return 0}
    function return$0(x,param){return [0,x,empty]}
    function cons(x,next,param){return [0,x,next]}
    function append$0(seq1,seq2,param)
     {var match=caml_call1(seq1,0);
      if(! match)return caml_call1(seq2,0);
      var next=match[2],x=match[1];
      return [0,x,function(_C2_){return append$0(next,seq2,_C2_)}]}
    function map$1(f,seq,param)
     {var match=caml_call1(seq,0);
      if(! match)return 0;
      var next=match[2],x=match[1];
      function _C0_(_C1_){return map$1(f,next,_C1_)}
      return [0,caml_call1(f,x),_C0_]}
    function filter_map(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(! match)return 0;
        var next=match[2],x=match[1],match$0=caml_call1(f,x);
        if(match$0)
         {var y=match$0[1];
          return [0,y,function(_CZ_){return filter_map(f,next,_CZ_)}]}
        var seq$0=next}}
    function filter(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(! match)return 0;
        var next=match[2],x=match[1];
        if(caml_call1(f,x))
         return [0,x,function(_CY_){return filter(f,next,_CY_)}];
        var seq$0=next}}
    function concat(seq,param)
     {var match=caml_call1(seq,0);
      if(! match)return 0;
      var next=match[2],x=match[1],_CW_=0;
      return append$0(x,function(_CX_){return concat(next,_CX_)},_CW_)}
    function flat_map(f,seq,param)
     {var match=caml_call1(seq,0);
      if(! match)return 0;
      var next=match[2],x=match[1],_CT_=0;
      function _CU_(_CV_){return flat_map(f,next,_CV_)}
      return append$0(caml_call1(f,x),_CU_,_CT_)}
    function fold_left(f,acc,seq)
     {var acc$0=acc,seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(! match)return acc$0;
        var
         next=match[2],
         x=match[1],
         acc$1=caml_call2(f,acc$0,x),
         acc$0=acc$1,
         seq$0=next}}
    function iter(f,seq)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(! match)return 0;
        var next=match[2],x=match[1];
        caml_call1(f,x);
        var seq$0=next}}
    function unfold(f,u,param)
     {var match=caml_call1(f,u);
      if(! match)return 0;
      var match$0=match[1],u$0=match$0[2],x=match$0[1];
      return [0,x,function(_CS_){return unfold(f,u$0,_CS_)}]}
    function is_empty(xs){var match=caml_call1(xs,0);return match?0:1}
    function uncons(xs)
     {var match=caml_call1(xs,0);
      if(! match)return 0;
      var xs$0=match[2],x=match[1];
      return [0,[0,x,xs$0]]}
    function length$0(xs$1)
     {var accu=0,xs=xs$1;
      for(;;)
       {var match=caml_call1(xs,0);
        if(! match)return accu;
        var xs$0=match[2],accu$0=accu + 1 | 0,accu=accu$0,xs=xs$0}}
    function iteri(f,xs$1)
     {var i=0,xs=xs$1;
      for(;;)
       {var match=caml_call1(xs,0);
        if(! match)return 0;
        var xs$0=match[2],x=match[1];
        caml_call2(f,i,x);
        var i$0=i + 1 | 0,i=i$0,xs=xs$0}}
    function fold_lefti(f,accu$1,xs$1)
     {var accu=accu$1,i=0,xs=xs$1;
      for(;;)
       {var match=caml_call1(xs,0);
        if(! match)return accu;
        var
         xs$0=match[2],
         x=match[1],
         accu$0=caml_call3(f,accu,i,x),
         i$0=i + 1 | 0,
         accu=accu$0,
         i=i$0,
         xs=xs$0}}
    function for_all(p,xs)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(! match)return 1;
        var xs$1=match[2],x=match[1],_CR_=caml_call1(p,x);
        if(! _CR_)return _CR_;
        var xs$0=xs$1}}
    function exists(p,xs)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(! match)return 0;
        var xs$1=match[2],x=match[1],_CQ_=caml_call1(p,x);
        if(_CQ_)return _CQ_;
        var xs$0=xs$1}}
    function find(p,xs)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(! match)return 0;
        var xs$1=match[2],x=match[1];
        if(caml_call1(p,x))return [0,x];
        var xs$0=xs$1}}
    function find_map(f,xs)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(! match)return 0;
        var xs$1=match[2],x=match[1],result=caml_call1(f,x);
        if(result)return result;
        var xs$0=xs$1}}
    function iter2(f,xs,ys)
     {var xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(! match)return 0;
        var xs$1=match[2],x=match[1],match$0=caml_call1(ys$0,0);
        if(! match$0)return 0;
        var ys$1=match$0[2],y=match$0[1];
        caml_call2(f,x,y);
        var xs$0=xs$1,ys$0=ys$1}}
    function fold_left2(f,accu,xs,ys)
     {var accu$0=accu,xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(! match)return accu$0;
        var xs$1=match[2],x=match[1],match$0=caml_call1(ys$0,0);
        if(! match$0)return accu$0;
        var
         ys$1=match$0[2],
         y=match$0[1],
         accu$1=caml_call3(f,accu$0,x,y),
         accu$0=accu$1,
         xs$0=xs$1,
         ys$0=ys$1}}
    function for_all2(f,xs,ys)
     {var xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(! match)return 1;
        var xs$1=match[2],x=match[1],match$0=caml_call1(ys$0,0);
        if(! match$0)return 1;
        var ys$1=match$0[2],y=match$0[1],_CP_=caml_call2(f,x,y);
        if(! _CP_)return _CP_;
        var xs$0=xs$1,ys$0=ys$1}}
    function exists2(f,xs,ys)
     {var xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(! match)return 0;
        var xs$1=match[2],x=match[1],match$0=caml_call1(ys$0,0);
        if(! match$0)return 0;
        var ys$1=match$0[2],y=match$0[1],_CO_=caml_call2(f,x,y);
        if(_CO_)return _CO_;
        var xs$0=xs$1,ys$0=ys$1}}
    function equal$0(eq,xs,ys)
     {var xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0),match$0=caml_call1(ys$0,0);
        if(match)
         {if(match$0)
           {var
             ys$1=match$0[2],
             y=match$0[1],
             xs$1=match[2],
             x=match[1],
             _CN_=caml_call2(eq,x,y);
            if(! _CN_)return _CN_;
            var xs$0=xs$1,ys$0=ys$1;
            continue}}
        else
         if(! match$0)return 1;
        return 0}}
    function compare$0(cmp,xs,ys)
     {var xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0),match$0=caml_call1(ys$0,0);
        if(! match)return match$0?-1:0;
        var _CL_=match[2],_CM_=match[1];
        if(! match$0)return 1;
        var ys$1=match$0[2],y=match$0[1],c=caml_call2(cmp,_CM_,y);
        if(0 !== c)return c;
        var xs$0=_CL_,ys$0=ys$1}}
    function init_aux(f,i,j,param)
     {if(i >= j)return 0;
      var _CI_=i + 1 | 0;
      function _CJ_(_CK_){return init_aux(f,_CI_,j,_CK_)}
      return [0,caml_call1(f,i),_CJ_]}
    function init(n,f)
     {if(0 > n)return invalid_arg(cst_Seq_init);
      var _CG_=0;
      return function(_CH_){return init_aux(f,_CG_,n,_CH_)}}
    function repeat(x,param)
     {return [0,x,function(_CF_){return repeat(x,_CF_)}]}
    function forever(f,param)
     {function _CD_(_CE_){return forever(f,_CE_)}
      return [0,caml_call1(f,0),_CD_]}
    function cycle_nonempty(xs,param)
     {var _CB_=0;
      return append$0(xs,function(_CC_){return cycle_nonempty(xs,_CC_)},_CB_)}
    function cycle(xs,param)
     {var match=caml_call1(xs,0);
      if(! match)return 0;
      var xs$0=match[2],x=match[1];
      function _Cy_(_CA_){return cycle_nonempty(xs,_CA_)}
      return [0,x,function(_Cz_){return append$0(xs$0,_Cy_,_Cz_)}]}
    function iterate1(f,x,param)
     {var y=caml_call1(f,x);
      return [0,y,function(_Cx_){return iterate1(f,y,_Cx_)}]}
    function iterate(f,x)
     {function _Cu_(_Cw_){return iterate1(f,x,_Cw_)}
      return function(_Cv_){return [0,x,_Cu_]}}
    function mapi_aux(f,i,xs,param)
     {var match=caml_call1(xs,0);
      if(! match)return 0;
      var xs$0=match[2],x=match[1],_Cr_=i + 1 | 0;
      function _Cs_(_Ct_){return mapi_aux(f,_Cr_,xs$0,_Ct_)}
      return [0,caml_call2(f,i,x),_Cs_]}
    function mapi(f,xs)
     {var _Cp_=0;return function(_Cq_){return mapi_aux(f,_Cp_,xs,_Cq_)}}
    function tail_scan(f,s,xs,param)
     {var match=caml_call1(xs,0);
      if(! match)return 0;
      var xs$0=match[2],x=match[1],s$0=caml_call2(f,s,x);
      return [0,s$0,function(_Co_){return tail_scan(f,s$0,xs$0,_Co_)}]}
    function scan(f,s,xs)
     {function _Cl_(_Cn_){return tail_scan(f,s,xs,_Cn_)}
      return function(_Cm_){return [0,s,_Cl_]}}
    function take_aux(n,xs)
     {return 0 === n
              ?empty
              :function(param)
                {var match=caml_call1(xs,0);
                 if(! match)return 0;
                 var xs$0=match[2],x=match[1];
                 return [0,x,take_aux(n - 1 | 0,xs$0)]}}
    function take(n,xs)
     {if(n < 0)invalid_arg(cst_Seq_take);return take_aux(n,xs)}
    function drop(n,xs)
     {return 0 <= n
              ?0 === n
                ?xs
                :function(param)
                  {var n$0=n,xs$0=xs;
                   for(;;)
                    {var match=caml_call1(xs$0,0);
                     if(! match)return 0;
                     var xs$1=match[2],n$1=n$0 - 1 | 0;
                     if(0 === n$1)return caml_call1(xs$1,0);
                     var n$0=n$1,xs$0=xs$1}}
              :invalid_arg(cst_Seq_drop)}
    function take_while(p,xs,param)
     {var match=caml_call1(xs,0);
      if(! match)return 0;
      var xs$0=match[2],x=match[1];
      return caml_call1(p,x)
              ?[0,x,function(_Ck_){return take_while(p,xs$0,_Ck_)}]
              :0}
    function drop_while(p,xs,param)
     {var xs$0=xs;
      for(;;)
       {var node=caml_call1(xs$0,0);
        if(! node)return 0;
        var xs$1=node[2],x=node[1];
        if(! caml_call1(p,x))return node;
        var xs$0=xs$1}}
    function group(eq,xs,param)
     {var match=caml_call1(xs,0);
      if(! match)return 0;
      var xs$0=match[2],x=match[1],_Cb_=caml_call1(eq,x);
      function _Cc_(_Cj_){return drop_while(_Cb_,xs$0,_Cj_)}
      function _Cd_(_Ci_){return group(eq,_Cc_,_Ci_)}
      var _Ce_=caml_call1(eq,x);
      function _Cf_(_Ch_){return take_while(_Ce_,xs$0,_Ch_)}
      return [0,function(_Cg_){return [0,x,_Cf_]},_Cd_]}
    var Forced_twice=[248,cst_Stdlib_Seq_Forced_twice,caml_fresh_oo_id(0)];
    function failure(param){throw Forced_twice}
    function memoize(xs)
     {function s$0(param)
       {var match=caml_call1(xs,0);
        if(! match)return 0;
        var xs$0=match[2],x=match[1];
        return [0,x,memoize(xs$0)]}
      var s=to_lazy(s$0);
      return function(_Ca_)
       {var _B$_=caml_obj_tag(s);
        if(250 === _B$_)return s[1];
        if(246 !== _B$_ && 244 !== _B$_)return s;
        return force_lazy_block(s)}}
    function once(xs)
     {function f(param)
       {var match=caml_call1(xs,0);
        if(! match)return 0;
        var xs$0=match[2],x=match[1];
        return [0,x,once(xs$0)]}
      var action=[0,f];
      return function(param)
       {var f=caml_atomic_exchange(action,failure);return caml_call1(f,0)}}
    function zip(xs,ys,param)
     {var match=caml_call1(xs,0);
      if(! match)return 0;
      var xs$0=match[2],x=match[1],match$0=caml_call1(ys,0);
      if(! match$0)return 0;
      var ys$0=match$0[2],y=match$0[1];
      return [0,[0,x,y],function(_B__){return zip(xs$0,ys$0,_B__)}]}
    function map2(f,xs,ys,param)
     {var match=caml_call1(xs,0);
      if(! match)return 0;
      var xs$0=match[2],x=match[1],match$0=caml_call1(ys,0);
      if(! match$0)return 0;
      var ys$0=match$0[2],y=match$0[1];
      function _B8_(_B9_){return map2(f,xs$0,ys$0,_B9_)}
      return [0,caml_call2(f,x,y),_B8_]}
    function interleave(xs,ys,param)
     {var match=caml_call1(xs,0);
      if(! match)return caml_call1(ys,0);
      var xs$0=match[2],x=match[1];
      return [0,x,function(_B7_){return interleave(ys,xs$0,_B7_)}]}
    function sorted_merge1(cmp,x,xs,y,ys)
     {return 0 < caml_call2(cmp,x,y)
              ?[0,
                y,
                function(_B5_)
                 {var match=caml_call1(ys,0);
                  if(! match)return [0,x,xs];
                  var ys$0=match[2],y=match[1];
                  return sorted_merge1(cmp,x,xs,y,ys$0)}]
              :[0,
                x,
                function(_B6_)
                 {var match=caml_call1(xs,0);
                  if(! match)return [0,y,ys];
                  var xs$0=match[2],x=match[1];
                  return sorted_merge1(cmp,x,xs$0,y,ys)}]}
    function sorted_merge(cmp,xs,ys,param)
     {var match=caml_call1(xs,0),match$0=caml_call1(ys,0);
      if(match)
       {if(match$0)
         {var ys$0=match$0[2],y=match$0[1],xs$0=match[2],x=match[1];
          return sorted_merge1(cmp,x,xs$0,y,ys$0)}
        var c=match}
      else
       {if(! match$0)return 0;var c=match$0}
      return c}
    function map_fst(xys,param)
     {var match=caml_call1(xys,0);
      if(! match)return 0;
      var xys$0=match[2],match$0=match[1],x=match$0[1];
      return [0,x,function(_B4_){return map_fst(xys$0,_B4_)}]}
    function map_snd(xys,param)
     {var match=caml_call1(xys,0);
      if(! match)return 0;
      var xys$0=match[2],match$0=match[1],y=match$0[2];
      return [0,y,function(_B3_){return map_snd(xys$0,_B3_)}]}
    function unzip(xys)
     {function _B0_(_B2_){return map_snd(xys,_B2_)}
      return [0,function(_B1_){return map_fst(xys,_B1_)},_B0_]}
    function filter_map_find_left_map(f,xs,param)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(! match)return 0;
        var xs$1=match[2],x=match[1],match$0=caml_call1(f,x);
        if(0 === match$0[0])
         {var y=match$0[1];
          return [0,
                  y,
                  function(_BZ_){return filter_map_find_left_map(f,xs$1,_BZ_)}]}
        var xs$0=xs$1}}
    function filter_map_find_right_map(f,xs,param)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(! match)return 0;
        var xs$1=match[2],x=match[1],match$0=caml_call1(f,x);
        if(0 === match$0[0]){var xs$0=xs$1;continue}
        var z=match$0[1];
        return [0,
                z,
                function(_BY_){return filter_map_find_right_map(f,xs$1,_BY_)}]}}
    function partition_map(f,xs)
     {function _BV_(_BX_){return filter_map_find_right_map(f,xs,_BX_)}
      return [0,
              function(_BW_){return filter_map_find_left_map(f,xs,_BW_)},
              _BV_]}
    function partition(p,xs)
     {function _BR_(x){return 1 - caml_call1(p,x)}
      function _BS_(_BU_){return filter(_BR_,xs,_BU_)}
      return [0,function(_BT_){return filter(p,xs,_BT_)},_BS_]}
    function peel(xss)
     {return unzip(function(_BQ_){return filter_map(uncons,xss,_BQ_)})}
    function transpose(xss,param)
     {var match=peel(xss),tails=match[2],heads=match[1];
      if(! is_empty(heads))
       return [0,heads,function(_BP_){return transpose(tails,_BP_)}];
      if(is_empty(tails))return 0;
      throw [0,Assert_failure,_t_]}
    function _u_(remainders,xss,param)
     {var match=caml_call1(xss,0);
      if(! match)return transpose(remainders,0);
      var xss$0=match[2],xs=match[1],match$0=caml_call1(xs,0);
      if(match$0)
       {var
         xs$0=match$0[2],
         x=match$0[1],
         match$1=peel(remainders),
         tails=match$1[2],
         heads=match$1[1],
         _BJ_=function(_BO_){return [0,xs$0,tails]},
         _BK_=function(_BN_){return _u_(_BJ_,xss$0,_BN_)};
        return [0,function(_BM_){return [0,x,heads]},_BK_]}
      var match$2=peel(remainders),tails$0=match$2[2],heads$0=match$2[1];
      return [0,heads$0,function(_BL_){return _u_(tails$0,xss$0,_BL_)}]}
    function map_product(f,xs,ys)
     {function _BD_(x)
       {function _BH_(y){return caml_call2(f,x,y)}
        return function(_BI_){return map$1(_BH_,ys,_BI_)}}
      function xss(_BG_){return map$1(_BD_,xs,_BG_)}
      function _BC_(_BF_){return _u_(empty,xss,_BF_)}
      return function(_BE_){return concat(_BC_,_BE_)}}
    function product(xs,ys)
     {return map_product(function(x,y){return [0,x,y]},xs,ys)}
    function of_dispenser(it)
     {function c(param)
       {var match=caml_call1(it,0);
        if(! match)return 0;
        var x=match[1];
        return [0,x,c]}
      return c}
    function to_dispenser(xs)
     {var s=[0,xs];
      return function(param)
       {var match=caml_call1(s[1],0);
        if(! match)return 0;
        var xs=match[2],x=match[1];
        s[1] = xs;
        return [0,x]}}
    function ints(i,param)
     {var _BA_=i + 1 | 0;return [0,i,function(_BB_){return ints(_BA_,_BB_)}]}
    var
     Stdlib_Seq=
      [0,
       is_empty,
       uncons,
       length$0,
       iter,
       fold_left,
       iteri,
       fold_lefti,
       for_all,
       exists,
       find,
       find_map,
       iter2,
       fold_left2,
       for_all2,
       exists2,
       equal$0,
       compare$0,
       empty,
       return$0,
       cons,
       init,
       unfold,
       repeat,
       forever,
       cycle,
       iterate,
       map$1,
       mapi,
       filter,
       filter_map,
       scan,
       take,
       drop,
       take_while,
       drop_while,
       group,
       memoize,
       Forced_twice,
       once,
       transpose,
       append$0,
       concat,
       flat_map,
       flat_map,
       zip,
       map2,
       interleave,
       sorted_merge,
       product,
       map_product,
       unzip,
       unzip,
       partition_map,
       partition,
       of_dispenser,
       to_dispenser,
       ints];
    caml_register_global(768,Stdlib_Seq,"Stdlib__Seq");
    var none=0;
    function some(v){return [0,v]}
    function value(o,default$0){if(! o)return default$0;var v=o[1];return v}
    function get(param)
     {if(! param)return invalid_arg(cst_option_is_None);
      var v=param[1];
      return v}
    function bind(o,f){if(! o)return 0;var v=o[1];return caml_call1(f,v)}
    function join(param){if(! param)return 0;var o=param[1];return o}
    function map$2(f,o){if(! o)return 0;var v=o[1];return [0,caml_call1(f,v)]}
    function fold$0(none,some,param)
     {if(! param)return none;var v=param[1];return caml_call1(some,v)}
    function iter$0(f,param)
     {if(! param)return 0;var v=param[1];return caml_call1(f,v)}
    function is_none(param){return param?0:1}
    function is_some(param){return param?1:0}
    function equal$1(eq,o0,o1)
     {if(o0)
       {if(o1){var v1=o1[1],v0=o0[1];return caml_call2(eq,v0,v1)}}
      else
       if(! o1)return 1;
      return 0}
    function compare$1(cmp,o0,o1)
     {if(! o0)return o1?-1:0;
      var _Bz_=o0[1];
      if(! o1)return 1;
      var v1=o1[1];
      return caml_call2(cmp,_Bz_,v1)}
    function to_result(none,param)
     {if(! param)return [1,none];var v=param[1];return [0,v]}
    function to_list(param){if(! param)return 0;var v=param[1];return [0,v,0]}
    function to_seq(param)
     {if(! param)return empty;
      var v=param[1];
      return function(_By_){return return$0(v,_By_)}}
    var
     Stdlib_Option=
      [0,
       none,
       some,
       value,
       get,
       bind,
       join,
       map$2,
       fold$0,
       iter$0,
       is_none,
       is_some,
       equal$1,
       compare$1,
       to_result,
       to_list,
       to_seq];
    caml_register_global(769,Stdlib_Option,"Stdlib__Option");
    function ok(v){return [0,v]}
    function error(e){return [1,e]}
    function value$0(r,default$0)
     {if(0 !== r[0])return default$0;var v=r[1];return v}
    function get_ok(param)
     {if(0 !== param[0])return invalid_arg(cst_result_is_Error);
      var v=param[1];
      return v}
    function get_error(param)
     {if(0 === param[0])return invalid_arg(cst_result_is_Ok);
      var e=param[1];
      return e}
    function bind$0(r,f)
     {if(0 !== r[0])return r;var v=r[1];return caml_call1(f,v)}
    function join$0(e){if(0 !== e[0])return e;var r=e[1];return r}
    function map$3(f,e)
     {if(0 !== e[0])return e;var v=e[1];return [0,caml_call1(f,v)]}
    function map_error(f,v)
     {if(0 === v[0])return v;var e=v[1];return [1,caml_call1(f,e)]}
    function fold$1(ok,error,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(ok,v)}
      var e=param[1];
      return caml_call1(error,e)}
    function iter$1(f,param)
     {if(0 !== param[0])return 0;var v=param[1];return caml_call1(f,v)}
    function iter_error(f,param)
     {if(0 === param[0])return 0;var e=param[1];return caml_call1(f,e)}
    function is_ok(param){return 0 === param[0]?1:0}
    function is_error(param){return 0 === param[0]?0:1}
    function equal$2(ok,error,r0,r1)
     {if(0 === r0[0])
       {var _Bw_=r0[1];
        if(0 === r1[0]){var v1=r1[1];return caml_call2(ok,_Bw_,v1)}}
      else
       {var _Bx_=r0[1];
        if(0 !== r1[0]){var e1=r1[1];return caml_call2(error,_Bx_,e1)}}
      return 0}
    function compare$2(ok,error,r0,r1)
     {if(0 === r0[0])
       {var _Bu_=r0[1];
        if(0 !== r1[0])return -1;
        var v1=r1[1];
        return caml_call2(ok,_Bu_,v1)}
      var _Bv_=r0[1];
      if(0 === r1[0])return 1;
      var e1=r1[1];
      return caml_call2(error,_Bv_,e1)}
    function to_option(param)
     {if(0 !== param[0])return 0;var v=param[1];return [0,v]}
    function to_list$0(param)
     {if(0 !== param[0])return 0;var v=param[1];return [0,v,0]}
    function to_seq$0(param)
     {if(0 !== param[0])return empty;
      var v=param[1];
      return function(_Bt_){return return$0(v,_Bt_)}}
    var
     Stdlib_Result=
      [0,
       ok,
       error,
       value$0,
       get_ok,
       get_error,
       bind$0,
       join$0,
       map$3,
       map_error,
       fold$1,
       iter$1,
       iter_error,
       is_ok,
       is_error,
       equal$2,
       compare$2,
       to_option,
       to_list$0,
       to_seq$0];
    caml_register_global(770,Stdlib_Result,"Stdlib__Result");
    function equal$3(_Bs_,_Br_){return _Bs_ === _Br_?1:0}
    var compare$3=caml_int_compare;
    function to_float(param){return param?1.:0.}
    function to_string$0(param){return param?cst_true$2:cst_false$2}
    function _v_(_Bq_){return _Bq_}
    var
     Stdlib_Bool=
      [0,
       function(_Bp_){return 1 - _Bp_},
       equal$3,
       compare$3,
       _v_,
       to_float,
       to_string$0];
    caml_register_global(771,Stdlib_Bool,"Stdlib__Bool");
    function chr(n)
     {if(0 <= n && 255 >= n)return n;return invalid_arg(cst_Char_chr)}
    function escaped(c)
     {var switch$0=0;
      if(40 <= c)
       {if(92 === c)return cst$1;if(127 > c)switch$0 = 1}
      else
       if(32 <= c)
        {if(39 <= c)return cst$2;switch$0 = 1}
       else
        if(14 > c)
         switch(c)
          {case 8:return cst_b;
           case 9:return cst_t;
           case 10:return cst_n;
           case 13:return cst_r
           }
      if(switch$0)
       {var s$0=caml_create_bytes(1);
        caml_bytes_unsafe_set(s$0,0,c);
        return caml_string_of_bytes(s$0)}
      var s=caml_create_bytes(4);
      caml_bytes_unsafe_set(s,0,92);
      caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
      caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
      caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
      return caml_string_of_bytes(s)}
    function lowercase_ascii(c){return 25 < c - 65 >>> 0?c:c + 32 | 0}
    function uppercase_ascii(c){return 25 < c - 97 >>> 0?c:c - 32 | 0}
    function compare$4(c1,c2){return c1 - c2 | 0}
    function equal$4(c1,c2){return 0 === (c1 - c2 | 0)?1:0}
    var
     Stdlib_Char=
      [0,chr,escaped,lowercase_ascii,uppercase_ascii,compare$4,equal$4];
    caml_register_global(772,Stdlib_Char,"Stdlib__Char");
    var
     min$0=0,
     max$0=1114111,
     lo_bound=55295,
     hi_bound=57344,
     bom=65279,
     rep=65533;
    function succ(u)
     {return u === 55295
              ?hi_bound
              :u === 1114111?invalid_arg(err_no_succ):u + 1 | 0}
    function pred(u)
     {return u === 57344?lo_bound:u === 0?invalid_arg(err_no_pred):u - 1 | 0}
    function is_valid(i)
     {var _Bl_=0 <= i?1:0,_Bm_=_Bl_?i <= 55295?1:0:_Bl_;
      if(_Bm_)
       var _Bn_=_Bm_;
      else
       var _Bo_=57344 <= i?1:0,_Bn_=_Bo_?i <= 1114111?1:0:_Bo_;
      return _Bn_}
    function of_int(i)
     {return is_valid(i)
              ?i
              :invalid_arg
                (cat(caml_format_int(cst_X,i),cst_is_not_an_Unicode_scalar_v))}
    function is_char(u){return u < 256?1:0}
    function of_char(c){return c}
    function to_char(u)
     {return 255 < u
              ?invalid_arg
                (cat
                  (cst_U,
                   cat
                    (caml_format_int(cst_04X,u),cst_is_not_a_latin1_character)))
              :u}
    function unsafe_to_char(_Bk_){return _Bk_}
    function equal$5(_Bj_,_Bi_){return _Bj_ === _Bi_?1:0}
    var compare$5=caml_int_compare;
    function hash(_Bh_){return _Bh_}
    function utf_decode_is_valid(d){return 1 === (d >>> 27 | 0)?1:0}
    function utf_decode_length(d){return (d >>> 24 | 0) & 7}
    function utf_decode_uchar(d){return d & 16777215}
    function utf_decode(n,u){return (8 | n) << 24 | u}
    function dec_invalid(n){return n << 24 | 65533}
    function utf_8_byte_length(u)
     {if(0 > u)throw [0,Assert_failure,_x_];
      if(127 >= u)return 1;
      if(2047 >= u)return 2;
      if(65535 >= u)return 3;
      if(1114111 < u)throw [0,Assert_failure,_w_];
      return 4}
    function utf_16_byte_length(u)
     {if(0 > u)throw [0,Assert_failure,_z_];
      if(65535 >= u)return 2;
      if(1114111 < u)throw [0,Assert_failure,_y_];
      return 4}
    function _A_(_Bg_){return _Bg_}
    var
     Stdlib_Uchar=
      [0,
       min$0,
       max$0,
       bom,
       rep,
       succ,
       pred,
       is_valid,
       of_int,
       function(_Bf_){return _Bf_},
       _A_,
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal$5,
       compare$5,
       hash,
       utf_decode_is_valid,
       utf_decode_uchar,
       utf_decode_length,
       utf_decode,
       dec_invalid,
       utf_8_byte_length,
       utf_16_byte_length];
    caml_register_global(773,Stdlib_Uchar,"Stdlib__Uchar");
    function length$1(l)
     {var len=0,param=l;
      for(;;)
       {if(! param)return len;
        var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0}}
    function cons$0(a,l){return [0,a,l]}
    function hd(param)
     {if(! param)return failwith(cst_hd);var a=param[1];return a}
    function tl(param)
     {if(! param)return failwith(cst_tl);var l=param[2];return l}
    function nth(l,n)
     {if(0 > n)return invalid_arg(cst_List_nth);
      var l$0=l,n$0=n;
      for(;;)
       {if(! l$0)return failwith(cst_nth);
        var l$1=l$0[2],a=l$0[1];
        if(0 === n$0)return a;
        var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1}}
    function nth_opt(l,n)
     {if(0 > n)return invalid_arg(cst_List_nth$0);
      var l$0=l,n$0=n;
      for(;;)
       {if(! l$0)return 0;
        var l$1=l$0[2],a=l$0[1];
        if(0 === n$0)return [0,a];
        var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1}}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(! l1$0)return l2$0;
        var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1}}
    function rev(l){return rev_append(l,0)}
    function init_aux$0(i,n,f)
     {if(n <= i)return 0;
      var r=caml_call1(f,i);
      return [0,r,init_aux$0(i + 1 | 0,n,f)]}
    function init$0(len,f)
     {if(0 > len)return invalid_arg(cst_List_init);
      if(50 >= len)return init_aux$0(0,len,f);
      var acc=0,i=0;
      for(;;)
       {if(len <= i)return rev(acc);
        var i$0=i + 1 | 0,acc$0=[0,caml_call1(f,i),acc],acc=acc$0,i=i$0}}
    function flatten(param)
     {if(! param)return 0;
      var r=param[2],l=param[1];
      return append(l,flatten(r))}
    function map$4(f,param)
     {if(! param)return 0;
      var l=param[2],a=param[1],r=caml_call1(f,a);
      return [0,r,map$4(f,l)]}
    function _B_(i,f,param)
     {if(! param)return 0;
      var l=param[2],a=param[1],r=caml_call2(f,i,a);
      return [0,r,_B_(i + 1 | 0,f,l)]}
    function mapi$0(f,l){return _B_(0,f,l)}
    function rev_map(f,param)
     {var accu=0,param$0=param;
      for(;;)
       {if(! param$0)return accu;
        var
         l=param$0[2],
         a=param$0[1],
         accu$0=[0,caml_call1(f,a),accu],
         accu=accu$0,
         param$0=l}}
    function iter$2(f,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var l=param$0[2],a=param$0[1];
        caml_call1(f,a);
        var param$0=l}}
    function iteri$0(f,l$0)
     {var i=0,param=l$0;
      for(;;)
       {if(! param)return 0;
        var l=param[2],a=param[1];
        caml_call2(f,i,a);
        var i$0=i + 1 | 0,i=i$0,param=l}}
    function fold_left$0(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(! l$0)return accu$0;
        var
         l$1=l$0[2],
         a=l$0[1],
         accu$1=caml_call2(f,accu$0,a),
         accu$0=accu$1,
         l$0=l$1}}
    function fold_right(f,l,accu)
     {if(! l)return accu;
      var l$0=l[2],a=l[1];
      return caml_call2(f,a,fold_right(f,l$0,accu))}
    function map2$0(f,l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1],r=caml_call2(f,a1,a2);
          return [0,r,map2$0(f,l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_map2)}
    function rev_map2(f,l1,l2)
     {var accu=0,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$0=[0,caml_call2(f,a1,a2),accu],
             accu=accu$0,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu;
        return invalid_arg(cst_List_rev_map2)}}
    function iter2$0(f,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var l2$1=l2$0[2],a2=l2$0[1],l1$1=l1$0[2],a1=l1$0[1];
            caml_call2(f,a1,a2);
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_iter2)}}
    function fold_left2$0(f,accu,l1,l2)
     {var accu$0=accu,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$1=caml_call3(f,accu$0,a1,a2),
             accu$0=accu$1,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu$0;
        return invalid_arg(cst_List_fold_left2)}}
    function fold_right2(f,l1,l2,accu)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return caml_call3(f,a1,a2,fold_right2(f,l1$0,l2$0,accu))}}
      else
       if(! l2)return accu;
      return invalid_arg(cst_List_fold_right2)}
    function for_all$0(p,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 1;
        var l=param$0[2],a=param$0[1],_Be_=caml_call1(p,a);
        if(! _Be_)return _Be_;
        var param$0=l}}
    function exists$0(p,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var l=param$0[2],a=param$0[1],_Bd_=caml_call1(p,a);
        if(_Bd_)return _Bd_;
        var param$0=l}}
    function for_all2$0(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _Bc_=caml_call2(p,a1,a2);
            if(! _Bc_)return _Bc_;
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 1;
        return invalid_arg(cst_List_for_all2)}}
    function exists2$0(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _Bb_=caml_call2(p,a1,a2);
            if(_Bb_)return _Bb_;
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_exists2)}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var l=param$0[2],a=param$0[1],_Ba_=0 === caml_compare(a,x)?1:0;
        if(_Ba_)return _Ba_;
        var param$0=l}}
    function memq(x,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var l=param$0[2],a=param$0[1],_A$_=a === x?1:0;
        if(_A$_)return _A$_;
        var param$0=l}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)throw Not_found;
        var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
        if(0 === caml_compare(a,x))return b;
        var param$0=l}}
    function assoc_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
        if(0 === caml_compare(a,x))return [0,b];
        var param$0=l}}
    function assq(x,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)throw Not_found;
        var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
        if(a === x)return b;
        var param$0=l}}
    function assq_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
        if(a === x)return [0,b];
        var param$0=l}}
    function mem_assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var
         l=param$0[2],
         match=param$0[1],
         a=match[1],
         _A__=0 === caml_compare(a,x)?1:0;
        if(_A__)return _A__;
        var param$0=l}}
    function mem_assq(x,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var l=param$0[2],match=param$0[1],a=match[1],_A9_=a === x?1:0;
        if(_A9_)return _A9_;
        var param$0=l}}
    function remove_assoc(x,param)
     {if(! param)return 0;
      var l=param[2],pair=param[1],a=pair[1];
      return 0 === caml_compare(a,x)?l:[0,pair,remove_assoc(x,l)]}
    function remove_assq(x,param)
     {if(! param)return 0;
      var l=param[2],pair=param[1],a=pair[1];
      return a === x?l:[0,pair,remove_assq(x,l)]}
    function find$0(p,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)throw Not_found;
        var l=param$0[2],x=param$0[1];
        if(caml_call1(p,x))return x;
        var param$0=l}}
    function find_opt(p,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var l=param$0[2],x=param$0[1];
        if(caml_call1(p,x))return [0,x];
        var param$0=l}}
    function find_map$0(f,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var l=param$0[2],x=param$0[1],result=caml_call1(f,x);
        if(result)return result;
        var param$0=l}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(! param)return rev(accu$0);
          var l=param[2],x=param[1];
          if(caml_call1(p,x))
           {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
          var param=l}}}
    function filteri(p,param)
     {var i=0,acc=0,param$0=param;
      for(;;)
       {if(! param$0)return rev(acc);
        var
         l=param$0[2],
         x=param$0[1],
         acc$0=caml_call2(p,i,x)?[0,x,acc]:acc,
         i$0=i + 1 | 0,
         i=i$0,
         acc=acc$0,
         param$0=l}}
    function filter_map$0(f)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(! param)return rev(accu$0);
          var l=param[2],x=param[1],match=caml_call1(f,x);
          if(match)
           {var v=match[1],accu$1=[0,v,accu$0],accu$0=accu$1,param=l;continue}
          var param=l}}}
    function concat_map(f,param)
     {var acc=0,param$0=param;
      for(;;)
       {if(! param$0)return rev(acc);
        var
         l=param$0[2],
         x=param$0[1],
         xs=caml_call1(f,x),
         acc$0=rev_append(xs,acc),
         acc=acc$0,
         param$0=l}}
    function fold_left_map(f,accu,param)
     {var accu$0=accu,l_accu=0,param$0=param;
      for(;;)
       {if(! param$0)return [0,accu$0,rev(l_accu)];
        var
         l=param$0[2],
         x=param$0[1],
         match=caml_call2(f,accu$0,x),
         x$0=match[2],
         accu$1=match[1],
         l_accu$0=[0,x$0,l_accu],
         accu$0=accu$1,
         l_accu=l_accu$0,
         param$0=l}}
    function partition$0(p,param)
     {var yes=0,no=0,param$0=param;
      for(;;)
       {if(! param$0){var _A8_=rev(no);return [0,rev(yes),_A8_]}
        var l=param$0[2],x=param$0[1];
        if(caml_call1(p,x)){var yes$0=[0,x,yes],yes=yes$0,param$0=l;continue}
        var no$0=[0,x,no],no=no$0,param$0=l}}
    function partition_map$0(p,param)
     {var left=0,right=0,param$0=param;
      for(;;)
       {if(! param$0){var _A7_=rev(right);return [0,rev(left),_A7_]}
        var l=param$0[2],x=param$0[1],match=caml_call1(p,x);
        if(0 === match[0])
         {var v=match[1],left$0=[0,v,left],left=left$0,param$0=l;continue}
        var v$0=match[1],right$0=[0,v$0,right],right=right$0,param$0=l}}
    function split(param)
     {if(! param)return _C_;
      var
       l=param[2],
       match=param[1],
       y=match[2],
       x=match[1],
       match$0=split(l),
       ry=match$0[2],
       rx=match$0[1];
      return [0,[0,x,rx],[0,y,ry]]}
    function combine(l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return [0,[0,a1,a2],combine(l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_combine)}
    function merge(cmp,l1,l2)
     {if(! l1)return l2;
      if(! l2)return l1;
      var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
      return 0 < caml_call2(cmp,h1,h2)
              ?[0,h2,merge(cmp,l1,t2)]
              :[0,h1,merge(cmp,t1,l2)]}
    function fast_sort(cmp,l)
     {function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _A3_=l[2];
            if(_A3_)
             {var
               tl=_A3_[2],
               x2=_A3_[1],
               x1=l[1],
               s=0 < caml_call2(cmp,x1,x2)?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _A5_=l[2];
           if(_A5_)
            {var _A6_=_A5_[2];
             if(_A6_)
              {var
                tl$1=_A6_[2],
                x3=_A6_[1],
                x2$0=_A5_[1],
                x1$0=l[1],
                s$0=
                 0 < caml_call2(cmp,x1$0,x2$0)
                  ?0 < caml_call2(cmp,x1$0,x3)
                    ?0 < caml_call2(cmp,x2$0,x3)
                      ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                      :[0,x2$0,[0,x3,[0,x1$0,0]]]
                    :[0,x2$0,[0,x1$0,[0,x3,0]]]
                  :0 < caml_call2(cmp,x2$0,x3)
                    ?0 < caml_call2(cmp,x1$0,x3)
                      ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                      :[0,x1$0,[0,x3,[0,x2$0,0]]]
                    :[0,x1$0,[0,x2$0,[0,x3,0]]];
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=rev_sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=rev_sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h1,accu],l1=t1,accu=accu$0;continue}
              var accu$1=[0,h2,accu],l2=t2,accu=accu$1;
              continue}
            var _A4_=rev_append(l1,accu)}
          else
           var _A4_=rev_append(l2,accu);
          return [0,_A4_,tl$0]}}
      function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _AZ_=l[2];
            if(_AZ_)
             {var
               tl=_AZ_[2],
               x2=_AZ_[1],
               x1=l[1],
               s=0 < caml_call2(cmp,x1,x2)?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _A1_=l[2];
           if(_A1_)
            {var _A2_=_A1_[2];
             if(_A2_)
              {var
                tl$1=_A2_[2],
                x3=_A2_[1],
                x2$0=_A1_[1],
                x1$0=l[1],
                s$0=
                 0 < caml_call2(cmp,x1$0,x2$0)
                  ?0 < caml_call2(cmp,x2$0,x3)
                    ?[0,x1$0,[0,x2$0,[0,x3,0]]]
                    :0 < caml_call2(cmp,x1$0,x3)
                      ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                      :[0,x3,[0,x1$0,[0,x2$0,0]]]
                  :0 < caml_call2(cmp,x1$0,x3)
                    ?[0,x2$0,[0,x1$0,[0,x3,0]]]
                    :0 < caml_call2(cmp,x2$0,x3)
                      ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                      :[0,x3,[0,x2$0,[0,x1$0,0]]];
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h2,accu],l2=t2,accu=accu$0;continue}
              var accu$1=[0,h1,accu],l1=t1,accu=accu$1;
              continue}
            var _A0_=rev_append(l1,accu)}
          else
           var _A0_=rev_append(l2,accu);
          return [0,_A0_,tl$0]}}
      var len=length$1(l);
      return 2 <= len?sort(len,l)[1]:l}
    function sort_uniq(cmp,l)
     {function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _AQ_=l[2];
            if(_AQ_)
             {var
               tl=_AQ_[2],
               x2=_AQ_[1],
               x1=l[1],
               c$0=caml_call2(cmp,x1,x2),
               s=0 === c$0?[0,x1,0]:0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _AS_=l[2];
           if(_AS_)
            {var _AT_=_AS_[2];
             if(_AT_)
              {var
                tl$1=_AT_[2],
                x3=_AT_[1],
                x2$0=_AS_[1],
                x1$0=l[1],
                c$1=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$1)
                var
                 c$2=caml_call2(cmp,x2$0,x3),
                 _AU_=
                  0 === c$2
                   ?[0,x2$0,0]
                   :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]],
                 s$0=_AU_;
               else
                if(0 <= c$1)
                 {var c$3=caml_call2(cmp,x1$0,x3);
                  if(0 === c$3)
                   var _AV_=[0,x2$0,[0,x1$0,0]];
                  else
                   if(0 <= c$3)
                    var
                     c$4=caml_call2(cmp,x2$0,x3),
                     _AW_=
                      0 === c$4
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 <= c$4
                         ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                         :[0,x2$0,[0,x3,[0,x1$0,0]]],
                     _AV_=_AW_;
                   else
                    var _AV_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                  var s$0=_AV_}
                else
                 {var c$5=caml_call2(cmp,x2$0,x3);
                  if(0 === c$5)
                   var _AX_=[0,x1$0,[0,x2$0,0]];
                  else
                   if(0 <= c$5)
                    var
                     c$6=caml_call2(cmp,x1$0,x3),
                     _AY_=
                      0 === c$6
                       ?[0,x1$0,[0,x2$0,0]]
                       :0 <= c$6
                         ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                         :[0,x1$0,[0,x3,[0,x2$0,0]]],
                     _AX_=_AY_;
                   else
                    var _AX_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                  var s$0=_AX_}
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=rev_sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=rev_sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
              continue}
            var _AR_=rev_append(l1,accu)}
          else
           var _AR_=rev_append(l2,accu);
          return [0,_AR_,tl$0]}}
      function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _AH_=l[2];
            if(_AH_)
             {var
               tl=_AH_[2],
               x2=_AH_[1],
               x1=l[1],
               c$0=caml_call2(cmp,x1,x2),
               s=0 === c$0?[0,x1,0]:0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _AJ_=l[2];
           if(_AJ_)
            {var _AK_=_AJ_[2];
             if(_AK_)
              {var
                tl$1=_AK_[2],
                x3=_AK_[1],
                x2$0=_AJ_[1],
                x1$0=l[1],
                c$1=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$1)
                var
                 c$2=caml_call2(cmp,x2$0,x3),
                 _AL_=
                  0 === c$2
                   ?[0,x2$0,0]
                   :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]],
                 s$0=_AL_;
               else
                if(0 < c$1)
                 {var c$3=caml_call2(cmp,x2$0,x3);
                  if(0 === c$3)
                   var _AM_=[0,x1$0,[0,x2$0,0]];
                  else
                   if(0 < c$3)
                    var _AM_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                   else
                    var
                     c$4=caml_call2(cmp,x1$0,x3),
                     _AN_=
                      0 === c$4
                       ?[0,x1$0,[0,x2$0,0]]
                       :0 < c$4
                         ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                         :[0,x3,[0,x1$0,[0,x2$0,0]]],
                     _AM_=_AN_;
                  var s$0=_AM_}
                else
                 {var c$5=caml_call2(cmp,x1$0,x3);
                  if(0 === c$5)
                   var _AO_=[0,x2$0,[0,x1$0,0]];
                  else
                   if(0 < c$5)
                    var _AO_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                   else
                    var
                     c$6=caml_call2(cmp,x2$0,x3),
                     _AP_=
                      0 === c$6
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 < c$6
                         ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                         :[0,x3,[0,x2$0,[0,x1$0,0]]],
                     _AO_=_AP_;
                  var s$0=_AO_}
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 <= c){var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
              continue}
            var _AI_=rev_append(l1,accu)}
          else
           var _AI_=rev_append(l2,accu);
          return [0,_AI_,tl$0]}}
      var len=length$1(l);
      return 2 <= len?sort(len,l)[1]:l}
    function compare_lengths(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(! l1$0)return l2$0?-1:0;
        if(! l2$0)return 1;
        var l2$1=l2$0[2],l1$1=l1$0[2],l1$0=l1$1,l2$0=l2$1}}
    function compare_length_with(l,n)
     {var l$0=l,n$0=n;
      for(;;)
       {if(! l$0)return 0 === n$0?0:0 < n$0?-1:1;
        var l$1=l$0[2];
        if(0 >= n$0)return 1;
        var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1}}
    function equal$6(eq,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _AG_=caml_call2(eq,a1,a2);
            if(! _AG_)return _AG_;
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 1;
        return 0}}
    function compare$6(cmp,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(! l1$0)return l2$0?-1:0;
        var _AE_=l1$0[2],_AF_=l1$0[1];
        if(! l2$0)return 1;
        var l2$1=l2$0[2],a2=l2$0[1],c=caml_call2(cmp,_AF_,a2);
        if(0 !== c)return c;
        var l1$0=_AE_,l2$0=l2$1}}
    function to_seq$1(l)
     {function aux(l,param)
       {if(! l)return 0;
        var tail=l[2],x=l[1];
        return [0,x,function(_AD_){return aux(tail,_AD_)}]}
      return function(_AC_){return aux(l,_AC_)}}
    function of_seq(seq)
     {function direct(depth,seq)
       {if(0 === depth)
         {var _AB_=0;
          return rev(fold_left(function(acc,x){return [0,x,acc]},_AB_,seq))}
        var match=caml_call1(seq,0);
        if(! match)return 0;
        var next=match[2],x=match[1];
        return [0,x,direct(depth - 1 | 0,next)]}
      return direct(500,seq)}
    var
     include=
      [0,
       length$1,
       compare_lengths,
       compare_length_with,
       cons$0,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init$0,
       append,
       rev_append,
       flatten,
       flatten,
       equal$6,
       compare$6,
       iter$2,
       iteri$0,
       map$4,
       mapi$0,
       rev_map,
       filter_map$0,
       concat_map,
       fold_left_map,
       fold_left$0,
       fold_right,
       iter2$0,
       map2$0,
       rev_map2,
       fold_left2$0,
       fold_right2,
       for_all$0,
       exists$0,
       for_all2$0,
       exists2$0,
       mem,
       memq,
       find$0,
       find_opt,
       find_map$0,
       find_all,
       find_all,
       filteri,
       partition$0,
       partition_map$0,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq$1,
       of_seq];
    caml_register_global(774,include,"Stdlib__List");
    var zero=0,one=1,minus_one=-1;
    function abs$0(x){return 0 <= x?x:- x | 0}
    var max_int$0=2147483647,min_int$0=-2147483648;
    function lognot(x){return x ^ -1}
    function equal$7(_AA_,_Az_){return _AA_ === _Az_?1:0}
    var compare$7=caml_int_compare;
    function min$1(x,y){return x <= y?x:y}
    function max$1(x,y){return y <= x?x:y}
    function to_string$1(x){return caml_string_of_jsbytes("" + x)}
    var
     Stdlib_Int=
      [0,
       zero,
       one,
       minus_one,
       abs$0,
       max_int$0,
       min_int$0,
       lognot,
       equal$7,
       compare$7,
       min$1,
       max$1,
       to_string$1];
    caml_register_global(775,Stdlib_Int,"Stdlib__Int");
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function init$1(n,f)
     {var s=caml_create_bytes(n),_Ax_=n - 1 | 0,_Aw_=0;
      if(_Ax_ >= 0)
       {var i=_Aw_;
        for(;;)
         {caml_bytes_unsafe_set(s,i,caml_call1(f,i));
          var _Ay_=i + 1 | 0;
          if(_Ax_ !== i){var i=_Ay_;continue}
          break}}
      return s}
    var empty$0=caml_create_bytes(0);
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function of_bytes(b){return caml_string_of_bytes(copy(b))}
    function to_bytes(s){return copy(caml_bytes_of_string(s))}
    function sub(s,ofs,len)
     {if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(cst_String_sub_Bytes_sub)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function symbol$0(a,b)
     {var c=a + b | 0,_Av_=b < 0?1:0,match=c < 0?1:0,switch$0=0;
      if(a < 0)
       {if(_Av_ && ! match)switch$0 = 1}
      else
       if(! _Av_ && match)switch$0 = 1;
      return switch$0?invalid_arg(cst_Bytes_extend):c}
    function extend(s,left,right)
     {var
       len=symbol$0(symbol$0(caml_ml_bytes_length(s),left),right),
       r=caml_create_bytes(len);
      if(0 <= left)
       var dstoff=left,srcoff=0;
      else
       var dstoff=0,srcoff=- left | 0;
      var cpylen=min$1(caml_ml_bytes_length(s) - srcoff | 0,len - dstoff | 0);
      if(0 < cpylen)caml_blit_bytes(s,srcoff,r,dstoff,cpylen);
      return r}
    function fill(s,ofs,len,c)
     {if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
       return caml_fill_bytes(s,ofs,len,c);
      return invalid_arg(cst_String_fill_Bytes_fill)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        (caml_ml_bytes_length(s1) - len | 0)
        >=
        ofs1
        &&
        0
        <=
        ofs2
        &&
        (caml_ml_bytes_length(s2) - len | 0)
        >=
        ofs2)
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_Bytes_blit)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        (caml_ml_string_length(s1) - len | 0)
        >=
        ofs1
        &&
        0
        <=
        ofs2
        &&
        (caml_ml_bytes_length(s2) - len | 0)
        >=
        ofs2)
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_String_blit_Bytes_blit_str)}
    function iter$3(f,a)
     {var _At_=caml_ml_bytes_length(a) - 1 | 0,_As_=0;
      if(_At_ >= 0)
       {var i=_As_;
        for(;;)
         {caml_call1(f,caml_bytes_unsafe_get(a,i));
          var _Au_=i + 1 | 0;
          if(_At_ !== i){var i=_Au_;continue}
          break}}
      return 0}
    function iteri$1(f,a)
     {var _Aq_=caml_ml_bytes_length(a) - 1 | 0,_Ap_=0;
      if(_Aq_ >= 0)
       {var i=_Ap_;
        for(;;)
         {caml_call2(f,i,caml_bytes_unsafe_get(a,i));
          var _Ar_=i + 1 | 0;
          if(_Aq_ !== i){var i=_Ar_;continue}
          break}}
      return 0}
    function concat$0(sep,l)
     {if(! l)return empty$0;
      var seplen=caml_ml_bytes_length(sep),acc=0,param=l,pos$1=0;
      for(;;)
       {if(param)
         {var _Am_=param[1];
          if(param[2])
           {var
             tl=param[2],
             x=(caml_ml_bytes_length(_Am_) + seplen | 0) + acc | 0,
             acc$0=acc <= x?x:invalid_arg(cst_Bytes_concat),
             acc=acc$0,
             param=tl;
            continue}
          var _Ao_=caml_ml_bytes_length(_Am_) + acc | 0}
        else
         var _Ao_=acc;
        var dst=caml_create_bytes(_Ao_),pos=pos$1,param$0=l;
        for(;;)
         {if(! param$0)return dst;
          var _An_=param$0[1];
          if(param$0[2])
           {var tl$0=param$0[2];
            caml_blit_bytes(_An_,0,dst,pos,caml_ml_bytes_length(_An_));
            caml_blit_bytes
             (sep,0,dst,pos + caml_ml_bytes_length(_An_) | 0,seplen);
            var
             pos$0=(pos + caml_ml_bytes_length(_An_) | 0) + seplen | 0,
             pos=pos$0,
             param$0=tl$0;
            continue}
          caml_blit_bytes(_An_,0,dst,pos,caml_ml_bytes_length(_An_));
          return dst}}}
    function cat$0(s1,s2)
     {var
       l1=caml_ml_bytes_length(s1),
       l2=caml_ml_bytes_length(s2),
       r=caml_create_bytes(l1 + l2 | 0);
      caml_blit_bytes(s1,0,r,0,l1);
      caml_blit_bytes(s2,0,r,l1,l2);
      return r}
    function is_space(param)
     {var _Al_=param - 9 | 0,switch$0=0;
      if(4 < _Al_ >>> 0)
       {if(23 === _Al_)switch$0 = 1}
      else
       if(2 !== _Al_)switch$0 = 1;
      return switch$0?1:0}
    function trim(s)
     {var len=caml_ml_bytes_length(s),i=[0,0];
      for(;;)
       {if(i[1] < len && is_space(caml_bytes_unsafe_get(s,i[1])))
         {i[1]++;continue}
        var j=[0,len - 1 | 0];
        for(;;)
         {if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s,j[1])))
           {j[1] += -1;continue}
          return i[1] <= j[1]?sub(s,i[1],(j[1] - i[1] | 0) + 1 | 0):empty$0}}}
    function unsafe_escape(s)
     {var n=[0,0],_Ae_=caml_ml_bytes_length(s) - 1 | 0,_Ad_=0;
      if(_Ae_ >= 0)
       {var i$0=_Ad_;
        for(;;)
         {var match=caml_bytes_unsafe_get(s,i$0),switch$0=0;
          if(32 <= match)
           {var _Ai_=match - 34 | 0,switch$1=0;
            if(58 < _Ai_ >>> 0)
             {if(93 <= _Ai_)switch$1 = 1}
            else
             if(56 < _Ai_ - 1 >>> 0){switch$0 = 1;switch$1 = 1}
            if(! switch$1){var _Aj_=1;switch$0 = 2}}
          else
           if(11 <= match)
            {if(13 === match)switch$0 = 1}
           else
            if(8 <= match)switch$0 = 1;
          switch(switch$0){case 0:var _Aj_=4;break;case 1:var _Aj_=2;break}
          n[1] = n[1] + _Aj_ | 0;
          var _Ak_=i$0 + 1 | 0;
          if(_Ae_ !== i$0){var i$0=_Ak_;continue}
          break}}
      if(n[1] === caml_ml_bytes_length(s))return s;
      var s$0=caml_create_bytes(n[1]);
      n[1] = 0;
      var _Ag_=caml_ml_bytes_length(s) - 1 | 0,_Af_=0;
      if(_Ag_ >= 0)
       {var i=_Af_;
        for(;;)
         {var c=caml_bytes_unsafe_get(s,i),switch$2=0;
          if(35 <= c)
           if(92 === c)
            switch$2 = 2;
           else
            if(127 <= c)switch$2 = 1;else switch$2 = 3;
          else
           if(32 <= c)
            if(34 <= c)switch$2 = 2;else switch$2 = 3;
           else
            if(14 <= c)
             switch$2 = 1;
            else
             switch(c)
              {case 8:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],98);
                break;
               case 9:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],116);
                break;
               case 10:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],110);
                break;
               case 13:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],114);
                break;
               default:switch$2 = 1}
          switch(switch$2)
           {case 1:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c / 100 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c % 10 | 0) | 0);
             break;
            case 2:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],c);
             break;
            case 3:caml_bytes_unsafe_set(s$0,n[1],c);break
            }
          n[1]++;
          var _Ah_=i + 1 | 0;
          if(_Ag_ !== i){var i=_Ah_;continue}
          break}}
      return s$0}
    function escaped$0(b){var b$0=copy(b);return unsafe_escape(b$0)}
    function map$5(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_Ab_=l - 1 | 0,_Aa_=0;
      if(_Ab_ >= 0)
       {var i=_Aa_;
        for(;;)
         {caml_bytes_unsafe_set(r,i,caml_call1(f,caml_bytes_unsafe_get(s,i)));
          var _Ac_=i + 1 | 0;
          if(_Ab_ !== i){var i=_Ac_;continue}
          break}}
      return r}
    function mapi$1(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_z__=l - 1 | 0,_z9_=0;
      if(_z__ >= 0)
       {var i=_z9_;
        for(;;)
         {caml_bytes_unsafe_set
           (r,i,caml_call2(f,i,caml_bytes_unsafe_get(s,i)));
          var _z$_=i + 1 | 0;
          if(_z__ !== i){var i=_z$_;continue}
          break}}
      return r}
    function fold_left$1(f,x,a)
     {var r=[0,x],_z7_=caml_ml_bytes_length(a) - 1 | 0,_z6_=0;
      if(_z7_ >= 0)
       {var i=_z6_;
        for(;;)
         {r[1] = caml_call2(f,r[1],caml_bytes_unsafe_get(a,i));
          var _z8_=i + 1 | 0;
          if(_z7_ !== i){var i=_z8_;continue}
          break}}
      return r[1]}
    function fold_right$0(f,a,x)
     {var r=[0,x],_z4_=caml_ml_bytes_length(a) - 1 | 0;
      if(_z4_ >= 0)
       {var i=_z4_;
        for(;;)
         {r[1] = caml_call2(f,caml_bytes_unsafe_get(a,i),r[1]);
          var _z5_=i - 1 | 0;
          if(0 !== i){var i=_z5_;continue}
          break}}
      return r[1]}
    function exists$1(p,s)
     {var n=caml_ml_bytes_length(s),i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,caml_bytes_unsafe_get(s,i)))return 1;
        var i$0=i + 1 | 0,i=i$0}}
    function for_all$1(p,s)
     {var n=caml_ml_bytes_length(s),i=0;
      for(;;)
       {if(i === n)return 1;
        if(! caml_call1(p,caml_bytes_unsafe_get(s,i)))return 0;
        var i$0=i + 1 | 0,i=i$0}}
    function uppercase_ascii$0(s){return map$5(uppercase_ascii,s)}
    function lowercase_ascii$0(s){return map$5(lowercase_ascii,s)}
    function apply1(f,s)
     {if(0 === caml_ml_bytes_length(s))return s;
      var r=copy(s);
      caml_bytes_unsafe_set(r,0,caml_call1(f,caml_bytes_unsafe_get(s,0)));
      return r}
    function capitalize_ascii(s){return apply1(uppercase_ascii,s)}
    function uncapitalize_ascii(s){return apply1(lowercase_ascii,s)}
    function starts_with(prefix,s)
     {var
       len_s=caml_ml_bytes_length(s),
       len_pre=caml_ml_bytes_length(prefix),
       _z3_=len_pre <= len_s?1:0;
      if(! _z3_)return _z3_;
      var i=0;
      for(;;)
       {if(i === len_pre)return 1;
        if(caml_bytes_unsafe_get(s,i) !== caml_bytes_unsafe_get(prefix,i))
         return 0;
        var i$0=i + 1 | 0,i=i$0}}
    function ends_with(suffix,s)
     {var
       len_s=caml_ml_bytes_length(s),
       len_suf=caml_ml_bytes_length(suffix),
       diff=len_s - len_suf | 0,
       _z2_=0 <= diff?1:0;
      if(! _z2_)return _z2_;
      var i=0;
      for(;;)
       {if(i === len_suf)return 1;
        if
         (caml_bytes_unsafe_get(s,diff + i | 0)
          !==
          caml_bytes_unsafe_get(suffix,i))
         return 0;
        var i$0=i + 1 | 0,i=i$0}}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1}}
    function index(s,c){return index_rec(s,caml_ml_bytes_length(s),0,c)}
    function index_rec_opt(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1}}
    function index_opt(s,c)
     {return index_rec_opt(s,caml_ml_bytes_length(s),0,c)}
    function index_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && l >= i)return index_rec(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_in)}
    function index_from_opt(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && l >= i)return index_rec_opt(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Byte)}
    function rindex_rec(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 > i$0)throw Not_found;
        if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 - 1 | 0,i$0=i$1}}
    function rindex(s,c)
     {return rindex_rec(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from(s,i,c)
     {if(-1 <= i && caml_ml_bytes_length(s) > i)return rindex_rec(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_r)}
    function rindex_rec_opt(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 > i$0)return 0;
        if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 - 1 | 0,i$0=i$1}}
    function rindex_opt(s,c)
     {return rindex_rec_opt(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from_opt(s,i,c)
     {if(-1 <= i && caml_ml_bytes_length(s) > i)return rindex_rec_opt(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Byt)}
    function contains_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && l >= i)
       try
        {index_rec(s,l,i,c);var _z0_=1;return _z0_}
       catch(_z1_)
        {_z1_ = caml_wrap_exception(_z1_);
         if(_z1_ === Not_found)return 0;
         throw _z1_}
      return invalid_arg(cst_String_contains_from_Bytes)}
    function contains(s,c){return contains_from(s,0,c)}
    function rcontains_from(s,i,c)
     {if(0 <= i && caml_ml_bytes_length(s) > i)
       try
        {rindex_rec(s,i,c);var _zY_=1;return _zY_}
       catch(_zZ_)
        {_zZ_ = caml_wrap_exception(_zZ_);
         if(_zZ_ === Not_found)return 0;
         throw _zZ_}
      return invalid_arg(cst_String_rcontains_from_Byte)}
    function compare$8(x,y){return runtime.caml_bytes_compare(x,y)}
    function split_on_char(sep,s)
     {var
       r=[0,0],
       j=[0,caml_ml_bytes_length(s)],
       _zU_=caml_ml_bytes_length(s) - 1 | 0;
      if(_zU_ >= 0)
       {var i=_zU_;
        for(;;)
         {if(caml_bytes_unsafe_get(s,i) === sep)
           {var _zW_=r[1];
            r[1] = [0,sub(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_zW_];
            j[1] = i}
          var _zX_=i - 1 | 0;
          if(0 !== i){var i=_zX_;continue}
          break}}
      var _zV_=r[1];
      return [0,sub(s,0,j[1]),_zV_]}
    function to_seq$2(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_zS_=i + 1 | 0;
        return [0,x,function(_zT_){return aux(_zS_,_zT_)}]}
      var _zQ_=0;
      return function(_zR_){return aux(_zQ_,_zR_)}}
    function to_seqi(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_zO_=i + 1 | 0;
        return [0,[0,i,x],function(_zP_){return aux(_zO_,_zP_)}]}
      var _zM_=0;
      return function(_zN_){return aux(_zM_,_zN_)}}
    function of_seq$0(i)
     {var n=[0,0],buf=[0,make(256,0)];
      iter
       (function(c)
         {if(n[1] === caml_ml_bytes_length(buf[1]))
           {var
             new_len=
              min$1(2 * caml_ml_bytes_length(buf[1]) | 0,max_string_length);
            if(caml_ml_bytes_length(buf[1]) === new_len)
             failwith(cst_Bytes_of_seq_cannot_grow_b);
            var new_buf=make(new_len,0);
            blit(buf[1],0,new_buf,0,n[1]);
            buf[1] = new_buf}
          caml_bytes_set(buf[1],n[1],c);
          n[1]++;
          return 0},
        i);
      return sub(buf[1],0,n[1])}
    function get$0(b,i){return caml_bswap16(caml_bytes_get16(b,i))}
    function get_int8(b,i){return caml_bytes_get(b,i) << 24 >> 24}
    function get_uint16_le(b,i){return caml_bytes_get16(b,i)}
    function get_uint16_be(b,i){return caml_bswap16(caml_bytes_get16(b,i))}
    function get_int16_ne(b,i){return caml_bytes_get16(b,i) << 16 >> 16}
    function get_int16_le(b,i){return caml_bytes_get16(b,i) << 16 >> 16}
    function get_int16_be(b,i){return get_uint16_be(b,i) << 16 >> 16}
    function get_int32_le(b,i){return caml_bytes_get32(b,i)}
    function get_int32_be(b,i){return caml_int32_bswap(caml_bytes_get32(b,i))}
    function get_int64_le(b,i){return caml_bytes_get64(b,i)}
    function get_int64_be(b,i){return caml_int64_bswap(caml_bytes_get64(b,i))}
    function set$0(b,i,x){return caml_bytes_set16(b,i,caml_bswap16(x))}
    function set_int16_le(b,i,x){return caml_bytes_set16(b,i,x)}
    function set_int16_be(b,i,x){return caml_bytes_set16(b,i,caml_bswap16(x))}
    function set_int32_le(b,i,x){return caml_bytes_set32(b,i,x)}
    function set_int32_be(b,i,x)
     {return caml_bytes_set32(b,i,caml_int32_bswap(x))}
    function set_int64_le(b,i,x){return caml_bytes_set64(b,i,x)}
    function set_int64_be(b,i,x)
     {return caml_bytes_set64(b,i,caml_int64_bswap(x))}
    var set_uint8=caml_bytes_set,set_uint16_ne=caml_bytes_set16;
    function dec_ret(n,u){return utf_decode(n,u)}
    function not_in_x80_to_xBF(b){return 2 !== (b >>> 6 | 0)?1:0}
    function not_in_xA0_to_xBF(b){return 5 !== (b >>> 5 | 0)?1:0}
    function not_in_x80_to_x9F(b){return 4 !== (b >>> 5 | 0)?1:0}
    function not_in_x90_to_xBF(b)
     {var _zK_=b < 144?1:0,_zL_=_zK_ || (191 < b?1:0);return _zL_}
    function not_in_x80_to_x8F(b){return 8 !== (b >>> 4 | 0)?1:0}
    function utf_8_uchar_3(b0,b1,b2)
     {return (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63}
    function utf_8_uchar_4(b0,b1,b2,b3)
     {return (b0 & 7) << 18 | (b1 & 63) << 12 | (b2 & 63) << 6 | b3 & 63}
    function get_utf_8_uchar(b,i)
     {var b0=caml_bytes_get(b,i),max=caml_ml_bytes_length(b) - 1 | 0;
      if(224 <= b0)
       {var switch$0=0;
        if(237 <= b0)
         {if(245 > b0)
           switch(b0 - 237 | 0)
            {case 0:
              var i$0=i + 1 | 0;
              if(max < i$0)return dec_invalid(1);
              var b1=caml_bytes_unsafe_get(b,i$0);
              if(not_in_x80_to_x9F(b1))return dec_invalid(1);
              var i$1=i$0 + 1 | 0;
              if(max < i$1)return dec_invalid(2);
              var b2=caml_bytes_unsafe_get(b,i$1);
              return not_in_x80_to_xBF(b2)
                      ?dec_invalid(2)
                      :dec_ret(3,utf_8_uchar_3(b0,b1,b2));
             case 3:
              var i$4=i + 1 | 0;
              if(max < i$4)return dec_invalid(1);
              var b1$1=caml_bytes_unsafe_get(b,i$4);
              if(not_in_x90_to_xBF(b1$1))return dec_invalid(1);
              var i$5=i$4 + 1 | 0;
              if(max < i$5)return dec_invalid(2);
              var b2$1=caml_bytes_unsafe_get(b,i$5);
              if(not_in_x80_to_xBF(b2$1))return dec_invalid(2);
              var i$6=i$5 + 1 | 0;
              if(max < i$6)return dec_invalid(3);
              var b3=caml_bytes_unsafe_get(b,i$6);
              return not_in_x80_to_xBF(b3)
                      ?dec_invalid(3)
                      :dec_ret(4,utf_8_uchar_4(b0,b1$1,b2$1,b3));
             case 7:
              var i$10=i + 1 | 0;
              if(max < i$10)return dec_invalid(1);
              var b1$3=caml_bytes_unsafe_get(b,i$10);
              if(not_in_x80_to_x8F(b1$3))return dec_invalid(1);
              var i$11=i$10 + 1 | 0;
              if(max < i$11)return dec_invalid(2);
              var b2$3=caml_bytes_unsafe_get(b,i$11);
              if(not_in_x80_to_xBF(b2$3))return dec_invalid(2);
              var i$12=i$11 + 1 | 0;
              if(max < i$12)return dec_invalid(3);
              var b3$1=caml_bytes_unsafe_get(b,i$12);
              return not_in_x80_to_xBF(b3$1)
                      ?dec_invalid(3)
                      :dec_ret(4,utf_8_uchar_4(b0,b1$3,b2$3,b3$1));
             case 1:
             case 2:switch$0 = 1;break;
             default:
              var i$7=i + 1 | 0;
              if(max < i$7)return dec_invalid(1);
              var b1$2=caml_bytes_unsafe_get(b,i$7);
              if(not_in_x80_to_xBF(b1$2))return dec_invalid(1);
              var i$8=i$7 + 1 | 0;
              if(max < i$8)return dec_invalid(2);
              var b2$2=caml_bytes_unsafe_get(b,i$8);
              if(not_in_x80_to_xBF(b2$2))return dec_invalid(2);
              var i$9=i$8 + 1 | 0;
              if(max < i$9)return dec_invalid(3);
              var b3$0=caml_bytes_unsafe_get(b,i$9);
              return not_in_x80_to_xBF(b3$0)
                      ?dec_invalid(3)
                      :dec_ret(4,utf_8_uchar_4(b0,b1$2,b2$2,b3$0))}}
        else
         {if(225 > b0)
           {var i$13=i + 1 | 0;
            if(max < i$13)return dec_invalid(1);
            var b1$4=caml_bytes_unsafe_get(b,i$13);
            if(not_in_xA0_to_xBF(b1$4))return dec_invalid(1);
            var i$14=i$13 + 1 | 0;
            if(max < i$14)return dec_invalid(2);
            var b2$4=caml_bytes_unsafe_get(b,i$14);
            return not_in_x80_to_xBF(b2$4)
                    ?dec_invalid(2)
                    :dec_ret(3,utf_8_uchar_3(b0,b1$4,b2$4))}
          switch$0 = 1}
        if(switch$0)
         {var i$2=i + 1 | 0;
          if(max < i$2)return dec_invalid(1);
          var b1$0=caml_bytes_unsafe_get(b,i$2);
          if(not_in_x80_to_xBF(b1$0))return dec_invalid(1);
          var i$3=i$2 + 1 | 0;
          if(max < i$3)return dec_invalid(2);
          var b2$0=caml_bytes_unsafe_get(b,i$3);
          return not_in_x80_to_xBF(b2$0)
                  ?dec_invalid(2)
                  :dec_ret(3,utf_8_uchar_3(b0,b1$0,b2$0))}}
      else
       {if(128 > b0)return dec_ret(1,b0);
        if(194 <= b0)
         {var i$15=i + 1 | 0;
          if(max < i$15)return dec_invalid(1);
          var b1$5=caml_bytes_unsafe_get(b,i$15);
          return not_in_x80_to_xBF(b1$5)
                  ?dec_invalid(1)
                  :dec_ret(2,(b0 & 31) << 6 | b1$5 & 63)}}
      return dec_invalid(1)}
    function set_utf_8_uchar(b,i,u)
     {function set(_zJ_,_zI_,_zH_)
       {caml_bytes_unsafe_set(_zJ_,_zI_,_zH_);return 0}
      var max=caml_ml_bytes_length(b) - 1 | 0;
      if(0 > u)throw [0,Assert_failure,_E_];
      if(127 >= u){caml_bytes_set(b,i,u);return 1}
      if(2047 >= u)
       {var last$1=i + 1 | 0;
        return max < last$1
                ?0
                :(caml_bytes_set(b,i,192 | u >>> 6 | 0),
                  set(b,last$1,128 | u & 63),
                  2)}
      if(65535 >= u)
       {var last$0=i + 2 | 0;
        return max < last$0
                ?0
                :(caml_bytes_set(b,i,224 | u >>> 12 | 0),
                  set(b,i + 1 | 0,128 | (u >>> 6 | 0) & 63),
                  set(b,last$0,128 | u & 63),
                  3)}
      if(1114111 < u)throw [0,Assert_failure,_D_];
      var last=i + 3 | 0;
      return max < last
              ?0
              :(caml_bytes_set(b,i,240 | u >>> 18 | 0),
                set(b,i + 1 | 0,128 | (u >>> 12 | 0) & 63),
                set(b,i + 2 | 0,128 | (u >>> 6 | 0) & 63),
                set(b,last,128 | u & 63),
                4)}
    function is_valid_utf_8(b)
     {var max=caml_ml_bytes_length(b) - 1 | 0,i=0;
      for(;;)
       {if(max < i)return 1;
        var match=caml_bytes_unsafe_get(b,i);
        if(224 <= match)
         {var switch$0=0;
          if(237 <= match)
           {if(245 > match)
             switch(match - 237 | 0)
              {case 0:
                var last=i + 2 | 0;
                if
                 (max
                  >=
                  last
                  &&
                  !
                  not_in_x80_to_x9F(caml_bytes_unsafe_get(b,i + 1 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last)))
                 {var i$0=last + 1 | 0,i=i$0;continue}
                return 0;
               case 3:
                var last$1=i + 3 | 0;
                if
                 (max
                  >=
                  last$1
                  &&
                  !
                  not_in_x90_to_xBF(caml_bytes_unsafe_get(b,i + 1 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,i + 2 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$1)))
                 {var i$2=last$1 + 1 | 0,i=i$2;continue}
                return 0;
               case 7:
                var last$3=i + 3 | 0;
                if
                 (max
                  >=
                  last$3
                  &&
                  !
                  not_in_x80_to_x8F(caml_bytes_unsafe_get(b,i + 1 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,i + 2 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$3)))
                 {var i$4=last$3 + 1 | 0,i=i$4;continue}
                return 0;
               case 1:
               case 2:switch$0 = 1;break;
               default:
                var last$2=i + 3 | 0;
                if
                 (max
                  >=
                  last$2
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,i + 1 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,i + 2 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$2)))
                 {var i$3=last$2 + 1 | 0,i=i$3;continue}
                return 0}}
          else
           {if(225 > match)
             {var last$4=i + 2 | 0;
              if
               (max
                >=
                last$4
                &&
                !
                not_in_xA0_to_xBF(caml_bytes_unsafe_get(b,i + 1 | 0))
                &&
                !
                not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$4)))
               {var i$5=last$4 + 1 | 0,i=i$5;continue}
              return 0}
            switch$0 = 1}
          if(switch$0)
           {var last$0=i + 2 | 0;
            if
             (max
              >=
              last$0
              &&
              !
              not_in_x80_to_xBF(caml_bytes_unsafe_get(b,i + 1 | 0))
              &&
              !
              not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$0)))
             {var i$1=last$0 + 1 | 0,i=i$1;continue}
            return 0}}
        else
         {if(128 > match){var i$7=i + 1 | 0,i=i$7;continue}
          if(194 <= match)
           {var last$5=i + 1 | 0;
            if
             (max
              >=
              last$5
              &&
              !
              not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$5)))
             {var i$6=last$5 + 1 | 0,i=i$6;continue}
            return 0}}
        return 0}}
    function get_utf_16be_uchar(b,i)
     {var max=caml_ml_bytes_length(b) - 1 | 0;
      if(0 <= i && max >= i)
       {if(i === max)return dec_invalid(1);
        var hi=get$0(b,i);
        if(55296 <= hi && 57343 >= hi)
         {if(56319 < hi)return dec_invalid(2);
          var last=i + 3 | 0;
          if(max < last)return dec_invalid((max - i | 0) + 1 | 0);
          var u=get$0(b,i + 2 | 0);
          if(56320 <= u && 57343 >= u)
           {var u$0=((hi & 1023) << 10 | u & 1023) + 65536 | 0;
            return dec_ret(4,u$0)}
          return dec_invalid(2)}
        return dec_ret(2,hi)}
      return invalid_arg(cst_index_out_of_bounds)}
    function set_utf_16be_uchar(b,i,u)
     {var max=caml_ml_bytes_length(b) - 1 | 0;
      if(0 <= i && max >= i)
       {if(0 > u)throw [0,Assert_failure,_G_];
        if(65535 >= u)
         {var last$0=i + 1 | 0;return max < last$0?0:(set$0(b,i,u),2)}
        if(1114111 < u)throw [0,Assert_failure,_F_];
        var last=i + 3 | 0;
        if(max < last)return 0;
        var u$0=u - 65536 | 0,hi=55296 | u$0 >>> 10 | 0,lo=56320 | u$0 & 1023;
        set$0(b,i,hi);
        set$0(b,i + 2 | 0,lo);
        return 4}
      return invalid_arg(cst_index_out_of_bounds$0)}
    function is_valid_utf_16be(b)
     {var max=caml_ml_bytes_length(b) - 1 | 0,i=0;
      for(;;)
       {if(max < i)return 1;
        if(i === max)return 0;
        var u=get$0(b,i);
        if(55296 <= u && 57343 >= u)
         {if(56319 < u)return 0;
          var last=i + 3 | 0;
          if(max < last)return 0;
          var u$0=get$0(b,i + 2 | 0);
          if(56320 <= u$0 && 57343 >= u$0){var i$1=i + 4 | 0,i=i$1;continue}
          return 0}
        var i$0=i + 2 | 0,i=i$0}}
    function get_utf_16le_uchar(b,i)
     {var max=caml_ml_bytes_length(b) - 1 | 0;
      if(0 <= i && max >= i)
       {if(i === max)return dec_invalid(1);
        var hi=caml_bytes_get16(b,i);
        if(55296 <= hi && 57343 >= hi)
         {if(56319 < hi)return dec_invalid(2);
          var last=i + 3 | 0;
          if(max < last)return dec_invalid((max - i | 0) + 1 | 0);
          var u=caml_bytes_get16(b,i + 2 | 0);
          if(56320 <= u && 57343 >= u)
           {var u$0=((hi & 1023) << 10 | u & 1023) + 65536 | 0;
            return dec_ret(4,u$0)}
          return dec_invalid(2)}
        return dec_ret(2,hi)}
      return invalid_arg(cst_index_out_of_bounds$1)}
    function set_utf_16le_uchar(b,i,u)
     {var max=caml_ml_bytes_length(b) - 1 | 0;
      if(0 <= i && max >= i)
       {if(0 > u)throw [0,Assert_failure,_I_];
        if(65535 >= u)
         {var last$0=i + 1 | 0;
          return max < last$0?0:(caml_bytes_set16(b,i,u),2)}
        if(1114111 < u)throw [0,Assert_failure,_H_];
        var last=i + 3 | 0;
        if(max < last)return 0;
        var u$0=u - 65536 | 0,hi=55296 | u$0 >>> 10 | 0,lo=56320 | u$0 & 1023;
        caml_bytes_set16(b,i,hi);
        caml_bytes_set16(b,i + 2 | 0,lo);
        return 4}
      return invalid_arg(cst_index_out_of_bounds$2)}
    function is_valid_utf_16le(b)
     {var max=caml_ml_bytes_length(b) - 1 | 0,i=0;
      for(;;)
       {if(max < i)return 1;
        if(i === max)return 0;
        var u=caml_bytes_get16(b,i);
        if(55296 <= u && 57343 >= u)
         {if(56319 < u)return 0;
          var last=i + 3 | 0;
          if(max < last)return 0;
          var u$0=caml_bytes_get16(b,i + 2 | 0);
          if(56320 <= u$0 && 57343 >= u$0){var i$1=i + 4 | 0,i=i$1;continue}
          return 0}
        var i$0=i + 2 | 0,i=i$0}}
    var
     set_int64_ne=caml_bytes_set64,
     set_int32_ne=caml_bytes_set32,
     set_int16_ne=caml_bytes_set16,
     set_int8=caml_bytes_set,
     get_int64_ne=caml_bytes_get64,
     get_int32_ne=caml_bytes_get32,
     get_uint16_ne=caml_bytes_get16,
     get_uint8=caml_bytes_get,
     unsafe_of_string=caml_bytes_of_string,
     unsafe_to_string=caml_string_of_bytes,
     equal$8=runtime.caml_bytes_equal,
     include$0=
      [0,
       make,
       init$1,
       empty$0,
       copy,
       to_bytes,
       of_bytes,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat$0,
       cat$0,
       iter$3,
       iteri$1,
       map$5,
       mapi$1,
       fold_left$1,
       fold_right$0,
       for_all$1,
       exists$1,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$8,
       equal$8,
       starts_with,
       ends_with,
       unsafe_to_string,
       unsafe_of_string,
       split_on_char,
       to_seq$2,
       to_seqi,
       of_seq$0,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le,
       unsafe_escape];
    caml_register_global(776,include$0,"Stdlib__Bytes");
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function init$2(n,f){return caml_string_of_bytes(init$1(n,f))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function concat$1(sep,l)
     {if(! l)return cst$3;
      var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
      for(;;)
       {if(param)
         {var _zE_=param[1];
          if(param[2])
           {var
             tl=param[2],
             x=(caml_ml_string_length(_zE_) + seplen | 0) + acc | 0,
             acc$0=acc <= x?x:invalid_arg(cst_String_concat),
             acc=acc$0,
             param=tl;
            continue}
          var _zG_=caml_ml_string_length(_zE_) + acc | 0}
        else
         var _zG_=acc;
        var dst=caml_create_bytes(_zG_),pos=pos$1,param$0=l;
        for(;;)
         {if(param$0)
           {var _zF_=param$0[1];
            if(param$0[2])
             {var tl$0=param$0[2];
              caml_blit_string(_zF_,0,dst,pos,caml_ml_string_length(_zF_));
              caml_blit_string
               (sep,0,dst,pos + caml_ml_string_length(_zF_) | 0,seplen);
              var
               pos$0=(pos + caml_ml_string_length(_zF_) | 0) + seplen | 0,
               pos=pos$0,
               param$0=tl$0;
              continue}
            caml_blit_string(_zF_,0,dst,pos,caml_ml_string_length(_zF_))}
          return caml_string_of_bytes(dst)}}}
    function iter$4(f,s)
     {var _zC_=caml_ml_string_length(s) - 1 | 0,_zB_=0;
      if(_zC_ >= 0)
       {var i=_zB_;
        for(;;)
         {caml_call1(f,caml_string_unsafe_get(s,i));
          var _zD_=i + 1 | 0;
          if(_zC_ !== i){var i=_zD_;continue}
          break}}
      return 0}
    function iteri$2(f,s)
     {var _zz_=caml_ml_string_length(s) - 1 | 0,_zy_=0;
      if(_zz_ >= 0)
       {var i=_zy_;
        for(;;)
         {caml_call2(f,i,caml_string_unsafe_get(s,i));
          var _zA_=i + 1 | 0;
          if(_zz_ !== i){var i=_zA_;continue}
          break}}
      return 0}
    function map$6(f,s)
     {return caml_string_of_bytes(map$5(f,caml_bytes_of_string(s)))}
    function mapi$2(f,s)
     {return caml_string_of_bytes(mapi$1(f,caml_bytes_of_string(s)))}
    function fold_right$1(f,x,a)
     {return fold_right$0(f,caml_bytes_of_string(x),a)}
    function fold_left$2(f,a,x)
     {return fold_left$1(f,a,caml_bytes_of_string(x))}
    function exists$2(f,s){return exists$1(f,caml_bytes_of_string(s))}
    function for_all$2(f,s){return for_all$1(f,caml_bytes_of_string(s))}
    function is_space$0(param)
     {var _zx_=param - 9 | 0,switch$0=0;
      if(4 < _zx_ >>> 0)
       {if(23 === _zx_)switch$0 = 1}
      else
       if(2 !== _zx_)switch$0 = 1;
      return switch$0?1:0}
    function trim$0(s)
     {if(caml_string_equal(s,cst$4))return s;
      if
       (!
        is_space$0(caml_string_unsafe_get(s,0))
        &&
        !
        is_space$0(caml_string_unsafe_get(s,caml_ml_string_length(s) - 1 | 0)))
       return s;
      return caml_string_of_bytes(trim(caml_bytes_of_string(s)))}
    function escaped$1(s)
     {var b=caml_bytes_of_string(s);
      return caml_string_of_bytes(unsafe_escape(b))}
    function index_rec$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1}}
    function index$0(s,c){return index_rec$0(s,caml_ml_string_length(s),0,c)}
    function index_rec_opt$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1}}
    function index_opt$0(s,c)
     {return index_rec_opt$0(s,caml_ml_string_length(s),0,c)}
    function index_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && l >= i)return index_rec$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_in$0)}
    function index_from_opt$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && l >= i)return index_rec_opt$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Byte$0)}
    function rindex_rec$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 > i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 - 1 | 0,i$0=i$1}}
    function rindex$0(s,c)
     {return rindex_rec$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from$0(s,i,c)
     {if(-1 <= i && caml_ml_string_length(s) > i)return rindex_rec$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_r$0)}
    function rindex_rec_opt$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 > i$0)return 0;
        if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 - 1 | 0,i$0=i$1}}
    function rindex_opt$0(s,c)
     {return rindex_rec_opt$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from_opt$0(s,i,c)
     {if(-1 <= i && caml_ml_string_length(s) > i)
       return rindex_rec_opt$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Byt$0)}
    function contains_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && l >= i)
       try
        {index_rec$0(s,l,i,c);var _zv_=1;return _zv_}
       catch(_zw_)
        {_zw_ = caml_wrap_exception(_zw_);
         if(_zw_ === Not_found)return 0;
         throw _zw_}
      return invalid_arg(cst_String_contains_from_Bytes$0)}
    function contains$0(s,c){return contains_from$0(s,0,c)}
    function rcontains_from$0(s,i,c)
     {if(0 <= i && caml_ml_string_length(s) > i)
       try
        {rindex_rec$0(s,i,c);var _zt_=1;return _zt_}
       catch(_zu_)
        {_zu_ = caml_wrap_exception(_zu_);
         if(_zu_ === Not_found)return 0;
         throw _zu_}
      return invalid_arg(cst_String_rcontains_from_Byte$0)}
    function uppercase_ascii$1(s)
     {return caml_string_of_bytes(uppercase_ascii$0(caml_bytes_of_string(s)))}
    function lowercase_ascii$1(s)
     {return caml_string_of_bytes(lowercase_ascii$0(caml_bytes_of_string(s)))}
    function capitalize_ascii$0(s)
     {return caml_string_of_bytes(capitalize_ascii(caml_bytes_of_string(s)))}
    function uncapitalize_ascii$0(s)
     {return caml_string_of_bytes(uncapitalize_ascii(caml_bytes_of_string(s)))}
    function starts_with$0(prefix,s)
     {var
       len_s=caml_ml_string_length(s),
       len_pre=caml_ml_string_length(prefix),
       _zs_=len_pre <= len_s?1:0;
      if(! _zs_)return _zs_;
      var i=0;
      for(;;)
       {if(i === len_pre)return 1;
        if(caml_string_unsafe_get(s,i) !== caml_string_unsafe_get(prefix,i))
         return 0;
        var i$0=i + 1 | 0,i=i$0}}
    function ends_with$0(suffix,s)
     {var
       len_s=caml_ml_string_length(s),
       len_suf=caml_ml_string_length(suffix),
       diff=len_s - len_suf | 0,
       _zr_=0 <= diff?1:0;
      if(! _zr_)return _zr_;
      var i=0;
      for(;;)
       {if(i === len_suf)return 1;
        if
         (caml_string_unsafe_get(s,diff + i | 0)
          !==
          caml_string_unsafe_get(suffix,i))
         return 0;
        var i$0=i + 1 | 0,i=i$0}}
    function hash$0(x){return caml_string_hash(0,x)}
    function split_on_char$0(sep,s)
     {var
       r=[0,0],
       j=[0,caml_ml_string_length(s)],
       _zn_=caml_ml_string_length(s) - 1 | 0;
      if(_zn_ >= 0)
       {var i=_zn_;
        for(;;)
         {if(caml_string_unsafe_get(s,i) === sep)
           {var _zp_=r[1];
            r[1] = [0,sub$0(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_zp_];
            j[1] = i}
          var _zq_=i - 1 | 0;
          if(0 !== i){var i=_zq_;continue}
          break}}
      var _zo_=r[1];
      return [0,sub$0(s,0,j[1]),_zo_]}
    function compare$9(x,y){return caml_string_compare(x,y)}
    function to_seq$3(s){return to_seq$2(caml_bytes_of_string(s))}
    function to_seqi$0(s){return to_seqi(caml_bytes_of_string(s))}
    function of_seq$1(g){return caml_string_of_bytes(of_seq$0(g))}
    function get_utf_8_uchar$0(s,i)
     {return get_utf_8_uchar(caml_bytes_of_string(s),i)}
    function is_valid_utf_8$0(s)
     {return is_valid_utf_8(caml_bytes_of_string(s))}
    function get_utf_16be_uchar$0(s,i)
     {return get_utf_16be_uchar(caml_bytes_of_string(s),i)}
    function is_valid_utf_16be$0(s)
     {return is_valid_utf_16be(caml_bytes_of_string(s))}
    function get_utf_16le_uchar$0(s,i)
     {return get_utf_16le_uchar(caml_bytes_of_string(s),i)}
    function is_valid_utf_16le$0(s)
     {return is_valid_utf_16le(caml_bytes_of_string(s))}
    function get_int8$0(s,i){return get_int8(caml_bytes_of_string(s),i)}
    function get_uint16_le$0(s,i)
     {return caml_bytes_get16(caml_bytes_of_string(s),i)}
    function get_uint16_be$0(s,i)
     {return get_uint16_be(caml_bytes_of_string(s),i)}
    function get_int16_ne$0(s,i)
     {return get_int16_ne(caml_bytes_of_string(s),i)}
    function get_int16_le$0(s,i)
     {return get_int16_le(caml_bytes_of_string(s),i)}
    function get_int16_be$0(s,i)
     {return get_int16_be(caml_bytes_of_string(s),i)}
    function get_int32_le$0(s,i)
     {return caml_bytes_get32(caml_bytes_of_string(s),i)}
    function get_int32_be$0(s,i)
     {return get_int32_be(caml_bytes_of_string(s),i)}
    function get_int64_le$0(s,i)
     {return caml_bytes_get64(caml_bytes_of_string(s),i)}
    function get_int64_be$0(s,i)
     {return get_int64_be(caml_bytes_of_string(s),i)}
    var
     get_int64_ne$0=runtime.caml_string_get64,
     seeded_hash=caml_string_hash,
     get_int32_ne$0=runtime.caml_string_get32,
     get_uint16_ne$0=runtime.caml_string_get16,
     get_uint8$0=caml_string_get,
     equal$9=caml_string_equal,
     include$1=
      [0,
       make$0,
       init$2,
       empty$1,
       of_bytes,
       to_bytes,
       concat$1,
       cat,
       equal$9,
       compare$9,
       starts_with$0,
       ends_with$0,
       contains_from$0,
       rcontains_from$0,
       contains$0,
       sub$0,
       split_on_char$0,
       map$6,
       mapi$2,
       fold_left$2,
       fold_right$1,
       for_all$2,
       exists$2,
       trim$0,
       escaped$1,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       iter$4,
       iteri$2,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       to_seq$3,
       to_seqi$0,
       of_seq$1,
       get_utf_8_uchar$0,
       is_valid_utf_8$0,
       get_utf_16be_uchar$0,
       is_valid_utf_16be$0,
       get_utf_16le_uchar$0,
       is_valid_utf_16le$0,
       blit$0,
       get_uint8$0,
       get_int8$0,
       get_uint16_ne$0,
       get_uint16_be$0,
       get_uint16_le$0,
       get_int16_ne$0,
       get_int16_be$0,
       get_int16_le$0,
       get_int32_ne$0,
       hash$0,
       seeded_hash,
       get_int32_be$0,
       get_int32_le$0,
       get_int64_ne$0,
       get_int64_be$0,
       get_int64_le$0];
    caml_register_global(777,include$1,"Stdlib__String");
    function equal$10(param,_zm_){return 1}
    function compare$10(param,_zl_){return 0}
    function to_string$2(param){return cst$5}
    var Stdlib_Unit=[0,equal$10,compare$10,to_string$2];
    caml_register_global(778,Stdlib_Unit,"Stdlib__Unit");
    function to_buffer(buff,ofs,len,v,flags)
     {if
       (0 <= ofs && 0 <= len && (caml_ml_bytes_length(buff) - len | 0) >= ofs)
       return runtime.caml_output_value_to_buffer(buff,ofs,len,v,flags);
      return invalid_arg(cst_Marshal_to_buffer_substrin)}
    var header_size=20;
    function data_size(buff,ofs)
     {if(0 <= ofs && (caml_ml_bytes_length(buff) - 20 | 0) >= ofs)
       return caml_marshal_data_size(buff,ofs);
      return invalid_arg(cst_Marshal_data_size)}
    function total_size(buff,ofs){return 20 + data_size(buff,ofs) | 0}
    function from_bytes(buff,ofs)
     {if(0 <= ofs && (caml_ml_bytes_length(buff) - 20 | 0) >= ofs)
       {var len=caml_marshal_data_size(buff,ofs);
        return (caml_ml_bytes_length(buff) - (20 + len | 0) | 0) < ofs
                ?invalid_arg(cst_Marshal_from_bytes$0)
                :runtime.caml_input_value_from_bytes(buff,ofs)}
      return invalid_arg(cst_Marshal_from_bytes)}
    function from_string(buff,ofs)
     {return from_bytes(caml_bytes_of_string(buff),ofs)}
    var
     Stdlib_Marshal=
      [0,
       caml_output_value,
       to_buffer,
       caml_input_value,
       from_bytes,
       from_string,
       header_size,
       data_size,
       total_size];
    caml_register_global(779,Stdlib_Marshal,"Stdlib__Marshal");
    var Floatarray=[0];
    function init$3(l,f)
     {if(0 === l)return [0];
      if(0 > l)return invalid_arg(cst_Array_init);
      var res=caml_make_vect(l,caml_call1(f,0)),_zj_=l - 1 | 0,_zi_=1;
      if(_zj_ >= 1)
       {var i=_zi_;
        for(;;)
         {res[1 + i] = caml_call1(f,i);
          var _zk_=i + 1 | 0;
          if(_zj_ !== i){var i=_zk_;continue}
          break}}
      return res}
    function make_matrix(sx,sy,init)
     {var res=caml_make_vect(sx,[0]),_zg_=sx - 1 | 0,_zf_=0;
      if(_zg_ >= 0)
       {var x=_zf_;
        for(;;)
         {res[1 + x] = caml_make_vect(sy,init);
          var _zh_=x + 1 | 0;
          if(_zg_ !== x){var x=_zh_;continue}
          break}}
      return res}
    function copy$0(a)
     {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
    function append$1(a1,a2)
     {var l1=a1.length - 1;
      return 0 === l1
              ?copy$0(a2)
              :0 === a2.length - 1
                ?caml_array_sub(a1,0,l1)
                :runtime.caml_array_append(a1,a2)}
    function sub$1(a,ofs,len)
     {if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
       return caml_array_sub(a,ofs,len);
      return invalid_arg(cst_Array_sub)}
    function fill$0(a,ofs,len,v)
     {if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
       return runtime.caml_array_fill(a,ofs,len,v);
      return invalid_arg(cst_Array_fill)}
    function blit$1(a1,ofs1,a2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        (a1.length - 1 - len | 0)
        >=
        ofs1
        &&
        0
        <=
        ofs2
        &&
        (a2.length - 1 - len | 0)
        >=
        ofs2)
       return runtime.caml_array_blit(a1,ofs1,a2,ofs2,len);
      return invalid_arg(cst_Array_blit)}
    function iter$5(f,a)
     {var _zd_=a.length - 1 - 1 | 0,_zc_=0;
      if(_zd_ >= 0)
       {var i=_zc_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _ze_=i + 1 | 0;
          if(_zd_ !== i){var i=_ze_;continue}
          break}}
      return 0}
    function iter2$1(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Array_iter2_arrays_must_ha);
      var _za_=a.length - 1 - 1 | 0,_y$_=0;
      if(_za_ >= 0)
       {var i=_y$_;
        for(;;)
         {caml_call2(f,a[1 + i],b[1 + i]);
          var _zb_=i + 1 | 0;
          if(_za_ !== i){var i=_zb_;continue}
          break}}
      return 0}
    function map$7(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_y9_=l - 1 | 0,_y8_=1;
      if(_y9_ >= 1)
       {var i=_y8_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _y__=i + 1 | 0;
          if(_y9_ !== i){var i=_y__;continue}
          break}}
      return r}
    function map2$1(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)return invalid_arg(cst_Array_map2_arrays_must_hav);
      if(0 === la)return [0];
      var r=caml_make_vect(la,caml_call2(f,a[1],b[1])),_y6_=la - 1 | 0,_y5_=1;
      if(_y6_ >= 1)
       {var i=_y5_;
        for(;;)
         {r[1 + i] = caml_call2(f,a[1 + i],b[1 + i]);
          var _y7_=i + 1 | 0;
          if(_y6_ !== i){var i=_y7_;continue}
          break}}
      return r}
    function iteri$3(f,a)
     {var _y3_=a.length - 1 - 1 | 0,_y2_=0;
      if(_y3_ >= 0)
       {var i=_y2_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _y4_=i + 1 | 0;
          if(_y3_ !== i){var i=_y4_;continue}
          break}}
      return 0}
    function mapi$3(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call2(f,0,a[1])),_y0_=l - 1 | 0,_yZ_=1;
      if(_y0_ >= 1)
       {var i=_yZ_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _y1_=i + 1 | 0;
          if(_y0_ !== i){var i=_y1_;continue}
          break}}
      return r}
    function to_list$1(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 > i)return res;
        var res$0=[0,a[1 + i],res],i$0=i - 1 | 0,i=i$0,res=res$0}}
    function list_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(! param$0)return accu$0;
        var
         param$1=param$0[2],
         accu$1=accu$0 + 1 | 0,
         accu$0=accu$1,
         param$0=param$1}}
    function of_list(l)
     {if(! l)return [0];
      var tl=l[2],hd=l[1],a=caml_make_vect(list_length(0,l),hd),i=1,param=tl;
      for(;;)
       {if(! param)return a;
        var tl$0=param[2],hd$0=param[1];
        a[1 + i] = hd$0;
        var i$0=i + 1 | 0,i=i$0,param=tl$0}}
    function fold_left$3(f,x,a)
     {var r=[0,x],_yX_=a.length - 1 - 1 | 0,_yW_=0;
      if(_yX_ >= 0)
       {var i=_yW_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _yY_=i + 1 | 0;
          if(_yX_ !== i){var i=_yY_;continue}
          break}}
      return r[1]}
    function fold_left_map$0(f,acc,input_array)
     {var len=input_array.length - 1;
      if(0 === len)return [0,acc,[0]];
      var
       match=caml_call2(f,acc,input_array[1]),
       elt=match[2],
       acc$0=match[1],
       output_array=caml_make_vect(len,elt),
       acc$1=[0,acc$0],
       _yU_=len - 1 | 0,
       _yT_=1;
      if(_yU_ >= 1)
       {var i=_yT_;
        for(;;)
         {var
           match$0=caml_call2(f,acc$1[1],input_array[1 + i]),
           elt$0=match$0[2],
           acc$2=match$0[1];
          acc$1[1] = acc$2;
          output_array[1 + i] = elt$0;
          var _yV_=i + 1 | 0;
          if(_yU_ !== i){var i=_yV_;continue}
          break}}
      return [0,acc$1[1],output_array]}
    function fold_right$2(f,a,x)
     {var r=[0,x],_yR_=a.length - 1 - 1 | 0;
      if(_yR_ >= 0)
       {var i=_yR_;
        for(;;)
         {r[1] = caml_call2(f,a[1 + i],r[1]);
          var _yS_=i - 1 | 0;
          if(0 !== i){var i=_yS_;continue}
          break}}
      return r[1]}
    function exists$3(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0}}
    function for_all$3(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(! caml_call1(p,a[1 + i]))return 0;
        var i$0=i + 1 | 0,i=i$0}}
    function for_all2$1(p,l1,l2)
     {var n1=l1.length - 1,n2=l2.length - 1;
      if(n1 !== n2)return invalid_arg(cst_Array_for_all2);
      var i=0;
      for(;;)
       {if(i === n1)return 1;
        if(! caml_call2(p,l1[1 + i],l2[1 + i]))return 0;
        var i$0=i + 1 | 0,i=i$0}}
    function exists2$1(p,l1,l2)
     {var n1=l1.length - 1,n2=l2.length - 1;
      if(n1 !== n2)return invalid_arg(cst_Array_exists2);
      var i=0;
      for(;;)
       {if(i === n1)return 0;
        if(caml_call2(p,l1[1 + i],l2[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0}}
    function mem$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_compare(a[1 + i],x))return 1;
        var i$0=i + 1 | 0,i=i$0}}
    function memq$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(x === a[1 + i])return 1;
        var i$0=i + 1 | 0,i=i$0}}
    function find_opt$0(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        var x=a[1 + i];
        if(caml_call1(p,x))return [0,x];
        var i$0=i + 1 | 0,i=i$0}}
    function find_map$1(f,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        var r=caml_call1(f,a[1 + i]);
        if(r)return r;
        var i$0=i + 1 | 0,i=i$0}}
    function split$0(x)
     {if(caml_equal(x,[0]))return [0,[0],[0]];
      var
       match=x[1],
       b0=match[2],
       a0=match[1],
       n=x.length - 1,
       a=caml_make_vect(n,a0),
       b=caml_make_vect(n,b0),
       _yP_=n - 1 | 0,
       _yO_=1;
      if(_yP_ >= 1)
       {var i=_yO_;
        for(;;)
         {var match$0=x[1 + i],bi=match$0[2],ai=match$0[1];
          a[1 + i] = ai;
          b[1 + i] = bi;
          var _yQ_=i + 1 | 0;
          if(_yP_ !== i){var i=_yQ_;continue}
          break}}
      return [0,a,b]}
    function combine$0(a,b)
     {var na=a.length - 1,nb=b.length - 1;
      if(na !== nb)invalid_arg(cst_Array_combine);
      if(0 === na)return [0];
      var x=caml_make_vect(na,[0,a[1],b[1]]),_yM_=na - 1 | 0,_yL_=1;
      if(_yM_ >= 1)
       {var i=_yL_;
        for(;;)
         {x[1 + i] = [0,a[1 + i],b[1 + i]];
          var _yN_=i + 1 | 0;
          if(_yM_ !== i){var i=_yN_;continue}
          break}}
      return x}
    var Bottom=[248,cst_Stdlib_Array_Bottom,caml_fresh_oo_id(0)];
    function sort(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {var _yE_=i31 + 1 | 0,_yF_=caml_check_bound(a,_yE_)[1 + _yE_];
          if(caml_call2(cmp,caml_check_bound(a,i31)[1 + i31],_yF_) < 0)
           x[1] = i31 + 1 | 0;
          var
           _yG_=i31 + 2 | 0,
           _yH_=caml_check_bound(a,_yG_)[1 + _yG_],
           _yI_=x[1];
          if(caml_call2(cmp,caml_check_bound(a,_yI_)[1 + _yI_],_yH_) < 0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if((i31 + 1 | 0) < l)
         {var _yJ_=i31 + 1 | 0,_yK_=caml_check_bound(a,_yJ_)[1 + _yJ_];
          if(0 > caml_call2(cmp,caml_check_bound(a,i31)[1 + i31],_yK_))
           return i31 + 1 | 0}
        if(i31 < l)return i31;
        throw [0,Bottom,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_check_bound(a,j)[1 + j],e))
           {var _yD_=caml_check_bound(a,j)[1 + j];
            caml_check_bound(a,i$0)[1 + i$0] = _yD_;
            var i$0=j;
            continue}
          caml_check_bound(a,i$0)[1 + i$0] = e;
          return 0}}
      function trickle(l,i,e)
       {try
         {var _yC_=trickledown(l,i,e);return _yC_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] !== Bottom)throw exn;
          var i$0=exn[2];
          caml_check_bound(a,i$0)[1 + i$0] = e;
          return 0}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0),_yB_=caml_check_bound(a,i$1)[1 + i$1];
          caml_check_bound(a,i$0)[1 + i$0] = _yB_;
          var i$0=i$1}}
      function bubble(l,i)
       {try
         {var _yA_=bubbledown(l,i);return _yA_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] !== Bottom)throw exn;
          var i$0=exn[2];
          return i$0}}
      var l=a.length - 1,_ys_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(_ys_ >= 0)
       {var i$2=_ys_;
        for(;;)
         {trickle(l,i$2,caml_check_bound(a,i$2)[1 + i$2]);
          var _yz_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_yz_;continue}
          break}}
      var _yt_=l - 1 | 0;
      if(_yt_ >= 2)
       {var i$0=_yt_;
        a:
        for(;;)
         {var
           e$0=caml_check_bound(a,i$0)[1 + i$0],
           _yx_=caml_check_bound(a,0)[1];
          caml_check_bound(a,i$0)[1 + i$0] = _yx_;
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_J_];
            if
             (0 <= caml_call2(cmp,caml_check_bound(a,father)[1 + father],e$0))
             caml_check_bound(a,i)[1 + i] = e$0;
            else
             {var _yr_=caml_check_bound(a,father)[1 + father];
              caml_check_bound(a,i)[1 + i] = _yr_;
              if(0 < father){var i=father;continue}
              caml_check_bound(a,0)[1] = e$0}
            var _yy_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_yy_;continue a}
            break}
          break}}
      var _yu_=1 < l?1:0;
      if(_yu_)
       {var e=caml_check_bound(a,1)[2],_yv_=caml_check_bound(a,0)[1];
        caml_check_bound(a,1)[2] = _yv_;
        caml_check_bound(a,0)[1] = e;
        var _yw_=0}
      else
       var _yw_=_yu_;
      return _yw_}
    function fast_sort$0(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_check_bound(src2,src2ofs)[1 + src2ofs],
         s1$1=caml_check_bound(a,src1ofs)[1 + src1ofs],
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_check_bound(dst,d)[1 + d] = s2;
            var i2$0=i2 + 1 | 0;
            if(i2$0 >= src2r)return blit$1(a,i1,dst,d + 1 | 0,src1r - i1 | 0);
            var
             d$0=d + 1 | 0,
             s2$0=caml_check_bound(src2,i2$0)[1 + i2$0],
             i2=i2$0,
             s2=s2$0,
             d=d$0;
            continue}
          caml_check_bound(dst,d)[1 + d] = s1;
          var i1$0=i1 + 1 | 0;
          if(i1$0 >= src1r)
           return blit$1(src2,i2,dst,d + 1 | 0,src2r - i2 | 0);
          var
           d$1=d + 1 | 0,
           s1$0=caml_check_bound(a,i1$0)[1 + i1$0],
           i1=i1$0,
           s1=s1$0,
           d=d$1}}
      function isortto(srcofs,dst,dstofs,len)
       {var _yj_=len - 1 | 0,_yi_=0;
        if(_yj_ >= 0)
         {var i=_yi_;
          a:
          for(;;)
           {var
             _yk_=srcofs + i | 0,
             e=caml_check_bound(a,_yk_)[1 + _yk_],
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if(dstofs <= j[1])
               {var _yl_=j[1];
                if(0 < caml_call2(cmp,caml_check_bound(dst,_yl_)[1 + _yl_],e))
                 {var
                   _ym_=j[1],
                   _yn_=caml_check_bound(dst,_ym_)[1 + _ym_],
                   _yo_=j[1] + 1 | 0;
                  caml_check_bound(dst,_yo_)[1 + _yo_] = _yn_;
                  j[1] += -1;
                  continue}}
              var _yp_=j[1] + 1 | 0;
              caml_check_bound(dst,_yp_)[1 + _yp_] = e;
              var _yq_=i + 1 | 0;
              if(_yj_ !== i){var i=_yq_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var
       l1=l / 2 | 0,
       l2=l - l1 | 0,
       t=caml_make_vect(l2,caml_check_bound(a,0)[1]);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$4(a)
     {function aux(i,param)
       {if(i >= a.length - 1)return 0;
        var x=a[1 + i],_yg_=i + 1 | 0;
        return [0,x,function(_yh_){return aux(_yg_,_yh_)}]}
      var _ye_=0;
      return function(_yf_){return aux(_ye_,_yf_)}}
    function to_seqi$1(a)
     {function aux(i,param)
       {if(i >= a.length - 1)return 0;
        var x=a[1 + i],_yc_=i + 1 | 0;
        return [0,[0,i,x],function(_yd_){return aux(_yc_,_yd_)}]}
      var _ya_=0;
      return function(_yb_){return aux(_ya_,_yb_)}}
    function of_seq$2(i$2)
     {var _x$_=0,l=fold_left(function(acc,x){return [0,x,acc]},_x$_,i$2);
      if(! l)return [0];
      var
       tl=l[2],
       hd=l[1],
       len=list_length(0,l),
       a=caml_make_vect(len,hd),
       i$1=len - 2 | 0,
       i=i$1,
       param=tl;
      for(;;)
       {if(! param)return a;
        var tl$0=param[2],hd$0=param[1];
        a[1 + i] = hd$0;
        var i$0=i - 1 | 0,i=i$0,param=tl$0}}
    var
     concat$2=caml_array_concat,
     include$2=
      [0,
       init$3,
       make_matrix,
       append$1,
       concat$2,
       sub$1,
       copy$0,
       fill$0,
       blit$1,
       to_list$1,
       of_list,
       iter$5,
       iteri$3,
       map$7,
       mapi$3,
       fold_left$3,
       fold_left_map$0,
       fold_right$2,
       iter2$1,
       map2$1,
       for_all$3,
       exists$3,
       for_all2$1,
       exists2$1,
       mem$0,
       memq$0,
       find_opt$0,
       find_map$1,
       split$0,
       combine$0,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$4,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(780,include$2,"Stdlib__Array");
    var zero$0=0.,one$0=1.,minus_one$0=-1.;
    function is_finite(x){return x - x == 0.?1:0}
    function is_infinite(x){return 1. / x == 0.?1:0}
    function is_nan(x){return x != x?1:0}
    var pi=3.14159265358979312;
    function is_integer(x)
     {var _x__=x == runtime.caml_trunc_float(x)?1:0;
      return _x__?is_finite(x):_x__}
    function succ$0(x){return caml_nextafter_float(x,infinity)}
    function pred$0(x){return caml_nextafter_float(x,neg_infinity)}
    function equal$11(x,y){return 0 === caml_float_compare(x,y)?1:0}
    function min$2(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?x:y}
      return y != y?y:x}
    function max$2(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return y != y?y:x}
      return x != x?x:y}
    function min_max(x,y)
     {if(x == x && y == y)
       {if(! (x < y))
         {var switch$0=0;
          if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
          if(switch$0)return [0,y,x]}
        return [0,x,y]}
      return [0,nan,nan]}
    function min_num(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return y != y?x:y}
      return x != x?y:x}
    function max_num(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?y:x}
      return y != y?x:y}
    function min_max_num(x,y)
     {if(x != x)return [0,y,y];
      if(y != y)return [0,x,x];
      if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return [0,y,x]}
      return [0,x,y]}
    function hash$1(x){return caml_hash(10,100,0,x)}
    function unsafe_fill(a,ofs,len,v)
     {var _x8_=(ofs + len | 0) - 1 | 0;
      if(_x8_ >= ofs)
       {var i=ofs;
        for(;;)
         {a[1 + i] = v;
          var _x9_=i + 1 | 0;
          if(_x8_ !== i){var i=_x9_;continue}
          break}}
      return 0}
    function check(a,ofs,len,msg)
     {var _x4_=ofs < 0?1:0;
      if(_x4_)
       var _x5_=_x4_;
      else
       {var _x6_=len < 0?1:0;
        if(_x6_)
         var _x5_=_x6_;
        else
         var
          _x7_=(ofs + len | 0) < 0?1:0,
          _x5_=_x7_ || (a.length - 1 < (ofs + len | 0)?1:0)}
      return _x5_?invalid_arg(msg):_x5_}
    function make$1(n,v)
     {var result=caml_floatarray_create(n);
      unsafe_fill(result,0,n,v);
      return result}
    function init$4(l,f)
     {if(0 > l)return invalid_arg(cst_Float_Array_init);
      var res=caml_floatarray_create(l),_x2_=l - 1 | 0,_x1_=0;
      if(_x2_ >= 0)
       {var i=_x1_;
        for(;;)
         {res[1 + i] = caml_call1(f,i);
          var _x3_=i + 1 | 0;
          if(_x2_ !== i){var i=_x3_;continue}
          break}}
      return res}
    function append$2(a1,a2)
     {var
       l1=a1.length - 1,
       l2=a2.length - 1,
       result=caml_floatarray_create(l1 + l2 | 0);
      caml_floatarray_blit(a1,0,result,0,l1);
      caml_floatarray_blit(a2,0,result,l1,l2);
      return result}
    function concat$3(l)
     {var acc=0,param=l;
      for(;;)
       {if(param)
         {var
           tl=param[2],
           hd=param[1],
           x=hd.length - 1 + acc | 0,
           acc$0=acc <= x?x:invalid_arg(cst_Float_Array_concat),
           acc=acc$0,
           param=tl;
          continue}
        var result=caml_floatarray_create(acc),l$0=l,i=0;
        for(;;)
         {if(l$0)
           {var tl$0=l$0[2],hd$0=l$0[1],hlen=hd$0.length - 1;
            caml_floatarray_blit(hd$0,0,result,i,hlen);
            var i$0=i + hlen | 0,l$0=tl$0,i=i$0;
            continue}
          if(i === acc)return result;
          throw [0,Assert_failure,_K_]}}}
    function sub$2(a,ofs,len)
     {check(a,ofs,len,cst_Float_Array_sub);
      var result=caml_floatarray_create(len);
      caml_floatarray_blit(a,ofs,result,0,len);
      return result}
    function copy$1(a)
     {var l=a.length - 1,result=caml_floatarray_create(l);
      caml_floatarray_blit(a,0,result,0,l);
      return result}
    function fill$1(a,ofs,len,v)
     {check(a,ofs,len,cst_Float_Array_fill);return unsafe_fill(a,ofs,len,v)}
    function blit$2(src,sofs,dst,dofs,len)
     {check(src,sofs,len,cst_Float_array_blit);
      check(dst,dofs,len,cst_Float_array_blit$0);
      return caml_floatarray_blit(src,sofs,dst,dofs,len)}
    function to_list$2(a)
     {return init$0(a.length - 1,function(_x0_){return a[1 + _x0_]})}
    function of_list$0(l)
     {var result=caml_floatarray_create(length$1(l)),i=0,l$0=l;
      for(;;)
       {if(! l$0)return result;
        var t=l$0[2],h=l$0[1];
        result[1 + i] = h;
        var i$0=i + 1 | 0,i=i$0,l$0=t}}
    function iter$6(f,a)
     {var _xY_=a.length - 1 - 1 | 0,_xX_=0;
      if(_xY_ >= 0)
       {var i=_xX_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _xZ_=i + 1 | 0;
          if(_xY_ !== i){var i=_xZ_;continue}
          break}}
      return 0}
    function iter2$2(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Float_Array_iter2_arrays_m);
      var _xV_=a.length - 1 - 1 | 0,_xU_=0;
      if(_xV_ >= 0)
       {var i=_xU_;
        for(;;)
         {caml_call2(f,a[1 + i],b[1 + i]);
          var _xW_=i + 1 | 0;
          if(_xV_ !== i){var i=_xW_;continue}
          break}}
      return 0}
    function map$8(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_xS_=l - 1 | 0,_xR_=0;
      if(_xS_ >= 0)
       {var i=_xR_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _xT_=i + 1 | 0;
          if(_xS_ !== i){var i=_xT_;continue}
          break}}
      return r}
    function map2$2(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)return invalid_arg(cst_Float_Array_map2_arrays_mu);
      var r=caml_floatarray_create(la),_xP_=la - 1 | 0,_xO_=0;
      if(_xP_ >= 0)
       {var i=_xO_;
        for(;;)
         {r[1 + i] = caml_call2(f,a[1 + i],b[1 + i]);
          var _xQ_=i + 1 | 0;
          if(_xP_ !== i){var i=_xQ_;continue}
          break}}
      return r}
    function iteri$4(f,a)
     {var _xM_=a.length - 1 - 1 | 0,_xL_=0;
      if(_xM_ >= 0)
       {var i=_xL_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _xN_=i + 1 | 0;
          if(_xM_ !== i){var i=_xN_;continue}
          break}}
      return 0}
    function mapi$4(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_xJ_=l - 1 | 0,_xI_=0;
      if(_xJ_ >= 0)
       {var i=_xI_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _xK_=i + 1 | 0;
          if(_xJ_ !== i){var i=_xK_;continue}
          break}}
      return r}
    function fold_left$4(f,x,a)
     {var r=[0,x],_xG_=a.length - 1 - 1 | 0,_xF_=0;
      if(_xG_ >= 0)
       {var i=_xF_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _xH_=i + 1 | 0;
          if(_xG_ !== i){var i=_xH_;continue}
          break}}
      return r[1]}
    function fold_right$3(f,a,x)
     {var r=[0,x],_xD_=a.length - 1 - 1 | 0;
      if(_xD_ >= 0)
       {var i=_xD_;
        for(;;)
         {r[1] = caml_call2(f,a[1 + i],r[1]);
          var _xE_=i - 1 | 0;
          if(0 !== i){var i=_xE_;continue}
          break}}
      return r[1]}
    function exists$4(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0}}
    function for_all$4(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(! caml_call1(p,a[1 + i]))return 0;
        var i$0=i + 1 | 0,i=i$0}}
    function mem$1(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_float_compare(a[1 + i],x))return 1;
        var i$0=i + 1 | 0,i=i$0}}
    function mem_ieee(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;if(x == a[1 + i])return 1;var i$0=i + 1 | 0,i=i$0}}
    var Bottom$0=[248,cst_Stdlib_Float_Array_Bottom,caml_fresh_oo_id(0)];
    function sort$0(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {if
           (caml_call2
             (cmp,caml_array_get(a,i31),caml_array_get(a,i31 + 1 | 0))
            <
            0)
           x[1] = i31 + 1 | 0;
          if
           (caml_call2
             (cmp,caml_array_get(a,x[1]),caml_array_get(a,i31 + 2 | 0))
            <
            0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if
         ((i31 + 1 | 0)
          <
          l
          &&
          0
          >
          caml_call2(cmp,caml_array_get(a,i31),caml_array_get(a,i31 + 1 | 0)))
         return i31 + 1 | 0;
        if(i31 < l)return i31;
        throw [0,Bottom$0,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 >= caml_call2(cmp,caml_array_get(a,j),e))
           return caml_array_set(a,i$0,e);
          caml_array_set(a,i$0,caml_array_get(a,j));
          var i$0=j}}
      function trickle(l,i,e)
       {try
         {var _xC_=trickledown(l,i,e);return _xC_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] !== Bottom$0)throw exn;
          var i$0=exn[2];
          return caml_array_set(a,i$0,e)}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0);
          caml_array_set(a,i$0,caml_array_get(a,i$1));
          var i$0=i$1}}
      function bubble(l,i)
       {try
         {var _xB_=bubbledown(l,i);return _xB_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] !== Bottom$0)throw exn;
          var i$0=exn[2];
          return i$0}}
      var l=a.length - 1,_xv_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(_xv_ >= 0)
       {var i$2=_xv_;
        for(;;)
         {trickle(l,i$2,caml_array_get(a,i$2));
          var _xA_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_xA_;continue}
          break}}
      var _xw_=l - 1 | 0;
      if(_xw_ >= 2)
       {var i$0=_xw_;
        a:
        for(;;)
         {var e$0=caml_array_get(a,i$0);
          caml_array_set(a,i$0,caml_array_get(a,0));
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_L_];
            if(0 <= caml_call2(cmp,caml_array_get(a,father),e$0))
             caml_array_set(a,i,e$0);
            else
             {caml_array_set(a,i,caml_array_get(a,father));
              if(0 < father){var i=father;continue}
              caml_array_set(a,0,e$0)}
            var _xz_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_xz_;continue a}
            break}
          break}}
      var _xx_=1 < l?1:0;
      if(_xx_)
       {var e=caml_array_get(a,1);
        caml_array_set(a,1,caml_array_get(a,0));
        var _xy_=caml_array_set(a,0,e)}
      else
       var _xy_=_xx_;
      return _xy_}
    function stable_sort(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_array_get(src2,src2ofs),
         s1$1=caml_array_get(a,src1ofs),
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_array_set(dst,d,s2);
            var i2$0=i2 + 1 | 0;
            if(i2$0 >= src2r)return blit$2(a,i1,dst,d + 1 | 0,src1r - i1 | 0);
            var
             d$0=d + 1 | 0,
             s2$0=caml_array_get(src2,i2$0),
             i2=i2$0,
             s2=s2$0,
             d=d$0;
            continue}
          caml_array_set(dst,d,s1);
          var i1$0=i1 + 1 | 0;
          if(i1$0 >= src1r)
           return blit$2(src2,i2,dst,d + 1 | 0,src2r - i2 | 0);
          var d$1=d + 1 | 0,s1$0=caml_array_get(a,i1$0),i1=i1$0,s1=s1$0,d=d$1}}
      function isortto(srcofs,dst,dstofs,len)
       {var _xt_=len - 1 | 0,_xs_=0;
        if(_xt_ >= 0)
         {var i=_xs_;
          a:
          for(;;)
           {var
             e=caml_array_get(a,srcofs + i | 0),
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if
               (dstofs
                <=
                j[1]
                &&
                0
                <
                caml_call2(cmp,caml_array_get(dst,j[1]),e))
               {caml_array_set(dst,j[1] + 1 | 0,caml_array_get(dst,j[1]));
                j[1] += -1;
                continue}
              caml_array_set(dst,j[1] + 1 | 0,e);
              var _xu_=i + 1 | 0;
              if(_xt_ !== i){var i=_xu_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var l1=l / 2 | 0,l2=l - l1 | 0,t=caml_floatarray_create(l2);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$5(a)
     {function aux(i,param)
       {if(i >= a.length - 1)return 0;
        var x=a[1 + i],_xq_=i + 1 | 0;
        return [0,x,function(_xr_){return aux(_xq_,_xr_)}]}
      var _xo_=0;
      return function(_xp_){return aux(_xo_,_xp_)}}
    function to_seqi$2(a)
     {function aux(i,param)
       {if(i >= a.length - 1)return 0;
        var x=a[1 + i],_xm_=i + 1 | 0;
        return [0,[0,i,x],function(_xn_){return aux(_xm_,_xn_)}]}
      var _xk_=0;
      return function(_xl_){return aux(_xk_,_xl_)}}
    function of_seq$3(i$2)
     {var
       _xj_=0,
       param$0=fold_left(function(acc,x){return [0,x,acc]},_xj_,i$2),
       len=length$1(param$0),
       a=caml_floatarray_create(len),
       i$1=len - 1 | 0,
       i=i$1,
       param=param$0;
      for(;;)
       {if(! param)return a;
        var tl=param[2],hd=param[1];
        a[1 + i] = hd;
        var i$0=i - 1 | 0,i=i$0,param=tl}}
    function map_to_array(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_xh_=l - 1 | 0,_xg_=1;
      if(_xh_ >= 1)
       {var i=_xg_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _xi_=i + 1 | 0;
          if(_xh_ !== i){var i=_xi_;continue}
          break}}
      return r}
    function map_from_array(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_xe_=l - 1 | 0,_xd_=0;
      if(_xe_ >= 0)
       {var i=_xd_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _xf_=i + 1 | 0;
          if(_xe_ !== i){var i=_xf_;continue}
          break}}
      return r}
    var
     _M_=caml_floatarray_create,
     _N_=caml_array_set,
     _O_=caml_array_get,
     _P_=
      [0,
       function(_xc_){return _xc_.length - 1},
       _O_,
       _N_,
       make$1,
       _M_,
       init$4,
       append$2,
       concat$3,
       sub$2,
       copy$1,
       fill$1,
       blit$2,
       to_list$2,
       of_list$0,
       iter$6,
       iteri$4,
       map$8,
       mapi$4,
       fold_left$4,
       fold_right$3,
       iter2$2,
       map2$2,
       for_all$4,
       exists$4,
       mem$1,
       mem_ieee,
       sort$0,
       stable_sort,
       stable_sort,
       to_seq$5,
       to_seqi$2,
       of_seq$3,
       map_to_array,
       map_from_array],
     _Q_=caml_floatarray_create,
     _R_=caml_array_set,
     _S_=caml_array_get,
     Stdlib_Float=
      [0,
       zero$0,
       one$0,
       minus_one$0,
       succ$0,
       pred$0,
       infinity,
       neg_infinity,
       nan,
       pi,
       max_float,
       min_float,
       epsilon,
       is_finite,
       is_infinite,
       is_nan,
       is_integer,
       of_string_opt,
       to_string,
       caml_float_compare,
       equal$11,
       min$2,
       max$2,
       min_max,
       min_num,
       max_num,
       min_max_num,
       hash$1,
       [0,
        function(_xb_){return _xb_.length - 1},
        _S_,
        _R_,
        make$1,
        _Q_,
        init$4,
        append$2,
        concat$3,
        sub$2,
        copy$1,
        fill$1,
        blit$2,
        to_list$2,
        of_list$0,
        iter$6,
        iteri$4,
        map$8,
        mapi$4,
        fold_left$4,
        fold_right$3,
        iter2$2,
        map2$2,
        for_all$4,
        exists$4,
        mem$1,
        mem_ieee,
        sort$0,
        stable_sort,
        stable_sort,
        to_seq$5,
        to_seqi$2,
        of_seq$3,
        map_to_array,
        map_from_array],
       _P_];
    caml_register_global(781,Stdlib_Float,"Stdlib__Float");
    var zero$1=0,one$1=1,minus_one$1=-1;
    function succ$1(n){return n + 1 | 0}
    function pred$1(n){return n - 1 | 0}
    function abs$1(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$1=-2147483648,max_int$1=2147483647;
    function lognot$0(n){return n ^ -1}
    function unsigned_to_int(n)
     {if(0 >= caml_int_compare(0,n) && 0 >= caml_int_compare(n,2147483647))
       return [0,n];
      return 0}
    function to_string$3(n){return caml_format_int(cst_d,n)}
    function of_string_opt$0(s)
     {try
       {var _w$_=[0,caml_int_of_string(s)];return _w$_}
      catch(_xa_)
       {_xa_ = caml_wrap_exception(_xa_);
        if(_xa_[1] === Failure)return 0;
        throw _xa_}}
    function compare$11(x,y){return caml_int_compare(x,y)}
    function equal$12(x,y){return 0 === caml_int_compare(x,y)?1:0}
    function unsigned_compare(n,m)
     {return caml_int_compare(n + 2147483648 | 0,m + 2147483648 | 0)}
    function min$3(x,y){return caml_lessequal(x,y)?x:y}
    function max$3(x,y){return caml_greaterequal(x,y)?x:y}
    function unsigned_div(n,d)
     {if(caml_lessthan(d,0))return 0 <= unsigned_compare(n,d)?one$1:zero$1;
      var q=caml_div(n >>> 1 | 0,d) << 1,r=n - caml_mul(q,d) | 0;
      return 0 <= unsigned_compare(r,d)?q + 1 | 0:q}
    function unsigned_rem(n,d){return n - caml_mul(unsigned_div(n,d),d) | 0}
    var
     Stdlib_Int32=
      [0,
       zero$1,
       one$1,
       minus_one$1,
       unsigned_div,
       unsigned_rem,
       succ$1,
       pred$1,
       abs$1,
       max_int$1,
       min_int$1,
       lognot$0,
       unsigned_to_int,
       of_string_opt$0,
       to_string$3,
       compare$11,
       unsigned_compare,
       equal$12,
       min$3,
       max$3];
    caml_register_global(782,Stdlib_Int32,"Stdlib__Int32");
    function succ$2(n){return caml_int64_add(n,_T_)}
    function pred$2(n){return caml_int64_sub(n,_U_)}
    function abs$2(n)
     {return caml_greaterequal(n,_V_)?n:runtime.caml_int64_neg(n)}
    function lognot$1(n){return runtime.caml_int64_xor(n,_W_)}
    var max_int$3=caml_int64_of_int32(2147483647);
    function unsigned_to_int$0(n)
     {if
       (0
        >=
        caml_int64_compare(zero$2,n)
        &&
        0
        >=
        caml_int64_compare(n,max_int$3))
       return [0,caml_int64_to_int32(n)];
      return 0}
    function to_string$4(n){return caml_int64_format(cst_d$0,n)}
    function of_string_opt$1(s)
     {try
       {var _w9_=[0,caml_int64_of_string(s)];return _w9_}
      catch(_w__)
       {_w__ = caml_wrap_exception(_w__);
        if(_w__[1] === Failure)return 0;
        throw _w__}}
    function compare$12(x,y){return caml_int64_compare(x,y)}
    function equal$13(x,y){return 0 === caml_int64_compare(x,y)?1:0}
    function unsigned_compare$0(n,m)
     {return caml_int64_compare
              (caml_int64_sub(n,min_int$2),caml_int64_sub(m,min_int$2))}
    function min$4(x,y){return caml_lessequal(x,y)?x:y}
    function max$4(x,y){return caml_greaterequal(x,y)?x:y}
    function unsigned_div$0(n,d)
     {if(caml_lessthan(d,zero$2))
       return 0 <= unsigned_compare$0(n,d)?one$2:zero$2;
      var
       q=
        runtime.caml_int64_shift_left
         (runtime.caml_int64_div(caml_int64_shift_right_unsigne(n,1),d),1),
       r=caml_int64_sub(n,caml_int64_mul(q,d));
      return 0 <= unsigned_compare$0(r,d)?succ$2(q):q}
    function unsigned_rem$0(n,d)
     {return caml_int64_sub(n,caml_int64_mul(unsigned_div$0(n,d),d))}
    var
     Stdlib_Int64=
      [0,
       zero$2,
       one$2,
       minus_one$2,
       unsigned_div$0,
       unsigned_rem$0,
       succ$2,
       pred$2,
       abs$2,
       max_int$2,
       min_int$2,
       lognot$1,
       unsigned_to_int$0,
       of_string_opt$1,
       to_string$4,
       compare$12,
       unsigned_compare$0,
       equal$13,
       min$4,
       max$4];
    caml_register_global(783,Stdlib_Int64,"Stdlib__Int64");
    var zero$3=0,one$3=1,minus_one$3=-1;
    function succ$3(n){return n + 1 | 0}
    function pred$3(n){return n - 1 | 0}
    function abs$3(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$3=-2147483648,max_int$4=2147483647;
    function lognot$2(n){return n ^ -1}
    function unsigned_to_int$1(n)
     {if(0 >= caml_int_compare(0,n) && 0 >= caml_int_compare(n,2147483647))
       return [0,n];
      return 0}
    function to_string$5(n){return caml_format_int(cst_d$1,n)}
    function of_string_opt$2(s)
     {try
       {var _w7_=[0,caml_int_of_string(s)];return _w7_}
      catch(_w8_)
       {_w8_ = caml_wrap_exception(_w8_);
        if(_w8_[1] === Failure)return 0;
        throw _w8_}}
    function compare$13(x,y){return caml_int_compare(x,y)}
    function equal$14(x,y){return 0 === caml_int_compare(x,y)?1:0}
    function unsigned_compare$1(n,m)
     {return caml_int_compare(n + 2147483648 | 0,m + 2147483648 | 0)}
    function min$5(x,y){return caml_lessequal(x,y)?x:y}
    function max$5(x,y){return caml_greaterequal(x,y)?x:y}
    function unsigned_div$1(n,d)
     {if(caml_lessthan(d,0))return 0 <= unsigned_compare$1(n,d)?one$3:zero$3;
      var q=caml_div(n >>> 1 | 0,d) << 1,r=n - caml_mul(q,d) | 0;
      return 0 <= unsigned_compare$1(r,d)?q + 1 | 0:q}
    function unsigned_rem$1(n,d)
     {return n - caml_mul(unsigned_div$1(n,d),d) | 0}
    var
     Stdlib_Nativeint=
      [0,
       zero$3,
       one$3,
       minus_one$3,
       unsigned_div$1,
       unsigned_rem$1,
       succ$3,
       pred$3,
       abs$3,
       match$1,
       max_int$4,
       min_int$3,
       lognot$2,
       unsigned_to_int$1,
       of_string_opt$2,
       to_string$5,
       compare$13,
       unsigned_compare$1,
       equal$14,
       min$5,
       max$5];
    caml_register_global(784,Stdlib_Nativeint,"Stdlib__Nativeint");
    function engine(tbl,state,buf)
     {var
       result=runtime.caml_lex_engine(tbl,state,buf),
       _w4_=0 <= result?1:0,
       _w5_=_w4_?buf[12] !== dummy_pos?1:0:_w4_;
      if(_w5_)
       {buf[11] = buf[12];
        var _w6_=buf[12];
        buf[12] = [0,_w6_[1],_w6_[2],_w6_[3],buf[4] + buf[6] | 0]}
      return result}
    function new_engine(tbl,state,buf)
     {var
       result=runtime.caml_new_lex_engine(tbl,state,buf),
       _w1_=0 <= result?1:0,
       _w2_=_w1_?buf[12] !== dummy_pos?1:0:_w1_;
      if(_w2_)
       {buf[11] = buf[12];
        var _w3_=buf[12];
        buf[12] = [0,_w3_[1],_w3_[2],_w3_[3],buf[4] + buf[6] | 0]}
      return result}
    function from_function(opt,f)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _wN_=with_positions?zero_pos:dummy_pos,
       _wO_=with_positions?zero_pos:dummy_pos,
       aux_buffer=caml_create_bytes(512),
       _wP_=[0],
       _wQ_=0,
       _wR_=0,
       _wS_=0,
       _wT_=0,
       _wU_=0,
       _wV_=0,
       _wW_=0,
       _wX_=caml_create_bytes(1024);
      return [0,
              function(lexbuf)
               {var
                 read=
                  caml_call2(f,aux_buffer,caml_ml_bytes_length(aux_buffer)),
                 n=0 < read?read:(lexbuf[9] = 1,0);
                if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0))
                 {if
                   (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                    <=
                    caml_ml_bytes_length(lexbuf[2]))
                   blit
                    (lexbuf[2],lexbuf[5],lexbuf[2],0,lexbuf[3] - lexbuf[5] | 0);
                  else
                   {var
                     newlen=
                      min$1
                       (2 * caml_ml_bytes_length(lexbuf[2]) | 0,max_string_length);
                    if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                     failwith(cst_Lexing_lex_refill_cannot_g);
                    var newbuf=caml_create_bytes(newlen);
                    blit(lexbuf[2],lexbuf[5],newbuf,0,lexbuf[3] - lexbuf[5] | 0);
                    lexbuf[2] = newbuf}
                  var s=lexbuf[5];
                  lexbuf[4] = lexbuf[4] + s | 0;
                  lexbuf[6] = lexbuf[6] - s | 0;
                  lexbuf[5] = 0;
                  lexbuf[7] = lexbuf[7] - s | 0;
                  lexbuf[3] = lexbuf[3] - s | 0;
                  var t=lexbuf[10],_wZ_=t.length - 1 - 1 | 0,_wY_=0;
                  if(_wZ_ >= 0)
                   {var i=_wY_;
                    for(;;)
                     {var v=caml_check_bound(t,i)[1 + i];
                      if(0 <= v)caml_check_bound(t,i)[1 + i] = v - s | 0;
                      var _w0_=i + 1 | 0;
                      if(_wZ_ !== i){var i=_w0_;continue}
                      break}}}
                blit(aux_buffer,0,lexbuf[2],lexbuf[3],n);
                lexbuf[3] = lexbuf[3] + n | 0;
                return 0},
              _wX_,
              _wW_,
              _wV_,
              _wU_,
              _wT_,
              _wS_,
              _wR_,
              _wQ_,
              _wP_,
              _wO_,
              _wN_]}
    function from_channel(with_positions,ic)
     {return from_function
              (with_positions,function(buf,n){return input(ic,buf,0,n)})}
    function from_string$0(opt,s)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _wC_=with_positions?zero_pos:dummy_pos,
       _wD_=with_positions?zero_pos:dummy_pos,
       _wE_=[0],
       _wF_=1,
       _wG_=0,
       _wH_=0,
       _wI_=0,
       _wJ_=0,
       _wK_=0,
       _wL_=caml_ml_string_length(s),
       _wM_=to_bytes(s);
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _wM_,
              _wL_,
              _wK_,
              _wJ_,
              _wI_,
              _wH_,
              _wG_,
              _wF_,
              _wE_,
              _wD_,
              _wC_]}
    function set_position(lexbuf,position)
     {lexbuf[12] = [0,lexbuf[12][1],position[2],position[3],position[4]];
      lexbuf[4] = position[4];
      return 0}
    function set_filename(lexbuf,fname)
     {var _wB_=lexbuf[12];
      lexbuf[12] = [0,fname,_wB_[2],_wB_[3],_wB_[4]];
      return 0}
    function with_positions(lexbuf){return lexbuf[12] !== dummy_pos?1:0}
    function lexeme(lexbuf)
     {var len=lexbuf[6] - lexbuf[5] | 0;
      return sub_string(lexbuf[2],lexbuf[5],len)}
    function sub_lexeme(lexbuf,i1,i2)
     {var len=i2 - i1 | 0;return sub_string(lexbuf[2],i1,len)}
    function sub_lexeme_opt(lexbuf,i1,i2)
     {if(0 > i1)return 0;
      var len=i2 - i1 | 0;
      return [0,sub_string(lexbuf[2],i1,len)]}
    function sub_lexeme_char(lexbuf,i){return caml_bytes_get(lexbuf[2],i)}
    function sub_lexeme_char_opt(lexbuf,i)
     {return 0 <= i?[0,caml_bytes_get(lexbuf[2],i)]:0}
    function lexeme_char(lexbuf,i)
     {return caml_bytes_get(lexbuf[2],lexbuf[5] + i | 0)}
    function lexeme_start(lexbuf){return lexbuf[11][4]}
    function lexeme_end(lexbuf){return lexbuf[12][4]}
    function lexeme_start_p(lexbuf){return lexbuf[11]}
    function lexeme_end_p(lexbuf){return lexbuf[12]}
    function new_line(lexbuf)
     {var
       lcp=lexbuf[12],
       _wz_=lcp !== dummy_pos?1:0,
       _wA_=_wz_?(lexbuf[12] = [0,lcp[1],lcp[2] + 1 | 0,lcp[4],lcp[4]],0):_wz_;
      return _wA_}
    function flush_input(lb)
     {lb[6] = 0;
      lb[4] = 0;
      var lcp=lb[12];
      if(lcp !== dummy_pos)
       lb[12] = [0,lcp[1],zero_pos[2],zero_pos[3],zero_pos[4]];
      lb[3] = 0;
      return 0}
    var
     Stdlib_Lexing=
      [0,
       dummy_pos,
       from_channel,
       from_string$0,
       from_function,
       set_position,
       set_filename,
       with_positions,
       lexeme,
       lexeme_char,
       lexeme_start,
       lexeme_end,
       lexeme_start_p,
       lexeme_end_p,
       new_line,
       flush_input,
       sub_lexeme,
       sub_lexeme_opt,
       sub_lexeme_char,
       sub_lexeme_char_opt,
       engine,
       new_engine];
    caml_register_global(785,Stdlib_Lexing,"Stdlib__Lexing");
    var
     YYexit=[248,cst_Stdlib_Parsing_YYexit,caml_fresh_oo_id(0)],
     Parse_error=[248,cst_Stdlib_Parsing_Parse_error,caml_fresh_oo_id(0)],
     env=
      [0,
       caml_make_vect(100,0),
       caml_make_vect(100,0),
       caml_make_vect(100,dummy_pos),
       caml_make_vect(100,dummy_pos),
       100,
       0,
       0,
       0,
       dummy_pos,
       dummy_pos,
       0,
       0,
       0,
       0,
       0,
       0];
    function grow_stacks(param)
     {var
       oldsize=env[5],
       newsize=oldsize * 2 | 0,
       new_s=caml_make_vect(newsize,0),
       new_v=caml_make_vect(newsize,0),
       new_start=caml_make_vect(newsize,dummy_pos),
       new_end=caml_make_vect(newsize,dummy_pos);
      blit$1(env[1],0,new_s,0,oldsize);
      env[1] = new_s;
      blit$1(env[2],0,new_v,0,oldsize);
      env[2] = new_v;
      blit$1(env[3],0,new_start,0,oldsize);
      env[3] = new_start;
      blit$1(env[4],0,new_end,0,oldsize);
      env[4] = new_end;
      env[5] = newsize;
      return 0}
    function clear_parser(param)
     {fill$0(env[2],0,env[5],0);env[8] = 0;return 0}
    var current_lookahead_fun=[0,function(param){return 0}];
    function yyparse(tables,start,lexer,lexbuf)
     {var
       init_asp=env[11],
       init_sp=env[14],
       init_stackbase=env[6],
       init_state=env[15],
       init_curr_char=env[7],
       init_lval=env[8],
       init_errflag=env[16];
      env[6] = env[14] + 1 | 0;
      env[7] = start;
      env[10] = lexbuf[12];
      try
       {var cmd=0,arg=0;
        for(;;)
         {var match=runtime.caml_parse_engine(tables,env,cmd,arg);
          switch(match)
           {case 0:
             var arg$0=caml_call1(lexer,lexbuf);
             env[9] = lexbuf[11];
             env[10] = lexbuf[12];
             var cmd=1,arg=arg$0;
             continue;
            case 1:throw Parse_error;
            case 2:grow_stacks(0);var cmd=2,arg=0;continue;
            case 3:grow_stacks(0);var cmd=3,arg=0;continue;
            case 4:
             try
              {var
                _wu_=env[13],
                _wv_=
                 caml_call1(caml_check_bound(tables[1],_wu_)[1 + _wu_],env),
                _ww_=4,
                arg$1=_wv_,
                cmd$0=_ww_}
             catch(_wy_)
              {_wy_ = caml_wrap_exception(_wy_);
               if(_wy_ !== Parse_error)throw _wy_;
               var arg$1=0,cmd$0=5}
             var cmd=cmd$0,arg=arg$1;
             continue;
            default:
             caml_call1(tables[14],cst_syntax_error);var cmd=5,arg=0;continue}}}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var curr_char=env[7];
        env[11] = init_asp;
        env[14] = init_sp;
        env[6] = init_stackbase;
        env[15] = init_state;
        env[7] = init_curr_char;
        env[8] = init_lval;
        env[16] = init_errflag;
        if(exn[1] === YYexit){var v=exn[2];return v}
        current_lookahead_fun[1]
        =
        function(tok)
         {if(! is_block(tok))
           return caml_check_bound(tables[2],tok)[1 + tok] === curr_char?1:0;
          var _wx_=caml_obj_tag(tok);
          return caml_check_bound(tables[3],_wx_)[1 + _wx_] === curr_char?1:0};
        throw exn}}
    function peek_val(env,n)
     {var _wt_=env[11] - n | 0;return caml_check_bound(env[2],_wt_)[1 + _wt_]}
    function symbol_start_pos(param)
     {var i=env[12];
      for(;;)
       {if(0 >= i)
         {var _ws_=env[11];return caml_check_bound(env[4],_ws_)[1 + _ws_]}
        var
         _wq_=(env[11] - i | 0) + 1 | 0,
         st=caml_check_bound(env[3],_wq_)[1 + _wq_],
         _wr_=(env[11] - i | 0) + 1 | 0,
         en=caml_check_bound(env[4],_wr_)[1 + _wr_];
        if(caml_notequal(st,en))return st;
        var i$0=i - 1 | 0,i=i$0}}
    function symbol_end_pos(param)
     {var _wp_=env[11];return caml_check_bound(env[4],_wp_)[1 + _wp_]}
    function rhs_start_pos(n)
     {var _wo_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[3],_wo_)[1 + _wo_]}
    function rhs_end_pos(n)
     {var _wn_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[4],_wn_)[1 + _wn_]}
    function symbol_start(param){return symbol_start_pos(0)[4]}
    function symbol_end(param){return symbol_end_pos(0)[4]}
    function rhs_start(n){return rhs_start_pos(n)[4]}
    function rhs_end(n){return rhs_end_pos(n)[4]}
    function is_current_lookahead(tok)
     {return caml_call1(current_lookahead_fun[1],tok)}
    function parse_error(param){return 0}
    var
     Stdlib_Parsing=
      [0,
       symbol_start,
       symbol_end,
       rhs_start,
       rhs_end,
       symbol_start_pos,
       symbol_end_pos,
       rhs_start_pos,
       rhs_end_pos,
       clear_parser,
       Parse_error,
       runtime.caml_set_parser_trace,
       YYexit,
       yyparse,
       peek_val,
       is_current_lookahead,
       parse_error];
    caml_register_global(786,Stdlib_Parsing,"Stdlib__Parsing");
    var
     Stdlib_Set=
      [0,
       function(Ord)
        {function height(param){if(! param)return 0;var h=param[4];return h}
         function create(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           var _wm_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_wm_]}
         function bal(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(! l)return invalid_arg(cst_Set_bal$0);
             var lr=l[3],lv=l[2],ll=l[1],_wh_=height(lr);
             if(_wh_ <= height(ll))return create(ll,lv,create(lr,v,r));
             if(! lr)return invalid_arg(cst_Set_bal);
             var lrr=lr[3],lrv=lr[2],lrl=lr[1],_wi_=create(lrr,v,r);
             return create(create(ll,lv,lrl),lrv,_wi_)}
           if((hl + 2 | 0) >= hr)
            {var _wl_=hr <= hl?hl + 1 | 0:hr + 1 | 0;return [0,l,v,r,_wl_]}
           if(! r)return invalid_arg(cst_Set_bal$2);
           var rr=r[3],rv=r[2],rl=r[1],_wj_=height(rl);
           if(_wj_ <= height(rr))return create(create(l,v,rl),rv,rr);
           if(! rl)return invalid_arg(cst_Set_bal$1);
           var rlr=rl[3],rlv=rl[2],rll=rl[1],_wk_=create(rlr,rv,rr);
           return create(create(l,v,rll),rlv,_wk_)}
         function add(x,t)
          {if(! t)return [0,0,x,0,1];
           var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
           if(0 === c)return t;
           if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
           var ll=add(x,l);
           return l === ll?t:bal(ll,v,r)}
         function singleton(x){return [0,0,x,0,1]}
         function add_min_element(x,param)
          {if(! param)return singleton(x);
           var r=param[3],v=param[2],l=param[1];
           return bal(add_min_element(x,l),v,r)}
         function add_max_element(x,param)
          {if(! param)return singleton(x);
           var r=param[3],v=param[2],l=param[1];
           return bal(l,v,add_max_element(x,r))}
         function join(l,v,r)
          {if(! l)return add_min_element(v,r);
           if(! r)return add_max_element(v,l);
           var
            rh=r[4],
            rr=r[3],
            rv=r[2],
            rl=r[1],
            lh=l[4],
            lr=l[3],
            lv=l[2],
            ll=l[1];
           return (rh + 2 | 0) < lh
                   ?bal(ll,lv,join(lr,v,r))
                   :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
         function min_elt(param)
          {var param$0=param;
           for(;;)
            {if(! param$0)throw Not_found;
             var _wg_=param$0[1];
             if(_wg_){var param$0=_wg_;continue}
             var v=param$0[2];
             return v}}
         function min_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             var _wf_=param$0[1];
             if(_wf_){var param$0=_wf_;continue}
             var v=param$0[2];
             return [0,v]}}
         function max_elt(param)
          {var param$0=param;
           for(;;)
            {if(! param$0)throw Not_found;
             if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
             var v=param$0[2];
             return v}}
         function max_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
             var v=param$0[2];
             return [0,v]}}
         function remove_min_elt(param)
          {if(! param)return invalid_arg(cst_Set_remove_min_elt);
           var _we_=param[1];
           if(_we_)
            {var r=param[3],v=param[2];return bal(remove_min_elt(_we_),v,r)}
           var r$0=param[3];
           return r$0}
         function concat(t1,t2)
          {if(! t1)return t2;
           if(! t2)return t1;
           var _wd_=remove_min_elt(t2);
           return join(t1,min_elt(t2),_wd_)}
         function split(x,param)
          {if(! param)return _X_;
           var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
           if(0 === c)return [0,l,1,r];
           if(0 <= c)
            {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
             return [0,join(l,v,lr),pres,rr]}
           var
            match$0=split(x,l),
            rl=match$0[3],
            pres$0=match$0[2],
            ll=match$0[1];
           return [0,ll,pres$0,join(rl,v,r)]}
         var empty=0;
         function is_empty(param){return param?0:1}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             var
              r=param$0[3],
              v=param$0[2],
              l=param$0[1],
              c=caml_call2(Ord[1],x,v),
              _wc_=0 === c?1:0;
             if(_wc_)return _wc_;
             var param$1=0 <= c?r:l,param$0=param$1}}
         function remove(x,t)
          {if(! t)return 0;
           var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
           if(0 === c)
            {if(! l)return r;
             if(! r)return l;
             var _wb_=remove_min_elt(r);
             return bal(l,min_elt(r),_wb_)}
           if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
           var ll=remove(x,l);
           return l === ll?t:bal(ll,v,r)}
         function union(s1,s2)
          {if(! s1)return s2;
           if(! s2)return s1;
           var
            h2=s2[4],
            r2=s2[3],
            v2=s2[2],
            l2=s2[1],
            h1=s1[4],
            r1=s1[3],
            v1=s1[2],
            l1=s1[1];
           if(h2 <= h1)
            {if(1 === h2)return add(v2,s1);
             var
              match=split(v1,s2),
              r2$0=match[3],
              l2$0=match[1],
              _v$_=union(r1,r2$0);
             return join(union(l1,l2$0),v1,_v$_)}
           if(1 === h1)return add(v1,s2);
           var
            match$0=split(v2,s1),
            r1$0=match$0[3],
            l1$0=match$0[1],
            _wa_=union(r1$0,r2);
           return join(union(l1$0,l2),v2,_wa_)}
         function inter(s1,s2)
          {if(! s1)return 0;
           if(! s2)return 0;
           var r1=s1[3],v1=s1[2],l1=s1[1],_v7_=split(v1,s2),_v8_=_v7_[1];
           if(_v7_[2])
            {var r2=_v7_[3],_v9_=inter(r1,r2);
             return join(inter(l1,_v8_),v1,_v9_)}
           var r2$0=_v7_[3],_v__=inter(r1,r2$0);
           return concat(inter(l1,_v8_),_v__)}
         function split_bis(x,param)
          {if(! param)return [0,0,function(param){return 0}];
           var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
           if(0 === c)return 0;
           if(0 <= c)
            {var match=split_bis(x,r);
             if(! match)return 0;
             var rr=match[2],lr=match[1];
             return [0,join(l,v,lr),rr]}
           var match$0=split_bis(x,l);
           if(! match$0)return 0;
           var rl=match$0[2],ll=match$0[1];
           return [0,ll,function(param){return join(caml_call1(rl,0),v,r)}]}
         function disjoint(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0 && s2$0)
              {var r1=s1$0[3],v1=s1$0[2],l1=s1$0[1];
               if(s1$0 === s2$0)return 0;
               var match=split_bis(v1,s2$0);
               if(! match)return 0;
               var r2=match[2],l2=match[1],_v6_=disjoint(l1,l2);
               if(! _v6_)return _v6_;
               var s2$1=caml_call1(r2,0),s1$0=r1,s2$0=s2$1;
               continue}
             return 1}}
         function diff(s1,s2)
          {if(! s1)return 0;
           if(! s2)return s1;
           var r1=s1[3],v1=s1[2],l1=s1[1],_v2_=split(v1,s2),_v3_=_v2_[1];
           if(_v2_[2])
            {var r2=_v2_[3],_v4_=diff(r1,r2);
             return concat(diff(l1,_v3_),_v4_)}
           var r2$0=_v2_[3],_v5_=diff(r1,r2$0);
           return join(diff(l1,_v3_),v1,_v5_)}
         function cons_enum(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(! s$0)return e$0;
             var r=s$0[3],v=s$0[2],s$1=s$0[1],e$1=[0,v,r,e$0],s$0=s$1,e$0=e$1}}
         function compare(s1,s2)
          {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(! e1)return e2?-1:0;
             if(! e2)return 1;
             var
              e2$0=e2[3],
              r2=e2[2],
              v2=e2[1],
              e1$0=e1[3],
              r1=e1[2],
              v1=e1[1],
              c=caml_call2(Ord[1],v1,v2);
             if(0 !== c)return c;
             var
              e2$1=cons_enum(r2,e2$0),
              e1$1=cons_enum(r1,e1$0),
              e1=e1$1,
              e2=e2$1}}
         function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
         function subset(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(! s1$0)return 1;
             if(! s2$0)return 0;
             var
              r2=s2$0[3],
              v2=s2$0[2],
              l2=s2$0[1],
              r1=s1$0[3],
              v1=s1$0[2],
              l1=s1$0[1],
              c=caml_call2(Ord[1],v1,v2);
             if(0 === c)
              {var _vZ_=subset(l1,l2);
               if(! _vZ_)return _vZ_;
               var s1$0=r1,s2$0=r2;
               continue}
             if(0 <= c)
              {var _v0_=subset([0,0,v1,r1,0],r2);
               if(! _v0_)return _v0_;
               var s1$0=l1;
               continue}
             var _v1_=subset([0,l1,v1,0,0],l2);
             if(! _v1_)return _v1_;
             var s1$0=r1}}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             var r=param$0[3],v=param$0[2],l=param$0[1];
             iter(f,l);
             caml_call1(f,v);
             var param$0=r}}
         function fold(f,s,accu)
          {var s$0=s,accu$0=accu;
           for(;;)
            {if(! s$0)return accu$0;
             var
              r=s$0[3],
              v=s$0[2],
              l=s$0[1],
              accu$1=caml_call2(f,v,fold(f,l,accu$0)),
              s$0=r,
              accu$0=accu$1}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 1;
             var r=param$0[3],v=param$0[2],l=param$0[1],_vW_=caml_call1(p,v);
             if(_vW_)
              {var _vX_=for_all(p,l);
               if(_vX_){var param$0=r;continue}
               var _vY_=_vX_}
             else
              var _vY_=_vW_;
             return _vY_}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             var r=param$0[3],v=param$0[2],l=param$0[1],_vT_=caml_call1(p,v);
             if(_vT_)
              var _vU_=_vT_;
             else
              {var _vV_=exists(p,l);
               if(! _vV_){var param$0=r;continue}
               var _vU_=_vV_}
             return _vU_}}
         function filter(p,t)
          {if(! t)return 0;
           var
            r=t[3],
            v=t[2],
            l=t[1],
            l$0=filter(p,l),
            pv=caml_call1(p,v),
            r$0=filter(p,r);
           if(! pv)return concat(l$0,r$0);
           if(l === l$0 && r === r$0)return t;
           return join(l$0,v,r$0)}
         function partition(p,param)
          {if(! param)return _Y_;
           var
            r=param[3],
            v=param[2],
            l=param[1],
            match=partition(p,l),
            lf=match[2],
            lt=match[1],
            pv=caml_call1(p,v),
            match$0=partition(p,r),
            rf=match$0[2],
            rt=match$0[1];
           if(pv){var _vR_=concat(lf,rf);return [0,join(lt,v,rt),_vR_]}
           var _vS_=join(lf,v,rf);
           return [0,concat(lt,rt),_vS_]}
         function cardinal(param)
          {if(! param)return 0;
           var r=param[3],l=param[1],_vQ_=cardinal(r);
           return (cardinal(l) + 1 | 0) + _vQ_ | 0}
         function elements_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(! param$0)return accu$0;
             var
              r=param$0[3],
              v=param$0[2],
              l=param$0[1],
              accu$1=[0,v,elements_aux(accu$0,r)],
              accu$0=accu$1,
              param$0=l}}
         function elements(s){return elements_aux(0,s)}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)throw Not_found;
             var
              r=param$0[3],
              v=param$0[2],
              l=param$0[1],
              c=caml_call2(Ord[1],x,v);
             if(0 === c)return v;
             var param$1=0 <= c?r:l,param$0=param$1}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(! param$1)throw Not_found;
             var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
             if(! caml_call1(f,v$0)){var param$1=r$0;continue}
             var v0=v$0,param=l$0;
             for(;;)
              {if(! param)return v0;
               var r=param[3],v=param[2],l=param[1];
               if(caml_call1(f,v)){var v0=v,param=l;continue}
               var param=r}}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(! param$1)return 0;
             var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
             if(! caml_call1(f,v$0)){var param$1=r$0;continue}
             var v0=v$0,param=l$0;
             for(;;)
              {if(! param)return [0,v0];
               var r=param[3],v=param[2],l=param[1];
               if(caml_call1(f,v)){var v0=v,param=l;continue}
               var param=r}}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(! param$1)throw Not_found;
             var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
             if(! caml_call1(f,v$0)){var param$1=l$0;continue}
             var v0=v$0,param=r$0;
             for(;;)
              {if(! param)return v0;
               var r=param[3],v=param[2],l=param[1];
               if(caml_call1(f,v)){var v0=v,param=r;continue}
               var param=l}}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(! param$1)return 0;
             var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
             if(! caml_call1(f,v$0)){var param$1=l$0;continue}
             var v0=v$0,param=r$0;
             for(;;)
              {if(! param)return [0,v0];
               var r=param[3],v=param[2],l=param[1];
               if(caml_call1(f,v)){var v0=v,param=r;continue}
               var param=l}}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             var
              r=param$0[3],
              v=param$0[2],
              l=param$0[1],
              c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,v];
             var param$1=0 <= c?r:l,param$0=param$1}}
         function try_join(l,v,r)
          {var switch$0=0;
           if(0 !== l)
            {var _vP_=max_elt(l);
             if(0 <= caml_call2(Ord[1],_vP_,v))switch$0 = 1}
           if(! switch$0)
            {var switch$1=0;
             if(0 !== r)
              {var _vO_=min_elt(r);
               if(0 <= caml_call2(Ord[1],v,_vO_))switch$1 = 1}
             if(! switch$1)return join(l,v,r)}
           return union(l,add(v,r))}
         function map(f,t)
          {if(! t)return 0;
           var
            r=t[3],
            v=t[2],
            l=t[1],
            l$0=map(f,l),
            v$0=caml_call1(f,v),
            r$0=map(f,r);
           if(l === l$0 && v === v$0 && r === r$0)return t;
           return try_join(l$0,v$0,r$0)}
         function filter_map(f,t)
          {if(! t)return 0;
           var
            r=t[3],
            v=t[2],
            l=t[1],
            t1=filter_map(f,l),
            v$0=caml_call1(f,v),
            t2=filter_map(f,r);
           if(v$0)
            {var v$1=v$0[1];
             if(l === t1 && v === v$1 && r === t2)return t;
             return try_join(t1,v$1,t2)}
           if(! t1)return t2;
           if(! t2)return t1;
           var _vN_=remove_min_elt(t2);
           return try_join(t1,min_elt(t2),_vN_)}
         function of_list(l)
          {if(! l)return empty;
           var _vC_=l[2],_vD_=l[1];
           if(! _vC_)return singleton(_vD_);
           var _vE_=_vC_[2],_vF_=_vC_[1];
           if(! _vE_)return add(_vF_,singleton(_vD_));
           var _vG_=_vE_[2],_vH_=_vE_[1];
           if(! _vG_)return add(_vH_,add(_vF_,singleton(_vD_)));
           var _vI_=_vG_[2],_vJ_=_vG_[1];
           if(! _vI_)return add(_vJ_,add(_vH_,add(_vF_,singleton(_vD_))));
           if(_vI_[2])
            {var
              l$0=sort_uniq(Ord[1],l),
              sub=
               function(n,l)
                {if(3 >= n >>> 0)
                  switch(n)
                   {case 0:return [0,0,l];
                    case 1:
                     if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                     break;
                    case 2:
                     if(l)
                      {var _vK_=l[2];
                       if(_vK_)
                        {var l$4=_vK_[2],x1=_vK_[1],x0$0=l[1];
                         return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                     break;
                    default:
                     if(l)
                      {var _vL_=l[2];
                       if(_vL_)
                        {var _vM_=_vL_[2];
                         if(_vM_)
                          {var l$5=_vM_[2],x2=_vM_[1],x1$0=_vL_[1],x0$1=l[1];
                           return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                 var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                 if(! l$0)throw [0,Assert_failure,_Z_];
                 var
                  l$1=l$0[2],
                  mid=l$0[1],
                  match$0=sub((n - nl | 0) - 1 | 0,l$1),
                  l$2=match$0[2],
                  right=match$0[1];
                 return [0,create(left,mid,right),l$2]};
             return sub(length$1(l$0),l$0)[1]}
           var x4=_vI_[1];
           return add(x4,add(_vJ_,add(_vH_,add(_vF_,singleton(_vD_)))))}
         function add_seq(i,m)
          {return fold_left(function(s,x){return add(x,s)},m,i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(! c)return 0;
           var rest=c[3],t=c[2],x=c[1],_vA_=cons_enum(t,rest);
           return [0,x,function(_vB_){return seq_of_enum(_vA_,_vB_)}]}
         function to_seq(c)
          {var _vy_=cons_enum(c,0);
           return function(_vz_){return seq_of_enum(_vy_,_vz_)}}
         function snoc_enum(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(! s$0)return e$0;
             var s$1=s$0[3],v=s$0[2],l=s$0[1],e$1=[0,v,l,e$0],s$0=s$1,e$0=e$1}}
         function rev_seq_of_enum(c,param)
          {if(! c)return 0;
           var rest=c[3],t=c[2],x=c[1],_vw_=snoc_enum(t,rest);
           return [0,x,function(_vx_){return rev_seq_of_enum(_vw_,_vx_)}]}
         function to_rev_seq(c)
          {var _vu_=snoc_enum(c,0);
           return function(_vv_){return rev_seq_of_enum(_vu_,_vv_)}}
         function to_seq_from(low,s)
          {var s$0=s,c=0;
           for(;;)
            {if(s$0)
              {var r=s$0[3],v=s$0[2],l=s$0[1],n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,r,c],s$0=l,c=c$0;continue}
                 var s$0=r;
                 continue}
               var _vs_=[0,v,r,c]}
             else
              var _vs_=c;
             return function(_vt_){return seq_of_enum(_vs_,_vt_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 singleton,
                 remove,
                 union,
                 inter,
                 disjoint,
                 diff,
                 compare,
                 equal,
                 subset,
                 iter,
                 map,
                 fold,
                 for_all,
                 exists,
                 filter,
                 filter_map,
                 partition,
                 cardinal,
                 elements,
                 min_elt,
                 min_elt_opt,
                 max_elt,
                 max_elt_opt,
                 min_elt,
                 min_elt_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 of_list,
                 to_seq_from,
                 to_seq,
                 to_rev_seq,
                 add_seq,
                 of_seq]}];
    caml_register_global(787,Stdlib_Set,"Stdlib__Set");
    var
     Stdlib_Map=
      [0,
       function(Ord)
        {function height(param){if(! param)return 0;var h=param[5];return h}
         function create(l,x,d,r)
          {var hl=height(l),hr=height(r),_vr_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_vr_]}
         function singleton(x,d){return [0,0,x,d,0,1]}
         function bal(l,x,d,r)
          {if(l)var h=l[5],hl=h;else var hl=0;
           if(r)var h$0=r[5],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(! l)return invalid_arg(cst_Map_bal$0);
             var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_vm_=height(lr);
             if(_vm_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
             if(! lr)return invalid_arg(cst_Map_bal);
             var
              lrr=lr[4],
              lrd=lr[3],
              lrv=lr[2],
              lrl=lr[1],
              _vn_=create(lrr,x,d,r);
             return create(create(ll,lv,ld,lrl),lrv,lrd,_vn_)}
           if((hl + 2 | 0) >= hr)
            {var _vq_=hr <= hl?hl + 1 | 0:hr + 1 | 0;return [0,l,x,d,r,_vq_]}
           if(! r)return invalid_arg(cst_Map_bal$2);
           var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_vo_=height(rl);
           if(_vo_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
           if(! rl)return invalid_arg(cst_Map_bal$1);
           var
            rlr=rl[4],
            rld=rl[3],
            rlv=rl[2],
            rll=rl[1],
            _vp_=create(rlr,rv,rd,rr);
           return create(create(l,x,d,rll),rlv,rld,_vp_)}
         var empty=0;
         function is_empty(param){return param?0:1}
         function add(x,data,m)
          {if(! m)return [0,0,x,data,0,1];
           var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
           if(0 === c)return d === data?m:[0,l,x,data,r,h];
           if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
           var ll=add(x,data,l);
           return l === ll?m:bal(ll,v,d,r)}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)throw Not_found;
             var
              r=param$0[4],
              d=param$0[3],
              v=param$0[2],
              l=param$0[1],
              c=caml_call2(Ord[1],x,v);
             if(0 === c)return d;
             var param$1=0 <= c?r:l,param$0=param$1}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(! param$1)throw Not_found;
             var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
             if(! caml_call1(f,v$0)){var param$1=r$0;continue}
             var v0=v$0,d0=d$0,param=l$0;
             for(;;)
              {if(! param)return [0,v0,d0];
               var r=param[4],d=param[3],v=param[2],l=param[1];
               if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
               var param=r}}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(! param$1)return 0;
             var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
             if(! caml_call1(f,v$0)){var param$1=r$0;continue}
             var v0=v$0,d0=d$0,param=l$0;
             for(;;)
              {if(! param)return [0,[0,v0,d0]];
               var r=param[4],d=param[3],v=param[2],l=param[1];
               if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
               var param=r}}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(! param$1)throw Not_found;
             var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
             if(! caml_call1(f,v$0)){var param$1=l$0;continue}
             var v0=v$0,d0=d$0,param=r$0;
             for(;;)
              {if(! param)return [0,v0,d0];
               var r=param[4],d=param[3],v=param[2],l=param[1];
               if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
               var param=l}}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(! param$1)return 0;
             var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
             if(! caml_call1(f,v$0)){var param$1=l$0;continue}
             var v0=v$0,d0=d$0,param=r$0;
             for(;;)
              {if(! param)return [0,[0,v0,d0]];
               var r=param[4],d=param[3],v=param[2],l=param[1];
               if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
               var param=l}}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             var
              r=param$0[4],
              d=param$0[3],
              v=param$0[2],
              l=param$0[1],
              c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,d];
             var param$1=0 <= c?r:l,param$0=param$1}}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             var
              r=param$0[4],
              v=param$0[2],
              l=param$0[1],
              c=caml_call2(Ord[1],x,v),
              _vl_=0 === c?1:0;
             if(_vl_)return _vl_;
             var param$1=0 <= c?r:l,param$0=param$1}}
         function min_binding(param)
          {var param$0=param;
           for(;;)
            {if(! param$0)throw Not_found;
             var _vk_=param$0[1];
             if(_vk_){var param$0=_vk_;continue}
             var d=param$0[3],v=param$0[2];
             return [0,v,d]}}
         function min_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             var _vj_=param$0[1];
             if(_vj_){var param$0=_vj_;continue}
             var d=param$0[3],v=param$0[2];
             return [0,[0,v,d]]}}
         function max_binding(param)
          {var param$0=param;
           for(;;)
            {if(! param$0)throw Not_found;
             if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
             var d=param$0[3],v=param$0[2];
             return [0,v,d]}}
         function max_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
             var d=param$0[3],v=param$0[2];
             return [0,[0,v,d]]}}
         function remove_min_binding(param)
          {if(! param)return invalid_arg(cst_Map_remove_min_elt);
           var _vi_=param[1];
           if(_vi_)
            {var r=param[4],d=param[3],v=param[2];
             return bal(remove_min_binding(_vi_),v,d,r)}
           var r$0=param[4];
           return r$0}
         function _uT_(t1,t2)
          {if(! t1)return t2;
           if(! t2)return t1;
           var match=min_binding(t2),d=match[2],x=match[1];
           return bal(t1,x,d,remove_min_binding(t2))}
         function remove(x,m)
          {if(! m)return 0;
           var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
           if(0 === c)return _uT_(l,r);
           if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
           var ll=remove(x,l);
           return l === ll?m:bal(ll,v,d,r)}
         function update(x,f,m)
          {if(! m)
            {var match$0=caml_call1(f,0);
             if(! match$0)return 0;
             var data$0=match$0[1];
             return [0,0,x,data$0,0,1]}
           var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
           if(0 === c)
            {var match=caml_call1(f,[0,d]);
             if(! match)return _uT_(l,r);
             var data=match[1];
             return d === data?m:[0,l,x,data,r,h]}
           if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
           var ll=update(x,f,l);
           return l === ll?m:bal(ll,v,d,r)}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
             iter(f,l);
             caml_call2(f,v,d);
             var param$0=r}}
         function map(f,param)
          {if(! param)return 0;
           var
            h=param[5],
            r=param[4],
            d=param[3],
            v=param[2],
            l=param[1],
            l$0=map(f,l),
            d$0=caml_call1(f,d),
            r$0=map(f,r);
           return [0,l$0,v,d$0,r$0,h]}
         function mapi(f,param)
          {if(! param)return 0;
           var
            h=param[5],
            r=param[4],
            d=param[3],
            v=param[2],
            l=param[1],
            l$0=mapi(f,l),
            d$0=caml_call2(f,v,d),
            r$0=mapi(f,r);
           return [0,l$0,v,d$0,r$0,h]}
         function fold(f,m,accu)
          {var m$0=m,accu$0=accu;
           for(;;)
            {if(! m$0)return accu$0;
             var
              r=m$0[4],
              d=m$0[3],
              v=m$0[2],
              l=m$0[1],
              accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
              m$0=r,
              accu$0=accu$1}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 1;
             var
              r=param$0[4],
              d=param$0[3],
              v=param$0[2],
              l=param$0[1],
              _vf_=caml_call2(p,v,d);
             if(_vf_)
              {var _vg_=for_all(p,l);
               if(_vg_){var param$0=r;continue}
               var _vh_=_vg_}
             else
              var _vh_=_vf_;
             return _vh_}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(! param$0)return 0;
             var
              r=param$0[4],
              d=param$0[3],
              v=param$0[2],
              l=param$0[1],
              _vc_=caml_call2(p,v,d);
             if(_vc_)
              var _vd_=_vc_;
             else
              {var _ve_=exists(p,l);
               if(! _ve_){var param$0=r;continue}
               var _vd_=_ve_}
             return _vd_}}
         function add_min_binding(k,x,param)
          {if(! param)return singleton(k,x);
           var r=param[4],d=param[3],v=param[2],l=param[1];
           return bal(add_min_binding(k,x,l),v,d,r)}
         function add_max_binding(k,x,param)
          {if(! param)return singleton(k,x);
           var r=param[4],d=param[3],v=param[2],l=param[1];
           return bal(l,v,d,add_max_binding(k,x,r))}
         function join(l,v,d,r)
          {if(! l)return add_min_binding(v,d,r);
           if(! r)return add_max_binding(v,d,l);
           var
            rh=r[5],
            rr=r[4],
            rd=r[3],
            rv=r[2],
            rl=r[1],
            lh=l[5],
            lr=l[4],
            ld=l[3],
            lv=l[2],
            ll=l[1];
           return (rh + 2 | 0) < lh
                   ?bal(ll,lv,ld,join(lr,v,d,r))
                   :(lh + 2 | 0) < rh
                     ?bal(join(l,v,d,rl),rv,rd,rr)
                     :create(l,v,d,r)}
         function concat(t1,t2)
          {if(! t1)return t2;
           if(! t2)return t1;
           var match=min_binding(t2),d=match[2],x=match[1];
           return join(t1,x,d,remove_min_binding(t2))}
         function concat_or_join(t1,v,d,t2)
          {if(! d)return concat(t1,t2);var d$0=d[1];return join(t1,v,d$0,t2)}
         function split(x,param)
          {if(! param)return ___;
           var
            r=param[4],
            d=param[3],
            v=param[2],
            l=param[1],
            c=caml_call2(Ord[1],x,v);
           if(0 === c)return [0,l,[0,d],r];
           if(0 <= c)
            {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
             return [0,join(l,v,d,lr),pres,rr]}
           var
            match$0=split(x,l),
            rl=match$0[3],
            pres$0=match$0[2],
            ll=match$0[1];
           return [0,ll,pres$0,join(rl,v,d,r)]}
         function merge(f,s1,s2)
          {if(s1)
            {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
             if(height(s2) <= h1)
              {var
                match=split(v1,s2),
                r2=match[3],
                d2=match[2],
                l2=match[1],
                _u__=merge(f,r1,r2),
                _u$_=caml_call3(f,v1,[0,d1],d2);
               return concat_or_join(merge(f,l1,l2),v1,_u$_,_u__)}}
           else
            if(! s2)return 0;
           if(! s2)throw [0,Assert_failure,_$_];
           var
            r2$0=s2[4],
            d2$0=s2[3],
            v2=s2[2],
            l2$0=s2[1],
            match$0=split(v2,s1),
            r1$0=match$0[3],
            d1$0=match$0[2],
            l1$0=match$0[1],
            _va_=merge(f,r1$0,r2$0),
            _vb_=caml_call3(f,v2,d1$0,[0,d2$0]);
           return concat_or_join(merge(f,l1$0,l2$0),v2,_vb_,_va_)}
         function union(f,s1,s2)
          {if(s1)
            {if(s2)
              {var
                h2=s2[5],
                r2=s2[4],
                d2=s2[3],
                v2=s2[2],
                l2=s2[1],
                h1=s1[5],
                r1=s1[4],
                d1=s1[3],
                v1=s1[2],
                l1=s1[1];
               if(h2 <= h1)
                {var
                  match=split(v1,s2),
                  r2$0=match[3],
                  d2$0=match[2],
                  l2$0=match[1],
                  l=union(f,l1,l2$0),
                  r=union(f,r1,r2$0);
                 if(! d2$0)return join(l,v1,d1,r);
                 var d2$1=d2$0[1];
                 return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
               var
                match$0=split(v2,s1),
                r1$0=match$0[3],
                d1$0=match$0[2],
                l1$0=match$0[1],
                l$0=union(f,l1$0,l2),
                r$0=union(f,r1$0,r2);
               if(! d1$0)return join(l$0,v2,d2,r$0);
               var d1$1=d1$0[1];
               return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
             var s=s1}
           else
            var s=s2;
           return s}
         function filter(p,m)
          {if(! m)return 0;
           var
            r=m[4],
            d=m[3],
            v=m[2],
            l=m[1],
            l$0=filter(p,l),
            pvd=caml_call2(p,v,d),
            r$0=filter(p,r);
           if(! pvd)return concat(l$0,r$0);
           if(l === l$0 && r === r$0)return m;
           return join(l$0,v,d,r$0)}
         function filter_map(f,param)
          {if(! param)return 0;
           var
            r=param[4],
            d=param[3],
            v=param[2],
            l=param[1],
            l$0=filter_map(f,l),
            fvd=caml_call2(f,v,d),
            r$0=filter_map(f,r);
           if(! fvd)return concat(l$0,r$0);
           var d$0=fvd[1];
           return join(l$0,v,d$0,r$0)}
         function partition(p,param)
          {if(! param)return _aa_;
           var
            r=param[4],
            d=param[3],
            v=param[2],
            l=param[1],
            match=partition(p,l),
            lf=match[2],
            lt=match[1],
            pvd=caml_call2(p,v,d),
            match$0=partition(p,r),
            rf=match$0[2],
            rt=match$0[1];
           if(pvd){var _u8_=concat(lf,rf);return [0,join(lt,v,d,rt),_u8_]}
           var _u9_=join(lf,v,d,rf);
           return [0,concat(lt,rt),_u9_]}
         function cons_enum(m,e)
          {var m$0=m,e$0=e;
           for(;;)
            {if(! m$0)return e$0;
             var
              r=m$0[4],
              d=m$0[3],
              v=m$0[2],
              m$1=m$0[1],
              e$1=[0,v,d,r,e$0],
              m$0=m$1,
              e$0=e$1}}
         function compare(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(! e1)return e2?-1:0;
             if(! e2)return 1;
             var
              e2$0=e2[4],
              r2=e2[3],
              d2=e2[2],
              v2=e2[1],
              e1$0=e1[4],
              r1=e1[3],
              d1=e1[2],
              v1=e1[1],
              c=caml_call2(Ord[1],v1,v2);
             if(0 !== c)return c;
             var c$0=caml_call2(cmp,d1,d2);
             if(0 !== c$0)return c$0;
             var
              e2$1=cons_enum(r2,e2$0),
              e1$1=cons_enum(r1,e1$0),
              e1=e1$1,
              e2=e2$1}}
         function equal(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(! e1)return e2?0:1;
             if(! e2)return 0;
             var
              e2$0=e2[4],
              r2=e2[3],
              d2=e2[2],
              v2=e2[1],
              e1$0=e1[4],
              r1=e1[3],
              d1=e1[2],
              v1=e1[1],
              _u5_=0 === caml_call2(Ord[1],v1,v2)?1:0;
             if(_u5_)
              {var _u6_=caml_call2(cmp,d1,d2);
               if(_u6_)
                {var
                  e2$1=cons_enum(r2,e2$0),
                  e1$1=cons_enum(r1,e1$0),
                  e1=e1$1,
                  e2=e2$1;
                 continue}
               var _u7_=_u6_}
             else
              var _u7_=_u5_;
             return _u7_}}
         function cardinal(param)
          {if(! param)return 0;
           var r=param[4],l=param[1],_u4_=cardinal(r);
           return (cardinal(l) + 1 | 0) + _u4_ | 0}
         function bindings_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(! param$0)return accu$0;
             var
              r=param$0[4],
              d=param$0[3],
              v=param$0[2],
              l=param$0[1],
              accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
              accu$0=accu$1,
              param$0=l}}
         function bindings(s){return bindings_aux(0,s)}
         function add_seq(i,m)
          {return fold_left
                   (function(m,param)
                     {var v=param[2],k=param[1];return add(k,v,m)},
                    m,
                    i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(! c)return 0;
           var rest=c[4],t=c[3],v=c[2],k=c[1],_u2_=cons_enum(t,rest);
           return [0,[0,k,v],function(_u3_){return seq_of_enum(_u2_,_u3_)}]}
         function to_seq(m)
          {var _u0_=cons_enum(m,0);
           return function(_u1_){return seq_of_enum(_u0_,_u1_)}}
         function snoc_enum(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(! s$0)return e$0;
             var
              s$1=s$0[4],
              d=s$0[3],
              v=s$0[2],
              l=s$0[1],
              e$1=[0,v,d,l,e$0],
              s$0=s$1,
              e$0=e$1}}
         function rev_seq_of_enum(c,param)
          {if(! c)return 0;
           var rest=c[4],t=c[3],v=c[2],k=c[1],_uY_=snoc_enum(t,rest);
           return [0,
                   [0,k,v],
                   function(_uZ_){return rev_seq_of_enum(_uY_,_uZ_)}]}
         function to_rev_seq(c)
          {var _uW_=snoc_enum(c,0);
           return function(_uX_){return rev_seq_of_enum(_uW_,_uX_)}}
         function to_seq_from(low,m)
          {var m$0=m,c=0;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
                 var m$0=r;
                 continue}
               var _uU_=[0,v,d,r,c]}
             else
              var _uU_=c;
             return function(_uV_){return seq_of_enum(_uU_,_uV_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 update,
                 singleton,
                 remove,
                 merge,
                 union,
                 compare,
                 equal,
                 iter,
                 fold,
                 for_all,
                 exists,
                 filter,
                 filter_map,
                 partition,
                 cardinal,
                 bindings,
                 min_binding,
                 min_binding_opt,
                 max_binding,
                 max_binding_opt,
                 min_binding,
                 min_binding_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 map,
                 mapi,
                 to_seq,
                 to_rev_seq,
                 to_seq_from,
                 add_seq,
                 of_seq]}];
    caml_register_global(788,Stdlib_Map,"Stdlib__Map");
    var Empty=[248,cst_Stdlib_Stack_Empty,caml_fresh_oo_id(0)];
    function create$0(param){return [0,0,0]}
    function clear(s){s[1] = 0;s[2] = 0;return 0}
    function copy$2(s){return [0,s[1],s[2]]}
    function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
    function pop(s)
     {var _uS_=s[1];
      if(! _uS_)throw Empty;
      var tl=_uS_[2],hd=_uS_[1];
      s[1] = tl;
      s[2] = s[2] - 1 | 0;
      return hd}
    function pop_opt(s)
     {var _uR_=s[1];
      if(! _uR_)return 0;
      var tl=_uR_[2],hd=_uR_[1];
      s[1] = tl;
      s[2] = s[2] - 1 | 0;
      return [0,hd]}
    function top(s)
     {var _uQ_=s[1];if(! _uQ_)throw Empty;var hd=_uQ_[1];return hd}
    function top_opt(s)
     {var _uP_=s[1];if(! _uP_)return 0;var hd=_uP_[1];return [0,hd]}
    function is_empty$0(s){return 0 === s[1]?1:0}
    function length$2(s){return s[2]}
    function iter$7(f,s){return iter$2(f,s[1])}
    function fold$2(f,acc,s){return fold_left$0(f,acc,s[1])}
    function to_seq$6(s){return to_seq$1(s[1])}
    function add_seq(q,i){return iter(function(x){return push(x,q)},i)}
    function of_seq$4(g){var s=create$0(0);add_seq(s,g);return s}
    var
     Stdlib_Stack=
      [0,
       Empty,
       create$0,
       push,
       pop,
       pop_opt,
       top,
       top_opt,
       clear,
       copy$2,
       is_empty$0,
       length$2,
       iter$7,
       fold$2,
       to_seq$6,
       add_seq,
       of_seq$4];
    caml_register_global(789,Stdlib_Stack,"Stdlib__Stack");
    var Empty$0=[248,cst_Stdlib_Queue_Empty,caml_fresh_oo_id(0)];
    function create$1(param){return [0,0,0,0]}
    function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
    function add(x,q)
     {var cell=[0,x,0],_uO_=q[3];
      return _uO_
              ?(q[1] = q[1] + 1 | 0,_uO_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function peek(q)
     {var _uN_=q[2];
      if(! _uN_)throw Empty$0;
      var content=_uN_[1];
      return content}
    function peek_opt(q)
     {var _uM_=q[2];if(! _uM_)return 0;var content=_uM_[1];return [0,content]}
    function take$0(q)
     {var _uK_=q[2];
      if(! _uK_)throw Empty$0;
      var _uL_=_uK_[1];
      if(_uK_[2])
       {var next=_uK_[2];q[1] = q[1] - 1 | 0;q[2] = next;return _uL_}
      clear$0(q);
      return _uL_}
    function take_opt(q)
     {var _uI_=q[2];
      if(! _uI_)return 0;
      var _uJ_=_uI_[1];
      if(_uI_[2])
       {var next=_uI_[2];q[1] = q[1] - 1 | 0;q[2] = next;return [0,_uJ_]}
      clear$0(q);
      return [0,_uJ_]}
    function copy$3(q)
     {var q_res=[0,q[1],0,0],prev=0,cell=q[2];
      for(;;)
       {if(! cell){q_res[3] = prev;return q_res}
        var content=cell[1],next=cell[2],res=[0,content,0];
        if(prev)prev[2] = res;else q_res[2] = res;
        var prev=res,cell=next}}
    function is_empty$1(q){return 0 === q[1]?1:0}
    function length$3(q){return q[1]}
    function iter$8(f,q)
     {var cell=q[2];
      for(;;)
       {if(! cell)return 0;
        var content=cell[1],next=cell[2];
        caml_call1(f,content);
        var cell=next}}
    function fold$3(f,accu$1,q)
     {var accu=accu$1,cell=q[2];
      for(;;)
       {if(! cell)return accu;
        var
         content=cell[1],
         next=cell[2],
         accu$0=caml_call2(f,accu,content),
         accu=accu$0,
         cell=next}}
    function transfer(q1,q2)
     {var _uG_=0 < q1[1]?1:0;
      if(! _uG_)return _uG_;
      var _uH_=q2[3];
      return _uH_
              ?(q2[1]
                =
                q2[1]
                +
                q1[1]
                |
                0,
                _uH_[2]
                =
                q1[2],
                q2[3]
                =
                q1[3],
                clear$0(q1))
              :(q2[1] = q1[1],q2[2] = q1[2],q2[3] = q1[3],clear$0(q1))}
    function to_seq$7(q)
     {function aux(c,param)
       {if(! c)return 0;
        var x=c[1],next=c[2];
        return [0,x,function(_uF_){return aux(next,_uF_)}]}
      var _uD_=q[2];
      return function(_uE_){return aux(_uD_,_uE_)}}
    function add_seq$0(q,i){return iter(function(x){return add(x,q)},i)}
    function of_seq$5(g){var q=create$1(0);add_seq$0(q,g);return q}
    var
     Stdlib_Queue=
      [0,
       Empty$0,
       create$1,
       add,
       add,
       take$0,
       take_opt,
       take$0,
       peek,
       peek_opt,
       peek,
       clear$0,
       copy$3,
       is_empty$1,
       length$3,
       iter$8,
       fold$3,
       transfer,
       to_seq$7,
       add_seq$0,
       of_seq$5];
    caml_register_global(790,Stdlib_Queue,"Stdlib__Queue");
    function create$2(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,[0,s,n$1],0,s]}
    function contents(b){return sub_string(b[1][1],0,b[2])}
    function to_bytes$0(b){return sub(b[1][1],0,b[2])}
    function sub$3(b,ofs,len)
     {if(0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
       return sub_string(b[1][1],ofs,len);
      return invalid_arg(cst_Buffer_sub)}
    function blit$3(src,srcoff,dst,dstoff,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        srcoff
        &&
        (src[2] - len | 0)
        >=
        srcoff
        &&
        0
        <=
        dstoff
        &&
        (caml_ml_bytes_length(dst) - len | 0)
        >=
        dstoff)
       return blit(src[1][1],srcoff,dst,dstoff,len);
      return invalid_arg(cst_Buffer_blit)}
    function nth$0(b,ofs)
     {var position=b[2],match=b[1],length=match[2],buffer=match[1];
      if(0 <= ofs && position > ofs && length >= position)
       return caml_bytes_unsafe_get(buffer,ofs);
      return invalid_arg(cst_Buffer_nth)}
    function length$4(b){return b[2]}
    function clear$1(b){b[2] = 0;return 0}
    function reset(b)
     {b[2] = 0;
      var inner=[0,b[3],caml_ml_bytes_length(b[3])];
      b[1] = inner;
      return 0}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[1][2],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(cst_Buffer_add_cannot_grow_buf);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1][1],0,new_buffer,0,b[2]);
        b[1] = [0,new_buffer,new_len[1]];
        return 0}}
    function add_char(b,c)
     {var pos=b[2],match=b[1],length=match[2],buffer=match[1];
      if(length <= pos)
       {resize(b,1);caml_bytes_set(b[1][1],b[2],c)}
      else
       caml_bytes_unsafe_set(buffer,pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    var uchar_utf_8_byte_length_max=4,uchar_utf_16_byte_length_max=4;
    function add_utf_8_uchar(b,u)
     {for(;;)
       {var pos=b[2];
        if(b[1][2] <= pos)resize(b,uchar_utf_8_byte_length_max);
        var n=set_utf_8_uchar(b[1][1],pos,u);
        if(0 === n){resize(b,uchar_utf_8_byte_length_max);continue}
        b[2] = pos + n | 0;
        return 0}}
    function add_utf_16be_uchar(b,u)
     {for(;;)
       {var pos=b[2];
        if(b[1][2] <= pos)resize(b,uchar_utf_16_byte_length_max);
        var n=set_utf_16be_uchar(b[1][1],pos,u);
        if(0 === n){resize(b,uchar_utf_16_byte_length_max);continue}
        b[2] = pos + n | 0;
        return 0}}
    function add_utf_16le_uchar(b,u)
     {for(;;)
       {var pos=b[2];
        if(b[1][2] <= pos)resize(b,uchar_utf_16_byte_length_max);
        var n=set_utf_16le_uchar(b[1][1],pos,u);
        if(0 === n){resize(b,uchar_utf_16_byte_length_max);continue}
        b[2] = pos + n | 0;
        return 0}}
    function add_substring(b,s,offset,len)
     {var _uA_=offset < 0?1:0;
      if(_uA_)
       var _uB_=_uA_;
      else
       var
        _uC_=len < 0?1:0,
        _uB_=_uC_ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
      if(_uB_)invalid_arg(cst_Buffer_add_substring_add_s);
      var
       position=b[2],
       match=b[1],
       length=match[2],
       buffer=match[1],
       new_position=position + len | 0;
      if(length < new_position)
       {resize(b,len);blit$0(s,offset,b[1][1],b[2],len)}
      else
       caml_blit_string(s,offset,buffer,position,len);
      b[2] = new_position;
      return 0}
    function add_subbytes(b,s,offset,len)
     {return add_substring(b,caml_string_of_bytes(s),offset,len)}
    function add_string(b,s)
     {var
       len=caml_ml_string_length(s),
       position=b[2],
       match=b[1],
       length=match[2],
       buffer=match[1],
       new_position=b[2] + len | 0;
      if(length < new_position)
       {resize(b,len);blit$0(s,0,b[1][1],b[2],len)}
      else
       caml_blit_string(s,0,buffer,position,len);
      b[2] = new_position;
      return 0}
    function add_bytes(b,s){return add_string(b,caml_string_of_bytes(s))}
    function add_buffer(b,bs){return add_subbytes(b,bs[1][1],0,bs[2])}
    function add_channel(b,ic,len)
     {var _uy_=len < 0?1:0,_uz_=_uy_ || (max_string_length < len?1:0);
      if(_uz_)invalid_arg(cst_Buffer_add_channel);
      if(b[1][2] < (b[2] + len | 0))resize(b,len);
      var already_read=0,ofs=b[2],to_read=len,_ux_=b[1][1];
      for(;;)
       {if(0 !== to_read)
         {var r=input(ic,_ux_,ofs,to_read);
          if(0 !== r)
           {var
             already_read$0=already_read + r | 0,
             ofs$0=ofs + r | 0,
             to_read$0=to_read - r | 0,
             already_read=already_read$0,
             ofs=ofs$0,
             to_read=to_read$0;
            continue}}
        b[2] = b[2] + already_read | 0;
        if(already_read < len)throw End_of_file;
        return 0}}
    function output_buffer(oc,b){return output(oc,b[1][1],0,b[2])}
    function add_substitute(b,f,s)
     {var lim$1=caml_ml_string_length(s),previous=32,i$7=0;
      for(;;)
       {if(i$7 >= lim$1)
         {var _uw_=92 === previous?1:0;return _uw_?add_char(b,previous):_uw_}
        var current=caml_string_get(s,i$7);
        if(36 !== current)
         {if(92 === previous)
           {add_char(b,92);
            add_char(b,current);
            var i$9=i$7 + 1 | 0,previous=32,i$7=i$9;
            continue}
          if(92 === current)
           {var i$10=i$7 + 1 | 0,previous=current,i$7=i$10;continue}
          add_char(b,current);
          var i$11=i$7 + 1 | 0,previous=current,i$7=i$11;
          continue}
        if(92 === previous)
         {add_char(b,current);
          var i$8=i$7 + 1 | 0,previous=32,i$7=i$8;
          continue}
        var start=i$7 + 1 | 0;
        if(lim$1 <= start)throw Not_found;
        var opening=caml_string_get(s,start),switch$0=0;
        if(40 !== opening && 123 !== opening)
         {var i$6=start + 1 | 0,lim$0=caml_ml_string_length(s),i$3=i$6;
          for(;;)
           {if(lim$0 <= i$3)
             var stop=lim$0;
            else
             {var match=caml_string_get(s,i$3),switch$1=0;
              if(91 <= match)
               {if(97 <= match)
                 {if(123 > match)switch$1 = 1}
                else
                 if(95 === match)switch$1 = 1}
              else
               if(58 <= match)
                {if(65 <= match)switch$1 = 1}
               else
                if(48 <= match)switch$1 = 1;
              if(switch$1){var i$4=i$3 + 1 | 0,i$3=i$4;continue}
              var stop=i$3}
            var match$0=[0,sub$0(s,start,stop - start | 0),stop];
            switch$0 = 1;
            break}}
        if(! switch$0)
         {var i$5=start + 1 | 0,k$2=0;
          if(40 === opening)
           var _uv_=41;
          else
           {if(123 !== opening)throw [0,Assert_failure,_ab_];var _uv_=125}
          var lim=caml_ml_string_length(s),k=k$2,i=i$5;
          for(;;)
           {if(lim <= i)throw Not_found;
            if(caml_string_get(s,i) === opening)
             {var i$0=i + 1 | 0,k$0=k + 1 | 0,k=k$0,i=i$0;continue}
            if(caml_string_get(s,i) !== _uv_)
             {var i$2=i + 1 | 0,i=i$2;continue}
            if(0 !== k){var i$1=i + 1 | 0,k$1=k - 1 | 0,k=k$1,i=i$1;continue}
            var match$0=[0,sub$0(s,i$5,(i - start | 0) - 1 | 0),i + 1 | 0];
            break}}
        var next_i=match$0[2],ident=match$0[1];
        add_string(b,caml_call1(f,ident));
        var previous=32,i$7=next_i}}
    function truncate(b,len)
     {if(0 <= len && b[2] >= len){b[2] = len;return 0}
      return invalid_arg(cst_Buffer_truncate)}
    function to_seq$8(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_get(b[1][1],i),_ut_=i + 1 | 0;
        return [0,x,function(_uu_){return aux(_ut_,_uu_)}]}
      var _ur_=0;
      return function(_us_){return aux(_ur_,_us_)}}
    function to_seqi$3(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_get(b[1][1],i),_up_=i + 1 | 0;
        return [0,[0,i,x],function(_uq_){return aux(_up_,_uq_)}]}
      var _un_=0;
      return function(_uo_){return aux(_un_,_uo_)}}
    function add_seq$1(b,seq)
     {return iter(function(_um_){return add_char(b,_um_)},seq)}
    function of_seq$6(i){var b=create$2(32);add_seq$1(b,i);return b}
    function add_int8(b,x)
     {var
       position=b[2],
       match=b[1],
       length=match[2],
       buffer=match[1],
       new_position=position + 1 | 0;
      if(length < new_position)
       {resize(b,1);caml_bytes_set(b[1][1],b[2],x)}
      else
       caml_bytes_unsafe_set(buffer,position,x);
      b[2] = new_position;
      return 0}
    function add_int16_ne(b,x)
     {var
       position=b[2],
       match=b[1],
       length=match[2],
       buffer=match[1],
       new_position=position + 2 | 0;
      if(length < new_position)
       {resize(b,2);caml_bytes_set16(b[1][1],b[2],x)}
      else
       caml_bytes_set16(buffer,position,x);
      b[2] = new_position;
      return 0}
    function add_int32_ne(b,x)
     {var
       position=b[2],
       match=b[1],
       length=match[2],
       buffer=match[1],
       new_position=position + 4 | 0;
      if(length < new_position)
       {resize(b,4);caml_bytes_set32(b[1][1],b[2],x)}
      else
       caml_bytes_set32(buffer,position,x);
      b[2] = new_position;
      return 0}
    function add_int64_ne(b,x)
     {var
       position=b[2],
       match=b[1],
       length=match[2],
       buffer=match[1],
       new_position=position + 8 | 0;
      if(length < new_position)
       {resize(b,8);caml_bytes_set64(b[1][1],b[2],x)}
      else
       caml_bytes_set64(buffer,position,x);
      b[2] = new_position;
      return 0}
    function add_int16_le(b,x){return add_int16_ne(b,x)}
    function add_int16_be(b,x)
     {var x$0=caml_bswap16(x);return add_int16_ne(b,x$0)}
    function add_int32_le(b,x){return add_int32_ne(b,x)}
    function add_int32_be(b,x)
     {var x$0=caml_int32_bswap(x);return add_int32_ne(b,x$0)}
    function add_int64_le(b,x){return add_int64_ne(b,x)}
    function add_int64_be(b,x)
     {var x$0=caml_int64_bswap(x);return add_int64_ne(b,x$0)}
    var
     Stdlib_Buffer=
      [0,
       create$2,
       contents,
       to_bytes$0,
       sub$3,
       blit$3,
       nth$0,
       length$4,
       clear$1,
       reset,
       output_buffer,
       truncate,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       to_seq$8,
       to_seqi$3,
       add_seq$1,
       of_seq$6,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
    caml_register_global(791,Stdlib_Buffer,"Stdlib__Buffer");
    var
     Stdlib_Mutex=
      [0,
       caml_ml_mutex_new,
       caml_ml_mutex_lock,
       runtime.caml_ml_mutex_try_lock,
       caml_ml_mutex_unlock];
    caml_register_global(792,Stdlib_Mutex,"Stdlib__Mutex");
    var
     Stdlib_Condition=
      [0,
       caml_ml_condition_new,
       caml_ml_condition_wait,
       caml_ml_condition_signal,
       caml_ml_condition_broadcast];
    caml_register_global(793,Stdlib_Condition,"Stdlib__Condition");
    function make$2(v)
     {if(v < 0)invalid_arg(cst_Semaphore_Counting_init_wr);
      var _ul_=caml_ml_condition_new(0);
      return [0,caml_ml_mutex_new(0),v,_ul_]}
    function release(s)
     {caml_ml_mutex_lock(s[1]);
      if(s[2] < 2147483647)
       {s[2] = s[2] + 1 | 0;
        caml_ml_condition_signal(s[3]);
        return caml_ml_mutex_unlock(s[1])}
      caml_ml_mutex_unlock(s[1]);
      throw [0,Sys_error,cst_Semaphore_Counting_release]}
    function acquire(s)
     {caml_ml_mutex_lock(s[1]);
      for(;;)
       {if(0 === s[2]){caml_ml_condition_wait(s[3],s[1]);continue}
        s[2] = s[2] - 1 | 0;
        return caml_ml_mutex_unlock(s[1])}}
    function try_acquire(s)
     {caml_ml_mutex_lock(s[1]);
      var ret=0 === s[2]?0:(s[2] = s[2] - 1 | 0,1);
      caml_ml_mutex_unlock(s[1]);
      return ret}
    function get_value(s){return s[2]}
    var Counting=[0,make$2,release,acquire,try_acquire,get_value];
    function make$3(b)
     {var _uj_=caml_ml_condition_new(0),_uk_=b?1:0;
      return [0,caml_ml_mutex_new(0),_uk_,_uj_]}
    function release$0(s)
     {caml_ml_mutex_lock(s[1]);
      s[2] = 1;
      caml_ml_condition_signal(s[3]);
      return caml_ml_mutex_unlock(s[1])}
    function acquire$0(s)
     {caml_ml_mutex_lock(s[1]);
      for(;;)
       {if(0 === s[2]){caml_ml_condition_wait(s[3],s[1]);continue}
        s[2] = 0;
        return caml_ml_mutex_unlock(s[1])}}
    function try_acquire$0(s)
     {caml_ml_mutex_lock(s[1]);
      var ret=0 === s[2]?0:(s[2] = 0,1);
      caml_ml_mutex_unlock(s[1]);
      return ret}
    var
     Binary=[0,make$3,release$0,acquire$0,try_acquire$0],
     Stdlib_Semaphore=[0,Counting,Binary];
    caml_register_global(794,Stdlib_Semaphore,"Stdlib__Semaphore");
    function cpu_relax(param){return runtime.caml_ml_domain_cpu_relax(0)}
    var unique_value=[0,0];
    function create_dls(param)
     {var st=caml_make_vect(8,unique_value);return caml_domain_dls_set(st)}
    create_dls(0);
    var key_counter=[0,0],parent_keys=[0,0];
    function new_key(split_from_parent,init_orphan)
     {var idx=caml_atomic_fetch_add(key_counter,1),k=[0,idx,init_orphan];
      if(split_from_parent)
       {var split=split_from_parent[1],ki=[0,k,split];
        for(;;)
         {var l=caml_atomic_load(parent_keys);
          if(1 - caml_atomic_cas(parent_keys,l,[0,ki,l]))continue;
          break}}
      return k}
    function maybe_grow(idx)
     {var st=runtime.caml_domain_dls_get(0),s=st.length - 1;
      if(idx < s)return st;
      var s$0=s;
      for(;;)
       {if(idx < s$0)
         {var new_st=caml_make_vect(s$0,unique_value);
          blit$1(st,0,new_st,0,s);
          caml_domain_dls_set(new_st);
          return new_st}
        var s$1=2 * s$0 | 0,s$0=s$1}}
    function set$1(param,x)
     {var idx=param[1],st=maybe_grow(idx);
      caml_check_bound(st,idx)[1 + idx] = x;
      return 0}
    function get$1(param)
     {var
       init=param[2],
       idx=param[1],
       st=maybe_grow(idx),
       v=caml_check_bound(st,idx)[1 + idx];
      if(v !== unique_value)return v;
      var v$0=caml_call1(init,0);
      caml_check_bound(st,idx)[1 + idx] = v$0;
      return v$0}
    function set_initial_keys(l)
     {return iter$2
              (function(param)
                {var v=param[2],idx=param[1],st=maybe_grow(idx);
                 caml_check_bound(st,idx)[1 + idx] = v;
                 return 0},
               l)}
    function get_id(param){var domain=param[1];return domain}
    function self(param){return caml_ml_domain_id(0)}
    function is_main_domain(param){return 0 === caml_ml_domain_id(0)?1:0}
    var
     first_domain_spawned=[0,0],
     first_spawn_function=[0,function(param){return 0}];
    function before_first_spawn(f)
     {if(caml_atomic_load(first_domain_spawned))
       throw [0,Invalid_argument,cst_first_domain_already_spawn];
      var old_f=first_spawn_function[1];
      function new_f(param){caml_call1(old_f,0);return caml_call1(f,0)}
      first_spawn_function[1] = new_f;
      return 0}
    var at_exit_key=new_key(0,function(param,_ui_){return 0});
    function at_exit$0(f)
     {var old_exit=get$1(at_exit_key);
      function new_exit(param){caml_call1(f,0);return caml_call1(old_exit,0)}
      return set$1(at_exit_key,new_exit)}
    function do_at_exit$0(param)
     {var f=get$1(at_exit_key);return caml_call1(f,0)}
    do_domain_local_at_exit[1] = do_at_exit$0;
    function spawn(f)
     {if(1 - caml_atomic_load(first_domain_spawned))
       {set(first_domain_spawned,1);
        caml_call1(first_spawn_function[1],0);
        first_spawn_function[1] = function(param){return 0}}
      var
       _ug_=caml_atomic_load(parent_keys),
       pk=
        map$4
         (function(param)
           {var split=param[2],k=param[1],idx=k[1];
            return [0,idx,caml_call1(split,get$1(k))]},
          _ug_),
       term_mutex=caml_ml_mutex_new(0),
       term_condition=caml_ml_condition_new(0),
       term_state=[0,0];
      function body(param)
       {try
         {var switch$0=0;
          create_dls(0);
          set_initial_keys(pk);
          var x=caml_call1(f,0);
          switch$0 = 1}
        catch(ex){ex = caml_wrap_exception(ex);var result=[1,ex]}
        if(switch$0)var result=[0,x];
        try
         {do_at_exit$0(0);var result$0=result}
        catch(ex)
         {ex = caml_wrap_exception(ex);
          var _uh_=0 === result[0]?[1,ex]:result,result$0=_uh_}
        caml_ml_mutex_lock(term_mutex);
        return term_state[1]
                ?failwith(cst_internal_error_Am_I_alread)
                :(term_state[1]
                  =
                  [0,result$0],
                  caml_ml_condition_broadcast(term_condition))}
      return [0,
              runtime.caml_domain_spawn(body,term_mutex),
              term_mutex,
              term_condition,
              term_state]}
    function join$1(param)
     {var term_state=param[4],term_condition=param[3],term_mutex=param[2];
      caml_ml_mutex_lock(term_mutex);
      for(;;)
       {var _uf_=term_state[1];
        if(! _uf_){caml_ml_condition_wait(term_condition,term_mutex);continue}
        var res=_uf_[1];
        caml_ml_mutex_unlock(term_mutex);
        if(0 === res[0]){var x=res[1];return x}
        var ex=res[1];
        throw ex}}
    var
     recommended_domain_count=runtime.caml_recommended_domain_count,
     _ac_=[0,new_key,get$1,set$1],
     Stdlib_Domain=
      [0,
       spawn,
       join$1,
       get_id,
       self,
       before_first_spawn,
       at_exit$0,
       cpu_relax,
       is_main_domain,
       recommended_domain_count,
       _ac_];
    caml_register_global(795,Stdlib_Domain,"Stdlib__Domain");
    function create_char_set(param){return make(32,0)}
    function add_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return caml_bytes_set
              (char_set,
               str_ind,
               char_of_int(caml_bytes_get(char_set,str_ind) | mask))}
    function freeze_char_set(char_set){return of_bytes(char_set)}
    function rev_char_set(char_set)
     {var char_set$0=create_char_set(0),i=0;
      for(;;)
       {caml_bytes_set
         (char_set$0,i,char_of_int(caml_string_get(char_set,i) ^ 255));
        var _ue_=i + 1 | 0;
        if(31 === i)return caml_string_of_bytes(char_set$0);
        var i=_ue_}}
    function is_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return 0 !== (caml_string_get(char_set,str_ind) & mask)?1:0}
    function pad_of_pad_opt(pad_opt)
     {if(! pad_opt)return 0;var width=pad_opt[1];return [0,1,width]}
    function param_format_of_ignored_format(ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return [0,[0,fmt]];
         case 1:return [0,[1,fmt]];
         case 2:return [0,[19,fmt]];
         default:return [0,[22,fmt]]}
      switch(ign[0])
       {case 0:var pad_opt=ign[1];return [0,[2,pad_of_pad_opt(pad_opt),fmt]];
        case 1:
         var pad_opt$0=ign[1];return [0,[3,pad_of_pad_opt(pad_opt$0),fmt]];
        case 2:
         var pad_opt$1=ign[2],iconv=ign[1];
         return [0,[4,iconv,pad_of_pad_opt(pad_opt$1),0,fmt]];
        case 3:
         var pad_opt$2=ign[2],iconv$0=ign[1];
         return [0,[5,iconv$0,pad_of_pad_opt(pad_opt$2),0,fmt]];
        case 4:
         var pad_opt$3=ign[2],iconv$1=ign[1];
         return [0,[6,iconv$1,pad_of_pad_opt(pad_opt$3),0,fmt]];
        case 5:
         var pad_opt$4=ign[2],iconv$2=ign[1];
         return [0,[7,iconv$2,pad_of_pad_opt(pad_opt$4),0,fmt]];
        case 6:
         var prec_opt=ign[2],pad_opt$5=ign[1];
         if(prec_opt)var ndec=prec_opt[1],_ud_=[0,ndec];else var _ud_=0;
         return [0,[8,_ad_,pad_of_pad_opt(pad_opt$5),_ud_,fmt]];
        case 7:
         var pad_opt$6=ign[1];return [0,[9,pad_of_pad_opt(pad_opt$6),fmt]];
        case 8:
         var fmtty=ign[2],pad_opt$7=ign[1];
         return [0,[13,pad_opt$7,fmtty,fmt]];
        case 9:
         var fmtty$0=ign[2],pad_opt$8=ign[1];
         return [0,[14,pad_opt$8,fmtty$0,fmt]];
        case 10:
         var char_set=ign[2],width_opt=ign[1];
         return [0,[20,width_opt,char_set,fmt]];
        default:var counter=ign[1];return [0,[21,counter,fmt]]}}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _ub_=len < min_len?1:0;
      if(_ub_)
       {var
         new_len=max$1(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _uc_=0}
      else
       var _uc_=_ub_;
      return _uc_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function char_of_iconv(iconv)
     {switch(iconv)
       {case 6:
        case 7:return 120;
        case 8:
        case 9:return 88;
        case 10:
        case 11:return 111;
        case 12:
        case 15:return 117;
        case 0:
        case 1:
        case 2:
        case 13:return 100;
        default:return 105}}
    function char_of_fconv(opt,fconv)
     {if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:return 102;
        case 1:return 101;
        case 2:return 69;
        case 3:return 103;
        case 4:return 71;
        case 5:return cF;
        case 6:return 104;
        case 7:return 72;
        default:return 70}}
    function bprint_padty(buf,padty)
     {switch(padty)
       {case 0:return buffer_add_char(buf,45);
        case 1:return 0;
        default:return buffer_add_char(buf,48)}}
    function bprint_ignored_flag(buf,ign_flag)
     {return ign_flag?buffer_add_char(buf,95):ign_flag}
    function bprint_pad_opt(buf,pad_opt)
     {if(! pad_opt)return 0;
      var width=pad_opt[1];
      return buffer_add_string(buf,caml_string_of_jsbytes("" + width))}
    function bprint_padding(buf,pad)
     {if(typeof pad === "number")return 0;
      if(0 === pad[0])
       {var n=pad[2],padty=pad[1];
        bprint_padty(buf,padty);
        return buffer_add_string(buf,caml_string_of_jsbytes("" + n))}
      var padty$0=pad[1];
      bprint_padty(buf,padty$0);
      return buffer_add_char(buf,42)}
    function bprint_precision(buf,prec)
     {if(typeof prec === "number")return prec?buffer_add_string(buf,cst$6):0;
      var n=prec[1];
      buffer_add_char(buf,46);
      return buffer_add_string(buf,caml_string_of_jsbytes("" + n))}
    function bprint_iconv_flag(buf,iconv)
     {switch(iconv)
       {case 1:
        case 4:return buffer_add_char(buf,43);
        case 2:
        case 5:return buffer_add_char(buf,32);
        case 7:
        case 9:
        case 11:
        case 13:
        case 14:
        case 15:return buffer_add_char(buf,35);
        default:return 0}}
    function bprint_altint_fmt(buf,ign_flag,iconv,pad,prec,c)
     {buffer_add_char(buf,37);
      bprint_ignored_flag(buf,ign_flag);
      bprint_iconv_flag(buf,iconv);
      bprint_padding(buf,pad);
      bprint_precision(buf,prec);
      buffer_add_char(buf,c);
      return buffer_add_char(buf,char_of_iconv(iconv))}
    function bprint_fconv_flag(buf,fconv)
     {switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      return 8 <= fconv[2]?buffer_add_char(buf,35):0}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return cst$7;
         case 1:return cst$8;
         case 2:return cst$9;
         case 3:return cst$10;
         case 4:return cst$11;
         case 5:return cst$12;
         default:return cst$13}
      switch(formatting_lit[0])
       {case 0:var str=formatting_lit[1];return str;
        case 1:var str$0=formatting_lit[1];return str$0;
        default:var c=formatting_lit[1];return cat(cst$14,make$0(1,c))}}
    function bprint_char_literal(buf,chr)
     {return 37 === chr?buffer_add_string(buf,cst$15):buffer_add_char(buf,chr)}
    function bprint_string_literal(buf,str)
     {var _t$_=caml_ml_string_length(str) - 1 | 0,_t__=0;
      if(_t$_ >= 0)
       {var i=_t__;
        for(;;)
         {bprint_char_literal(buf,caml_string_get(str,i));
          var _ua_=i + 1 | 0;
          if(_t$_ !== i){var i=_ua_;continue}
          break}}
      return 0}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       {if(typeof fmtty$0 === "number")return 0;
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,cst_c);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,cst_s);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,cst_i);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,cst_li);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,cst_ni);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,cst_Li);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,cst_f);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,cst_B);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,cst$16);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,cst$17);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,cst$18);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,cst$19);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,cst_a);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,cst_t$0);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,cst$20);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,cst_r$0);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,cst_r$1);
           var fmtty$0=rest$13;
           continue}}}
    function int_of_custom_arity(param)
     {if(! param)return 0;
      var x=param[1];
      return 1 + int_of_custom_arity(x) | 0}
    function string_of_fmt(fmt)
     {var buf=buffer_create(16);
      function fmtiter(fmt,ign_flag)
       {var fmt$0=fmt,ign_flag$0=ign_flag;
        a:
        for(;;)
         {if(typeof fmt$0 === "number")return 0;
          switch(fmt$0[0])
           {case 0:
             var rest=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             buffer_add_char(buf,99);
             var fmt$0=rest,ign_flag$0=0;
             continue;
            case 1:
             var rest$0=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             buffer_add_char(buf,67);
             var fmt$0=rest$0,ign_flag$0=0;
             continue;
            case 2:
             var rest$1=fmt$0[2],pad=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_padding(buf,pad);
             buffer_add_char(buf,115);
             var fmt$0=rest$1,ign_flag$0=0;
             continue;
            case 3:
             var rest$2=fmt$0[2],pad$0=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_padding(buf,pad$0);
             buffer_add_char(buf,83);
             var fmt$0=rest$2,ign_flag$0=0;
             continue;
            case 4:
             var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_iconv_flag(buf,iconv);
             bprint_padding(buf,pad$1);
             bprint_precision(buf,prec);
             buffer_add_char(buf,char_of_iconv(iconv));
             var fmt$0=rest$3,ign_flag$0=0;
             continue;
            case 5:
             var
              rest$4=fmt$0[4],
              prec$0=fmt$0[3],
              pad$2=fmt$0[2],
              iconv$0=fmt$0[1];
             bprint_altint_fmt(buf,ign_flag$0,iconv$0,pad$2,prec$0,108);
             var fmt$0=rest$4,ign_flag$0=0;
             continue;
            case 6:
             var
              rest$5=fmt$0[4],
              prec$1=fmt$0[3],
              pad$3=fmt$0[2],
              iconv$1=fmt$0[1];
             bprint_altint_fmt(buf,ign_flag$0,iconv$1,pad$3,prec$1,110);
             var fmt$0=rest$5,ign_flag$0=0;
             continue;
            case 7:
             var
              rest$6=fmt$0[4],
              prec$2=fmt$0[3],
              pad$4=fmt$0[2],
              iconv$2=fmt$0[1];
             bprint_altint_fmt(buf,ign_flag$0,iconv$2,pad$4,prec$2,76);
             var fmt$0=rest$6,ign_flag$0=0;
             continue;
            case 8:
             var
              rest$7=fmt$0[4],
              prec$3=fmt$0[3],
              pad$5=fmt$0[2],
              fconv=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_fconv_flag(buf,fconv);
             bprint_padding(buf,pad$5);
             bprint_precision(buf,prec$3);
             buffer_add_char(buf,char_of_fconv(0,fconv));
             var fmt$0=rest$7,ign_flag$0=0;
             continue;
            case 9:
             var rest$8=fmt$0[2],pad$6=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_padding(buf,pad$6);
             buffer_add_char(buf,66);
             var fmt$0=rest$8,ign_flag$0=0;
             continue;
            case 10:
             var rest$9=fmt$0[1];
             buffer_add_string(buf,cst$21);
             var fmt$0=rest$9;
             continue;
            case 11:
             var rest$10=fmt$0[2],str=fmt$0[1];
             bprint_string_literal(buf,str);
             var fmt$0=rest$10;
             continue;
            case 12:
             var rest$11=fmt$0[2],chr$0=fmt$0[1];
             bprint_char_literal(buf,chr$0);
             var fmt$0=rest$11;
             continue;
            case 13:
             var rest$12=fmt$0[3],fmtty=fmt$0[2],pad_opt=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_pad_opt(buf,pad_opt);
             buffer_add_char(buf,123);
             bprint_fmtty(buf,fmtty);
             buffer_add_char(buf,37);
             buffer_add_char(buf,125);
             var fmt$0=rest$12,ign_flag$0=0;
             continue;
            case 14:
             var rest$13=fmt$0[3],fmtty$0=fmt$0[2],pad_opt$0=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_pad_opt(buf,pad_opt$0);
             buffer_add_char(buf,40);
             bprint_fmtty(buf,fmtty$0);
             buffer_add_char(buf,37);
             buffer_add_char(buf,41);
             var fmt$0=rest$13,ign_flag$0=0;
             continue;
            case 15:
             var rest$14=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             buffer_add_char(buf,97);
             var fmt$0=rest$14,ign_flag$0=0;
             continue;
            case 16:
             var rest$15=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             buffer_add_char(buf,116);
             var fmt$0=rest$15,ign_flag$0=0;
             continue;
            case 17:
             var rest$16=fmt$0[2],fmting_lit=fmt$0[1];
             bprint_string_literal(buf,string_of_formatting_lit(fmting_lit));
             var fmt$0=rest$16;
             continue;
            case 18:
             var rest$17=fmt$0[2],fmting_gen=fmt$0[1];
             if(0 === fmting_gen[0])
              {var match$1=fmting_gen[1],str$0=match$1[2];
               buffer_add_string(buf,cst$22);
               buffer_add_string(buf,str$0)}
             else
              {var match$2=fmting_gen[1],str$1=match$2[2];
               buffer_add_string(buf,cst$23);
               buffer_add_string(buf,str$1)}
             var fmt$0=rest$17;
             continue;
            case 19:
             var rest$18=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             buffer_add_char(buf,114);
             var fmt$0=rest$18,ign_flag$0=0;
             continue;
            case 20:
             var rest$19=fmt$0[3],char_set=fmt$0[2],width_opt=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_pad_opt(buf,width_opt);
             var
              print_char=
               function(buf,i)
                {var c=char_of_int(i);
                 return 37 === c
                         ?(buffer_add_char(buf,37),buffer_add_char(buf,37))
                         :64 === c
                           ?(buffer_add_char(buf,37),buffer_add_char(buf,64))
                           :buffer_add_char(buf,c)};
             buffer_add_char(buf,91);
             var
              _t0_=
               is_in_char_set(char_set,0)
                ?(buffer_add_char(buf,94),rev_char_set(char_set))
                :char_set,
              is_alone$0=
               function(_t5_)
                {function is_alone(c)
                  {var
                    after=chr(c + 1 | 0),
                    before=chr(c - 1 | 0),
                    _t6_=is_in_char_set(_t5_,c);
                   if(_t6_)
                    var
                     _t7_=is_in_char_set(_t5_,before),
                     _t8_=_t7_?is_in_char_set(_t5_,after):_t7_,
                     _t9_=1 - _t8_;
                   else
                    var _t9_=_t6_;
                   return _t9_}
                 return is_alone},
              is_alone=is_alone$0(_t0_);
             if(is_alone(93))buffer_add_char(buf,93);
             var i=1;
             b:
             for(;;)
              {if(i < 256)
                {if(! is_in_char_set(_t0_,char_of_int(i)))
                  {var i$0=i + 1 | 0,i=i$0;continue}
                 var match=char_of_int(i),switcher=match - 45 | 0,switch$0=0;
                 if(48 < switcher >>> 0)
                  if(210 <= switcher)print_char(buf,255);else switch$0 = 1;
                 else
                  {if(46 < switcher - 1 >>> 0)
                    {var i$2=i + 1 | 0,i=i$2;continue}
                   switch$0 = 1}
                 if(switch$0)
                  {var i$1=i + 1 | 0;
                   if(! is_in_char_set(_t0_,char_of_int(i$1)))
                    {print_char(buf,i$1 - 1 | 0);
                     var i$6=i$1 + 1 | 0,i=i$6;
                     continue}
                   var
                    match$0=char_of_int(i$1),
                    switcher$0=match$0 - 45 | 0,
                    switch$1=0;
                   if(48 < switcher$0 >>> 0)
                    if(210 <= switcher$0)
                     {print_char(buf,254);print_char(buf,255)}
                    else
                     switch$1 = 1;
                   else
                    if(46 < switcher$0 - 1 >>> 0)
                     {if(! is_in_char_set(_t0_,char_of_int(i$1 + 1 | 0)))
                       {print_char(buf,i$1 - 1 | 0);
                        var i$5=i$1 + 1 | 0,i=i$5;
                        continue}
                      switch$1 = 1}
                    else
                     switch$1 = 1;
                   if(switch$1)
                    {if(! is_in_char_set(_t0_,char_of_int(i$1 + 1 | 0)))
                      {print_char(buf,i$1 - 1 | 0);
                       print_char(buf,i$1);
                       var i$4=i$1 + 2 | 0,i=i$4;
                       continue}
                     var j=i$1 + 2 | 0,i$3=i$1 - 1 | 0,j$0=j;
                     for(;;)
                      {if(256 !== j$0 && is_in_char_set(_t0_,char_of_int(j$0)))
                        {var j$1=j$0 + 1 | 0,j$0=j$1;continue}
                       print_char(buf,i$3);
                       print_char(buf,45);
                       print_char(buf,j$0 - 1 | 0);
                       if(j$0 < 256){var i$7=j$0 + 1 | 0,i=i$7;continue b}
                       break}}}}
               if(is_alone(45))buffer_add_char(buf,45);
               buffer_add_char(buf,93);
               var fmt$0=rest$19,ign_flag$0=0;
               continue a}
            case 21:
             var rest$20=fmt$0[2],counter=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             switch(counter)
              {case 0:var _t1_=108;break;
               case 1:var _t1_=110;break;
               default:var _t1_=78}
             buffer_add_char(buf,_t1_);
             var fmt$0=rest$20,ign_flag$0=0;
             continue;
            case 22:
             var rest$21=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_string_literal(buf,cst_0c);
             var fmt$0=rest$21,ign_flag$0=0;
             continue;
            case 23:
             var
              rest$22=fmt$0[2],
              ign=fmt$0[1],
              match$3=param_format_of_ignored_format(ign,rest$22),
              fmt$1=match$3[1],
              fmt$0=fmt$1,
              ign_flag$0=1;
             continue;
            default:
             var
              rest$23=fmt$0[3],
              arity=fmt$0[1],
              _t3_=int_of_custom_arity(arity),
              _t2_=1;
             if(_t3_ >= 1)
              {var i$8=_t2_;
               for(;;)
                {buffer_add_char(buf,37);
                 bprint_ignored_flag(buf,ign_flag$0);
                 buffer_add_char(buf,63);
                 var _t4_=i$8 + 1 | 0;
                 if(_t3_ !== i$8){var i$8=_t4_;continue}
                 break}}
             var fmt$0=rest$23,ign_flag$0=0;
             continue}}}
      fmtiter(fmt,0);
      return buffer_contents(buf)}
    function symm(param)
     {if(typeof param === "number")return 0;
      switch(param[0])
       {case 0:var rest=param[1];return [0,symm(rest)];
        case 1:var rest$0=param[1];return [1,symm(rest$0)];
        case 2:var rest$1=param[1];return [2,symm(rest$1)];
        case 3:var rest$2=param[1];return [3,symm(rest$2)];
        case 4:var rest$3=param[1];return [4,symm(rest$3)];
        case 5:var rest$4=param[1];return [5,symm(rest$4)];
        case 6:var rest$5=param[1];return [6,symm(rest$5)];
        case 7:var rest$6=param[1];return [7,symm(rest$6)];
        case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
        case 9:
         var rest$8=param[3],ty2=param[2],ty1=param[1];
         return [9,ty2,ty1,symm(rest$8)];
        case 10:var rest$9=param[1];return [10,symm(rest$9)];
        case 11:var rest$10=param[1];return [11,symm(rest$10)];
        case 12:var rest$11=param[1];return [12,symm(rest$11)];
        case 13:var rest$12=param[1];return [13,symm(rest$12)];
        default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param !== "number")
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _tF_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_tF_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _tG_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _tG_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _tH_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _tH_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _tI_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _tI_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _tJ_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _tJ_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _tK_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _tK_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _tL_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _tL_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _tM_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _tM_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _tN_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _tN_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _tO_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _tP_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _tQ_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _tQ_,
                  _tP_,
                  _tO_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _tR_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _tR_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _tS_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _tS_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _tT_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _tT_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _tU_=function(param){caml_call1(de$12,0);return 0},
           _tV_=function(param){caml_call1(ed$12,0);return 0},
           _tW_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _tW_,
                  _tV_,
                  _tU_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _tX_=function(param){caml_call1(de$13,0);return 0},
           _tY_=function(param){caml_call1(ed$13,0);return 0},
           _tZ_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _tZ_,
                  _tY_,
                  _tX_]}
      function _tC_(param){return 0}
      function _tD_(param){return 0}
      function _tE_(param){return 0}
      return [0,function(param){return 0},_tE_,_tD_,_tC_]}
    function trans(ty1,ty2)
     {var switch$0=0;
      if(typeof ty1 === "number")
       {if(typeof ty2 === "number")return 0;
        switch(ty2[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_ae_]}}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_tj_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 0:var rest2=ty2[1];return [0,trans(_tj_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_tk_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 1:var rest2$0=ty2[1];return [1,trans(_tk_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_tl_=ty1[1];
          if(typeof ty2 === "number")
           switch$3 = 1;
          else
           switch(ty2[0])
            {case 2:var rest2$1=ty2[1];return [2,trans(_tl_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_tm_=ty1[1];
          if(typeof ty2 === "number")
           switch$4 = 1;
          else
           switch(ty2[0])
            {case 3:var rest2$2=ty2[1];return [3,trans(_tm_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_tn_=ty1[1];
          if(typeof ty2 === "number")
           switch$5 = 1;
          else
           switch(ty2[0])
            {case 4:var rest2$3=ty2[1];return [4,trans(_tn_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_to_=ty1[1];
          if(typeof ty2 === "number")
           switch$6 = 1;
          else
           switch(ty2[0])
            {case 5:var rest2$4=ty2[1];return [5,trans(_to_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_tp_=ty1[1];
          if(typeof ty2 === "number")
           switch$7 = 1;
          else
           switch(ty2[0])
            {case 6:var rest2$5=ty2[1];return [6,trans(_tp_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_tq_=ty1[1];
          if(typeof ty2 === "number")
           switch$8 = 1;
          else
           switch(ty2[0])
            {case 7:var rest2$6=ty2[1];return [7,trans(_tq_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_tr_=ty1[2],_ts_=ty1[1];
          if(typeof ty2 === "number")
           switch$9 = 1;
          else
           switch(ty2[0])
            {case 8:
              var rest2$7=ty2[2],ty2$0=ty2[1],_tt_=trans(_tr_,rest2$7);
              return [8,trans(_ts_,ty2$0),_tt_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_an_];
          break;
         case 9:
          var switch$10=0,_tu_=ty1[3],_tv_=ty1[2],_tw_=ty1[1];
          if(typeof ty2 === "number")
           switch$10 = 1;
          else
           switch(ty2[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=ty2[3],
               ty22=ty2[2],
               ty21=ty2[1],
               ty=trans(symm(_tv_),ty21),
               match=fmtty_rel_det(ty),
               f4=match[4],
               f2=match[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_tw_,ty22,trans(_tu_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_ao_];
          break;
         case 10:
          var _tx_=ty1[1];
          if(typeof ty2 !== "number" && 10 === ty2[0])
           {var rest2$9=ty2[1];return [10,trans(_tx_,rest2$9)]}
          throw [0,Assert_failure,_ap_];
         case 11:
          var switch$11=0,_ty_=ty1[1];
          if(typeof ty2 === "number")
           switch$11 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:var rest2$10=ty2[1];return [11,trans(_ty_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_aq_];
          break;
         case 12:
          var switch$12=0,_tz_=ty1[1];
          if(typeof ty2 === "number")
           switch$12 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=ty2[1];return [12,trans(_tz_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_ar_];
          break;
         case 13:
          var switch$13=0,_tA_=ty1[1];
          if(typeof ty2 === "number")
           switch$13 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=ty2[1];return [13,trans(_tA_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_as_];
          break;
         default:
          var switch$14=0,_tB_=ty1[1];
          if(typeof ty2 === "number")
           switch$14 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=ty2[1];return [14,trans(_tB_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_at_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ah_];
        case 1:throw [0,Assert_failure,_ai_];
        case 2:throw [0,Assert_failure,_aj_];
        case 3:throw [0,Assert_failure,_ak_];
        case 4:throw [0,Assert_failure,_al_];
        case 5:throw [0,Assert_failure,_af_];
        case 6:throw [0,Assert_failure,_ag_];
        default:throw [0,Assert_failure,_am_]}}
    function fmtty_of_padding_fmtty(pad,fmtty)
     {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
    function fmtty_of_custom(arity,fmtty)
     {if(! arity)return fmtty;
      var arity$0=arity[1];
      return [12,fmtty_of_custom(arity$0,fmtty)]}
    function fmtty_of_fmt(fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       {if(typeof fmtty$0 === "number")return 0;
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];return [0,fmtty_of_fmt(rest)];
          case 1:var rest$0=fmtty$0[1];return [0,fmtty_of_fmt(rest$0)];
          case 2:
           var rest$1=fmtty$0[2],pad=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad,[1,fmtty_of_fmt(rest$1)]);
          case 3:
           var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$0,[1,fmtty_of_fmt(rest$2)]);
          case 4:
           var
            rest$3=fmtty$0[4],
            prec=fmtty$0[3],
            pad$1=fmtty$0[2],
            ty_rest=fmtty_of_fmt(rest$3),
            prec_ty=fmtty_of_precision_fmtty(prec,[2,ty_rest]);
           return fmtty_of_padding_fmtty(pad$1,prec_ty);
          case 5:
           var
            rest$4=fmtty$0[4],
            prec$0=fmtty$0[3],
            pad$2=fmtty$0[2],
            ty_rest$0=fmtty_of_fmt(rest$4),
            prec_ty$0=fmtty_of_precision_fmtty(prec$0,[3,ty_rest$0]);
           return fmtty_of_padding_fmtty(pad$2,prec_ty$0);
          case 6:
           var
            rest$5=fmtty$0[4],
            prec$1=fmtty$0[3],
            pad$3=fmtty$0[2],
            ty_rest$1=fmtty_of_fmt(rest$5),
            prec_ty$1=fmtty_of_precision_fmtty(prec$1,[4,ty_rest$1]);
           return fmtty_of_padding_fmtty(pad$3,prec_ty$1);
          case 7:
           var
            rest$6=fmtty$0[4],
            prec$2=fmtty$0[3],
            pad$4=fmtty$0[2],
            ty_rest$2=fmtty_of_fmt(rest$6),
            prec_ty$2=fmtty_of_precision_fmtty(prec$2,[5,ty_rest$2]);
           return fmtty_of_padding_fmtty(pad$4,prec_ty$2);
          case 8:
           var
            rest$7=fmtty$0[4],
            prec$3=fmtty$0[3],
            pad$5=fmtty$0[2],
            ty_rest$3=fmtty_of_fmt(rest$7),
            prec_ty$3=fmtty_of_precision_fmtty(prec$3,[6,ty_rest$3]);
           return fmtty_of_padding_fmtty(pad$5,prec_ty$3);
          case 9:
           var rest$8=fmtty$0[2],pad$6=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$6,[7,fmtty_of_fmt(rest$8)]);
          case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
          case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
          case 13:
           var rest$9=fmtty$0[3],ty=fmtty$0[2];
           return [8,ty,fmtty_of_fmt(rest$9)];
          case 14:
           var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
           return [9,ty$0,ty$0,fmtty_of_fmt(rest$10)];
          case 15:var rest$11=fmtty$0[1];return [10,fmtty_of_fmt(rest$11)];
          case 16:var rest$12=fmtty$0[1];return [11,fmtty_of_fmt(rest$12)];
          case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
          case 18:
           var
            rest$13=fmtty$0[2],
            fmting_gen=fmtty$0[1],
            _th_=fmtty_of_fmt(rest$13);
           if(0 === fmting_gen[0])
            var match=fmting_gen[1],fmt=match[1],_ti_=fmtty_of_fmt(fmt);
           else
            var
             match$0=fmting_gen[1],
             fmt$0=match$0[1],
             _ti_=fmtty_of_fmt(fmt$0);
           return concat_fmtty(_ti_,_th_);
          case 19:var rest$14=fmtty$0[1];return [13,fmtty_of_fmt(rest$14)];
          case 20:var rest$15=fmtty$0[3];return [1,fmtty_of_fmt(rest$15)];
          case 21:var rest$16=fmtty$0[2];return [2,fmtty_of_fmt(rest$16)];
          case 22:var rest$17=fmtty$0[1];return [0,fmtty_of_fmt(rest$17)];
          case 23:
           var rest$18=fmtty$0[2],ign=fmtty$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:return [14,fmtty_of_fmt(rest$18)];
              default:var fmtty$0=rest$18;continue}
           switch(ign[0])
            {case 0:var fmtty$0=rest$18;continue;
             case 1:var fmtty$0=rest$18;continue;
             case 2:var fmtty$0=rest$18;continue;
             case 3:var fmtty$0=rest$18;continue;
             case 4:var fmtty$0=rest$18;continue;
             case 5:var fmtty$0=rest$18;continue;
             case 6:var fmtty$0=rest$18;continue;
             case 7:var fmtty$0=rest$18;continue;
             case 8:var fmtty$0=rest$18;continue;
             case 9:
              var fmtty$5=ign[2];
              return concat_fmtty(fmtty$5,fmtty_of_fmt(rest$18));
             case 10:var fmtty$0=rest$18;continue;
             default:var fmtty$0=rest$18;continue}
          default:
           var rest$19=fmtty$0[3],arity=fmtty$0[1];
           return fmtty_of_custom(arity,fmtty_of_fmt(rest$19))}}}
    function fmtty_of_precision_fmtty(prec,fmtty)
     {return typeof prec === "number"?prec?[2,fmtty]:fmtty:fmtty}
    var
     Type_mismatch=
      [248,cst_CamlinternalFormat_Type_mi,caml_fresh_oo_id(0)];
    function type_padding(pad,fmtty)
     {if(typeof pad === "number")return [0,0,fmtty];
      if(0 === pad[0]){var w=pad[2],padty=pad[1];return [0,[0,padty,w],fmtty]}
      if(typeof fmtty !== "number" && 2 === fmtty[0])
       {var rest=fmtty[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
      throw Type_mismatch}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec !== "number")
       {var rest$1=match[2],pad$2=match[1],p=prec[1];
        return [0,pad$2,[0,p],rest$1]}
      if(! prec){var rest$0=match[2],pad$1=match[1];return [0,pad$1,0,rest$0]}
      var _tg_=match[2];
      if(typeof _tg_ !== "number" && 2 === _tg_[0])
       {var rest=_tg_[1],pad$0=match[1];return [0,pad$0,1,rest]}
      throw Type_mismatch}
    function type_format(fmt,fmtty)
     {var _tf_=type_format_gen(fmt,fmtty);
      if(typeof _tf_[2] !== "number")throw Type_mismatch;
      var fmt$0=_tf_[1];
      return fmt$0}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")return [0,0,fmtty];
      switch(fmt[0])
       {case 0:
         if(typeof fmtty !== "number" && 0 === fmtty[0])
          {var
            fmtty_rest=fmtty[1],
            fmt_rest=fmt[1],
            match=type_format_gen(fmt_rest,fmtty_rest),
            fmtty$0=match[2],
            fmt$0=match[1];
           return [0,[0,fmt$0],fmtty$0]}
         break;
        case 1:
         if(typeof fmtty !== "number" && 0 === fmtty[0])
          {var
            fmtty_rest$0=fmtty[1],
            fmt_rest$0=fmt[1],
            match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
            fmtty$1=match$0[2],
            fmt$1=match$0[1];
           return [0,[1,fmt$1],fmtty$1]}
         break;
        case 2:
         var
          fmt_rest$1=fmt[2],
          pad=fmt[1],
          match$1=type_padding(pad,fmtty),
          _s0_=match$1[2],
          _sZ_=match$1[1];
         if(typeof _s0_ !== "number" && 1 === _s0_[0])
          {var
            fmtty_rest$1=_s0_[1],
            match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
            fmtty$2=match$2[2],
            fmt$2=match$2[1];
           return [0,[2,_sZ_,fmt$2],fmtty$2]}
         throw Type_mismatch;
        case 3:
         var
          fmt_rest$2=fmt[2],
          pad$0=fmt[1],
          match$3=type_padding(pad$0,fmtty),
          _s2_=match$3[2],
          _s1_=match$3[1];
         if(typeof _s2_ !== "number" && 1 === _s2_[0])
          {var
            fmtty_rest$2=_s2_[1],
            match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
            fmtty$3=match$4[2],
            fmt$3=match$4[1];
           return [0,[3,_s1_,fmt$3],fmtty$3]}
         throw Type_mismatch;
        case 4:
         var
          fmt_rest$3=fmt[4],
          prec=fmt[3],
          pad$1=fmt[2],
          iconv=fmt[1],
          match$5=type_padprec(pad$1,prec,fmtty),
          _s4_=match$5[3],
          _s3_=match$5[1];
         if(typeof _s4_ !== "number" && 2 === _s4_[0])
          {var
            fmtty_rest$3=_s4_[1],
            prec$0=match$5[2],
            match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
            fmtty$4=match$6[2],
            fmt$4=match$6[1];
           return [0,[4,iconv,_s3_,prec$0,fmt$4],fmtty$4]}
         throw Type_mismatch;
        case 5:
         var
          fmt_rest$4=fmt[4],
          prec$1=fmt[3],
          pad$2=fmt[2],
          iconv$0=fmt[1],
          match$7=type_padprec(pad$2,prec$1,fmtty),
          _s6_=match$7[3],
          _s5_=match$7[1];
         if(typeof _s6_ !== "number" && 3 === _s6_[0])
          {var
            fmtty_rest$4=_s6_[1],
            prec$2=match$7[2],
            match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
            fmtty$5=match$8[2],
            fmt$5=match$8[1];
           return [0,[5,iconv$0,_s5_,prec$2,fmt$5],fmtty$5]}
         throw Type_mismatch;
        case 6:
         var
          fmt_rest$5=fmt[4],
          prec$3=fmt[3],
          pad$3=fmt[2],
          iconv$1=fmt[1],
          match$9=type_padprec(pad$3,prec$3,fmtty),
          _s8_=match$9[3],
          _s7_=match$9[1];
         if(typeof _s8_ !== "number" && 4 === _s8_[0])
          {var
            fmtty_rest$5=_s8_[1],
            prec$4=match$9[2],
            match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
            fmtty$6=match$10[2],
            fmt$6=match$10[1];
           return [0,[6,iconv$1,_s7_,prec$4,fmt$6],fmtty$6]}
         throw Type_mismatch;
        case 7:
         var
          fmt_rest$6=fmt[4],
          prec$5=fmt[3],
          pad$4=fmt[2],
          iconv$2=fmt[1],
          match$11=type_padprec(pad$4,prec$5,fmtty),
          _s__=match$11[3],
          _s9_=match$11[1];
         if(typeof _s__ !== "number" && 5 === _s__[0])
          {var
            fmtty_rest$6=_s__[1],
            prec$6=match$11[2],
            match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
            fmtty$7=match$12[2],
            fmt$7=match$12[1];
           return [0,[7,iconv$2,_s9_,prec$6,fmt$7],fmtty$7]}
         throw Type_mismatch;
        case 8:
         var
          fmt_rest$7=fmt[4],
          prec$7=fmt[3],
          pad$5=fmt[2],
          fconv=fmt[1],
          match$13=type_padprec(pad$5,prec$7,fmtty),
          _ta_=match$13[3],
          _s$_=match$13[1];
         if(typeof _ta_ !== "number" && 6 === _ta_[0])
          {var
            fmtty_rest$7=_ta_[1],
            prec$8=match$13[2],
            match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
            fmtty$8=match$14[2],
            fmt$8=match$14[1];
           return [0,[8,fconv,_s$_,prec$8,fmt$8],fmtty$8]}
         throw Type_mismatch;
        case 9:
         var
          fmt_rest$8=fmt[2],
          pad$6=fmt[1],
          match$15=type_padding(pad$6,fmtty),
          _tc_=match$15[2],
          _tb_=match$15[1];
         if(typeof _tc_ !== "number" && 7 === _tc_[0])
          {var
            fmtty_rest$8=_tc_[1],
            match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
            fmtty$9=match$16[2],
            fmt$9=match$16[1];
           return [0,[9,_tb_,fmt$9],fmtty$9]}
         throw Type_mismatch;
        case 10:
         var
          fmt_rest$9=fmt[1],
          match$17=type_format_gen(fmt_rest$9,fmtty),
          fmtty$10=match$17[2],
          fmt$10=match$17[1];
         return [0,[10,fmt$10],fmtty$10];
        case 11:
         var
          fmt_rest$10=fmt[2],
          str=fmt[1],
          match$18=type_format_gen(fmt_rest$10,fmtty),
          fmtty$11=match$18[2],
          fmt$11=match$18[1];
         return [0,[11,str,fmt$11],fmtty$11];
        case 12:
         var
          fmt_rest$11=fmt[2],
          chr=fmt[1],
          match$19=type_format_gen(fmt_rest$11,fmtty),
          fmtty$12=match$19[2],
          fmt$12=match$19[1];
         return [0,[12,chr,fmt$12],fmtty$12];
        case 13:
         if(typeof fmtty !== "number" && 8 === fmtty[0])
          {var
            fmtty_rest$9=fmtty[2],
            sub_fmtty=fmtty[1],
            fmt_rest$12=fmt[3],
            sub_fmtty$0=fmt[2],
            pad_opt=fmt[1];
           if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
            throw Type_mismatch;
           var
            match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
            fmtty$13=match$20[2],
            fmt$13=match$20[1];
           return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
         break;
        case 14:
         if(typeof fmtty !== "number" && 9 === fmtty[0])
          {var
            fmtty_rest$10=fmtty[3],
            sub_fmtty1=fmtty[1],
            fmt_rest$13=fmt[3],
            sub_fmtty$1=fmt[2],
            pad_opt$0=fmt[1],
            _td_=[0,erase_rel(sub_fmtty1)];
           if(caml_notequal([0,erase_rel(sub_fmtty$1)],_td_))
            throw Type_mismatch;
           var
            match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
            fmtty$14=match$21[2],
            fmt$14=match$21[1];
           return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
         break;
        case 15:
         if(typeof fmtty !== "number" && 10 === fmtty[0])
          {var
            fmtty_rest$11=fmtty[1],
            fmt_rest$14=fmt[1],
            match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
            fmtty$15=match$22[2],
            fmt$15=match$22[1];
           return [0,[15,fmt$15],fmtty$15]}
         break;
        case 16:
         if(typeof fmtty !== "number" && 11 === fmtty[0])
          {var
            fmtty_rest$12=fmtty[1],
            fmt_rest$15=fmt[1],
            match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
            fmtty$16=match$23[2],
            fmt$16=match$23[1];
           return [0,[16,fmt$16],fmtty$16]}
         break;
        case 17:
         var
          fmt_rest$16=fmt[2],
          formatting_lit=fmt[1],
          match$24=type_format_gen(fmt_rest$16,fmtty),
          fmtty$17=match$24[2],
          fmt$17=match$24[1];
         return [0,[17,formatting_lit,fmt$17],fmtty$17];
        case 18:
         var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
         if(0 === formatting_gen[0])
          {var
            match$28=formatting_gen[1],
            str$0=match$28[2],
            fmt1=match$28[1],
            match$29=type_format_gen(fmt1,fmtty),
            fmtty2=match$29[2],
            fmt2=match$29[1],
            match$30=type_format_gen(fmt_rest$17,fmtty2),
            fmtty3=match$30[2],
            fmt3=match$30[1];
           return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
         var
          match$31=formatting_gen[1],
          str$1=match$31[2],
          fmt1$0=match$31[1],
          match$32=type_format_gen(fmt1$0,fmtty),
          fmtty2$0=match$32[2],
          fmt2$0=match$32[1],
          match$33=type_format_gen(fmt_rest$17,fmtty2$0),
          fmtty3$0=match$33[2],
          fmt3$0=match$33[1];
         return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
        case 19:
         if(typeof fmtty !== "number" && 13 === fmtty[0])
          {var
            fmtty_rest$13=fmtty[1],
            fmt_rest$18=fmt[1],
            match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
            fmtty$18=match$25[2],
            fmt$18=match$25[1];
           return [0,[19,fmt$18],fmtty$18]}
         break;
        case 20:
         if(typeof fmtty !== "number" && 1 === fmtty[0])
          {var
            fmtty_rest$14=fmtty[1],
            fmt_rest$19=fmt[3],
            char_set=fmt[2],
            width_opt=fmt[1],
            match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
            fmtty$19=match$26[2],
            fmt$19=match$26[1];
           return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
         break;
        case 21:
         if(typeof fmtty !== "number" && 2 === fmtty[0])
          {var
            fmtty_rest$15=fmtty[1],
            fmt_rest$20=fmt[2],
            counter=fmt[1],
            match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
            fmtty$20=match$27[2],
            fmt$20=match$27[1];
           return [0,[21,counter,fmt$20],fmtty$20]}
         break;
        case 23:
         var rest=fmt[2],ign=fmt[1];
         if(typeof ign !== "number")
          switch(ign[0])
           {case 0:return type_ignored_param_one(ign,rest,fmtty);
            case 1:return type_ignored_param_one(ign,rest,fmtty);
            case 2:return type_ignored_param_one(ign,rest,fmtty);
            case 3:return type_ignored_param_one(ign,rest,fmtty);
            case 4:return type_ignored_param_one(ign,rest,fmtty);
            case 5:return type_ignored_param_one(ign,rest,fmtty);
            case 6:return type_ignored_param_one(ign,rest,fmtty);
            case 7:return type_ignored_param_one(ign,rest,fmtty);
            case 8:
             var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
             return type_ignored_param_one
                     ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
            case 9:
             var
              sub_fmtty$3=ign[2],
              pad_opt$2=ign[1],
              _te_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
              match$35=_te_[2],
              fmtty$22=match$35[2],
              fmt$22=match$35[1],
              sub_fmtty$4=_te_[1];
             return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
            case 10:return type_ignored_param_one(ign,rest,fmtty);
            default:return type_ignored_param_one(ign,rest,fmtty)}
         switch(ign)
          {case 0:return type_ignored_param_one(ign,rest,fmtty);
           case 1:return type_ignored_param_one(ign,rest,fmtty);
           case 2:
            if(typeof fmtty !== "number" && 14 === fmtty[0])
             {var
               fmtty_rest$16=fmtty[1],
               match$34=type_format_gen(rest,fmtty_rest$16),
               fmtty$21=match$34[2],
               fmt$21=match$34[1];
              return [0,[23,2,fmt$21],fmtty$21]}
            throw Type_mismatch;
           default:return type_ignored_param_one(ign,rest,fmtty)}
        }
      throw Type_mismatch}
    function type_ignored_format_substituti(sub_fmtty,fmt,fmtty)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,fmtty)];
      switch(sub_fmtty[0])
       {case 0:
         if(typeof fmtty !== "number" && 0 === fmtty[0])
          {var
            fmtty_rest=fmtty[1],
            sub_fmtty_rest=sub_fmtty[1],
            match=
             type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
            fmt$0=match[2],
            sub_fmtty_rest$0=match[1];
           return [0,[0,sub_fmtty_rest$0],fmt$0]}
         break;
        case 1:
         if(typeof fmtty !== "number" && 1 === fmtty[0])
          {var
            fmtty_rest$0=fmtty[1],
            sub_fmtty_rest$1=sub_fmtty[1],
            match$0=
             type_ignored_format_substituti(sub_fmtty_rest$1,fmt,fmtty_rest$0),
            fmt$1=match$0[2],
            sub_fmtty_rest$2=match$0[1];
           return [0,[1,sub_fmtty_rest$2],fmt$1]}
         break;
        case 2:
         if(typeof fmtty !== "number" && 2 === fmtty[0])
          {var
            fmtty_rest$1=fmtty[1],
            sub_fmtty_rest$3=sub_fmtty[1],
            match$1=
             type_ignored_format_substituti(sub_fmtty_rest$3,fmt,fmtty_rest$1),
            fmt$2=match$1[2],
            sub_fmtty_rest$4=match$1[1];
           return [0,[2,sub_fmtty_rest$4],fmt$2]}
         break;
        case 3:
         if(typeof fmtty !== "number" && 3 === fmtty[0])
          {var
            fmtty_rest$2=fmtty[1],
            sub_fmtty_rest$5=sub_fmtty[1],
            match$2=
             type_ignored_format_substituti(sub_fmtty_rest$5,fmt,fmtty_rest$2),
            fmt$3=match$2[2],
            sub_fmtty_rest$6=match$2[1];
           return [0,[3,sub_fmtty_rest$6],fmt$3]}
         break;
        case 4:
         if(typeof fmtty !== "number" && 4 === fmtty[0])
          {var
            fmtty_rest$3=fmtty[1],
            sub_fmtty_rest$7=sub_fmtty[1],
            match$3=
             type_ignored_format_substituti(sub_fmtty_rest$7,fmt,fmtty_rest$3),
            fmt$4=match$3[2],
            sub_fmtty_rest$8=match$3[1];
           return [0,[4,sub_fmtty_rest$8],fmt$4]}
         break;
        case 5:
         if(typeof fmtty !== "number" && 5 === fmtty[0])
          {var
            fmtty_rest$4=fmtty[1],
            sub_fmtty_rest$9=sub_fmtty[1],
            match$4=
             type_ignored_format_substituti(sub_fmtty_rest$9,fmt,fmtty_rest$4),
            fmt$5=match$4[2],
            sub_fmtty_rest$10=match$4[1];
           return [0,[5,sub_fmtty_rest$10],fmt$5]}
         break;
        case 6:
         if(typeof fmtty !== "number" && 6 === fmtty[0])
          {var
            fmtty_rest$5=fmtty[1],
            sub_fmtty_rest$11=sub_fmtty[1],
            match$5=
             type_ignored_format_substituti
              (sub_fmtty_rest$11,fmt,fmtty_rest$5),
            fmt$6=match$5[2],
            sub_fmtty_rest$12=match$5[1];
           return [0,[6,sub_fmtty_rest$12],fmt$6]}
         break;
        case 7:
         if(typeof fmtty !== "number" && 7 === fmtty[0])
          {var
            fmtty_rest$6=fmtty[1],
            sub_fmtty_rest$13=sub_fmtty[1],
            match$6=
             type_ignored_format_substituti
              (sub_fmtty_rest$13,fmt,fmtty_rest$6),
            fmt$7=match$6[2],
            sub_fmtty_rest$14=match$6[1];
           return [0,[7,sub_fmtty_rest$14],fmt$7]}
         break;
        case 8:
         if(typeof fmtty !== "number" && 8 === fmtty[0])
          {var
            fmtty_rest$7=fmtty[2],
            sub2_fmtty=fmtty[1],
            sub_fmtty_rest$15=sub_fmtty[2],
            sub2_fmtty$0=sub_fmtty[1];
           if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
            throw Type_mismatch;
           var
            match$7=
             type_ignored_format_substituti
              (sub_fmtty_rest$15,fmt,fmtty_rest$7),
            fmt$8=match$7[2],
            sub_fmtty_rest$16=match$7[1];
           return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
         break;
        case 9:
         if(typeof fmtty !== "number" && 9 === fmtty[0])
          {var
            fmtty_rest$8=fmtty[3],
            sub2_fmtty$1=fmtty[2],
            sub1_fmtty=fmtty[1],
            sub_fmtty_rest$17=sub_fmtty[3],
            sub2_fmtty$2=sub_fmtty[2],
            sub1_fmtty$0=sub_fmtty[1],
            _sX_=[0,erase_rel(sub1_fmtty)];
           if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_sX_))
            throw Type_mismatch;
           var _sY_=[0,erase_rel(sub2_fmtty$1)];
           if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_sY_))
            throw Type_mismatch;
           var
            sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
            match$8=fmtty_rel_det(sub_fmtty$0),
            f4=match$8[4],
            f2=match$8[2];
           caml_call1(f2,0);
           caml_call1(f4,0);
           var
            match$9=
             type_ignored_format_substituti
              (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
            fmt$9=match$9[2],
            sub_fmtty_rest$18=match$9[1];
           return [0,
                   [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                   fmt$9]}
         break;
        case 10:
         if(typeof fmtty !== "number" && 10 === fmtty[0])
          {var
            fmtty_rest$9=fmtty[1],
            sub_fmtty_rest$19=sub_fmtty[1],
            match$10=
             type_ignored_format_substituti
              (sub_fmtty_rest$19,fmt,fmtty_rest$9),
            fmt$10=match$10[2],
            sub_fmtty_rest$20=match$10[1];
           return [0,[10,sub_fmtty_rest$20],fmt$10]}
         break;
        case 11:
         if(typeof fmtty !== "number" && 11 === fmtty[0])
          {var
            fmtty_rest$10=fmtty[1],
            sub_fmtty_rest$21=sub_fmtty[1],
            match$11=
             type_ignored_format_substituti
              (sub_fmtty_rest$21,fmt,fmtty_rest$10),
            fmt$11=match$11[2],
            sub_fmtty_rest$22=match$11[1];
           return [0,[11,sub_fmtty_rest$22],fmt$11]}
         break;
        case 13:
         if(typeof fmtty !== "number" && 13 === fmtty[0])
          {var
            fmtty_rest$11=fmtty[1],
            sub_fmtty_rest$23=sub_fmtty[1],
            match$12=
             type_ignored_format_substituti
              (sub_fmtty_rest$23,fmt,fmtty_rest$11),
            fmt$12=match$12[2],
            sub_fmtty_rest$24=match$12[1];
           return [0,[13,sub_fmtty_rest$24],fmt$12]}
         break;
        case 14:
         if(typeof fmtty !== "number" && 14 === fmtty[0])
          {var
            fmtty_rest$12=fmtty[1],
            sub_fmtty_rest$25=sub_fmtty[1],
            match$13=
             type_ignored_format_substituti
              (sub_fmtty_rest$25,fmt,fmtty_rest$12),
            fmt$13=match$13[2],
            sub_fmtty_rest$26=match$13[1];
           return [0,[14,sub_fmtty_rest$26],fmt$13]}
         break
        }
      throw Type_mismatch}
    function recast(fmt,fmtty){return type_format(fmt,erase_rel(symm(fmtty)))}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _sW_=2 === padty$0?48:32,res=make(width$0,_sW_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(5 >= c - 97 >>> 0)switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          switch(c - 43 | 0)
           {case 5:
             if(len < (prec$0 + 2 | 0) && 1 < len)
              {var switch$2=0;
               if
                (120
                 ===
                 caml_string_get(str,1)
                 ||
                 88
                 ===
                 caml_string_get(str,1))
                switch$2 = 1;
               if(switch$2)
                {var res$1=make(prec$0 + 2 | 0,48);
                 caml_bytes_set(res$1,1,caml_string_get(str,1));
                 blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                 return caml_string_of_bytes(res$1)}}
             switch$0 = 1;
             switch$1 = 1;
             break;
            case 0:
            case 2:break;
            case 1:
            case 3:
            case 4:switch$1 = 1;break;
            default:switch$0 = 1;switch$1 = 1}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var
       str$0=escaped$1(str),
       l=caml_ml_string_length(str$0),
       res=make(l + 2 | 0,34);
      caml_blit_string(str$0,0,res,1,l);
      return caml_string_of_bytes(res)}
    function format_of_fconv(fconv,prec)
     {var
       prec$0=abs(prec),
       symb=char_of_fconv(_au_,fconv),
       buf=buffer_create(16);
      buffer_add_char(buf,37);
      bprint_fconv_flag(buf,fconv);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 > iconv)return s;
      var n=[0,0],_sR_=caml_ml_string_length(s) - 1 | 0,_sQ_=0;
      if(_sR_ >= 0)
       {var i$0=_sQ_;
        for(;;)
         {var match=caml_string_unsafe_get(s,i$0);
          if(9 >= match - 48 >>> 0)n[1]++;
          var _sV_=i$0 + 1 | 0;
          if(_sR_ !== i$0){var i$0=_sV_;continue}
          break}}
      var
       digits=n[1],
       buf=
        caml_create_bytes
         (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
       pos=[0,0];
      function put(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0}
      var
       left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
       _sT_=caml_ml_string_length(s) - 1 | 0,
       _sS_=0;
      if(_sT_ >= 0)
       {var i=_sS_;
        for(;;)
         {var c=caml_string_unsafe_get(s,i);
          if(9 < c - 48 >>> 0)
           put(c);
          else
           {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
          var _sU_=i + 1 | 0;
          if(_sT_ !== i){var i=_sU_;continue}
          break}}
      return caml_string_of_bytes(buf)}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _sP_=cst_d$3;break;
        case 2:var _sP_=cst_d$4;break;
        case 4:var _sP_=cst_i$1;break;
        case 5:var _sP_=cst_i$2;break;
        case 6:var _sP_=cst_x;break;
        case 7:var _sP_=cst_x$0;break;
        case 8:var _sP_=cst_X$0;break;
        case 9:var _sP_=cst_X$1;break;
        case 10:var _sP_=cst_o;break;
        case 11:var _sP_=cst_o$0;break;
        case 0:
        case 13:var _sP_=cst_d$2;break;
        case 3:
        case 14:var _sP_=cst_i$0;break;
        default:var _sP_=cst_u}
      return transform_int_alt(iconv,caml_format_int(_sP_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _sO_=cst_ld$0;break;
        case 2:var _sO_=cst_ld$1;break;
        case 4:var _sO_=cst_li$1;break;
        case 5:var _sO_=cst_li$2;break;
        case 6:var _sO_=cst_lx;break;
        case 7:var _sO_=cst_lx$0;break;
        case 8:var _sO_=cst_lX;break;
        case 9:var _sO_=cst_lX$0;break;
        case 10:var _sO_=cst_lo;break;
        case 11:var _sO_=cst_lo$0;break;
        case 0:
        case 13:var _sO_=cst_ld;break;
        case 3:
        case 14:var _sO_=cst_li$0;break;
        default:var _sO_=cst_lu}
      return transform_int_alt(iconv,caml_format_int(_sO_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _sN_=cst_nd$0;break;
        case 2:var _sN_=cst_nd$1;break;
        case 4:var _sN_=cst_ni$1;break;
        case 5:var _sN_=cst_ni$2;break;
        case 6:var _sN_=cst_nx;break;
        case 7:var _sN_=cst_nx$0;break;
        case 8:var _sN_=cst_nX;break;
        case 9:var _sN_=cst_nX$0;break;
        case 10:var _sN_=cst_no;break;
        case 11:var _sN_=cst_no$0;break;
        case 0:
        case 13:var _sN_=cst_nd;break;
        case 3:
        case 14:var _sN_=cst_ni$0;break;
        default:var _sN_=cst_nu}
      return transform_int_alt(iconv,caml_format_int(_sN_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _sM_=cst_Ld$0;break;
        case 2:var _sM_=cst_Ld$1;break;
        case 4:var _sM_=cst_Li$1;break;
        case 5:var _sM_=cst_Li$2;break;
        case 6:var _sM_=cst_Lx;break;
        case 7:var _sM_=cst_Lx$0;break;
        case 8:var _sM_=cst_LX;break;
        case 9:var _sM_=cst_LX$0;break;
        case 10:var _sM_=cst_Lo;break;
        case 11:var _sM_=cst_Lo$0;break;
        case 0:
        case 13:var _sM_=cst_Ld;break;
        case 3:
        case 14:var _sM_=cst_Li$0;break;
        default:var _sM_=cst_Lu}
      return transform_int_alt(iconv,caml_int64_format(_sM_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return runtime.caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=runtime.caml_classify_float(x);
        return 3 === match
                ?x < 0.?cst_neg_infinity:cst_infinity
                :4 <= match?cst_nan:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i=0;
         for(;;)
          {if(i === len)
            var _sK_=0;
           else
            {var match=caml_string_get(str,i),_sJ_=match - 46 | 0,switch$0=0;
             if(23 < _sJ_ >>> 0)
              {if(55 === _sJ_)switch$0 = 1}
             else
              if(21 < _sJ_ - 1 >>> 0)switch$0 = 1;
             if(! switch$0){var i$0=i + 1 | 0,i=i$0;continue}
             var _sK_=1}
           var _sL_=_sK_?str:cat(str,cst$24);
           return caml_special_val(_sL_)}
        case 6:return hex(0);
        case 7:return uppercase_ascii$1(hex(0));
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function string_of_fmtty(fmtty)
     {var buf=buffer_create(16);
      bprint_fmtty(buf,fmtty);
      return buffer_contents(buf)}
    function make_int_padding_precision(k,acc,fmt,pad,prec,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         return prec
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=prec[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      if(0 === pad[0])
       {var _sG_=pad[2],_sH_=pad[1];
        if(typeof prec === "number")
         return prec
                 ?function(p,x)
                   {var
                     str=
                      fix_padding
                       (_sH_,_sG_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=fix_padding(_sH_,_sG_,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$0=prec[1];
        return function(x)
         {var
           str=
            fix_padding
             (_sH_,_sG_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}
      var _sI_=pad[1];
      if(typeof prec === "number")
       return prec
               ?function(w,p,x)
                 {var
                   str=
                    fix_padding
                     (_sI_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                  return make_printf(k,[4,acc,str],fmt)}
               :function(w,x)
                 {var str=fix_padding(_sI_,w,caml_call2(trans,iconv,x));
                  return make_printf(k,[4,acc,str],fmt)};
      var p$1=prec[1];
      return function(w,x)
       {var
         str=
          fix_padding(_sI_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
        return make_printf(k,[4,acc,str],fmt)}}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      if(0 === pad[0])
       {var width=pad[2],padty=pad[1];
        return function(x)
         {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}
      var padty$0=pad[1];
      return function(w,x)
       {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
        return make_printf(k,new_acc,fmt)}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       {if(typeof fmt$0 === "number")return caml_call1(k$0,acc$0);
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var
              str=escaped(c),
              l=caml_ml_string_length(str),
              res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           if(0 === pad$5[0])
            {var _sD_=pad$5[2],_sE_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=fix_padding(_sE_,_sD_,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_sE_,_sD_,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$0=prec$3[1];
             return function(x)
              {var str=fix_padding(_sE_,_sD_,convert_float(fconv,p$0,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           var _sF_=pad$5[1];
           if(typeof prec$3 === "number")
            return prec$3
                    ?function(w,p,x)
                      {var str=fix_padding(_sF_,w,convert_float(fconv,p,x));
                       return make_printf(k$0,[4,acc$0,str],rest$7)}
                    :function(w,x)
                      {var
                        str=convert_float(fconv,default_float_precision(fconv),x),
                        str$0=fix_padding(_sF_,w,str);
                       return make_printf(k$0,[4,acc$0,str$0],rest$7)};
           var p$1=prec$3[1];
           return function(w,x)
            {var str=fix_padding(_sF_,w,convert_float(fconv,p$1,x));
             return make_printf(k$0,[4,acc$0,str],rest$7)};
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
            ty=string_of_fmtty(sub_fmtty);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,acc$0,concat_fmt(recast(fmt,fmtty),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _sB_=fmt$0[1];
           if(0 === _sB_[0])
            {var
              rest$13=fmt$0[2],
              match=_sB_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_sB_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_av_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,cst_Printf_bad_conversion];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(cst_u$0,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(counter >= 50)
            return caml_trampoline_return
                    (make_ignored_param$0,[0,k$0,acc$0,ign,rest$18]);
           var counter$1=counter + 1 | 0;
           return make_ignored_param$0(counter$1,k$0,acc$0,ign,rest$18);
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _sC_=caml_call1(f,0);
           if(counter >= 50)
            return caml_trampoline_return
                    (make_custom$0,[0,k$0,acc$0,rest$19,arity,_sC_]);
           var counter$0=counter + 1 | 0;
           return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_sC_)}}}
    function make_ignored_param$0(counter,k,acc,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter >= 50)
           return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
          var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt);
         case 1:
          if(counter >= 50)
           return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
          var counter$1=counter + 1 | 0;
          return make_invalid_arg(counter$1,k,acc,fmt);
         case 2:throw [0,Assert_failure,_aw_];
         default:
          if(counter >= 50)
           return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
          var counter$2=counter + 1 | 0;
          return make_invalid_arg(counter$2,k,acc,fmt)}
      switch(ign[0])
       {case 0:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$3=counter + 1 | 0;
         return make_invalid_arg(counter$3,k,acc,fmt);
        case 1:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$4=counter + 1 | 0;
         return make_invalid_arg(counter$4,k,acc,fmt);
        case 2:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$5=counter + 1 | 0;
         return make_invalid_arg(counter$5,k,acc,fmt);
        case 3:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$6=counter + 1 | 0;
         return make_invalid_arg(counter$6,k,acc,fmt);
        case 4:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$7=counter + 1 | 0;
         return make_invalid_arg(counter$7,k,acc,fmt);
        case 5:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$8=counter + 1 | 0;
         return make_invalid_arg(counter$8,k,acc,fmt);
        case 6:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$9=counter + 1 | 0;
         return make_invalid_arg(counter$9,k,acc,fmt);
        case 7:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$10=counter + 1 | 0;
         return make_invalid_arg(counter$10,k,acc,fmt);
        case 8:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$11=counter + 1 | 0;
         return make_invalid_arg(counter$11,k,acc,fmt);
        case 9:
         var fmtty=ign[2];
         if(counter >= 50)
          return caml_trampoline_return(make_from_fmtty$0,[0,k,acc,fmtty,fmt]);
         var counter$14=counter + 1 | 0;
         return make_from_fmtty$0(counter$14,k,acc,fmtty,fmt);
        case 10:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$12=counter + 1 | 0;
         return make_invalid_arg(counter$12,k,acc,fmt);
        default:
         if(counter >= 50)
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         var counter$13=counter + 1 | 0;
         return make_invalid_arg(counter$13,k,acc,fmt)}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty !== "number")
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_sA_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_ax_];
         default:throw [0,Assert_failure,_ay_]}
      if(counter >= 50)
       return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
      var counter$0=counter + 1 | 0;
      return make_invalid_arg(counter$0,k,acc,fmt)}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _sz_=[8,acc,cst_Printf_bad_conversion$0];
      if(counter >= 50)
       return caml_trampoline_return(make_printf$0,[0,k,_sz_,fmt]);
      var counter$0=counter + 1 | 0;
      return make_printf$0(counter$0,k,_sz_,fmt)}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _sy_=[4,acc,f];
      if(counter >= 50)
       return caml_trampoline_return(make_printf$0,[0,k,_sy_,rest]);
      var counter$0=counter + 1 | 0;
      return make_printf$0(counter$0,k,_sy_,rest)}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_ignored_param(k,acc,ign,fmt)
     {return caml_trampoline(make_ignored_param$0(0,k,acc,ign,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function fn_of_padding_precision(k,o,fmt,pad,prec)
     {if(typeof pad === "number")
       {if(typeof prec !== "number")
         {var _r9_=make_iprintf(k,o,fmt);return function(_sx_){return _r9_}}
        if(prec)
         {var _r6_=make_iprintf(k,o,fmt),_r7_=function(_sw_){return _r6_};
          return function(_sv_){return _r7_}}
        var _r8_=make_iprintf(k,o,fmt);
        return function(_su_){return _r8_}}
      if(0 === pad[0])
       {if(typeof prec !== "number")
         {var _sb_=make_iprintf(k,o,fmt);return function(_st_){return _sb_}}
        if(prec)
         {var _r__=make_iprintf(k,o,fmt),_r$_=function(_ss_){return _r__};
          return function(_sr_){return _r$_}}
        var _sa_=make_iprintf(k,o,fmt);
        return function(_sq_){return _sa_}}
      if(typeof prec !== "number")
       {var _sh_=make_iprintf(k,o,fmt),_si_=function(_sp_){return _sh_};
        return function(_so_){return _si_}}
      if(prec)
       {var
         _sc_=make_iprintf(k,o,fmt),
         _sd_=function(_sn_){return _sc_},
         _se_=function(_sm_){return _sd_};
        return function(_sl_){return _se_}}
      var _sf_=make_iprintf(k,o,fmt);
      function _sg_(_sk_){return _sf_}
      return function(_sj_){return _sg_}}
    function make_iprintf$0(counter,k,o,fmt)
     {var k$0=k,fmt$0=fmt;
      for(;;)
       {if(typeof fmt$0 === "number")return caml_call1(k$0,o);
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1],_rl_=make_iprintf(k$0,o,rest);
           return function(_r5_){return _rl_};
          case 1:
           var rest$0=fmt$0[1],_rm_=make_iprintf(k$0,o,rest$0);
           return function(_r4_){return _rm_};
          case 2:
           var _rn_=fmt$0[1];
           if(typeof _rn_ === "number")
            {var rest$1=fmt$0[2],_ro_=make_iprintf(k$0,o,rest$1);
             return function(_r3_){return _ro_}}
           if(0 === _rn_[0])
            {var rest$2=fmt$0[2],_rp_=make_iprintf(k$0,o,rest$2);
             return function(_r2_){return _rp_}}
           var
            rest$3=fmt$0[2],
            _rq_=make_iprintf(k$0,o,rest$3),
            _rr_=function(_r1_){return _rq_};
           return function(_r0_){return _rr_};
          case 3:
           var _rs_=fmt$0[1];
           if(typeof _rs_ === "number")
            {var rest$4=fmt$0[2],_rt_=make_iprintf(k$0,o,rest$4);
             return function(_rZ_){return _rt_}}
           if(0 === _rs_[0])
            {var rest$5=fmt$0[2],_ru_=make_iprintf(k$0,o,rest$5);
             return function(_rY_){return _ru_}}
           var
            rest$6=fmt$0[2],
            _rv_=make_iprintf(k$0,o,rest$6),
            _rw_=function(_rX_){return _rv_};
           return function(_rW_){return _rw_};
          case 4:
           var rest$7=fmt$0[4],prec=fmt$0[3],pad=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$7,pad,prec);
          case 5:
           var rest$8=fmt$0[4],prec$0=fmt$0[3],pad$0=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$8,pad$0,prec$0);
          case 6:
           var rest$9=fmt$0[4],prec$1=fmt$0[3],pad$1=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$9,pad$1,prec$1);
          case 7:
           var rest$10=fmt$0[4],prec$2=fmt$0[3],pad$2=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$10,pad$2,prec$2);
          case 8:
           var rest$11=fmt$0[4],prec$3=fmt$0[3],pad$3=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$11,pad$3,prec$3);
          case 9:
           var _rx_=fmt$0[1];
           if(typeof _rx_ === "number")
            {var rest$12=fmt$0[2],_ry_=make_iprintf(k$0,o,rest$12);
             return function(_rV_){return _ry_}}
           if(0 === _rx_[0])
            {var rest$13=fmt$0[2],_rz_=make_iprintf(k$0,o,rest$13);
             return function(_rU_){return _rz_}}
           var
            rest$14=fmt$0[2],
            _rA_=make_iprintf(k$0,o,rest$14),
            _rB_=function(_rT_){return _rA_};
           return function(_rS_){return _rB_};
          case 10:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 11:var fmt$2=fmt$0[2],fmt$0=fmt$2;continue;
          case 12:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 13:
           var rest$15=fmt$0[3],_rC_=make_iprintf(k$0,o,rest$15);
           return function(_rR_){return _rC_};
          case 14:
           var rest$16=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_iprintf(k$0,o,concat_fmt(recast(fmt,fmtty),rest$16))};
          case 15:
           var
            rest$17=fmt$0[1],
            _rD_=make_iprintf(k$0,o,rest$17),
            _rE_=function(_rQ_){return _rD_};
           return function(_rP_){return _rE_};
          case 16:
           var rest$18=fmt$0[1],_rF_=make_iprintf(k$0,o,rest$18);
           return function(_rO_){return _rF_};
          case 17:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 18:
           var _rG_=fmt$0[1];
           if(0 === _rG_[0])
            {var
              rest$19=fmt$0[2],
              match=_rG_[1],
              fmt$5=match[1],
              k$3=
               function(k,rest)
                {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
              k$1=k$3(k$0,rest$19),
              k$0=k$1,
              fmt$0=fmt$5;
             continue}
           var
            rest$20=fmt$0[2],
            match$0=_rG_[1],
            fmt$6=match$0[1],
            k$4=
             function(k,rest)
              {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
            k$2=k$4(k$0,rest$20),
            k$0=k$2,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_az_];
          case 20:
           var rest$21=fmt$0[3],_rH_=make_iprintf(k$0,o,rest$21);
           return function(_rN_){return _rH_};
          case 21:
           var rest$22=fmt$0[2],_rI_=make_iprintf(k$0,o,rest$22);
           return function(_rM_){return _rI_};
          case 22:
           var rest$23=fmt$0[1],_rJ_=make_iprintf(k$0,o,rest$23);
           return function(_rL_){return _rJ_};
          case 23:
           var rest$24=fmt$0[2],ign=fmt$0[1],_rK_=0;
           return make_ignored_param
                   (function(param){return caml_call1(k$0,o)},_rK_,ign,rest$24);
          default:
           var rest$25=fmt$0[3],arity=fmt$0[1];
           if(counter >= 50)
            return caml_trampoline_return
                    (fn_of_custom_arity$0,[0,k$0,o,rest$25,arity]);
           var counter$0=counter + 1 | 0;
           return fn_of_custom_arity$0(counter$0,k$0,o,rest$25,arity)}}}
    function fn_of_custom_arity$0(counter,k,o,fmt,param)
     {if(param)
       {var arity=param[1],_rj_=fn_of_custom_arity(k,o,fmt,arity);
        return function(_rk_){return _rj_}}
      if(counter >= 50)
       return caml_trampoline_return(make_iprintf$0,[0,k,o,fmt]);
      var counter$0=counter + 1 | 0;
      return make_iprintf$0(counter$0,k,o,fmt)}
    function make_iprintf(k,o,fmt)
     {return caml_trampoline(make_iprintf$0(0,k,o,fmt))}
    function fn_of_custom_arity(k,o,fmt,param)
     {return caml_trampoline(fn_of_custom_arity$0(0,k,o,fmt,param))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       {if(typeof acc$0 === "number")return 0;
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _rh_=acc$0[2],_ri_=acc$0[1];
           if(0 === _rh_[0])
            {var acc$1=_rh_[1];
             output_acc(o,_ri_);
             output_string(o,cst$25);
             var acc$0=acc$1;
             continue}
           var acc$2=_rh_[1];
           output_acc(o,_ri_);
           output_string(o,cst$26);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}}
    function bufput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       {if(typeof acc$0 === "number")return 0;
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           bufput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _rf_=acc$0[2],_rg_=acc$0[1];
           if(0 === _rf_[0])
            {var acc$1=_rf_[1];
             bufput_acc(b,_rg_);
             add_string(b,cst$27);
             var acc$0=acc$1;
             continue}
           var acc$2=_rf_[1];
           bufput_acc(b,_rg_);
           add_string(b,cst$28);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           bufput_acc(b,p$2);
           return caml_call1(f,b);
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           bufput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           bufput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];bufput_acc(b,p$1);return add_char(b,c)}}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       {if(typeof acc$0 === "number")return 0;
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _rd_=acc$0[2],_re_=acc$0[1];
           if(0 === _rd_[0])
            {var acc$1=_rd_[1];
             strput_acc(b,_re_);
             add_string(b,cst$29);
             var acc$0=acc$1;
             continue}
           var acc$2=_rd_[1];
           strput_acc(b,_re_);
           add_string(b,cst$30);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}}
    function failwith_message(param)
     {var fmt=param[1],buf=create$2(256);
      function k(acc){strput_acc(buf,acc);return failwith(contents(buf))}
      return make_printf(k,0,fmt)}
    function open_box_of_string(str)
     {if(caml_string_equal(str,cst$31))return _aA_;
      var len=caml_ml_string_length(str);
      function invalid_box(param)
       {return caml_call1(failwith_message(_aB_),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match && 32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0);
          if(25 < match - 97 >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switch$0=0;
          if(48 <= match)
           {if(58 > match)switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(! switch$0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=sub$0(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _rb_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
          indent=_rb_}
       catch(_rc_)
        {_rc_ = caml_wrap_exception(_rc_);
         if(_rc_[1] !== Failure)throw _rc_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      var switch$0=0;
      if
       (caml_string_notequal(box_name,cst$32)
        &&
        caml_string_notequal(box_name,cst_b$0))
       var
        box_type=
         caml_string_notequal(box_name,cst_h)
          ?caml_string_notequal(box_name,cst_hov)
            ?caml_string_notequal(box_name,cst_hv)
              ?caml_string_notequal(box_name,cst_v)?invalid_box(0):1
              :2
            :3
          :0;
      else
       switch$0 = 1;
      if(switch$0)var box_type=4;
      return [0,indent,box_type]}
    function make_padding_fmt_ebb(pad,fmt)
     {if(typeof pad === "number")return [0,0,fmt];
      if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
      var s$0=pad[1];
      return [0,[1,s$0],fmt]}
    function make_padprec_fmt_ebb(pad,prec,fmt)
     {if(typeof prec === "number")
       var match=prec?[0,1,fmt]:[0,0,fmt];
      else
       var p=prec[1],match=[0,[0,p],fmt];
      var prec$0=match[1];
      if(typeof pad === "number")return [0,0,prec$0,fmt];
      if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt]}
      var s$0=pad[1];
      return [0,[1,s$0],prec$0,fmt]}
    function fmt_ebb_of_string(legacy_behavior,str)
     {if(legacy_behavior)
       var flag=legacy_behavior[1],legacy_behavior$0=flag;
      else
       var legacy_behavior$0=1;
      function invalid_format_message(str_ind,msg)
       {return caml_call3(failwith_message(_aC_),str,str_ind,msg)}
      function unexpected_end_of_format(end_ind)
       {return invalid_format_message(end_ind,cst_unexpected_end_of_format)}
      function invalid_format_without(str_ind,c,s)
       {return caml_call4(failwith_message(_aD_),str,str_ind,c,s)}
      function expected_character(str_ind,expected,read)
       {return caml_call4(failwith_message(_aE_),str,str_ind,expected,read)}
      function add_literal(lit_start,str_ind,fmt)
       {var size=str_ind - lit_start | 0;
        return 0 === size
                ?[0,fmt]
                :1 === size
                  ?[0,[12,caml_string_get(str,lit_start),fmt]]
                  :[0,[11,sub$0(str,lit_start,size),fmt]]}
      function parse(lit_start,end_ind)
       {var str_ind=lit_start;
        for(;;)
         {if(str_ind === end_ind)return add_literal(lit_start,str_ind,0);
          var match=caml_string_get(str,str_ind);
          if(37 === match)
           {var str_ind$2=str_ind + 1 | 0;
            if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
            var
             match$1=caml_string_get(str,str_ind$2),
             _ra_=
              95 === match$1
               ?parse_flags(str_ind,str_ind$2 + 1 | 0,end_ind,1)
               :parse_flags(str_ind,str_ind$2,end_ind,0),
             fmt_rest=_ra_[1];
            return add_literal(lit_start,str_ind,fmt_rest)}
          if(64 !== match)
           {var str_ind$1=str_ind + 1 | 0,str_ind=str_ind$1;continue}
          var str_ind$0=str_ind + 1 | 0;
          if(str_ind$0 === end_ind)
           var match$0=_aQ_;
          else
           {var c=caml_string_get(str,str_ind$0),switch$0=0;
            if(65 <= c)
             if(94 <= c)
              {var switcher=c - 123 | 0;
               if(2 < switcher >>> 0)
                switch$0 = 1;
               else
                switch(switcher)
                 {case 0:
                   var match$0=parse_tag(1,str_ind$0 + 1 | 0,end_ind);break;
                  case 1:switch$0 = 1;break;
                  default:
                   var
                    match$3=parse(str_ind$0 + 1 | 0,end_ind),
                    fmt_rest$2=match$3[1],
                    match$0=[0,[17,1,fmt_rest$2]]}}
             else
              if(91 <= c)
               switch(c - 91 | 0)
                {case 0:
                  var match$0=parse_tag(0,str_ind$0 + 1 | 0,end_ind);break;
                 case 1:switch$0 = 1;break;
                 default:
                  var
                   match$4=parse(str_ind$0 + 1 | 0,end_ind),
                   fmt_rest$3=match$4[1],
                   match$0=[0,[17,0,fmt_rest$3]]}
              else
               switch$0 = 1;
            else
             if(10 === c)
              var
               match$5=parse(str_ind$0 + 1 | 0,end_ind),
               fmt_rest$4=match$5[1],
               match$0=[0,[17,3,fmt_rest$4]];
             else
              if(32 <= c)
               switch(c - 32 | 0)
                {case 0:
                  var
                   match$6=parse(str_ind$0 + 1 | 0,end_ind),
                   fmt_rest$5=match$6[1],
                   match$0=[0,[17,_aR_,fmt_rest$5]];
                  break;
                 case 5:
                  var switch$1=0;
                  if
                   ((str_ind$0 + 1 | 0)
                    <
                    end_ind
                    &&
                    37
                    ===
                    caml_string_get(str,str_ind$0 + 1 | 0))
                   {var
                     match$7=parse(str_ind$0 + 2 | 0,end_ind),
                     fmt_rest$6=match$7[1],
                     match$0=[0,[17,6,fmt_rest$6]];
                    switch$1 = 1}
                  if(! switch$1)
                   var
                    match$8=parse(str_ind$0,end_ind),
                    fmt_rest$7=match$8[1],
                    match$0=[0,[12,64,fmt_rest$7]];
                  break;
                 case 12:
                  var
                   match$9=parse(str_ind$0 + 1 | 0,end_ind),
                   fmt_rest$8=match$9[1],
                   match$0=[0,[17,_aS_,fmt_rest$8]];
                  break;
                 case 14:
                  var
                   match$10=parse(str_ind$0 + 1 | 0,end_ind),
                   fmt_rest$9=match$10[1],
                   match$0=[0,[17,4,fmt_rest$9]];
                  break;
                 case 27:
                  var match$0=parse_good_break(str_ind$0 + 1 | 0,end_ind);
                  break;
                 case 28:
                  var match$0=parse_magic_size(str_ind$0 + 1 | 0,end_ind);
                  break;
                 case 31:
                  var
                   match$11=parse(str_ind$0 + 1 | 0,end_ind),
                   fmt_rest$10=match$11[1],
                   match$0=[0,[17,2,fmt_rest$10]];
                  break;
                 case 32:
                  var
                   match$12=parse(str_ind$0 + 1 | 0,end_ind),
                   fmt_rest$11=match$12[1],
                   match$0=[0,[17,5,fmt_rest$11]];
                  break;
                 default:switch$0 = 1}
              else
               switch$0 = 1;
            if(switch$0)
             var
              match$2=parse(str_ind$0 + 1 | 0,end_ind),
              fmt_rest$1=match$2[1],
              match$0=[0,[17,[2,c],fmt_rest$1]]}
          var fmt_rest$0=match$0[1];
          return add_literal(lit_start,str_ind,fmt_rest$0)}}
      function parse_conversion
       (pct_ind,str_ind,end_ind,plus,hash,space,ign,pad,prec,padprec,symb)
       {var
         plus_used=[0,0],
         hash_used=[0,0],
         space_used=[0,0],
         ign_used=[0,0],
         pad_used=[0,0],
         prec_used=[0,0];
        function get_plus(param){plus_used[1] = 1;return plus}
        function get_hash(param){hash_used[1] = 1;return hash}
        function get_space(param){space_used[1] = 1;return space}
        function get_ign(param){ign_used[1] = 1;return ign}
        function get_pad(param){pad_used[1] = 1;return pad}
        function get_prec(param){prec_used[1] = 1;return prec}
        function get_padprec(param){pad_used[1] = 1;return padprec}
        function get_int_pad(param)
         {var pad=get_pad(0),match=get_prec(0);
          if(typeof match === "number" && ! match)return pad;
          if(typeof pad === "number")return 0;
          if(0 !== pad[0])
           return 2 <= pad[1]
                   ?legacy_behavior$0
                     ?_aK_
                     :incompatible_flag(pct_ind,str_ind,48,cst_precision$1)
                   :pad;
          if(2 > pad[1])return pad;
          var n=pad[2];
          return legacy_behavior$0
                  ?[0,1,n]
                  :incompatible_flag(pct_ind,str_ind,48,cst_precision$0)}
        function check_no_0(symb,pad)
         {if(typeof pad === "number")return pad;
          if(0 !== pad[0])
           return 2 <= pad[1]
                   ?legacy_behavior$0
                     ?_aL_
                     :incompatible_flag(pct_ind,str_ind,symb,cst_0$1)
                   :pad;
          if(2 > pad[1])return pad;
          var width=pad[2];
          return legacy_behavior$0
                  ?[0,1,width]
                  :incompatible_flag(pct_ind,str_ind,symb,cst_0$0)}
        function opt_of_pad(c,pad)
         {if(typeof pad === "number")return 0;
          if(0 === pad[0])
           switch(pad[1])
            {case 0:
              var width=pad[2];
              return legacy_behavior$0
                      ?[0,width]
                      :incompatible_flag(pct_ind,str_ind,c,cst$33);
             case 1:var width$0=pad[2];return [0,width$0];
             default:
              var width$1=pad[2];
              return legacy_behavior$0
                      ?[0,width$1]
                      :incompatible_flag(pct_ind,str_ind,c,cst_0$2)}
          return incompatible_flag(pct_ind,str_ind,c,cst$34)}
        function get_pad_opt(c){return opt_of_pad(c,get_pad(0))}
        function get_padprec_opt(c){return opt_of_pad(c,get_padprec(0))}
        var switch$0=0;
        if(124 <= symb)
         switch$0 = 1;
        else
         switch(symb)
          {case 33:
            var
             match$6=parse(str_ind,end_ind),
             fmt_rest$5=match$6[1],
             fmt_result=[0,[10,fmt_rest$5]];
            break;
           case 40:
            var
             sub_end=search_subformat_end(str_ind,end_ind,41),
             match$8=parse(sub_end + 2 | 0,end_ind),
             fmt_rest$7=match$8[1],
             match$9=parse(str_ind,sub_end),
             sub_fmt=match$9[1],
             sub_fmtty=fmtty_of_fmt(sub_fmt);
            if(get_ign(0))
             var
              ignored$2=[9,get_pad_opt(95),sub_fmtty],
              _qJ_=[0,[23,ignored$2,fmt_rest$7]];
            else
             var _qJ_=[0,[14,get_pad_opt(40),sub_fmtty,fmt_rest$7]];
            var fmt_result=_qJ_;
            break;
           case 44:var fmt_result=parse(str_ind,end_ind);break;
           case 67:
            var
             match$12=parse(str_ind,end_ind),
             fmt_rest$10=match$12[1],
             _qL_=get_ign(0)?[0,[23,1,fmt_rest$10]]:[0,[1,fmt_rest$10]],
             fmt_result=_qL_;
            break;
           case 78:
            var
             match$16=parse(str_ind,end_ind),
             fmt_rest$14=match$16[1],
             counter$0=2;
            if(get_ign(0))
             var ignored$6=[11,counter$0],_qR_=[0,[23,ignored$6,fmt_rest$14]];
            else
             var _qR_=[0,[21,counter$0,fmt_rest$14]];
            var fmt_result=_qR_;
            break;
           case 83:
            var
             pad$6=check_no_0(symb,get_padprec(0)),
             match$17=parse(str_ind,end_ind),
             fmt_rest$15=match$17[1];
            if(get_ign(0))
             var
              ignored$7=[1,get_padprec_opt(95)],
              _qS_=[0,[23,ignored$7,fmt_rest$15]];
            else
             var
              match$18=make_padding_fmt_ebb(pad$6,fmt_rest$15),
              fmt_rest$16=match$18[2],
              pad$7=match$18[1],
              _qS_=[0,[3,pad$7,fmt_rest$16]];
            var fmt_result=_qS_;
            break;
           case 91:
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var
             char_set=create_char_set(0),
             add_char=function(c){return add_in_char_set(char_set,c)},
             add_range=
              function(c$0,c)
               {if(c >= c$0)
                 {var i=c$0;
                  for(;;)
                   {add_in_char_set(char_set,char_of_int(i));
                    var _q$_=i + 1 | 0;
                    if(c !== i){var i=_q$_;continue}
                    break}}
                return 0},
             fail_single_percent=
              function(str_ind)
               {return caml_call2(failwith_message(_aU_),str,str_ind)},
             parse_char_set_content=
              function(counter,str_ind,end_ind)
               {var str_ind$0=str_ind;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c=caml_string_get(str,str_ind$0);
                  if(45 === c)
                   {add_char(45);
                    var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                    continue}
                  if(93 === c)return str_ind$0 + 1 | 0;
                  var _q__=str_ind$0 + 1 | 0;
                  if(counter >= 50)
                   return caml_trampoline_return
                           (parse_char_set_after_char$0,[0,_q__,end_ind,c]);
                  var counter$0=counter + 1 | 0;
                  return parse_char_set_after_char$0(counter$0,_q__,end_ind,c)}},
             parse_char_set_after_char$0=
              function(counter,str_ind,end_ind,c)
               {var str_ind$0=str_ind,c$0=c;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c$1=caml_string_get(str,str_ind$0),switch$0=0;
                  if(46 <= c$1)
                   {if(64 === c$1)
                     switch$0 = 1;
                    else
                     if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}}
                  else
                   if(37 === c$1)
                    switch$0 = 1;
                   else
                    if(45 <= c$1)
                     {var str_ind$2=str_ind$0 + 1 | 0;
                      if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
                      var c$2=caml_string_get(str,str_ind$2);
                      if(37 === c$2)
                       {if((str_ind$2 + 1 | 0) === end_ind)
                         unexpected_end_of_format(end_ind);
                        var c$3=caml_string_get(str,str_ind$2 + 1 | 0);
                        if(37 !== c$3 && 64 !== c$3)
                         return fail_single_percent(str_ind$2);
                        add_range(c$0,c$3);
                        var _q8_=str_ind$2 + 2 | 0;
                        if(counter >= 50)
                         return caml_trampoline_return
                                 (parse_char_set_content,[0,_q8_,end_ind]);
                        var counter$2=counter + 1 | 0;
                        return parse_char_set_content(counter$2,_q8_,end_ind)}
                      if(93 === c$2)
                       {add_char(c$0);add_char(45);return str_ind$2 + 1 | 0}
                      add_range(c$0,c$2);
                      var _q9_=str_ind$2 + 1 | 0;
                      if(counter >= 50)
                       return caml_trampoline_return
                               (parse_char_set_content,[0,_q9_,end_ind]);
                      var counter$1=counter + 1 | 0;
                      return parse_char_set_content(counter$1,_q9_,end_ind)}
                  if(switch$0 && 37 === c$0)
                   {add_char(c$1);
                    var _q7_=str_ind$0 + 1 | 0;
                    if(counter >= 50)
                     return caml_trampoline_return
                             (parse_char_set_content,[0,_q7_,end_ind]);
                    var counter$0=counter + 1 | 0;
                    return parse_char_set_content(counter$0,_q7_,end_ind)}
                  if(37 === c$0)fail_single_percent(str_ind$0);
                  add_char(c$0);
                  var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1}},
             parse_char_set_after_char=
              function(str_ind,end_ind,c)
               {return caml_trampoline
                        (parse_char_set_after_char$0(0,str_ind,end_ind,c))};
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var match$31=caml_string_get(str,str_ind);
            if(94 === match$31)
             var str_ind$0=str_ind + 1 | 0,reverse=1,str_ind$1=str_ind$0;
            else
             var reverse=0,str_ind$1=str_ind;
            if(str_ind$1 === end_ind)unexpected_end_of_format(end_ind);
            var
             c=caml_string_get(str,str_ind$1),
             next_ind=parse_char_set_after_char(str_ind$1 + 1 | 0,end_ind,c),
             char_set$0=freeze_char_set(char_set),
             char_set$1=reverse?rev_char_set(char_set$0):char_set$0,
             match$21=parse(next_ind,end_ind),
             fmt_rest$19=match$21[1];
            if(get_ign(0))
             var
              ignored$9=[10,get_pad_opt(95),char_set$1],
              _qX_=[0,[23,ignored$9,fmt_rest$19]];
            else
             var _qX_=[0,[20,get_pad_opt(91),char_set$1,fmt_rest$19]];
            var fmt_result=_qX_;
            break;
           case 97:
            var
             match$22=parse(str_ind,end_ind),
             fmt_rest$20=match$22[1],
             fmt_result=[0,[15,fmt_rest$20]];
            break;
           case 99:
            var
             char_format=
              function(fmt_rest)
               {return get_ign(0)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
             match$23=parse(str_ind,end_ind),
             fmt_rest$21=match$23[1],
             match$24=get_pad_opt(99);
            if(match$24)
             {if(0 === match$24[1])
               var
                _qY_=get_ign(0)?[0,[23,3,fmt_rest$21]]:[0,[22,fmt_rest$21]],
                _qZ_=_qY_;
              else
               var
                _qZ_=
                 legacy_behavior$0
                  ?char_format(fmt_rest$21)
                  :invalid_format_message
                    (str_ind,cst_non_zero_widths_are_unsupp);
              var _q0_=_qZ_}
            else
             var _q0_=char_format(fmt_rest$21);
            var fmt_result=_q0_;
            break;
           case 114:
            var
             match$25=parse(str_ind,end_ind),
             fmt_rest$22=match$25[1],
             _q1_=get_ign(0)?[0,[23,2,fmt_rest$22]]:[0,[19,fmt_rest$22]],
             fmt_result=_q1_;
            break;
           case 115:
            var
             pad$9=check_no_0(symb,get_padprec(0)),
             match$26=parse(str_ind,end_ind),
             fmt_rest$23=match$26[1];
            if(get_ign(0))
             var
              ignored$10=[0,get_padprec_opt(95)],
              _q2_=[0,[23,ignored$10,fmt_rest$23]];
            else
             var
              match$27=make_padding_fmt_ebb(pad$9,fmt_rest$23),
              fmt_rest$24=match$27[2],
              pad$10=match$27[1],
              _q2_=[0,[2,pad$10,fmt_rest$24]];
            var fmt_result=_q2_;
            break;
           case 116:
            var
             match$28=parse(str_ind,end_ind),
             fmt_rest$25=match$28[1],
             fmt_result=[0,[16,fmt_rest$25]];
            break;
           case 123:
            var
             sub_end$0=search_subformat_end(str_ind,end_ind,125),
             match$29=parse(str_ind,sub_end$0),
             sub_fmt$0=match$29[1],
             match$30=parse(sub_end$0 + 2 | 0,end_ind),
             fmt_rest$26=match$30[1],
             sub_fmtty$0=fmtty_of_fmt(sub_fmt$0);
            if(get_ign(0))
             var
              ignored$11=[8,get_pad_opt(95),sub_fmtty$0],
              _q3_=[0,[23,ignored$11,fmt_rest$26]];
            else
             var _q3_=[0,[13,get_pad_opt(123),sub_fmtty$0,fmt_rest$26]];
            var fmt_result=_q3_;
            break;
           case 66:
           case 98:
            var
             pad$3=check_no_0(symb,get_padprec(0)),
             match$10=parse(str_ind,end_ind),
             fmt_rest$8=match$10[1];
            if(get_ign(0))
             var
              ignored$3=[7,get_padprec_opt(95)],
              _qK_=[0,[23,ignored$3,fmt_rest$8]];
            else
             var
              match$11=make_padding_fmt_ebb(pad$3,fmt_rest$8),
              fmt_rest$9=match$11[2],
              pad$4=match$11[1],
              _qK_=[0,[9,pad$4,fmt_rest$9]];
            var fmt_result=_qK_;
            break;
           case 37:
           case 64:
            var
             match$7=parse(str_ind,end_ind),
             fmt_rest$6=match$7[1],
             fmt_result=[0,[12,symb,fmt_rest$6]];
            break;
           case 76:
           case 108:
           case 110:
            var switch$1=0;
            if(str_ind !== end_ind)
             {var
               symb$0=caml_string_get(str,str_ind),
               _q4_=symb$0 - 88 | 0,
               switch$2=0;
              if(32 >= _q4_ >>> 0)
               switch(_q4_)
                {case 0:
                 case 12:
                 case 17:
                 case 23:
                 case 29:
                 case 32:var _qQ_=1;switch$2 = 1;break
                 }
              if(! switch$2)var _qQ_=0;
              if(_qQ_){switch$0 = 1;switch$1 = 1}}
            if(! switch$1)
             {var
               match$15=parse(str_ind,end_ind),
               fmt_rest$13=match$15[1],
               switch$3=0;
              if(108 <= symb)
               {if(111 > symb)
                 switch(symb - 108 | 0)
                  {case 0:var counter=0;switch$3 = 1;break;
                   case 1:break;
                   default:var counter=1;switch$3 = 1}}
              else
               if(76 === symb){var counter=2;switch$3 = 1}
              if(! switch$3)throw [0,Assert_failure,_aY_];
              if(get_ign(0))
               var ignored$5=[11,counter],_qP_=[0,[23,ignored$5,fmt_rest$13]];
              else
               var _qP_=[0,[21,counter,fmt_rest$13]];
              var fmt_result=_qP_}
            break;
           case 32:
           case 35:
           case 43:
           case 45:
           case 95:
            var
             fmt_result=
              caml_call3(failwith_message(_aP_),str,pct_ind,symb);
            break;
           case 88:
           case 100:
           case 105:
           case 111:
           case 117:
           case 120:
            var
             _qT_=get_space(0),
             _qU_=get_hash(0),
             iconv$2=
              compute_int_conv(pct_ind,str_ind,get_plus(0),_qU_,_qT_,symb),
             match$19=parse(str_ind,end_ind),
             fmt_rest$17=match$19[1];
            if(get_ign(0))
             var
              ignored$8=[2,iconv$2,get_pad_opt(95)],
              _qV_=[0,[23,ignored$8,fmt_rest$17]];
            else
             var
              _qW_=get_prec(0),
              match$20=make_padprec_fmt_ebb(get_int_pad(0),_qW_,fmt_rest$17),
              fmt_rest$18=match$20[3],
              prec$4=match$20[2],
              pad$8=match$20[1],
              _qV_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$18]];
            var fmt_result=_qV_;
            break;
           case 69:
           case 70:
           case 71:
           case 72:
           case 101:
           case 102:
           case 103:
           case 104:
            var
             space$1=get_space(0),
             hash$1=get_hash(0),
             plus$2=get_plus(0),
             flag=
              plus$2
               ?space$1
                 ?legacy_behavior$0
                   ?1
                   :incompatible_flag(pct_ind,str_ind,32,cst$45)
                 :1
               :space$1?2:0,
             switch$4=0;
            if(73 <= symb)
             {var switcher=symb - 101 | 0;
              if(3 < switcher >>> 0)
               switch$4 = 1;
              else
               {switch(switcher)
                 {case 0:var _q5_=1;break;
                  case 1:var _q5_=0;break;
                  case 2:var _q5_=3;break;
                  default:var _q5_=6}
                var kind=_q5_}}
            else
             if(69 <= symb)
              {var switch$5=0;
               switch(symb - 69 | 0)
                {case 0:var _q6_=2;break;
                 case 1:switch$4 = 1;switch$5 = 1;break;
                 case 2:var _q6_=4;break;
                 default:var _q6_=7}
               if(! switch$5)var kind=_q6_}
             else
              switch$4 = 1;
            if(switch$4)
             {var switch$6=0;
              if(hash$1)
               if(70 === symb)var kind=8;else switch$6 = 1;
              else
               if(70 === symb)var kind=5;else switch$6 = 1;
              if(switch$6)throw [0,Assert_failure,_a0_]}
            var
             fconv=[0,flag,kind],
             match$13=parse(str_ind,end_ind),
             fmt_rest$11=match$13[1];
            if(get_ign(0))
             {var match=get_prec(0);
              if(typeof match === "number")
               var _qM_=match?incompatible_flag(pct_ind,str_ind,95,cst$35):0;
              else
               var ndec=match[1],_qM_=[0,ndec];
              var
               ignored$4=[6,get_pad_opt(95),_qM_],
               _qN_=[0,[23,ignored$4,fmt_rest$11]]}
            else
             var
              _qO_=get_prec(0),
              match$14=make_padprec_fmt_ebb(get_pad(0),_qO_,fmt_rest$11),
              fmt_rest$12=match$14[3],
              prec$3=match$14[2],
              pad$5=match$14[1],
              _qN_=[0,[8,fconv,pad$5,prec$3,fmt_rest$12]];
            var fmt_result=_qN_;
            break;
           default:switch$0 = 1}
        if(switch$0)
         {var switch$7=0;
          if(108 <= symb)
           if(111 <= symb)
            switch$7 = 1;
           else
            {var switch$8=0;
             switch(symb - 108 | 0)
              {case 0:
                var
                 _qt_=caml_string_get(str,str_ind),
                 _qu_=get_space(0),
                 _qv_=get_hash(0),
                 iconv=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_qv_,_qu_,_qt_),
                 match$0=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest=match$0[1];
                if(get_ign(0))
                 var
                  ignored=[3,iconv,get_pad_opt(95)],
                  _qw_=[0,[23,ignored,fmt_rest]];
                else
                 var
                  _qy_=get_prec(0),
                  match$1=make_padprec_fmt_ebb(get_int_pad(0),_qy_,fmt_rest),
                  fmt_rest$0=match$1[3],
                  prec$0=match$1[2],
                  pad$0=match$1[1],
                  _qw_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
                var _qx_=_qw_;
                break;
               case 1:switch$7 = 1;switch$8 = 1;break;
               default:
                var
                 _qz_=caml_string_get(str,str_ind),
                 _qA_=get_space(0),
                 _qB_=get_hash(0),
                 iconv$0=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_qB_,_qA_,_qz_),
                 match$2=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest$1=match$2[1];
                if(get_ign(0))
                 var
                  ignored$0=[4,iconv$0,get_pad_opt(95)],
                  _qC_=[0,[23,ignored$0,fmt_rest$1]];
                else
                 var
                  _qD_=get_prec(0),
                  match$3=make_padprec_fmt_ebb(get_int_pad(0),_qD_,fmt_rest$1),
                  fmt_rest$2=match$3[3],
                  prec$1=match$3[2],
                  pad$1=match$3[1],
                  _qC_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
                var _qx_=_qC_}
             if(! switch$8)var fmt_result=_qx_}
          else
           if(76 === symb)
            {var
              _qE_=caml_string_get(str,str_ind),
              _qF_=get_space(0),
              _qG_=get_hash(0),
              iconv$1=
               compute_int_conv
                (pct_ind,str_ind + 1 | 0,get_plus(0),_qG_,_qF_,_qE_),
              match$4=parse(str_ind + 1 | 0,end_ind),
              fmt_rest$3=match$4[1];
             if(get_ign(0))
              var
               ignored$1=[5,iconv$1,get_pad_opt(95)],
               _qH_=[0,[23,ignored$1,fmt_rest$3]];
             else
              var
               _qI_=get_prec(0),
               match$5=make_padprec_fmt_ebb(get_int_pad(0),_qI_,fmt_rest$3),
               fmt_rest$4=match$5[3],
               prec$2=match$5[2],
               pad$2=match$5[1],
               _qH_=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
             var fmt_result=_qH_}
           else
            switch$7 = 1;
          if(switch$7)
           var
            fmt_result=
             caml_call3(failwith_message(_aM_),str,str_ind - 1 | 0,symb)}
        if(1 - legacy_behavior$0)
         {var _qk_=1 - plus_used[1],plus$0=_qk_?plus:_qk_;
          if(plus$0)incompatible_flag(pct_ind,str_ind,symb,cst$36);
          var _ql_=1 - hash_used[1],hash$0=_ql_?hash:_ql_;
          if(hash$0)incompatible_flag(pct_ind,str_ind,symb,cst$37);
          var _qm_=1 - space_used[1],space$0=_qm_?space:_qm_;
          if(space$0)incompatible_flag(pct_ind,str_ind,symb,cst$38);
          var _qn_=1 - pad_used[1],_qo_=_qn_?caml_notequal([0,pad],_aN_):_qn_;
          if(_qo_)incompatible_flag(pct_ind,str_ind,symb,cst_padding$0);
          var
           _qp_=1 - prec_used[1],
           _qq_=_qp_?caml_notequal([0,prec],_aO_):_qp_;
          if(_qq_)
           {var _qr_=ign?95:symb;
            incompatible_flag(pct_ind,str_ind,_qr_,cst_precision$2)}
          var plus$1=ign?plus:ign;
          if(plus$1)incompatible_flag(pct_ind,str_ind,95,cst$39)}
        var _qs_=1 - ign_used[1],ign$0=_qs_?ign:_qs_;
        if(ign$0)
         {var switch$9=0;
          if(38 <= symb)
           {if(44 !== symb && 64 !== symb)switch$9 = 1}
          else
           if(33 !== symb && 37 > symb)switch$9 = 1;
          var switch$10=0;
          if(switch$9 || ! legacy_behavior$0)switch$10 = 1;
          if(switch$10)incompatible_flag(pct_ind,str_ind,symb,cst$40)}
        return fmt_result}
      function parse_after_precision
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,prec)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_conv(padprec)
         {return parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   prec,
                   padprec,
                   caml_string_get(str,str_ind))}
        if(typeof pad !== "number")return parse_conv(pad);
        if(typeof prec === "number" && ! prec)return parse_conv(0);
        if(minus)
         {if(typeof prec === "number")return parse_conv(_aI_);
          var n=prec[1];
          return parse_conv([0,0,n])}
        if(typeof prec === "number")return parse_conv(_aJ_);
        var n$0=prec[1];
        return parse_conv([0,1,n$0])}
      function parse_after_padding
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var symb=caml_string_get(str,str_ind);
        if(46 !== symb)
         return parse_conversion
                 (pct_ind,
                  str_ind + 1 | 0,
                  end_ind,
                  plus,
                  hash,
                  space,
                  ign,
                  pad,
                  0,
                  pad,
                  symb);
        var str_ind$0=str_ind + 1 | 0;
        if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
        function parse_literal(minus,str_ind)
         {var
           match=parse_positive(str_ind,end_ind,0),
           prec=match[2],
           new_ind=match[1];
          return parse_after_precision
                  (pct_ind,
                   new_ind,
                   end_ind,
                   minus,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   [0,prec])}
        var symb$0=caml_string_get(str,str_ind$0);
        if(48 <= symb$0)
         {if(58 > symb$0)return parse_literal(minus,str_ind$0)}
        else
         if(42 <= symb$0)
          switch(symb$0 - 42 | 0)
           {case 0:
             return parse_after_precision
                     (pct_ind,
                      str_ind$0 + 1 | 0,
                      end_ind,
                      minus,
                      plus,
                      hash,
                      space,
                      ign,
                      pad,
                      1);
            case 1:
            case 3:
             if(legacy_behavior$0)
              {var
                _qj_=str_ind$0 + 1 | 0,
                minus$0=minus || (45 === symb$0?1:0);
               return parse_literal(minus$0,_qj_)}
             break
            }
        return legacy_behavior$0
                ?parse_after_precision
                  (pct_ind,
                   str_ind$0,
                   end_ind,
                   minus,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   _aH_)
                :invalid_format_without(str_ind$0 - 1 | 0,46,cst_precision)}
      function parse_flags(pct_ind,str_ind,end_ind,ign)
       {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],hash=[0,0];
        function set_flag(str_ind,flag)
         {var _qg_=flag[1],_qh_=_qg_?1 - legacy_behavior$0:_qg_;
          if(_qh_)
           {var _qi_=caml_string_get(str,str_ind);
            caml_call3(failwith_message(_aF_),str,str_ind,_qi_)}
          flag[1] = 1;
          return 0}
        var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var match=caml_string_get(str,str_ind$0),switcher=match - 32 | 0;
          if(16 >= switcher >>> 0)
           switch(switcher)
            {case 0:
              set_flag(str_ind$0,space);
              var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
              continue;
             case 3:
              set_flag(str_ind$0,hash);
              var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
              continue;
             case 11:
              set_flag(str_ind$0,plus);
              var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
              continue;
             case 13:
              set_flag(str_ind$0,minus);
              var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
              continue;
             case 16:
              set_flag(str_ind$0,zero);
              var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
              continue
             }
          var
           _qb_=space[1],
           _qc_=hash[1],
           _qd_=plus[1],
           _qe_=minus[1],
           _qf_=zero[1];
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           padty=
            _qf_
             ?_qe_
               ?legacy_behavior$0
                 ?0
                 :incompatible_flag(pct_ind,str_ind$0,45,cst_0)
               :2
             :_qe_?0:1,
           match$0=caml_string_get(str,str_ind$0);
          if(48 <= match$0)
           {if(58 > match$0)
             {var
               match$1=parse_positive(str_ind$0,end_ind,0),
               width=match$1[2],
               new_ind=match$1[1];
              return parse_after_padding
                      (pct_ind,
                       new_ind,
                       end_ind,
                       _qe_,
                       _qd_,
                       _qc_,
                       _qb_,
                       ign,
                       [0,padty,width])}}
          else
           if(42 === match$0)
            return parse_after_padding
                    (pct_ind,
                     str_ind$0 + 1 | 0,
                     end_ind,
                     _qe_,
                     _qd_,
                     _qc_,
                     _qb_,
                     ign,
                     [1,padty]);
          switch(padty)
           {case 0:
             if(1 - legacy_behavior$0)
              invalid_format_without(str_ind$0 - 1 | 0,45,cst_padding);
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_qe_,_qd_,_qc_,_qb_,ign,0);
            case 1:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_qe_,_qd_,_qc_,_qb_,ign,0);
            default:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_qe_,_qd_,_qc_,_qb_,ign,_aG_)}}}
      function parse_tag(is_open_tag,str_ind,end_ind)
       {try
         {if(str_ind === end_ind)throw Not_found;
          var match$0=caml_string_get(str,str_ind);
          if(60 !== match$0)throw Not_found;
          var ind=index_from$0(str,str_ind + 1 | 0,62);
          if(end_ind <= ind)throw Not_found;
          var
           sub_str=sub$0(str,str_ind,(ind - str_ind | 0) + 1 | 0),
           match$1=parse(ind + 1 | 0,end_ind),
           fmt_rest$0=match$1[1],
           match$2=parse(str_ind,ind + 1 | 0),
           sub_fmt=match$2[1],
           sub_format$0=[0,sub_fmt,sub_str],
           formatting$0=is_open_tag?[0,sub_format$0]:[1,sub_format$0],
           _p$_=[0,[18,formatting$0,fmt_rest$0]];
          return _p$_}
        catch(_qa_)
         {_qa_ = caml_wrap_exception(_qa_);
          if(_qa_ !== Not_found)throw _qa_;
          var
           match=parse(str_ind,end_ind),
           fmt_rest=match[1],
           formatting=is_open_tag?[0,sub_format]:[1,sub_format];
          return [0,[18,formatting,fmt_rest]]}}
      function parse_good_break(str_ind,end_ind)
       {try
         {var
           _p4_=str_ind === end_ind?1:0,
           _p5_=_p4_ || (60 !== caml_string_get(str,str_ind)?1:0);
          if(_p5_)throw Not_found;
          var
           str_ind_1=parse_spaces(str_ind + 1 | 0,end_ind),
           match$0=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$0)
           {if(58 > match$0)switch$0 = 1}
          else
           if(45 === match$0)switch$0 = 1;
          if(! switch$0)throw Not_found;
          var
           match$1=parse_integer(str_ind_1,end_ind),
           width=match$1[2],
           str_ind_2=match$1[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind),
           match$2=caml_string_get(str,str_ind_3),
           switcher=match$2 - 45 | 0,
           switch$1=0;
          if(12 < switcher >>> 0)
           if(17 === switcher)
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _p6_=[0,s,width,0],
             _p7_=str_ind_3 + 1 | 0,
             formatting_lit$0=_p6_,
             next_ind=_p7_;
           else
            switch$1 = 1;
          else
           if(1 < switcher - 1 >>> 0)
            {var
              match$3=parse_integer(str_ind_3,end_ind),
              offset=match$3[2],
              str_ind_4=match$3[1],
              str_ind_5=parse_spaces(str_ind_4,end_ind);
             if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
             var
              s$0=sub$0(str,str_ind - 2 | 0,(str_ind_5 - str_ind | 0) + 3 | 0),
              _p8_=[0,s$0,width,offset],
              _p9_=str_ind_5 + 1 | 0,
              formatting_lit$0=_p8_,
              next_ind=_p9_}
           else
            switch$1 = 1;
          if(switch$1)throw Not_found}
        catch(_p__)
         {_p__ = caml_wrap_exception(_p__);
          if(_p__ !== Not_found && _p__[1] !== Failure)throw _p__;
          var formatting_lit$0=formatting_lit,next_ind=str_ind}
        var match=parse(next_ind,end_ind),fmt_rest=match[1];
        return [0,[17,formatting_lit$0,fmt_rest]]}
      function parse_magic_size(str_ind,end_ind)
       {try
         {var
           str_ind_1=parse_spaces(str_ind,end_ind),
           match$2=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$2)
           {if(58 > match$2)switch$0 = 1}
          else
           if(45 === match$2)switch$0 = 1;
          if(switch$0)
           {var
             match$3=parse_integer(str_ind_1,end_ind),
             size=match$3[2],
             str_ind_2=match$3[1],
             str_ind_3=parse_spaces(str_ind_2,end_ind);
            if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _p2_=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
          else
           var _p2_=0;
          var _p1_=_p2_}
        catch(_p3_)
         {_p3_ = caml_wrap_exception(_p3_);
          if(_p3_ !== Not_found && _p3_[1] !== Failure)throw _p3_;
          var _p1_=0}
        if(_p1_)
         {var
           match=_p1_[1],
           formatting_lit=match[2],
           next_ind=match[1],
           match$0=parse(next_ind,end_ind),
           fmt_rest=match$0[1];
          return [0,[17,formatting_lit,fmt_rest]]}
        var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
        return [0,[17,_aT_,fmt_rest$0]]}
      function parse_spaces(str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          if(32 !== caml_string_get(str,str_ind$0))return str_ind$0;
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1}}
      function parse_positive(str_ind,end_ind,acc)
       {var str_ind$0=str_ind,acc$0=acc;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind$0);
          if(9 < c - 48 >>> 0)return [0,str_ind$0,acc$0];
          var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
          if(max_string_length < acc$1)
           return caml_call3
                   (failwith_message(_aV_),str,acc$1,max_string_length);
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1}}
      function parse_integer(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(58 > match)return parse_positive(str_ind,end_ind,0)}
        else
         if(45 === match)
          {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
           var c=caml_string_get(str,str_ind + 1 | 0);
           if(9 < c - 48 >>> 0)
            return expected_character(str_ind + 1 | 0,cst_digit,c);
           var
            match$0=parse_positive(str_ind + 1 | 0,end_ind,0),
            n=match$0[2],
            next_ind=match$0[1];
           return [0,next_ind,- n | 0]}
        throw [0,Assert_failure,_aW_]}
      function search_subformat_end(str_ind,end_ind,c)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)
           caml_call3(failwith_message(_aX_),str,c,end_ind);
          var match=caml_string_get(str,str_ind$0);
          if(37 !== match)
           {var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;continue}
          if((str_ind$0 + 1 | 0) === end_ind)
           unexpected_end_of_format(end_ind);
          if(caml_string_get(str,str_ind$0 + 1 | 0) === c)return str_ind$0;
          var match$0=caml_string_get(str,str_ind$0 + 1 | 0);
          if(95 <= match$0)
           {if(123 <= match$0)
             {if(126 > match$0)
               switch(match$0 - 123 | 0)
                {case 0:
                  var
                   sub_end=search_subformat_end(str_ind$0 + 2 | 0,end_ind,125),
                   str_ind$2=sub_end + 2 | 0,
                   str_ind$0=str_ind$2;
                  continue;
                 case 1:break;
                 default:
                  return expected_character
                          (str_ind$0 + 1 | 0,cst_character,125)}}
            else
             if(96 > match$0)
              {if((str_ind$0 + 2 | 0) === end_ind)
                unexpected_end_of_format(end_ind);
               var match$1=caml_string_get(str,str_ind$0 + 2 | 0);
               if(40 === match$1)
                {var
                  sub_end$0=search_subformat_end(str_ind$0 + 3 | 0,end_ind,41),
                  str_ind$3=sub_end$0 + 2 | 0,
                  str_ind$0=str_ind$3;
                 continue}
               if(123 === match$1)
                {var
                  sub_end$1=
                   search_subformat_end(str_ind$0 + 3 | 0,end_ind,125),
                  str_ind$4=sub_end$1 + 2 | 0,
                  str_ind$0=str_ind$4;
                 continue}
               var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
               continue}}
          else
           {if(40 === match$0)
             {var
               sub_end$2=search_subformat_end(str_ind$0 + 2 | 0,end_ind,41),
               str_ind$6=sub_end$2 + 2 | 0,
               str_ind$0=str_ind$6;
              continue}
            if(41 === match$0)
             return expected_character(str_ind$0 + 1 | 0,cst_character$0,41)}
          var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1}}
      function incompatible_flag(pct_ind,str_ind,symb,option)
       {var subfmt=sub$0(str,pct_ind,str_ind - pct_ind | 0);
        return caml_call5
                (failwith_message(_a1_),str,pct_ind,option,symb,subfmt)}
      function compute_int_conv(pct_ind,str_ind,plus,hash,space,symb)
       {var plus$0=plus,hash$0=hash,space$0=space;
        for(;;)
         {var switch$0=0;
          if(plus$0)
           {if(hash$0)
             switch$0 = 1;
            else
             if(! space$0){if(100 === symb)return 1;if(105 === symb)return 4}}
          else
           if(hash$0)
            if(space$0)
             switch$0 = 1;
            else
             {var switcher$0=symb - 88 | 0;
              if(32 < switcher$0 >>> 0)
               switch$0 = 1;
              else
               switch(switcher$0)
                {case 0:return 9;
                 case 12:return 13;
                 case 17:return 14;
                 case 23:return 11;
                 case 29:return 15;
                 case 32:return 7;
                 default:switch$0 = 1}}
           else
            if(space$0)
             {if(100 === symb)return 2;if(105 === symb)return 5}
            else
             {var switcher$1=symb - 88 | 0;
              if(32 >= switcher$1 >>> 0)
               switch(switcher$1)
                {case 0:return 8;
                 case 12:return 0;
                 case 17:return 3;
                 case 23:return 10;
                 case 29:return 12;
                 case 32:return 6
                 }}
          if(switch$0)
           {var switcher=symb - 88 | 0;
            if(32 >= switcher >>> 0)
             switch(switcher)
              {case 0:if(legacy_behavior$0)return 9;break;
               case 23:if(legacy_behavior$0)return 11;break;
               case 32:if(legacy_behavior$0)return 7;break;
               case 12:
               case 17:
               case 29:
                if(! legacy_behavior$0)
                 return incompatible_flag(pct_ind,str_ind,symb,cst$44);
                var hash$0=0;
                continue
               }}
          if(! plus$0)
           {if(! space$0)throw [0,Assert_failure,_aZ_];
            if(! legacy_behavior$0)
             return incompatible_flag(pct_ind,str_ind,symb,cst$43);
            var space$0=0;
            continue}
          if(space$0)
           {if(! legacy_behavior$0)
             return incompatible_flag(pct_ind,str_ind,32,cst$41);
            var space$0=0;
            continue}
          if(! legacy_behavior$0)
           return incompatible_flag(pct_ind,str_ind,symb,cst$42);
          var plus$0=0}}
      return parse(0,caml_ml_string_length(str))}
    function format_of_string_fmtty(str,fmtty)
     {var match=fmt_ebb_of_string(0,str),fmt=match[1];
      try
       {var _pZ_=[0,type_format(fmt,fmtty),str];return _pZ_}
      catch(_p0_)
       {_p0_ = caml_wrap_exception(_p0_);
        if(_p0_ !== Type_mismatch)throw _p0_;
        var _pY_=string_of_fmtty(fmtty);
        return caml_call2(failwith_message(_a2_),str,_pY_)}}
    function format_of_string_format(str,param)
     {var
       str$0=param[2],
       fmt=param[1],
       match=fmt_ebb_of_string(0,str),
       fmt$0=match[1];
      try
       {var _pW_=[0,type_format(fmt$0,fmtty_of_fmt(fmt)),str];return _pW_}
      catch(_pX_)
       {_pX_ = caml_wrap_exception(_pX_);
        if(_pX_ === Type_mismatch)
         return caml_call2(failwith_message(_a3_),str,str$0);
        throw _pX_}}
    var
     CamlinternalFormat=
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
    caml_register_global(796,CamlinternalFormat,"CamlinternalFormat");
    function kfprintf(k,o,param)
     {var fmt=param[1],_pV_=0;
      return make_printf
              (function(acc){output_acc(o,acc);return caml_call1(k,o)},
               _pV_,
               fmt)}
    function kbprintf(k,b,param)
     {var fmt=param[1],_pU_=0;
      return make_printf
              (function(acc){bufput_acc(b,acc);return caml_call1(k,b)},
               _pU_,
               fmt)}
    function ikfprintf(k,oc,param)
     {var fmt=param[1];return make_iprintf(k,oc,fmt)}
    function fprintf(oc,fmt){return kfprintf(function(_pT_){return 0},oc,fmt)}
    function bprintf(b,fmt){return kbprintf(function(_pS_){return 0},b,fmt)}
    function ifprintf(oc,fmt)
     {return ikfprintf(function(_pR_){return 0},oc,fmt)}
    function ibprintf(b,fmt){return ikfprintf(function(_pQ_){return 0},b,fmt)}
    function printf(fmt){return fprintf(stdout,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var buf=create$2(64);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var
     Stdlib_Printf=
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       ibprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ikfprintf,
       ksprintf];
    caml_register_global(797,Stdlib_Printf,"Stdlib__Printf");
    var
     Bad=[248,cst_Stdlib_Arg_Bad,caml_fresh_oo_id(0)],
     Help=[248,cst_Stdlib_Arg_Help,caml_fresh_oo_id(0)],
     Stop=[248,cst_Stdlib_Arg_Stop,caml_fresh_oo_id(0)];
    function assoc3(x,l)
     {var l$0=l;
      for(;;)
       {if(! l$0)throw Not_found;
        var match=l$0[1],y2=match[2],y1=match[1];
        if(caml_equal(y1,x))return y2;
        var l$1=l$0[2],l$0=l$1}}
    function split$1(s)
     {var
       i=index$0(s,61),
       len=caml_ml_string_length(s),
       _pP_=sub$0(s,i + 1 | 0,len - (i + 1 | 0) | 0);
      return [0,sub$0(s,0,i),_pP_]}
    function make_symlist(prefix,sep,suffix,l)
     {if(! l)return cst_none;
      var t=l[2],h=l[1],_pO_=cat(prefix,h);
      return cat
              (fold_left$0(function(x,y){return cat(x,cat(sep,y))},_pO_,t),
               suffix)}
    function help_action(param){throw [0,Stop,_a6_]}
    function add_help(speclist)
     {try
       {assoc3(cst_help$2,speclist);var _pL_=0,_pJ_=_pL_}
      catch(_pN_)
       {_pN_ = caml_wrap_exception(_pN_);
        if(_pN_ !== Not_found)throw _pN_;
        var
         _pJ_=
          [0,[0,cst_help,[0,help_action],cst_Display_this_list_of_optio],0]}
      try
       {assoc3(cst_help$1,speclist);var _pK_=0,add2=_pK_}
      catch(_pM_)
       {_pM_ = caml_wrap_exception(_pM_);
        if(_pM_ !== Not_found)throw _pM_;
        var
         add2=
          [0,
           [0,cst_help$0,[0,help_action],cst_Display_this_list_of_optio$0],
           0]}
      return append(speclist,append(_pJ_,add2))}
    function usage_b(buf,speclist,errmsg)
     {caml_call1(bprintf(buf,_a7_),errmsg);
      var _pG_=add_help(speclist);
      return iter$2
              (function(param)
                {var
                  doc=param[3],
                  spec=param[2],
                  key=param[1],
                  _pH_=0 < caml_ml_string_length(doc)?1:0;
                 if(! _pH_)return _pH_;
                 if(11 !== spec[0])
                  return caml_call2(bprintf(buf,_a4_),key,doc);
                 var l=spec[1],_pI_=make_symlist(cst$48,cst$47,cst$46,l);
                 return caml_call3(bprintf(buf,_a5_),key,_pI_,doc)},
               _pG_)}
    function usage_string(speclist,errmsg)
     {var b=create$2(200);usage_b(b,speclist,errmsg);return contents(b)}
    function usage(speclist,errmsg)
     {var _pF_=usage_string(speclist,errmsg);
      return caml_call1(eprintf(_a8_),_pF_)}
    var current=[0,0];
    function bool_of_string_opt$0(x)
     {try
       {var _pD_=[0,bool_of_string(x)];return _pD_}
      catch(_pE_)
       {_pE_ = caml_wrap_exception(_pE_);
        if(_pE_[1] === Invalid_argument)return 0;
        throw _pE_}}
    function int_of_string_opt$0(x)
     {try
       {var _pB_=[0,caml_int_of_string(x)];return _pB_}
      catch(_pC_)
       {_pC_ = caml_wrap_exception(_pC_);
        if(_pC_[1] === Failure)return 0;
        throw _pC_}}
    function float_of_string_opt(x)
     {try
       {var _pz_=[0,caml_float_of_string(x)];return _pz_}
      catch(_pA_)
       {_pA_ = caml_wrap_exception(_pA_);
        if(_pA_[1] === Failure)return 0;
        throw _pA_}}
    function parse_and_expand_argv_dynamic_
     (allow_expand,current,argv,speclist,anonfun,errmsg)
     {var initpos=current[1];
      function convert_error(error)
       {var
         b=create$2(200),
         progname=
          initpos < argv[1].length - 1
           ?caml_check_bound(argv[1],initpos)[1 + initpos]
           :cst$49;
        switch(error[0])
         {case 0:
           var _py_=error[1];
           if
            (caml_string_notequal(_py_,cst_help$3)
             &&
             caml_string_notequal(_py_,cst_help$4))
            caml_call2(bprintf(b,_a9_),progname,_py_);
           break;
          case 1:
           var expected=error[3],arg=error[2],opt=error[1];
           caml_call4(bprintf(b,_ba_),progname,arg,opt,expected);
           break;
          case 2:var s=error[1];caml_call2(bprintf(b,_bb_),progname,s);break;
          default:var s$0=error[1];caml_call2(bprintf(b,_bc_),progname,s$0)}
        usage_b(b,speclist[1],errmsg);
        if(! caml_equal(error,_a__) && ! caml_equal(error,_a$_))
         return [0,Bad,contents(b)];
        return [0,Help,contents(b)]}
      current[1]++;
      for(;;)
       {if(current[1] >= argv[1].length - 1)return 0;
        try
         {var
           _pp_=current[1],
           s=caml_check_bound(argv[1],_pp_)[1 + _pp_],
           switch$0=0;
          if(1 <= caml_ml_string_length(s) && 45 === caml_string_get(s,0))
           {try
             {var
               follow$1=0,
               _pr_=assoc3(s,speclist[1]),
               follow$0=follow$1,
               action=_pr_}
            catch(_pw_)
             {_pw_ = caml_wrap_exception(_pw_);
              if(_pw_ !== Not_found)throw _pw_;
              try
               {var
                 match=split$1(s),
                 arg=match[2],
                 keyword=match[1],
                 follow=[0,arg],
                 _pq_=assoc3(keyword,speclist[1])}
              catch(_px_)
               {_px_ = caml_wrap_exception(_px_);
                if(_px_ === Not_found)throw [0,Stop,[0,s]];
                throw _px_}
              var follow$0=follow,action=_pq_}
            var
             no_arg$0=
              function(s,follow)
               {function no_arg(param)
                 {if(! follow)return 0;
                  var arg=follow[1];
                  throw [0,Stop,[1,s,arg,cst_no_argument]]}
                return no_arg},
             no_arg=no_arg$0(s,follow$0),
             get_arg$0=
              function(s,follow)
               {function get_arg(param)
                 {if(follow){var arg=follow[1];return arg}
                  if((current[1] + 1 | 0) >= argv[1].length - 1)
                   throw [0,Stop,[2,s]];
                  var _pv_=current[1] + 1 | 0;
                  return caml_check_bound(argv[1],_pv_)[1 + _pv_]}
                return get_arg},
             get_arg=get_arg$0(s,follow$0),
             consume_arg$0=
              function(follow)
               {function consume_arg(param){return follow?0:(current[1]++,0)}
                return consume_arg},
             consume_arg=consume_arg$0(follow$0),
             treat_action$0=
              function(s,no_arg,get_arg,consume_arg)
               {function treat_action(param)
                 {switch(param[0])
                   {case 0:var f=param[1];no_arg(0);return caml_call1(f,0);
                    case 1:
                     var
                      f$0=param[1],
                      arg=get_arg(0),
                      match=bool_of_string_opt$0(arg);
                     if(! match)throw [0,Stop,[1,s,arg,cst_a_boolean]];
                     var s$0=match[1];
                     caml_call1(f$0,s$0);
                     return consume_arg(0);
                    case 2:var r=param[1];no_arg(0);r[1] = 1;return 0;
                    case 3:var r$0=param[1];no_arg(0);r$0[1] = 0;return 0;
                    case 4:
                     var f$1=param[1],arg$0=get_arg(0);
                     caml_call1(f$1,arg$0);
                     return consume_arg(0);
                    case 5:
                     var r$1=param[1];r$1[1] = get_arg(0);return consume_arg(0);
                    case 6:
                     var
                      f$2=param[1],
                      arg$1=get_arg(0),
                      match$0=int_of_string_opt$0(arg$1);
                     if(! match$0)throw [0,Stop,[1,s,arg$1,cst_an_integer]];
                     var x=match$0[1];
                     caml_call1(f$2,x);
                     return consume_arg(0);
                    case 7:
                     var
                      r$2=param[1],
                      arg$2=get_arg(0),
                      match$1=int_of_string_opt$0(arg$2);
                     if(! match$1)throw [0,Stop,[1,s,arg$2,cst_an_integer$0]];
                     var x$0=match$1[1];
                     r$2[1] = x$0;
                     return consume_arg(0);
                    case 8:
                     var
                      f$3=param[1],
                      arg$3=get_arg(0),
                      match$2=float_of_string_opt(arg$3);
                     if(! match$2)throw [0,Stop,[1,s,arg$3,cst_a_float]];
                     var x$1=match$2[1];
                     caml_call1(f$3,x$1);
                     return consume_arg(0);
                    case 9:
                     var
                      r$3=param[1],
                      arg$4=get_arg(0),
                      match$3=float_of_string_opt(arg$4);
                     if(! match$3)throw [0,Stop,[1,s,arg$4,cst_a_float$0]];
                     var x$2=match$3[1];
                     r$3[1] = x$2;
                     return consume_arg(0);
                    case 10:
                     var specs=param[1];
                     no_arg(0);
                     return iter$2(treat_action,specs);
                    case 11:
                     var f$4=param[2],symb=param[1],arg$5=get_arg(0);
                     if(! mem(arg$5,symb))
                      throw [0,
                             Stop,
                             [1,
                              s,
                              arg$5,
                              cat(cst_one_of,make_symlist(cst$52,cst$51,cst$50,symb))]];
                     caml_call1(f$4,arg$5);
                     return consume_arg(0);
                    case 12:
                     var f$5=param[1];
                     no_arg(0);
                     for(;;)
                      {if(current[1] >= (argv[1].length - 1 - 1 | 0))return 0;
                       var _ps_=current[1] + 1 | 0;
                       caml_call1(f$5,caml_check_bound(argv[1],_ps_)[1 + _ps_]);
                       consume_arg(0)}
                    case 13:
                     var f$6=param[1];
                     no_arg(0);
                     var acc=[0,0];
                     for(;;)
                      {if(current[1] >= (argv[1].length - 1 - 1 | 0))
                        return caml_call1(f$6,rev(acc[1]));
                       var _pu_=current[1] + 1 | 0,_pt_=acc[1];
                       acc[1] = [0,caml_check_bound(argv[1],_pu_)[1 + _pu_],_pt_];
                       consume_arg(0)}
                    default:
                     var f$7=param[1];
                     if(1 - allow_expand)
                      throw [0,Invalid_argument,cst_Arg_Expand_is_is_only_allo];
                     var arg$6=get_arg(0),newarg=caml_call1(f$7,arg$6);
                     consume_arg(0);
                     var
                      before=sub$1(argv[1],0,current[1] + 1 | 0),
                      after=
                       sub$1
                        (argv[1],
                         current[1] + 1 | 0,
                         (argv[1].length - 1 - current[1] | 0) - 1 | 0);
                     argv[1]
                     =
                     caml_array_concat([0,before,[0,newarg,[0,after,0]]]);
                     return 0}}
                return treat_action},
             treat_action=treat_action$0(s,no_arg,get_arg,consume_arg);
            treat_action(action);
            switch$0 = 1}
          if(! switch$0)caml_call1(anonfun,s)}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bad){var m=exn[2];throw convert_error([3,m])}
          if(exn[1] !== Stop)throw exn;
          var e=exn[2];
          throw convert_error(e)}
        current[1]++}}
    function parse_and_expand_argv_dynamic
     (current,argv,speclist,anonfun,errmsg)
     {return parse_and_expand_argv_dynamic_
              (1,current,argv,speclist,anonfun,errmsg)}
    function parse_argv_dynamic(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_and_expand_argv_dynamic_
              (0,current$0,[0,argv],speclist,anonfun,errmsg)}
    function parse_argv(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_argv_dynamic
              ([0,current$0],argv,[0,speclist],anonfun,errmsg)}
    function parse(l,f,msg)
     {try
       {var _po_=parse_argv(0,caml_sys_argv(0),l,f,msg);return _po_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_bd_),msg$0);return exit(2)}
        if(exn[1] !== Help)throw exn;
        var msg$1=exn[2];
        caml_call1(printf(_be_),msg$1);
        return exit(0)}}
    function parse_dynamic(l,f,msg)
     {try
       {var _pn_=parse_argv_dynamic(0,caml_sys_argv(0),l,f,msg);return _pn_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_bf_),msg$0);return exit(2)}
        if(exn[1] !== Help)throw exn;
        var msg$1=exn[2];
        caml_call1(printf(_bg_),msg$1);
        return exit(0)}}
    function parse_expand(l,f,msg)
     {try
       {var
         argv=[0,caml_sys_argv(0)],
         spec=[0,l],
         current$0=[0,current[1]],
         _pm_=parse_and_expand_argv_dynamic(current$0,argv,spec,f,msg);
        return _pm_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_bh_),msg$0);return exit(2)}
        if(exn[1] !== Help)throw exn;
        var msg$1=exn[2];
        caml_call1(printf(_bi_),msg$1);
        return exit(0)}}
    function second_word(s)
     {var len=caml_ml_string_length(s);
      function loop(n)
       {var n$0=n;
        for(;;)
         {if(len <= n$0)return len;
          if(32 !== caml_string_get(s,n$0))return n$0;
          var n$1=n$0 + 1 | 0,n$0=n$1}}
      try
       {var n$0=index$0(s,9)}
      catch(_pk_)
       {_pk_ = caml_wrap_exception(_pk_);
        if(_pk_ !== Not_found)throw _pk_;
        try
         {var n=index$0(s,32)}
        catch(_pl_)
         {_pl_ = caml_wrap_exception(_pl_);
          if(_pl_ === Not_found)return len;
          throw _pl_}
        return loop(n + 1 | 0)}
      return loop(n$0 + 1 | 0)}
    function max_arg_len(cur,param)
     {var doc=param[3],spec=param[2],kwd=param[1];
      return 11 === spec[0]
              ?max$1(cur,caml_ml_string_length(kwd))
              :max$1(cur,caml_ml_string_length(kwd) + second_word(doc) | 0)}
    function replace_leading_tab(s)
     {var seen=[0,0];
      return map$6
              (function(c)
                {if(9 === c && ! seen[1]){seen[1] = 1;return 32}return c},
               s)}
    function align(opt,speclist)
     {if(opt)var sth=opt[1],limit=sth;else var limit=max_int;
      var
       completed=add_help(speclist),
       len=fold_left$0(max_arg_len,0,completed),
       len$0=min$1(len,limit);
      return map$4
              (function(ksd)
                {var _pi_=ksd[1],_pj_=ksd[2];
                 if(! caml_string_notequal(ksd[3],cst$53))return ksd;
                 if(11 === _pj_[0])
                  {var
                    msg$0=ksd[3],
                    cutcol$0=second_word(msg$0),
                    spaces$0=make$0(max$1(0,len$0 - cutcol$0 | 0) + 3 | 0,32);
                   return [0,
                           _pi_,
                           _pj_,
                           cat(cst$54,cat(spaces$0,replace_leading_tab(msg$0)))]}
                 var
                  msg=ksd[3],
                  spec=ksd[2],
                  cutcol=second_word(msg),
                  kwd_len=caml_ml_string_length(_pi_),
                  diff=(len$0 - kwd_len | 0) - cutcol | 0;
                 if(0 >= diff)return [0,_pi_,spec,replace_leading_tab(msg)];
                 var
                  spaces=make$0(diff,32),
                  prefix=sub$0(replace_leading_tab(msg),0,cutcol),
                  suffix=
                   sub$0(msg,cutcol,caml_ml_string_length(msg) - cutcol | 0);
                 return [0,_pi_,spec,cat(prefix,cat(spaces,suffix))]},
               completed)}
    function read_aux(trim,sep,file)
     {var ic=open_bin$0(file),buf=create$2(200),words=[0,0];
      function stash(param)
       {var s=contents(buf);
        if(trim)
         {var len=caml_ml_string_length(s),switch$0=0;
          if(0 < len && 13 === caml_string_get(s,len - 1 | 0))
           {var _ph_=sub$0(s,0,len - 1 | 0);switch$0 = 1}
          if(! switch$0)var _ph_=s;
          var word=_ph_}
        else
         var word=s;
        words[1] = [0,word,words[1]];
        return clear$1(buf)}
      try
       {for(;;)
         {var c=caml_ml_input_char(ic);
          if(c === sep)stash(0);else add_char(buf,c)}}
      catch(_pg_)
       {_pg_ = caml_wrap_exception(_pg_);
        if(_pg_ !== End_of_file)throw _pg_;
        if(0 < buf[2])stash(0);
        caml_ml_close_channel(ic);
        return of_list(rev(words[1]))}}
    var _bj_=10,_bk_=1;
    function read_arg(_pf_){return read_aux(_bk_,_bj_,_pf_)}
    var _bl_=0,_bm_=0;
    function read_arg0(_pe_){return read_aux(_bm_,_bl_,_pe_)}
    function write_aux(sep,file,args)
     {var oc=open_bin(file);
      iter$5(function(s){return caml_call2(fprintf(oc,_bn_),s,sep)},args);
      return close(oc)}
    var _bo_=10;
    function write_arg(_pc_,_pd_){return write_aux(_bo_,_pc_,_pd_)}
    var _bp_=0;
    function write_arg0(_pa_,_pb_){return write_aux(_bp_,_pa_,_pb_)}
    var
     Stdlib_Arg=
      [0,
       parse,
       parse_dynamic,
       parse_argv,
       parse_argv_dynamic,
       parse_and_expand_argv_dynamic,
       parse_expand,
       Help,
       Bad,
       usage,
       usage_string,
       align,
       current,
       read_arg,
       read_arg0,
       write_arg,
       write_arg0];
    caml_register_global(798,Stdlib_Arg,"Stdlib__Arg");
    var printers=[0,0];
    function field(x,i)
     {var f=x[1 + i];
      return is_block(f)
              ?caml_obj_tag(f) === 252
                ?caml_call1(sprintf(_bq_),f)
                :caml_obj_tag(f) === 253?to_string(f):cst$55
              :caml_call1(sprintf(_br_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return cst$56;
      var _o__=other_fields(x,i + 1 | 0),_o$_=field(x,i);
      return caml_call2(sprintf(_bs_),_o$_,_o__)}
    function use_printers(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(! param$0)return 0;
          var tl=param$0[2],hd=param$0[1];
          try {var switch$0=0,val=caml_call1(hd,x);switch$0 = 1}catch(_o9_){}
          if(switch$0 && val){var s=val[1];return [0,s]}
          var param$0=tl}}
      return conv(caml_atomic_load(printers))}
    function string_of_extension_constructo(t)
     {if(0 === caml_obj_tag(t))
       {var constructor=t[1][1],match=t.length - 1;
        if(2 < match >>> 0)
         var
          _o5_=other_fields(t,2),
          _o6_=field(t,1),
          _o8_=caml_call2(sprintf(_bt_),_o6_,_o5_);
        else
         switch(match)
          {case 0:var _o8_=cst$57;break;
           case 1:var _o8_=cst$58;break;
           default:var _o7_=field(t,1),_o8_=caml_call1(sprintf(_bu_),_o7_)}
        var match$0=[0,constructor,[0,_o8_]]}
      else
       var match$0=[0,t[1],0];
      var fields_opt=match$0[2],constructor$0=match$0[1];
      if(! fields_opt)return constructor$0;
      var f=fields_opt[1];
      return cat(constructor$0,f)}
    function to_string_default(x)
     {if(x === Out_of_memory)return cst_Out_of_memory;
      if(x === Stack_overflow)return cst_Stack_overflow;
      if(x[1] === Match_failure)
       {var match=x[2],char$0=match[3],line=match[2],file=match[1];
        return caml_call5
                (sprintf(locfmt),
                 file,
                 line,
                 char$0,
                 char$0 + 5 | 0,
                 cst_Pattern_matching_failed)}
      if(x[1] === Assert_failure)
       {var
         match$0=x[2],
         char$1=match$0[3],
         line$0=match$0[2],
         file$0=match$0[1];
        return caml_call5
                (sprintf(locfmt),
                 file$0,
                 line$0,
                 char$1,
                 char$1 + 6 | 0,
                 cst_Assertion_failed)}
      if(x[1] !== Undefined_recursive_module)
       return string_of_extension_constructo(x);
      var match$1=x[2],char$2=match$1[3],line$1=match$1[2],file$1=match$1[1];
      return caml_call5
              (sprintf(locfmt),
               file$1,
               line$1,
               char$2,
               char$2 + 6 | 0,
               cst_Undefined_recursive_module)}
    function to_string$6(e)
     {var match=use_printers(e);
      if(! match)return to_string_default(e);
      var s=match[1];
      return s}
    function print(fct,arg)
     {try
       {var _o4_=caml_call1(fct,arg);return _o4_}
      catch(x)
       {x = caml_wrap_exception(x);
        var _o3_=to_string$6(x);
        caml_call1(eprintf(_bv_),_o3_);
        caml_ml_flush(stderr);
        throw x}}
    function catch$0(fct,arg)
     {try
       {var _o2_=caml_call1(fct,arg);return _o2_}
      catch(x)
       {x = caml_wrap_exception(x);
        caml_ml_flush(stdout);
        var _o1_=to_string$6(x);
        caml_call1(eprintf(_bw_),_o1_);
        return exit(2)}}
    function raw_backtrace_entries(bt){return bt}
    function convert_raw_backtrace(bt)
     {return [0,runtime.caml_convert_raw_backtrace(bt)]}
    function format_backtrace_slot(pos,slot)
     {function info(is_raise)
       {return is_raise
                ?0 === pos?cst_Raised_at:cst_Re_raised_at
                :0 === pos?cst_Raised_by_primitive_operat:cst_Called_from}
      if(0 === slot[0])
       {var
         _oT_=slot[5],
         _oU_=slot[4],
         _oV_=slot[3],
         _oW_=slot[6]?cst_inlined:cst$59,
         _oX_=slot[2],
         _oY_=slot[7],
         _oZ_=info(slot[1]);
        return [0,
                caml_call7(sprintf(_bx_),_oZ_,_oY_,_oX_,_oW_,_oV_,_oU_,_oT_)]}
      if(slot[1])return 0;
      var _o0_=info(0);
      return [0,caml_call1(sprintf(_by_),_o0_)]}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(! backtrace)return fprintf(outchan,_bA_);
      var a=backtrace[1],_oR_=a.length - 1 - 1 | 0,_oQ_=0;
      if(_oR_ >= 0)
       {var i=_oQ_;
        for(;;)
         {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
          if(match){var str=match[1];caml_call1(fprintf(outchan,_bz_),str)}
          var _oS_=i + 1 | 0;
          if(_oR_ !== i){var i=_oS_;continue}
          break}}
      return 0}
    function print_backtrace(outchan)
     {return print_raw_backtrace(outchan,caml_get_exception_raw_backtra(0))}
    function raw_backtrace_to_string(raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(! backtrace)return cst_Program_not_linked_with_g_;
      var a=backtrace[1],b=create$2(1024),_oO_=a.length - 1 - 1 | 0,_oN_=0;
      if(_oO_ >= 0)
       {var i=_oN_;
        for(;;)
         {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
          if(match){var str=match[1];caml_call1(bprintf(b,_bB_),str)}
          var _oP_=i + 1 | 0;
          if(_oO_ !== i){var i=_oP_;continue}
          break}}
      return contents(b)}
    function backtrace_slot_is_raise(param)
     {return 0 === param[0]?param[1]:param[1]}
    function backtrace_slot_is_inline(param){return 0 === param[0]?param[6]:0}
    function backtrace_slot_location(param)
     {return 0 === param[0]?[0,[0,param[2],param[3],param[4],param[5]]]:0}
    function backtrace_slot_defname(param)
     {if(0 === param[0] && caml_string_notequal(param[7],cst$60))
       return [0,param[7]];
      return 0}
    function backtrace_slots(raw_backtrace)
     {var match=convert_raw_backtrace(raw_backtrace);
      if(! match)return 0;
      var backtrace=match[1],i$1=backtrace.length - 1 - 1 | 0,i=i$1;
      for(;;)
       {if(-1 === i)
         var _oM_=0;
        else
         {var
           param=caml_check_bound(backtrace,i)[1 + i],
           _oL_=0 === param[0]?1:0;
          if(! _oL_){var i$0=i - 1 | 0,i=i$0;continue}
          var _oM_=_oL_}
        return _oM_?[0,backtrace]:0}}
    function backtrace_slots_of_raw_entry(entry)
     {return backtrace_slots([0,entry])}
    function raw_backtrace_length(bt){return bt.length - 1}
    function get_backtrace(param)
     {return raw_backtrace_to_string(caml_get_exception_raw_backtra(0))}
    function register_printer(fn)
     {for(;;)
       {var
         old_printers=caml_atomic_load(printers),
         new_printers=[0,fn,old_printers],
         success=caml_atomic_cas(printers,old_printers,new_printers),
         _oK_=1 - success;
        if(_oK_)continue;
        return _oK_}}
    function exn_slot(x){return 0 === caml_obj_tag(x)?x[1]:x}
    function exn_slot_id(x){var slot=exn_slot(x);return slot[2]}
    function exn_slot_name(x){var slot=exn_slot(x);return slot[1]}
    var errors=_bC_.slice();
    function default_uncaught_exception_han(exn,raw_backtrace)
     {var _oI_=to_string$6(exn);
      caml_call1(eprintf(_bD_),_oI_);
      print_raw_backtrace(stderr,raw_backtrace);
      var status=runtime.caml_ml_debug_info_status(0);
      if(status < 0)
       {var _oJ_=abs(status);
        prerr_endline(caml_check_bound(errors,_oJ_)[1 + _oJ_])}
      return caml_ml_flush(stderr)}
    var uncaught_exception_handler=[0,default_uncaught_exception_han];
    function set_uncaught_exception_handler(fn)
     {uncaught_exception_handler[1] = fn;return 0}
    var empty_backtrace=[0];
    function handle_uncaught_exception(exn,debugger_in_use)
     {try
       {try
         {var
           raw_backtrace=
            debugger_in_use?empty_backtrace:caml_get_exception_raw_backtra(0);
          try {do_at_exit(0)}catch(_oH_){}
          try
           {var
             _oD_=caml_call2(uncaught_exception_handler[1],exn,raw_backtrace),
             _oC_=_oD_}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            var
             raw_backtrace$0=caml_get_exception_raw_backtra(0),
             _oA_=to_string$6(exn);
            caml_call1(eprintf(_bE_),_oA_);
            print_raw_backtrace(stderr,raw_backtrace);
            var _oB_=to_string$6(exn$0);
            caml_call1(eprintf(_bF_),_oB_);
            print_raw_backtrace(stderr,raw_backtrace$0);
            var _oC_=caml_ml_flush(stderr)}
          var _oE_=_oC_}
        catch(_oG_)
         {_oG_ = caml_wrap_exception(_oG_);
          if(_oG_ !== Out_of_memory)throw _oG_;
          var _oE_=prerr_endline(cst_Fatal_error_out_of_memory_)}
        return _oE_}
      catch(_oF_){return 0}}
    caml_register_named_value
     (caml_string_of_jsbytes("Printexc.handle_uncaught_exception"),
      handle_uncaught_exception);
    function _bG_(_oz_){return runtime.caml_raw_backtrace_next_slot(_oz_)}
    function _bH_(_oy_){return runtime.caml_convert_raw_backtrace_slot(_oy_)}
    function _bI_(_ox_,_ow_)
     {return runtime.caml_raw_backtrace_slot(_ox_,_ow_)}
    var
     _bJ_=
      [0,
       backtrace_slot_is_raise,
       backtrace_slot_is_inline,
       backtrace_slot_location,
       backtrace_slot_defname,
       format_backtrace_slot];
    function _bK_(_ov_){return caml_get_exception_raw_backtra(_ov_)}
    function _bL_(_ou_){return runtime.caml_backtrace_status(_ou_)}
    var
     Stdlib_Printexc=
      [0,
       to_string$6,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       function(_ot_){return runtime.caml_record_backtrace(_ot_)},
       _bL_,
       register_printer,
       use_printers,
       raw_backtrace_entries,
       _bK_,
       print_raw_backtrace,
       raw_backtrace_to_string,
       default_uncaught_exception_han,
       set_uncaught_exception_handler,
       backtrace_slots,
       backtrace_slots_of_raw_entry,
       _bJ_,
       raw_backtrace_length,
       _bI_,
       _bH_,
       _bG_,
       exn_slot_id,
       exn_slot_name,
       string_of_extension_constructo];
    caml_register_global(799,Stdlib_Printexc,"Stdlib__Printexc");
    function const$0(c,param){return c}
    function flip(f,x,y){return caml_call2(f,y,x)}
    function negate(p,v){return 1 - caml_call1(p,v)}
    var
     Finally_raised=
      [248,cst_Stdlib_Fun_Finally_raised,caml_fresh_oo_id(0)];
    register_printer
     (function(param)
       {if(param[1] !== Finally_raised)return 0;
        var exn=param[2];
        return [0,cat(cst_Fun_Finally_raised,to_string$6(exn))]});
    function protect(finally$0,work)
     {function finally_no_exn(param)
       {try
         {var _os_=caml_call1(finally$0,0);return _os_}
        catch(e)
         {e = caml_wrap_exception(e);
          var bt=caml_get_exception_raw_backtra(0),exn=[0,Finally_raised,e];
          caml_restore_raw_backtrace(exn,bt);
          throw exn}}
      try
       {var result=caml_call1(work,0)}
      catch(work_exn)
       {work_exn = caml_wrap_exception(work_exn);
        var work_bt=caml_get_exception_raw_backtra(0);
        finally_no_exn(0);
        caml_restore_raw_backtrace(work_exn,work_bt);
        throw work_exn}
      finally_no_exn(0);
      return result}
    var Stdlib_Fun=[0,const$0,flip,negate,protect,Finally_raised];
    caml_register_global(800,Stdlib_Fun,"Stdlib__Fun");
    function eventlog_pause(param){return 0}
    function eventlog_resume(param){return 0}
    function print_stat(c)
     {var st=runtime.caml_gc_stat(0),_oa_=st[4];
      caml_call1(fprintf(c,_bM_),_oa_);
      var _ob_=st[5];
      caml_call1(fprintf(c,_bN_),_ob_);
      var _oc_=st[14];
      caml_call1(fprintf(c,_bO_),_oc_);
      var _od_=st[17];
      caml_call1(fprintf(c,_bP_),_od_);
      fprintf(c,_bQ_);
      var
       _oe_=st[1],
       l1=caml_ml_string_length(caml_call1(sprintf(_bR_),_oe_)),
       _of_=st[1];
      caml_call2(fprintf(c,_bS_),l1,_of_);
      var _og_=st[2];
      caml_call2(fprintf(c,_bT_),l1,_og_);
      var _oh_=st[3];
      caml_call2(fprintf(c,_bU_),l1,_oh_);
      fprintf(c,_bV_);
      var
       _oi_=st[15],
       l2=caml_ml_string_length(caml_call1(sprintf(_bW_),_oi_)),
       _oj_=st[15];
      caml_call2(fprintf(c,_bX_),l2,_oj_);
      var _ok_=st[6];
      caml_call2(fprintf(c,_bY_),l2,_ok_);
      var _ol_=st[8];
      caml_call2(fprintf(c,_bZ_),l2,_ol_);
      var _om_=st[10];
      caml_call2(fprintf(c,_b0_),l2,_om_);
      var _on_=st[12];
      caml_call2(fprintf(c,_b1_),l2,_on_);
      var _oo_=st[13];
      caml_call2(fprintf(c,_b2_),l2,_oo_);
      fprintf(c,_b3_);
      var _op_=st[9];
      caml_call1(fprintf(c,_b4_),_op_);
      var _oq_=st[11];
      caml_call1(fprintf(c,_b5_),_oq_);
      var _or_=st[7];
      return caml_call1(fprintf(c,_b6_),_or_)}
    function allocated_bytes(param)
     {var
       match=runtime.caml_gc_counters(0),
       ma=match[3],
       pro=match[2],
       mi=match[1];
      return (mi + ma - pro) * 4}
    function create_alarm(f){return [0,1]}
    function delete_alarm(a){return set(a,0)}
    function _b7_(param){return 0}
    function _b8_(param){return 0}
    function _b9_(param){return 0}
    function _b__(param){return 0}
    var null_tracker=[0,function(param){return 0},_b__,_b9_,_b8_,_b7_];
    function start(sampling_rate,opt,tracker)
     {if(opt)
       var sth=opt[1],callstack_size=sth;
      else
       var callstack_size=max_int;
      return runtime.caml_memprof_start(sampling_rate,callstack_size,tracker)}
    var _b$_=[0,null_tracker,start,runtime.caml_memprof_stop];
    function _ca_(_n$_){return runtime.caml_final_release(_n$_)}
    var
     _cb_=runtime.caml_final_register_called_without_value,
     Stdlib_Gc=
      [0,
       print_stat,
       allocated_bytes,
       function(_n__,_n9_){return runtime.caml_final_register(_n__,_n9_)},
       _cb_,
       _ca_,
       create_alarm,
       delete_alarm,
       eventlog_pause,
       eventlog_resume,
       _b$_];
    caml_register_global(801,Stdlib_Gc,"Stdlib__Gc");
    function string(str)
     {return caml_md5_string(str,0,caml_ml_string_length(str))}
    function bytes(b){return string(caml_string_of_bytes(b))}
    function substring(str,ofs,len)
     {if
       (0 <= ofs && 0 <= len && (caml_ml_string_length(str) - len | 0) >= ofs)
       return caml_md5_string(str,ofs,len);
      return invalid_arg(cst_Digest_substring)}
    function subbytes(b,ofs,len)
     {return substring(caml_string_of_bytes(b),ofs,len)}
    function file(filename)
     {var ic=open_bin$0(filename);
      try
       {var d=runtime.caml_md5_chan(ic,-1)}
      catch(e){e = caml_wrap_exception(e);caml_ml_close_channel(ic);throw e}
      caml_ml_close_channel(ic);
      return d}
    function output$0(chan,digest){return output_string(chan,digest)}
    function input$0(chan){return really_input_string(chan,16)}
    function char_hex(n){var _n8_=10 <= n?87:48;return n + _n8_ | 0}
    function to_hex(d)
     {if(16 !== caml_ml_string_length(d))invalid_arg(cst_Digest_to_hex);
      var result=caml_create_bytes(32),i=0;
      for(;;)
       {var x=caml_string_get(d,i);
        caml_bytes_unsafe_set(result,i * 2 | 0,char_hex(x >>> 4 | 0));
        caml_bytes_unsafe_set(result,(i * 2 | 0) + 1 | 0,char_hex(x & 15));
        var _n7_=i + 1 | 0;
        if(15 === i)return caml_string_of_bytes(result);
        var i=_n7_}}
    function from_hex(s)
     {if(32 !== caml_ml_string_length(s))invalid_arg(cst_Digest_from_hex);
      function digit(c)
       {if(65 <= c)
         {if(97 <= c)
           {if(103 > c)return (c - 97 | 0) + 10 | 0}
          else
           if(71 > c)return (c - 65 | 0) + 10 | 0}
        else
         if(9 >= c - 48 >>> 0)return c - 48 | 0;
        throw [0,Invalid_argument,cst_Digest_from_hex$0]}
      var result=caml_create_bytes(16),i=0;
      for(;;)
       {var i$0=2 * i | 0,_n5_=digit(caml_string_get(s,i$0 + 1 | 0));
        caml_bytes_set
         (result,i,chr((digit(caml_string_get(s,i$0)) << 4) + _n5_ | 0));
        var _n6_=i + 1 | 0;
        if(15 === i)return caml_string_of_bytes(result);
        var i=_n6_}}
    var
     Stdlib_Digest=
      [0,
       compare$9,
       equal$9,
       string,
       bytes,
       substring,
       subbytes,
       file,
       output$0,
       input$0,
       to_hex,
       from_hex];
    caml_register_global(802,Stdlib_Digest,"Stdlib__Digest");
    var
     float32=0,
     float64=1,
     int8_signed=2,
     int8_unsigned=3,
     int16_signed=4,
     int16_unsigned=5,
     int32=6,
     int64=7,
     int$0=8,
     nativeint=9,
     complex32=10,
     complex64=11,
     char$0=12;
    function kind_size_in_bytes(param)
     {switch(param)
       {case 0:return 4;
        case 1:return 8;
        case 2:return 1;
        case 3:return 1;
        case 4:return 2;
        case 5:return 2;
        case 6:return 4;
        case 7:return 8;
        case 8:return 4;
        case 9:return 4;
        case 10:return 8;
        case 11:return 16;
        default:return 1}}
    var c_layout=0,fortran_layout=1;
    function cloop(arr,idx,f,col,max)
     {if(col === idx.length - 1)
       return caml_ba_set_generic(arr,idx,caml_call1(f,idx));
      var _n3_=caml_check_bound(max,col)[1 + col] - 1 | 0,_n2_=0;
      if(_n3_ >= 0)
       {var j=_n2_;
        for(;;)
         {caml_check_bound(idx,col)[1 + col] = j;
          cloop(arr,idx,f,col + 1 | 0,max);
          var _n4_=j + 1 | 0;
          if(_n3_ !== j){var j=_n4_;continue}
          break}}
      return 0}
    function floop(arr,idx,f,col,max)
     {if(0 > col)return caml_ba_set_generic(arr,idx,caml_call1(f,idx));
      var _n0_=caml_check_bound(max,col)[1 + col],_nZ_=1;
      if(_n0_ >= 1)
       {var j=_nZ_;
        for(;;)
         {caml_check_bound(idx,col)[1 + col] = j;
          floop(arr,idx,f,col - 1 | 0,max);
          var _n1_=j + 1 | 0;
          if(_n0_ !== j){var j=_n1_;continue}
          break}}
      return 0}
    function init$5(kind,layout,dims,f)
     {var arr=caml_ba_create(kind,layout,dims),dlen=dims.length - 1;
      return layout
              ?(floop(arr,caml_make_vect(dlen,1),f,dlen - 1 | 0,dims),arr)
              :(cloop(arr,caml_make_vect(dlen,0),f,0,dims),arr)}
    function dims(a)
     {var n=caml_ba_num_dims(a),d=caml_make_vect(n,0),_nW_=n - 1 | 0,_nV_=0;
      if(_nW_ >= 0)
       {var i=_nV_;
        for(;;)
         {var _nX_=runtime.caml_ba_dim(a,i);
          caml_check_bound(d,i)[1 + i] = _nX_;
          var _nY_=i + 1 | 0;
          if(_nW_ !== i){var i=_nY_;continue}
          break}}
      return d}
    function size_in_bytes(arr)
     {var _nU_=fold_left$3(caml_mul,1,dims(arr));
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_nU_)}
    function create$3(kind,layout){return caml_ba_create(kind,layout,[0])}
    function get$2(arr){return runtime.caml_ba_get_generic(arr,[0])}
    function set$2(arr)
     {var _nS_=[0];
      return function(_nT_){return caml_ba_set_generic(arr,_nS_,_nT_)}}
    function size_in_bytes$0(arr)
     {return kind_size_in_bytes(caml_ba_kind(arr))}
    function of_value(kind,layout,v)
     {var a=create$3(kind,layout);caml_call1(set$2(a),v);return a}
    function create$4(kind,layout,dim)
     {return caml_ba_create(kind,layout,[0,dim])}
    function size_in_bytes$1(arr)
     {var _nR_=caml_ba_dim_1(arr);
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_nR_)}
    function slice(a,n)
     {var match=runtime.caml_ba_layout(a);
      return match?caml_ba_slice(a,[0,n]):caml_ba_slice(a,[0,n])}
    function init$6(kind,layout,dim,f)
     {var arr=create$4(kind,layout,dim);
      if(layout)
       {var _nP_=1;
        if(dim >= 1)
         {var i$0=_nP_;
          for(;;)
           {caml_ba_set_1(arr,i$0,caml_call1(f,i$0));
            var _nQ_=i$0 + 1 | 0;
            if(dim !== i$0){var i$0=_nQ_;continue}
            break}}
        return arr}
      var _nN_=dim - 1 | 0,_nM_=0;
      if(_nN_ >= 0)
       {var i=_nM_;
        for(;;)
         {caml_ba_set_1(arr,i,caml_call1(f,i));
          var _nO_=i + 1 | 0;
          if(_nN_ !== i){var i=_nO_;continue}
          break}}
      return arr}
    function of_array(kind,layout,data)
     {var
       ba=create$4(kind,layout,data.length - 1),
       ofs=layout?1:0,
       _nK_=data.length - 1 - 1 | 0,
       _nJ_=0;
      if(_nK_ >= 0)
       {var i=_nJ_;
        for(;;)
         {caml_ba_set_1(ba,i + ofs | 0,caml_check_bound(data,i)[1 + i]);
          var _nL_=i + 1 | 0;
          if(_nK_ !== i){var i=_nL_;continue}
          break}}
      return ba}
    function create$5(kind,layout,dim1,dim2)
     {return caml_ba_create(kind,layout,[0,dim1,dim2])}
    function size_in_bytes$2(arr)
     {var _nH_=caml_ba_dim_2(arr),_nI_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_nI_),_nH_)}
    function slice_left(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right(a,n){return caml_ba_slice(a,[0,n])}
    function init$7(kind,layout,dim1,dim2,f)
     {var arr=create$5(kind,layout,dim1,dim2);
      if(layout)
       {var _nD_=1;
        if(dim2 >= 1)
         {var j$0=_nD_;
          for(;;)
           {var _nE_=1;
            if(dim1 >= 1)
             {var i$0=_nE_;
              for(;;)
               {caml_ba_set_2(arr,i$0,j$0,caml_call2(f,i$0,j$0));
                var _nG_=i$0 + 1 | 0;
                if(dim1 !== i$0){var i$0=_nG_;continue}
                break}}
            var _nF_=j$0 + 1 | 0;
            if(dim2 !== j$0){var j$0=_nF_;continue}
            break}}
        return arr}
      var _ny_=dim1 - 1 | 0,_nx_=0;
      if(_ny_ >= 0)
       {var i=_nx_;
        for(;;)
         {var _nA_=dim2 - 1 | 0,_nz_=0;
          if(_nA_ >= 0)
           {var j=_nz_;
            for(;;)
             {caml_ba_set_2(arr,i,j,caml_call2(f,i,j));
              var _nC_=j + 1 | 0;
              if(_nA_ !== j){var j=_nC_;continue}
              break}}
          var _nB_=i + 1 | 0;
          if(_ny_ !== i){var i=_nB_;continue}
          break}}
      return arr}
    function of_array$0(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       ba=create$5(kind,layout,dim1,dim2),
       ofs=layout?1:0,
       _ns_=dim1 - 1 | 0,
       _nr_=0;
      if(_ns_ >= 0)
       {var i=_nr_;
        for(;;)
         {var row=caml_check_bound(data,i)[1 + i];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array2_of_array_n);
          var _nu_=dim2 - 1 | 0,_nt_=0;
          if(_nu_ >= 0)
           {var j=_nt_;
            for(;;)
             {caml_ba_set_2
               (ba,i + ofs | 0,j + ofs | 0,caml_check_bound(row,j)[1 + j]);
              var _nw_=j + 1 | 0;
              if(_nu_ !== j){var j=_nw_;continue}
              break}}
          var _nv_=i + 1 | 0;
          if(_ns_ !== i){var i=_nv_;continue}
          break}}
      return ba}
    function create$6(kind,layout,dim1,dim2,dim3)
     {return caml_ba_create(kind,layout,[0,dim1,dim2,dim3])}
    function size_in_bytes$3(arr)
     {var
       _no_=runtime.caml_ba_dim_3(arr),
       _np_=caml_ba_dim_2(arr),
       _nq_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul
                (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_nq_),_np_),
               _no_)}
    function slice_left_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_right_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_left_2(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right_2(a,n){return caml_ba_slice(a,[0,n])}
    function init$8(kind,layout,dim1,dim2,dim3,f)
     {var arr=create$6(kind,layout,dim1,dim2,dim3);
      if(layout)
       {var _ni_=1;
        if(dim3 >= 1)
         {var k$0=_ni_;
          for(;;)
           {var _nj_=1;
            if(dim2 >= 1)
             {var j$0=_nj_;
              for(;;)
               {var _nl_=1;
                if(dim1 >= 1)
                 {var i$0=_nl_;
                  for(;;)
                   {caml_ba_set_3(arr,i$0,j$0,k$0,caml_call3(f,i$0,j$0,k$0));
                    var _nn_=i$0 + 1 | 0;
                    if(dim1 !== i$0){var i$0=_nn_;continue}
                    break}}
                var _nm_=j$0 + 1 | 0;
                if(dim2 !== j$0){var j$0=_nm_;continue}
                break}}
            var _nk_=k$0 + 1 | 0;
            if(dim3 !== k$0){var k$0=_nk_;continue}
            break}}
        return arr}
      var _na_=dim1 - 1 | 0,_m$_=0;
      if(_na_ >= 0)
       {var i=_m$_;
        for(;;)
         {var _nc_=dim2 - 1 | 0,_nb_=0;
          if(_nc_ >= 0)
           {var j=_nb_;
            for(;;)
             {var _nf_=dim3 - 1 | 0,_ne_=0;
              if(_nf_ >= 0)
               {var k=_ne_;
                for(;;)
                 {caml_ba_set_3(arr,i,j,k,caml_call3(f,i,j,k));
                  var _nh_=k + 1 | 0;
                  if(_nf_ !== k){var k=_nh_;continue}
                  break}}
              var _ng_=j + 1 | 0;
              if(_nc_ !== j){var j=_ng_;continue}
              break}}
          var _nd_=i + 1 | 0;
          if(_na_ !== i){var i=_nd_;continue}
          break}}
      return arr}
    function of_array$1(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       dim3=
        0 === dim2
         ?0
         :caml_check_bound(caml_check_bound(data,0)[1],0)[1].length - 1,
       ba=create$6(kind,layout,dim1,dim2,dim3),
       ofs=layout?1:0,
       _m3_=dim1 - 1 | 0,
       _m2_=0;
      if(_m3_ >= 0)
       {var i=_m2_;
        for(;;)
         {var row=caml_check_bound(data,i)[1 + i];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array3_of_array_n);
          var _m5_=dim2 - 1 | 0,_m4_=0;
          if(_m5_ >= 0)
           {var j=_m4_;
            for(;;)
             {var col=caml_check_bound(row,j)[1 + j];
              if(col.length - 1 !== dim3)
               invalid_arg(cst_Bigarray_Array3_of_array_n$0);
              var _m8_=dim3 - 1 | 0,_m7_=0;
              if(_m8_ >= 0)
               {var k=_m7_;
                for(;;)
                 {caml_ba_set_3
                   (ba,
                    i + ofs | 0,
                    j + ofs | 0,
                    k + ofs | 0,
                    caml_check_bound(col,k)[1 + k]);
                  var _m__=k + 1 | 0;
                  if(_m8_ !== k){var k=_m__;continue}
                  break}}
              var _m9_=j + 1 | 0;
              if(_m5_ !== j){var j=_m9_;continue}
              break}}
          var _m6_=i + 1 | 0;
          if(_m3_ !== i){var i=_m6_;continue}
          break}}
      return ba}
    function array0_of_genarray(a)
     {return 0 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array0_of_genarra)}
    function array1_of_genarray(a)
     {return 1 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array1_of_genarra)}
    function array2_of_genarray(a)
     {return 2 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array2_of_genarra)}
    function array3_of_genarray(a)
     {return 3 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array3_of_genarra)}
    function reshape_0(a){return caml_ba_reshape(a,[0])}
    function reshape_1(a,dim1){return caml_ba_reshape(a,[0,dim1])}
    function reshape_2(a,dim1,dim2){return caml_ba_reshape(a,[0,dim1,dim2])}
    function reshape_3(a,dim1,dim2,dim3)
     {return caml_ba_reshape(a,[0,dim1,dim2,dim3])}
    var
     _cc_=
      [0,create$4,init$6,caml_ba_change_layout,size_in_bytes$1,slice,of_array],
     Stdlib_Bigarray=
      [0,
       float32,
       float64,
       complex32,
       complex64,
       int8_signed,
       int8_unsigned,
       int16_signed,
       int16_unsigned,
       int$0,
       int32,
       int64,
       nativeint,
       char$0,
       kind_size_in_bytes,
       c_layout,
       fortran_layout,
       [0,init$5,dims,size_in_bytes],
       [0,
        create$3,
        of_value,
        caml_ba_change_layout,
        size_in_bytes$0,
        get$2,
        set$2,
        of_value],
       _cc_,
       [0,
        create$5,
        init$7,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$6,
        init$8,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
    caml_register_global(803,Stdlib_Bigarray,"Stdlib__Bigarray");
    function create$7(param){return caml_call3(_cc_[1],7,0,4)}
    function set$3(s,i1,i2,i3,i4)
     {caml_ba_set_1(s,0,runtime.caml_int64_or(i1,_cd_));
      caml_ba_set_1(s,1,i2);
      var i3$0=caml_notequal(i3,_ce_)?i3:_ch_;
      caml_ba_set_1(s,2,i3$0);
      var i4$0=caml_notequal(i4,_cf_)?i4:_cg_;
      return caml_ba_set_1(s,3,i4$0)}
    function mk(i1,i2,i3,i4){var s=create$7(0);set$3(s,i1,i2,i3,i4);return s}
    function copy$4(s){var s$0=create$7(0);caml_ba_blit(s,s$0);return s$0}
    function reinit(s,seed)
     {var
       n=seed.length - 1,
       b=caml_create_bytes((n * 8 | 0) + 1 | 0),
       _mX_=n - 1 | 0,
       _mW_=0;
      if(_mX_ >= 0)
       {var i=_mW_;
        for(;;)
         {caml_bytes_set64
           (b,i * 8 | 0,caml_int64_of_int32(caml_check_bound(seed,i)[1 + i]));
          var _m1_=i + 1 | 0;
          if(_mX_ !== i){var i=_m1_;continue}
          break}}
      caml_bytes_set(b,n * 8 | 0,1);
      var d1=bytes(b);
      caml_bytes_set(b,n * 8 | 0,2);
      var
       d2=bytes(b),
       _mY_=get_int64_le$0(d2,8),
       _mZ_=get_int64_le$0(d2,0),
       _m0_=get_int64_le$0(d1,8);
      return set$3(s,get_int64_le$0(d1,0),_m0_,_mZ_,_mY_)}
    function make$4(seed){var s=create$7(0);reinit(s,seed);return s}
    function make_self_init(param){return make$4(caml_sys_random_seed(0))}
    function bits(s)
     {return caml_int64_to_int32(caml_lxm_next(s)) & 1073741823}
    function intaux(s,n)
     {for(;;)
       {var r=bits(s),v=caml_mod(r,n);
        if(((1073741823 - n | 0) + 1 | 0) < (r - v | 0))continue;
        return v}}
    function int$1(s,bound)
     {if(1073741823 >= bound && 0 < bound)return intaux(s,bound);
      return invalid_arg(cst_Random_int)}
    function full_int(s,bound)
     {if(0 >= bound)return invalid_arg(cst_Random_full_int);
      if(1073741823 >= bound)return intaux(s,bound);
      for(;;)
       {var
         r=caml_int64_to_int32(caml_lxm_next(s)) & 2147483647,
         v=caml_mod(r,bound);
        if(((2147483647 - bound | 0) + 1 | 0) < (r - v | 0))continue;
        return v}}
    function bits32(s){return caml_int64_to_int32(caml_lxm_next(s))}
    function int32$0(s,bound)
     {if(caml_lessequal(bound,0))return invalid_arg(cst_Random_int32);
      for(;;)
       {var r=bits32(s) >>> 1 | 0,v=caml_mod(r,bound);
        if(caml_greaterthan(r - v | 0,(2147483647 - bound | 0) + 1 | 0))
         continue;
        return v}}
    function bits64(s){return caml_lxm_next(s)}
    function int64$0(s,bound)
     {if(caml_lessequal(bound,_cj_))return invalid_arg(cst_Random_int64);
      for(;;)
       {var
         r=caml_int64_shift_right_unsigne(caml_lxm_next(s),1),
         v=runtime.caml_int64_mod(r,bound);
        if
         (caml_greaterthan
           (caml_int64_sub(r,v),
            caml_int64_add(caml_int64_sub(max_int$2,bound),_ci_)))
         continue;
        return v}}
    function nativebits(s){return bits32(s)}
    function nativeint$0(s,bound){return int32$0(s,bound)}
    function float$0(s,bound)
     {for(;;)
       {var b=caml_lxm_next(s),n=caml_int64_shift_right_unsigne(b,11);
        if(caml_notequal(n,_ck_))
         return runtime.caml_int64_to_float(n)
                *
                1.11022302462515654e-16
                *
                bound}}
    function bool(s){return caml_lessthan(caml_lxm_next(s),_cl_)}
    function split$2(s)
     {var
       i1=caml_lxm_next(s),
       i2=caml_lxm_next(s),
       i3=caml_lxm_next(s),
       i4=caml_lxm_next(s);
      return mk(i1,i2,i3,i4)}
    function mk_default(param){return mk(_cp_,_co_,_cn_,_cm_)}
    var random_key=caml_call2(_ac_[1],[0,split$2],mk_default);
    function bits$0(param){return bits(caml_call1(_ac_[2],random_key))}
    function int$2(bound){return int$1(caml_call1(_ac_[2],random_key),bound)}
    function full_int$0(bound)
     {return full_int(caml_call1(_ac_[2],random_key),bound)}
    function int32$1(bound)
     {return int32$0(caml_call1(_ac_[2],random_key),bound)}
    function nativeint$1(bound)
     {return nativeint$0(caml_call1(_ac_[2],random_key),bound)}
    function int64$1(bound)
     {return int64$0(caml_call1(_ac_[2],random_key),bound)}
    function float$1(scale)
     {return float$0(caml_call1(_ac_[2],random_key),scale)}
    function bool$0(param){return bool(caml_call1(_ac_[2],random_key))}
    function bits32$0(param){return bits32(caml_call1(_ac_[2],random_key))}
    function bits64$0(param)
     {return caml_lxm_next(caml_call1(_ac_[2],random_key))}
    function nativebits$0(param)
     {return nativebits(caml_call1(_ac_[2],random_key))}
    function full_init(seed)
     {return reinit(caml_call1(_ac_[2],random_key),seed)}
    function init$9(seed){return full_init([0,seed])}
    function self_init(param){return full_init(caml_sys_random_seed(0))}
    function split$3(param){return split$2(caml_call1(_ac_[2],random_key))}
    function get_state(param){return copy$4(caml_call1(_ac_[2],random_key))}
    function set_state(s)
     {return caml_ba_blit(s,caml_call1(_ac_[2],random_key))}
    var
     _cq_=
      [0,
       make$4,
       make_self_init,
       copy$4,
       bits,
       int$1,
       full_int,
       int32$0,
       nativeint$0,
       int64$0,
       float$0,
       bool,
       bits32,
       bits64,
       nativebits,
       split$2],
     Stdlib_Random=
      [0,
       init$9,
       full_init,
       self_init,
       bits$0,
       int$2,
       full_int$0,
       int32$1,
       nativeint$1,
       int64$1,
       float$1,
       bool$0,
       bits32$0,
       bits64$0,
       nativebits$0,
       _cq_,
       get_state,
       set_state,
       split$3];
    caml_register_global(804,Stdlib_Random,"Stdlib__Random");
    function ongoing_traversal(h)
     {var _mU_=h.length - 1 < 4?1:0,_mV_=_mU_ || (h[4] < 0?1:0);return _mV_}
    function flip_ongoing_traversal(h){h[4] = - h[4] | 0;return 0}
    try
     {var _dx_=caml_sys_getenv(cst_OCAMLRUNPARAM),params=_dx_}
    catch(_mS_)
     {_mS_ = caml_wrap_exception(_mS_);
      if(_mS_ !== Not_found)throw _mS_;
      try
       {var _dw_=caml_sys_getenv(cst_CAMLRUNPARAM),_cr_=_dw_}
      catch(_mT_)
       {_mT_ = caml_wrap_exception(_mT_);
        if(_mT_ !== Not_found)throw _mT_;
        var _cr_=cst$61}
      var params=_cr_}
    var
     randomized_default=contains$0(params,82),
     randomized=[0,randomized_default];
    function randomize(param){return set(randomized,1)}
    function is_randomized(param){return caml_atomic_load(randomized)}
    var prng_key=caml_call2(_ac_[1],0,_cq_[2]);
    function power_2_above(x,n)
     {var x$0=x;
      for(;;)
       {if(n <= x$0)return x$0;
        if(max_array_length < (x$0 * 2 | 0))return x$0;
        var x$1=x$0 * 2 | 0,x$0=x$1}}
    function create$8(opt,initial_size)
     {if(opt)
       var sth=opt[1],random=sth;
      else
       var random=caml_atomic_load(randomized);
      var s=power_2_above(16,initial_size);
      if(random)
       var _mR_=caml_call1(_ac_[2],prng_key),seed=caml_call1(_cq_[4],_mR_);
      else
       var seed=0;
      return [0,0,caml_make_vect(s,0),seed,s]}
    function clear$2(h)
     {var _mQ_=0 < h[1]?1:0;
      return _mQ_?(h[1] = 0,fill$0(h[2],0,h[2].length - 1,0)):_mQ_}
    function reset$0(h)
     {var len=h[2].length - 1;
      if(4 <= h.length - 1 && len !== abs(h[4]))
       {h[1] = 0;h[2] = caml_make_vect(abs(h[4]),0);return 0}
      return clear$2(h)}
    function copy_bucketlist(param)
     {if(! param)return 0;
      var
       key=param[1],
       data=param[2],
       next=param[3],
       prec$0=[0,key,data,next],
       prec=prec$0,
       param$0=next;
      for(;;)
       {if(! param$0)return prec$0;
        var
         key$0=param$0[1],
         data$0=param$0[2],
         next$0=param$0[3],
         r=[0,key$0,data$0,next$0];
        prec[3] = r;
        var prec=r,param$0=next$0}}
    function copy$5(init)
     {var _mN_=init[4],_mO_=init[3],_mP_=map$7(copy_bucketlist,init[2]);
      return [0,init[1],_mP_,_mO_,_mN_]}
    function length$5(h){return h[1]}
    function insert_all_buckets(indexfun,inplace,odata,ndata)
     {var
       nsize=ndata.length - 1,
       ndata_tail=caml_make_vect(nsize,0),
       _mH_=odata.length - 1 - 1 | 0,
       _mG_=0;
      if(_mH_ >= 0)
       {var i$0=_mG_;
        a:
        for(;;)
         {var cell$1=caml_check_bound(odata,i$0)[1 + i$0],cell=cell$1;
          for(;;)
           {if(cell)
             {var
               key=cell[1],
               data=cell[2],
               next=cell[3],
               cell$0=inplace?cell:[0,key,data,0],
               nidx=caml_call1(indexfun,key),
               match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
              if(match)
               match[3] = cell$0;
              else
               caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
              caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
              var cell=next;
              continue}
            var _mM_=i$0 + 1 | 0;
            if(_mH_ !== i$0){var i$0=_mM_;continue a}
            break}
          break}}
      if(inplace)
       {var _mJ_=nsize - 1 | 0,_mI_=0;
        if(_mJ_ >= 0)
         {var i=_mI_;
          for(;;)
           {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
            if(match$0)match$0[3] = 0;
            var _mL_=i + 1 | 0;
            if(_mJ_ !== i){var i=_mL_;continue}
            break}}
        var _mK_=0}
      else
       var _mK_=inplace;
      return _mK_}
    function resize$0(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize=osize * 2 | 0,
       _mF_=nsize < max_array_length?1:0;
      if(! _mF_)return _mF_;
      var ndata=caml_make_vect(nsize,0),inplace=1 - ongoing_traversal(h);
      h[2] = ndata;
      return insert_all_buckets(caml_call1(indexfun,h),inplace,odata,ndata)}
    function iter$9(f,h)
     {function do_bucket(param)
       {var param$0=param;
        for(;;)
         {if(! param$0)return 0;
          var key=param$0[1],data=param$0[2],next=param$0[3];
          caml_call2(f,key,data);
          var param$0=next}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],_mB_=d.length - 1 - 1 | 0,_mA_=0;
        if(_mB_ >= 0)
         {var i=_mA_;
          for(;;)
           {do_bucket(caml_check_bound(d,i)[1 + i]);
            var _mE_=i + 1 | 0;
            if(_mB_ !== i){var i=_mE_;continue}
            break}}
        var _mC_=1 - old_trav,_mD_=_mC_?flip_ongoing_traversal(h):_mC_;
        return _mD_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function filter_map_inplace_bucket(f,h,i,prec,slot)
     {var prec$0=prec,slot$0=slot;
      for(;;)
       {if(! slot$0)
         return prec$0
                 ?(prec$0[3] = 0,0)
                 :(caml_check_bound(h[2],i)[1 + i] = 0,0);
        var
         key=slot$0[1],
         data=slot$0[2],
         next=slot$0[3],
         match=caml_call2(f,key,data);
        if(! match){h[1] = h[1] - 1 | 0;var slot$0=next;continue}
        var data$0=match[1];
        if(prec$0)
         prec$0[3] = slot$0;
        else
         caml_check_bound(h[2],i)[1 + i] = slot$0;
        slot$0[2] = data$0;
        var prec$0=slot$0,slot$0=next}}
    function filter_map_inplace(f,h)
     {var d=h[2],old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var _mw_=d.length - 1 - 1 | 0,_mv_=0;
        if(_mw_ >= 0)
         {var i=_mv_;
          for(;;)
           {filter_map_inplace_bucket(f,h,i,0,caml_check_bound(h[2],i)[1 + i]);
            var _mz_=i + 1 | 0;
            if(_mw_ !== i){var i=_mz_;continue}
            break}}
        var _mx_=1 - old_trav,_my_=_mx_?flip_ongoing_traversal(h):_mx_;
        return _my_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function fold$4(f,h,init)
     {function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
        for(;;)
         {if(! b$0)return accu$0;
          var
           key=b$0[1],
           data=b$0[2],
           next=b$0[3],
           accu$1=caml_call3(f,key,data,accu$0),
           b$0=next,
           accu$0=accu$1}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],accu=[0,init],_mr_=d.length - 1 - 1 | 0,_mq_=0;
        if(_mr_ >= 0)
         {var i=_mq_;
          for(;;)
           {var _mt_=accu[1];
            accu[1] = do_bucket(caml_check_bound(d,i)[1 + i],_mt_);
            var _mu_=i + 1 | 0;
            if(_mr_ !== i){var i=_mu_;continue}
            break}}
        if(1 - old_trav)flip_ongoing_traversal(h);
        var _ms_=accu[1];
        return _ms_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function bucket_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(! param$0)return accu$0;
        var
         param$1=param$0[3],
         accu$1=accu$0 + 1 | 0,
         accu$0=accu$1,
         param$0=param$1}}
    function stats(h)
     {var
       _mm_=h[2],
       _mn_=0,
       mbl=
        fold_left$3
         (function(m,b){return max$1(m,bucket_length(0,b))},_mn_,_mm_),
       histo=caml_make_vect(mbl + 1 | 0,0),
       _mo_=h[2];
      iter$5
       (function(b)
         {var
           l=bucket_length(0,b),
           _mp_=caml_check_bound(histo,l)[1 + l] + 1 | 0;
          caml_check_bound(histo,l)[1 + l] = _mp_;
          return 0},
        _mo_);
      return [0,h[1],h[2].length - 1,mbl,histo]}
    function to_seq$9(tbl)
     {var tbl_data=tbl[2];
      function aux(i,buck,param)
       {var i$0=i,buck$0=buck;
        for(;;)
         {if(buck$0)
           {var key=buck$0[1],data=buck$0[2],next=buck$0[3];
            return [0,[0,key,data],function(_ml_){return aux(i$0,next,_ml_)}]}
          if(i$0 === tbl_data.length - 1)return 0;
          var
           buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           buck$0=buck$1}}
      var _mi_=0,_mj_=0;
      return function(_mk_){return aux(_mj_,_mi_,_mk_)}}
    function to_seq_keys(m)
     {var _me_=to_seq$9(m);
      function _mf_(_mh_){return _mh_[1]}
      return function(_mg_){return map$1(_mf_,_me_,_mg_)}}
    function to_seq_values(m)
     {var _ma_=to_seq$9(m);
      function _mb_(_md_){return _md_[2]}
      return function(_mc_){return map$1(_mb_,_ma_,_mc_)}}
    function MakeSeeded(H)
     {function key_index(h,key)
       {var _l$_=h[2].length - 1 - 1 | 0;
        return caml_call2(H[2],h[3],key) & _l$_}
      function add(h,key,data)
       {var
         i=key_index(h,key),
         bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _l__=h[2].length - 1 << 1 < h[1]?1:0;
        return _l__?resize$0(key_index,h):_l__}
      function remove(h,key)
       {var
         i=key_index(h,key),
         c$0=caml_check_bound(h[2],i)[1 + i],
         prec=0,
         c=c$0;
        for(;;)
         {if(! c)return 0;
          var k=c[1],next=c[3];
          if(caml_call2(H[1],k,key))
           {h[1] = h[1] - 1 | 0;
            return prec
                    ?(prec[3] = next,0)
                    :(caml_check_bound(h[2],i)[1 + i] = next,0)}
          var prec=c,c=next}}
      function find(h,key)
       {var _l9_=key_index(h,key),match=caml_check_bound(h[2],_l9_)[1 + _l9_];
        if(! match)throw Not_found;
        var k1=match[1],d1=match[2],next1=match[3];
        if(caml_call2(H[1],key,k1))return d1;
        if(! next1)throw Not_found;
        var k2=next1[1],d2=next1[2],next2=next1[3];
        if(caml_call2(H[1],key,k2))return d2;
        if(! next2)throw Not_found;
        var k3=next2[1],d3=next2[2],next3=next2[3];
        if(caml_call2(H[1],key,k3))return d3;
        var param=next3;
        for(;;)
         {if(! param)throw Not_found;
          var k=param[1],data=param[2],next=param[3];
          if(caml_call2(H[1],key,k))return data;
          var param=next}}
      function find_opt(h,key)
       {var _l8_=key_index(h,key),match=caml_check_bound(h[2],_l8_)[1 + _l8_];
        if(! match)return 0;
        var k1=match[1],d1=match[2],next1=match[3];
        if(caml_call2(H[1],key,k1))return [0,d1];
        if(! next1)return 0;
        var k2=next1[1],d2=next1[2],next2=next1[3];
        if(caml_call2(H[1],key,k2))return [0,d2];
        if(! next2)return 0;
        var k3=next2[1],d3=next2[2],next3=next2[3];
        if(caml_call2(H[1],key,k3))return [0,d3];
        var param=next3;
        for(;;)
         {if(! param)return 0;
          var k=param[1],data=param[2],next=param[3];
          if(caml_call2(H[1],key,k))return [0,data];
          var param=next}}
      function find_all(h,key)
       {function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(! param$0)return 0;
            var k=param$0[1],d=param$0[2],next=param$0[3];
            if(caml_call2(H[1],k,key))return [0,d,find_in_bucket(next)];
            var param$0=next}}
        var _l7_=key_index(h,key);
        return find_in_bucket(caml_check_bound(h[2],_l7_)[1 + _l7_])}
      function replace(h,key,data)
       {var
         i=key_index(h,key),
         param$0=caml_check_bound(h[2],i)[1 + i],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3];
            if(! caml_call2(H[1],k,key)){var param=next;continue}
            param[1] = key;
            param[2] = data;
            var _l4_=0}
          else
           var _l4_=1;
          if(_l4_)
           {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
            h[1] = h[1] + 1 | 0;
            var _l5_=h[2].length - 1 << 1 < h[1]?1:0;
            if(_l5_)return resize$0(key_index,h);
            var _l6_=_l5_}
          else
           var _l6_=_l4_;
          return _l6_}}
      function mem(h,key)
       {var
         _l3_=key_index(h,key),
         param$0=caml_check_bound(h[2],_l3_)[1 + _l3_],
         param=param$0;
        for(;;)
         {if(! param)return 0;
          var k=param[1],next=param[3],_l2_=caml_call2(H[1],k,key);
          if(_l2_)return _l2_;
          var param=next}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create$8(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create$8,
              clear$2,
              reset$0,
              copy$5,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$9,
              filter_map_inplace,
              fold$4,
              length$5,
              stats,
              to_seq$9,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function Make$0(H)
     {var equal=H[1];
      function seeded_hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded([0,equal,seeded_hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       _l1_=include[1];
      function create(sz){return caml_call2(_l1_,_cs_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function hash$2(x){return caml_hash(10,100,0,x)}
    function hash_param(n1,n2,x){return caml_hash(n1,n2,0,x)}
    function seeded_hash$0(seed,x){return caml_hash(10,100,seed,x)}
    function key_index(h,key)
     {return 4 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :invalid_arg(cst_Hashtbl_unsupported_hash_t)}
    function add$0(h,key,data)
     {var
       i=key_index(h,key),
       bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
      caml_check_bound(h[2],i)[1 + i] = bucket;
      h[1] = h[1] + 1 | 0;
      var _l0_=h[2].length - 1 << 1 < h[1]?1:0;
      return _l0_?resize$0(key_index,h):_l0_}
    function remove(h,key)
     {var i=key_index(h,key),c$0=caml_check_bound(h[2],i)[1 + i],prec=0,c=c$0;
      for(;;)
       {if(! c)return 0;
        var k=c[1],next=c[3];
        if(0 === caml_compare(k,key))
         {h[1] = h[1] - 1 | 0;
          return prec
                  ?(prec[3] = next,0)
                  :(caml_check_bound(h[2],i)[1 + i] = next,0)}
        var prec=c,c=next}}
    function find$1(h,key)
     {var _lZ_=key_index(h,key),match=caml_check_bound(h[2],_lZ_)[1 + _lZ_];
      if(! match)throw Not_found;
      var k1=match[1],d1=match[2],next1=match[3];
      if(0 === caml_compare(key,k1))return d1;
      if(! next1)throw Not_found;
      var k2=next1[1],d2=next1[2],next2=next1[3];
      if(0 === caml_compare(key,k2))return d2;
      if(! next2)throw Not_found;
      var k3=next2[1],d3=next2[2],next3=next2[3];
      if(0 === caml_compare(key,k3))return d3;
      var param=next3;
      for(;;)
       {if(! param)throw Not_found;
        var k=param[1],data=param[2],next=param[3];
        if(0 === caml_compare(key,k))return data;
        var param=next}}
    function find_opt$1(h,key)
     {var _lY_=key_index(h,key),match=caml_check_bound(h[2],_lY_)[1 + _lY_];
      if(! match)return 0;
      var k1=match[1],d1=match[2],next1=match[3];
      if(0 === caml_compare(key,k1))return [0,d1];
      if(! next1)return 0;
      var k2=next1[1],d2=next1[2],next2=next1[3];
      if(0 === caml_compare(key,k2))return [0,d2];
      if(! next2)return 0;
      var k3=next2[1],d3=next2[2],next3=next2[3];
      if(0 === caml_compare(key,k3))return [0,d3];
      var param=next3;
      for(;;)
       {if(! param)return 0;
        var k=param[1],data=param[2],next=param[3];
        if(0 === caml_compare(key,k))return [0,data];
        var param=next}}
    function find_all$0(h,key)
     {function find_in_bucket(param)
       {var param$0=param;
        for(;;)
         {if(! param$0)return 0;
          var k=param$0[1],data=param$0[2],next=param$0[3];
          if(0 === caml_compare(k,key))return [0,data,find_in_bucket(next)];
          var param$0=next}}
      var _lX_=key_index(h,key);
      return find_in_bucket(caml_check_bound(h[2],_lX_)[1 + _lX_])}
    function replace(h,key,data)
     {var
       i=key_index(h,key),
       param$0=caml_check_bound(h[2],i)[1 + i],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3];
          if(0 !== caml_compare(k,key)){var param=next;continue}
          param[1] = key;
          param[2] = data;
          var _lU_=0}
        else
         var _lU_=1;
        if(_lU_)
         {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
          h[1] = h[1] + 1 | 0;
          var _lV_=h[2].length - 1 << 1 < h[1]?1:0;
          if(_lV_)return resize$0(key_index,h);
          var _lW_=_lV_}
        else
         var _lW_=_lU_;
        return _lW_}}
    function mem$2(h,key)
     {var
       _lT_=key_index(h,key),
       param$0=caml_check_bound(h[2],_lT_)[1 + _lT_],
       param=param$0;
      for(;;)
       {if(! param)return 0;
        var k=param[1],next=param[3],_lS_=0 === caml_compare(k,key)?1:0;
        if(_lS_)return _lS_;
        var param=next}}
    function add_seq$2(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return add$0(tbl,k,v)},
               i)}
    function replace_seq(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return replace(tbl,k,v)},
               i)}
    function of_seq$7(i){var tbl=create$8(0,16);replace_seq(tbl,i);return tbl}
    function rebuild(opt,h)
     {if(opt)
       var sth=opt[1],random=sth;
      else
       var random=caml_atomic_load(randomized);
      var s=power_2_above(16,h[2].length - 1);
      if(random)
       var _lM_=caml_call1(_ac_[2],prng_key),seed=caml_call1(_cq_[4],_lM_);
      else
       var seed=4 <= h.length - 1?h[3]:0;
      var
       _lN_=4 <= h.length - 1?h[4]:s,
       h$0=[0,h[1],caml_make_vect(s,0),seed,_lN_],
       _lO_=h$0[2],
       _lP_=h[2],
       _lQ_=0;
      insert_all_buckets
       (function(_lR_){return key_index(h$0,_lR_)},_lQ_,_lP_,_lO_);
      return h$0}
    var
     Stdlib_Hashtbl=
      [0,
       create$8,
       clear$2,
       reset$0,
       copy$5,
       add$0,
       find$1,
       find_opt$1,
       find_all$0,
       mem$2,
       remove,
       replace,
       iter$9,
       filter_map_inplace,
       fold$4,
       length$5,
       randomize,
       is_randomized,
       rebuild,
       stats,
       to_seq$9,
       to_seq_keys,
       to_seq_values,
       add_seq$2,
       replace_seq,
       of_seq$7,
       Make$0,
       MakeSeeded,
       hash$2,
       seeded_hash$0,
       hash_param,
       caml_hash];
    caml_register_global(805,Stdlib_Hashtbl,"Stdlib__Hashtbl");
    function weak_create(l)
     {var _lK_=0 <= l?1:0,_lL_=_lK_?l <= _o_[15]?1:0:_lK_;
      if(1 - _lL_)invalid_arg(cst_Weak_create);
      return runtime.caml_weak_create(l)}
    function length$6(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset$0(e,o,msg)
     {var _lH_=0 <= o?1:0,_lI_=_lH_?o < length$6(e)?1:0:_lH_,_lJ_=1 - _lI_;
      return _lJ_?invalid_arg(msg):_lJ_}
    function set$4(e,o,x)
     {raise_if_invalid_offset$0(e,o,cst_Weak_set);
      if(! x)return caml_ephe_unset_key(e,o);
      var x$0=x[1];
      return caml_ephe_set_key(e,o,x$0)}
    function get$3(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_get);
      return caml_ephe_get_key(e,o)}
    function get_copy(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_get_copy);
      return caml_ephe_get_key_copy(e,o)}
    function check$0(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_check);
      return caml_ephe_check_key(e,o)}
    function blit$4(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        (length$6(e1) - l | 0)
        >=
        o1
        &&
        0
        <=
        o2
        &&
        (length$6(e2) - l | 0)
        >=
        o2)
       {var _lF_=0 !== l?1:0,_lG_=_lF_?caml_ephe_blit_key(e1,o1,e2,o2,l):_lF_;
        return _lG_}
      return invalid_arg(cst_Weak_blit)}
    function fill$2(ar,ofs,len,x)
     {if(0 <= ofs && 0 <= len && (length$6(ar) - len | 0) >= ofs)
       {var _lD_=(ofs + len | 0) - 1 | 0;
        if(_lD_ >= ofs)
         {var i=ofs;
          for(;;)
           {set$4(ar,i,x);
            var _lE_=i + 1 | 0;
            if(_lD_ !== i){var i=_lE_;continue}
            break}}
        return 0}
      throw [0,Invalid_argument,cst_Weak_fill]}
    function Make$1(H)
     {var emptybucket=weak_create(0);
      function get_index(t,h){return caml_mod(h & 2147483647,t[1].length - 1)}
      var limit=7;
      function create(sz)
       {var
         sz$0=7 <= sz?sz:7,
         sz$1=max_array_length < sz$0?max_array_length:sz$0;
        return [0,
                caml_make_vect(sz$1,emptybucket),
                caml_make_vect(sz$1,[0]),
                limit,
                0,
                0]}
      function clear(t)
       {var _lB_=t[1].length - 1 - 1 | 0,_lA_=0;
        if(_lB_ >= 0)
         {var i=_lA_;
          for(;;)
           {caml_check_bound(t[1],i)[1 + i] = emptybucket;
            caml_check_bound(t[2],i)[1 + i] = [0];
            var _lC_=i + 1 | 0;
            if(_lB_ !== i){var i=_lC_;continue}
            break}}
        t[3] = limit;
        t[4] = 0;
        return 0}
      function fold(f,t,init)
       {var _lz_=t[1],i=0;
        return fold_right$2
                (function(b,accu$1)
                  {var i$0=i,accu=accu$1;
                   for(;;)
                    {if(length$6(b) <= i$0)return accu;
                     var match=get$3(b,i$0);
                     if(match)
                      {var
                        v=match[1],
                        accu$0=caml_call2(f,v,accu),
                        i$1=i$0 + 1 | 0,
                        i$0=i$1,
                        accu=accu$0;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2}},
                 _lz_,
                 init)}
      function iter(f,t)
       {var _ly_=t[1],i=0;
        return iter$5
                (function(b)
                  {var i$0=i;
                   for(;;)
                    {if(length$6(b) <= i$0)return 0;
                     var match=get$3(b,i$0);
                     if(match)
                      {var v=match[1];
                       caml_call1(f,v);
                       var i$1=i$0 + 1 | 0,i$0=i$1;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2}},
                 _ly_)}
      function count_bucket(i,b,accu)
       {var i$0=i,accu$0=accu;
        for(;;)
         {if(length$6(b) <= i$0)return accu$0;
          var
           _lx_=check$0(b,i$0)?1:0,
           accu$1=accu$0 + _lx_ | 0,
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           accu$0=accu$1}}
      function count(t)
       {var _ls_=0,_lt_=t[1],_lu_=0;
        return fold_right$2
                (function(_lv_,_lw_){return count_bucket(_lu_,_lv_,_lw_)},
                 _lt_,
                 _ls_)}
      function add_aux(t,setter,d,h,index)
       {var
         bucket$0=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$6(bucket$0),
         i$3=0;
        for(;;)
         {if(sz > i$3)
           {if(check$0(bucket$0,i$3)){var i$5=i$3 + 1 | 0,i$3=i$5;continue}
            caml_call3(setter,bucket$0,i$3,d);
            caml_check_bound(hashes,i$3)[1 + i$3] = h;
            return 0}
          var
           newsz=
            min$1(((3 * sz | 0) / 2 | 0) + 3 | 0,max_array_length - 2 | 0);
          if(newsz <= sz)failwith(cst_Weak_Make_hash_bucket_cann);
          var
           newbucket$0=weak_create(newsz),
           newhashes=caml_make_vect(newsz,0);
          blit$4(bucket$0,0,newbucket$0,0,sz);
          blit$1(hashes,0,newhashes,0,sz);
          caml_call3(setter,newbucket$0,sz,d);
          caml_check_bound(newhashes,sz)[1 + sz] = h;
          caml_check_bound(t[1],index)[1 + index] = newbucket$0;
          caml_check_bound(t[2],index)[1 + index] = newhashes;
          var _lo_=sz <= t[3]?1:0,_lp_=_lo_?t[3] < newsz?1:0:_lo_;
          if(_lp_)
           {t[4] = t[4] + 1 | 0;
            var i$4=0;
            for(;;)
             {var
               _le_=t[5],
               bucket=caml_check_bound(t[1],_le_)[1 + _le_],
               _lf_=t[5],
               hbucket=caml_check_bound(t[2],_lf_)[1 + _lf_],
               n=length$6(bucket),
               prev_len=(((n - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
               live=count_bucket(0,bucket,0);
              if(live <= prev_len)
               {var j$2=length$6(bucket) - 1 | 0,i$0=0,j=j$2;
                for(;;)
                 {if(prev_len <= j)
                   {if(check$0(bucket,i$0))
                     {var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                    if(check$0(bucket,j))
                     {blit$4(bucket,j,bucket,i$0,1);
                      var _lg_=caml_check_bound(hbucket,j)[1 + j];
                      caml_check_bound(hbucket,i$0)[1 + i$0] = _lg_;
                      var j$0=j - 1 | 0,i$2=i$0 + 1 | 0,i$0=i$2,j=j$0;
                      continue}
                    var j$1=j - 1 | 0,j=j$1;
                    continue}
                  if(0 === prev_len)
                   {var _lh_=t[5];
                    caml_check_bound(t[1],_lh_)[1 + _lh_] = emptybucket;
                    var _li_=t[5];
                    caml_check_bound(t[2],_li_)[1 + _li_] = [0]}
                  else
                   {var newbucket=weak_create(prev_len);
                    blit$4(bucket,0,newbucket,0,prev_len);
                    var _ll_=t[5];
                    caml_check_bound(t[1],_ll_)[1 + _ll_] = newbucket;
                    var _lm_=sub$1(hbucket,0,prev_len),_ln_=t[5];
                    caml_check_bound(t[2],_ln_)[1 + _ln_] = _lm_}
                  var _lj_=t[3] < n?1:0,_lk_=_lj_?prev_len <= t[3]?1:0:_lj_;
                  if(_lk_)t[4] = t[4] - 1 | 0;
                  break}}
              t[5] = caml_mod(t[5] + 1 | 0,t[1].length - 1);
              var _lr_=i$4 + 1 | 0;
              if(2 !== i$4){var i$4=_lr_;continue}
              break}}
          var _lq_=((t[1].length - 1) / 2 | 0) < t[4]?1:0;
          if(! _lq_)return _lq_;
          var
           n$0=t[1].length - 1,
           newlen=min$1(((3 * n$0 | 0) / 2 | 0) + 3 | 0,max_array_length);
          if(n$0 < newlen)
           {var newt=create(newlen),_ld_=t[1],i=0;
            iteri$3
             (function(j,ob)
               {var i$0=i;
                for(;;)
                 {if(length$6(ob) <= i$0)return 0;
                  var match=check$0(ob,i$0);
                  if(match)
                   {var
                     oh=caml_check_bound(t[2],j)[1 + j],
                     setter$0=
                      function(i)
                       {function setter(nb,ni,param){return blit$4(ob,i,nb,ni,1)}
                        return setter},
                     setter=setter$0(i$0),
                     h=caml_check_bound(oh,i$0)[1 + i$0];
                    add_aux(newt,setter,0,h,get_index(newt,h));
                    var i$1=i$0 + 1 | 0,i$0=i$1;
                    continue}
                  var i$2=i$0 + 1 | 0,i$0=i$2}},
              _ld_);
            t[1] = newt[1];
            t[2] = newt[2];
            t[3] = newt[3];
            t[4] = newt[4];
            t[5] = caml_mod(t[5],newt[1].length - 1);
            return 0}
          t[3] = max_int;
          t[4] = 0;
          return 0}}
      function add(t,d)
       {var h=caml_call1(H[2],d);
        return add_aux(t,set$4,[0,d],h,get_index(t,h))}
      function find_or(t,d,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$6(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return caml_call2(ifnotfound,h,index);
          if(h !== caml_check_bound(hashes,i)[1 + i])
           {var i$2=i + 1 | 0,i=i$2;continue}
          var match=get_copy(bucket,i);
          if(match)
           {var v=match[1];
            if(caml_call2(H[1],v,d))
             {var match$0=get$3(bucket,i);
              if(match$0){var v$0=match$0[1];return v$0}
              var i$0=i + 1 | 0,i=i$0;
              continue}}
          var i$1=i + 1 | 0,i=i$1}}
      function merge(t,d)
       {return find_or
                (t,
                 d,
                 function(h,index){add_aux(t,set$4,[0,d],h,index);return d})}
      function find(t,d)
       {return find_or(t,d,function(h,index){throw Not_found})}
      function find_opt(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$6(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return 0;
          if(h !== caml_check_bound(hashes,i)[1 + i])
           {var i$2=i + 1 | 0,i=i$2;continue}
          var match=get_copy(bucket,i);
          if(match)
           {var v=match[1];
            if(caml_call2(H[1],v,d))
             {var v$0=get$3(bucket,i);
              if(v$0)return v$0;
              var i$0=i + 1 | 0,i=i$0;
              continue}}
          var i$1=i + 1 | 0,i=i$1}}
      function find_shadow(t,d,iffound,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$6(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return ifnotfound;
          if(h !== caml_check_bound(hashes,i)[1 + i])
           {var i$1=i + 1 | 0,i=i$1;continue}
          var match=get_copy(bucket,i);
          if(match)
           {var v=match[1];
            if(caml_call2(H[1],v,d))return caml_call2(iffound,bucket,i)}
          var i$0=i + 1 | 0,i=i$0}}
      function remove(t,d)
       {var _lc_=0;
        return find_shadow(t,d,function(w,i){return set$4(w,i,0)},_lc_)}
      function mem(t,d)
       {var _lb_=0;return find_shadow(t,d,function(w,i){return 1},_lb_)}
      function find_all(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$6(bucket),
         i=0,
         accu=0;
        for(;;)
         {if(sz <= i)return accu;
          if(h !== caml_check_bound(hashes,i)[1 + i])
           {var i$3=i + 1 | 0,i=i$3;continue}
          var match=get_copy(bucket,i);
          if(match)
           {var v=match[1];
            if(caml_call2(H[1],v,d))
             {var match$0=get$3(bucket,i);
              if(match$0)
               {var
                 v$0=match$0[1],
                 accu$0=[0,v$0,accu],
                 i$0=i + 1 | 0,
                 i=i$0,
                 accu=accu$0;
                continue}
              var i$1=i + 1 | 0,i=i$1;
              continue}}
          var i$2=i + 1 | 0,i=i$2}}
      function stats(t)
       {var len=t[1].length - 1,lens=map$7(length$6,t[1]);
        sort(caml_int_compare,lens);
        var
         _k5_=0,
         totlen=
          fold_left$3(function(_la_,_k$_){return _la_ + _k$_ | 0},_k5_,lens),
         _k6_=len - 1 | 0,
         _k8_=len / 2 | 0,
         _k7_=caml_check_bound(lens,_k6_)[1 + _k6_],
         _k9_=caml_check_bound(lens,_k8_)[1 + _k8_],
         _k__=caml_check_bound(lens,0)[1];
        return [0,len,count(t),totlen,_k__,_k9_,_k7_]}
      return [0,
              create,
              clear,
              merge,
              add,
              remove,
              find,
              find_opt,
              find_all,
              mem,
              iter,
              fold,
              count,
              stats]}
    var
     Stdlib_Weak=
      [0,
       weak_create,
       length$6,
       set$4,
       get$3,
       get_copy,
       check$0,
       fill$2,
       blit$4,
       Make$1];
    caml_register_global(806,Stdlib_Weak,"Stdlib__Weak");
    function id$0(x){return x}
    var
     String_tag=[248,cst_Stdlib_Format_String_tag,caml_fresh_oo_id(0)],
     size=0,
     unknown=-1;
    function pp_enqueue(state,token)
     {state[13] = state[13] + token[3] | 0;return add(token,state[28])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function format_pp_text(state,size,text)
     {state[9] = state[9] - size | 0;
      pp_output_string(state,text);
      state[11] = 0;
      return 0}
    function format_string(state,s)
     {var _k4_=caml_string_notequal(s,cst$62);
      return _k4_?format_pp_text(state,caml_ml_string_length(s),s):_k4_}
    function break_new_line(state,param,width)
     {var after=param[3],offset=param[2],before=param[1];
      format_string(state,before);
      pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min$1(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      caml_call1(state[21],state[10]);
      return format_string(state,after)}
    function break_line(state,width){return break_new_line(state,_ct_,width)}
    function break_same_line(state,param)
     {var after=param[3],width=param[2],before=param[1];
      format_string(state,before);
      state[9] = state[9] - width | 0;
      caml_call1(state[20],width);
      return format_string(state,after)}
    function format_pp_token(state,size$0,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var match$3=top_opt(state[3]);
          if(! match$3)return 0;
          var
           match$4=match$3[1],
           tabs=match$4[1],
           add_tab=
            function(n,ls)
             {if(! ls)return [0,n,0];
              var l=ls[2],x=ls[1];
              return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]};
          tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
          return 0;
         case 1:pop_opt(state[2]);return 0;
         case 2:pop_opt(state[3]);return 0;
         case 3:
          var match$5=top_opt(state[2]);
          if(! match$5)return pp_output_newline(state);
          var match$6=match$5[1],width$0=match$6[2];
          return break_line(state,width$0);
         case 4:
          var _k1_=state[10] !== (state[6] - state[9] | 0)?1:0;
          if(! _k1_)return _k1_;
          var match$1=take_opt(state[28]);
          if(! match$1)return 0;
          var match$2=match$1[1],size=match$2[1],length=match$2[3];
          state[12] = state[12] - length | 0;
          state[9] = state[9] + size | 0;
          return 0;
         default:
          var match$7=pop_opt(state[5]);
          if(! match$7)return 0;
          var tag_name=match$7[1],marker=caml_call1(state[25],tag_name);
          return pp_output_string(state,marker)}
      switch(param[0])
       {case 0:var s=param[1];return format_pp_text(state,size$0,s);
        case 1:
         var
          breaks=param[2],
          fits=param[1],
          off=breaks[2],
          before=breaks[1],
          match$8=top_opt(state[2]);
         if(! match$8)return 0;
         var match$9=match$8[1],width$1=match$9[2],box_type$0=match$9[1];
         switch(box_type$0)
          {case 0:return break_same_line(state,fits);
           case 1:return break_new_line(state,breaks,width$1);
           case 2:return break_new_line(state,breaks,width$1);
           case 3:
            return state[9] < (size$0 + caml_ml_string_length(before) | 0)
                    ?break_new_line(state,breaks,width$1)
                    :break_same_line(state,fits);
           case 4:
            return state[11]
                    ?break_same_line(state,fits)
                    :state[9] < (size$0 + caml_ml_string_length(before) | 0)
                      ?break_new_line(state,breaks,width$1)
                      :((state[6] - width$1 | 0) + off | 0) < state[10]
                        ?break_new_line(state,breaks,width$1)
                        :break_same_line(state,fits);
           default:return break_same_line(state,fits)}
        case 2:
         var
          off$0=param[2],
          n=param[1],
          insertion_point=state[6] - state[9] | 0,
          match$10=top_opt(state[3]);
         if(! match$10)return 0;
         var match$11=match$10[1],tabs$0=match$11[1],_k2_=tabs$0[1];
         if(_k2_)
          {var first=_k2_[1],param$0=tabs$0[1];
           for(;;)
            {if(param$0)
              {var tail=param$0[2],head=param$0[1];
               if(insertion_point > head){var param$0=tail;continue}
               var _k3_=head}
             else
              var _k3_=first;
             var tab=_k3_;
             break}}
         else
          var tab=insertion_point;
         var offset=tab - insertion_point | 0;
         return 0 <= offset
                 ?break_same_line(state,[0,cst$64,offset + n | 0,cst$63])
                 :break_new_line
                   (state,[0,cst$66,tab + off$0 | 0,cst$65],state[6]);
        case 3:
         var
          ty=param[2],
          off$1=param[1],
          insertion_point$0=state[6] - state[9] | 0;
         if(state[8] < insertion_point$0)
          {var match=top_opt(state[2]);
           if(match)
            {var match$0=match[1],width=match$0[2],box_type=match$0[1];
             if(state[9] < width && 3 >= box_type - 1 >>> 0)
              break_line(state,width)}
           else
            pp_output_newline(state)}
         var
          width$2=state[9] - off$1 | 0,
          box_type$1=1 === ty?1:state[9] < size$0?ty:5;
         return push([0,box_type$1,width$2],state[2]);
        case 4:var tbox=param[1];return push(tbox,state[3]);
        default:
         var tag_name$0=param[1],marker$0=caml_call1(state[24],tag_name$0);
         pp_output_string(state,marker$0);
         return push(tag_name$0,state[5])}}
    function advance_left(state)
     {for(;;)
       {var match=peek_opt(state[28]);
        if(! match)return 0;
        var
         match$0=match[1],
         size=match$0[1],
         length=match$0[3],
         token=match$0[2],
         pending_count=state[13] - state[12] | 0,
         _kZ_=0 <= size?1:0,
         _k0_=_kZ_ || (state[9] <= pending_count?1:0);
        if(! _k0_)return _k0_;
        take$0(state[28]);
        var size$0=0 <= size?size:pp_infinity;
        format_pp_token(state,size$0,token);
        state[12] = length + state[12] | 0}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    function initialize_scan_stack(stack)
     {clear(stack);
      var queue_elem=[0,unknown,_cu_,0];
      return push([0,-1,queue_elem],stack)}
    function set_size(state,ty)
     {var match=top_opt(state[1]);
      if(! match)return 0;
      var
       match$0=match[1],
       queue_elem=match$0[2],
       left_total=match$0[1],
       _kU_=queue_elem[1];
      if(left_total < state[12])return initialize_scan_stack(state[1]);
      var _kV_=queue_elem[2];
      if(typeof _kV_ !== "number")
       switch(_kV_[0])
        {case 3:
          var
           _kX_=1 - ty,
           _kY_=
            _kX_
             ?(queue_elem[1] = state[13] + _kU_ | 0,pop_opt(state[1]),0)
             :_kX_;
          return _kY_;
         case 1:
         case 2:
          var
           _kW_=
            ty?(queue_elem[1] = state[13] + _kU_ | 0,pop_opt(state[1]),0):ty;
          return _kW_
         }
      return 0}
    function scan_push(state,b,token)
     {pp_enqueue(state,token);
      if(b)set_size(state,1);
      var elem=[0,state[13],token];
      return push(elem,state[1])}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var size=- state[13] | 0,elem=[0,size,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _kS_=state[14] === state[15]?1:0;
      if(! _kS_)return _kS_;
      var _kT_=state[16];
      return enqueue_string_as(state,caml_ml_string_length(_kT_),_kT_)}
    function pp_close_box(state,param)
     {var _kQ_=1 < state[14]?1:0;
      if(_kQ_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,size,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _kR_=0}
      else
       var _kR_=_kQ_;
      return _kR_}
    function pp_open_stag(state,tag_name)
     {if(state[22]){push(tag_name,state[4]);caml_call1(state[26],tag_name)}
      var _kP_=state[23];
      if(! _kP_)return _kP_;
      var token=[5,tag_name];
      return pp_enqueue(state,[0,size,token,0])}
    function pp_close_stag(state,param)
     {if(state[23])pp_enqueue(state,[0,size,5,0]);
      var _kN_=state[22];
      if(_kN_)
       {var match=pop_opt(state[4]);
        if(match){var tag_name=match[1];return caml_call1(state[27],tag_name)}
        var _kO_=0}
      else
       var _kO_=_kN_;
      return _kO_}
    function pp_set_print_tags(state,b){state[22] = b;return 0}
    function pp_set_mark_tags(state,b){state[23] = b;return 0}
    function pp_get_print_tags(state,param){return state[22]}
    function pp_get_mark_tags(state,param){return state[23]}
    function pp_set_tags(state,b)
     {pp_set_print_tags(state,b);return pp_set_mark_tags(state,b)}
    function pp_get_formatter_stag_function(state,param)
     {return [0,state[24],state[25],state[26],state[27]]}
    function pp_set_formatter_stag_function(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      state[24] = mot;
      state[25] = mct;
      state[26] = pot;
      state[27] = pct;
      return 0}
    function pp_rinit(state)
     {state[12] = 1;
      state[13] = 1;
      clear$0(state[28]);
      initialize_scan_stack(state[1]);
      clear(state[2]);
      clear(state[3]);
      clear(state[4]);
      clear(state[5]);
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_box_gen(state,0,3)}
    function pp_flush_queue(state,b)
     {var _kM_=state[4];
      iter$7(function(param){return pp_close_stag(state,0)},_kM_);
      for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        return pp_rinit(state)}}
    function pp_print_as_size(state,size,s)
     {var _kL_=state[14] < state[15]?1:0;
      return _kL_?enqueue_string_as(state,size,s):_kL_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_string(state,s)
     {return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp_print_bytes(state,s)
     {return pp_print_as(state,caml_ml_bytes_length(s),of_bytes(s))}
    function pp_print_int(state,i)
     {return pp_print_string(state,caml_string_of_jsbytes("" + i))}
    function pp_print_float(state,f)
     {return pp_print_string(state,to_string(f))}
    function pp_print_bool(state,b)
     {return pp_print_string(state,string_of_bool(b))}
    function pp_print_char(state,c){return pp_print_as(state,1,make$0(1,c))}
    function pp_open_hbox(state,param){return pp_open_box_gen(state,0,0)}
    function pp_open_vbox(state,indent)
     {return pp_open_box_gen(state,indent,1)}
    function pp_open_hvbox(state,indent)
     {return pp_open_box_gen(state,indent,2)}
    function pp_open_hovbox(state,indent)
     {return pp_open_box_gen(state,indent,3)}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_newline(state,param)
     {pp_flush_queue(state,1);return caml_call1(state[18],0)}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _kK_=state[14] < state[15]?1:0;
      return _kK_?enqueue_advance(state,[0,size,3,0]):_kK_}
    function pp_print_if_newline(state,param)
     {var _kJ_=state[14] < state[15]?1:0;
      return _kJ_?enqueue_advance(state,[0,size,4,0]):_kJ_}
    function pp_print_custom_break(state,fits,breaks)
     {var
       after=fits[3],
       width=fits[2],
       before=fits[1],
       _kI_=state[14] < state[15]?1:0;
      if(! _kI_)return _kI_;
      var
       size=- state[13] | 0,
       token=[1,fits,breaks],
       length=
        (caml_ml_string_length(before) + width | 0)
        +
        caml_ml_string_length(after)
        |
        0,
       elem=[0,size,token,length];
      return scan_push(state,1,elem)}
    function pp_print_break(state,width,offset)
     {return pp_print_custom_break
              (state,[0,cst$70,width,cst$69],[0,cst$68,offset,cst$67])}
    function pp_print_space(state,param){return pp_print_break(state,1,0)}
    function pp_print_cut(state,param){return pp_print_break(state,0,0)}
    function pp_open_tbox(state,param)
     {state[14] = state[14] + 1 | 0;
      var _kH_=state[14] < state[15]?1:0;
      if(! _kH_)return _kH_;
      var elem=[0,size,[4,[0,[0,0]]],0];
      return enqueue_advance(state,elem)}
    function pp_close_tbox(state,param)
     {var _kE_=1 < state[14]?1:0;
      if(_kE_)
       {var _kF_=state[14] < state[15]?1:0;
        if(_kF_)
         {var elem=[0,size,2,0];
          enqueue_advance(state,elem);
          state[14] = state[14] - 1 | 0;
          var _kG_=0}
        else
         var _kG_=_kF_}
      else
       var _kG_=_kE_;
      return _kG_}
    function pp_print_tbreak(state,width,offset)
     {var _kD_=state[14] < state[15]?1:0;
      if(! _kD_)return _kD_;
      var size=- state[13] | 0,elem=[0,size,[2,width,offset],width];
      return scan_push(state,1,elem)}
    function pp_print_tab(state,param){return pp_print_tbreak(state,0,0)}
    function pp_set_tab(state,param)
     {var _kC_=state[14] < state[15]?1:0;
      if(! _kC_)return _kC_;
      var elem=[0,size,0,0];
      return enqueue_advance(state,elem)}
    function pp_set_max_boxes(state,n)
     {var _kA_=1 < n?1:0,_kB_=_kA_?(state[15] = n,0):_kA_;return _kB_}
    function pp_get_max_boxes(state,param){return state[15]}
    function pp_over_max_boxes(state,param)
     {return state[14] === state[15]?1:0}
    function pp_set_ellipsis_text(state,s){state[16] = s;return 0}
    function pp_get_ellipsis_text(state,param){return state[16]}
    function pp_limit(n){return n < 1000000010?n:1000000009}
    function pp_set_max_indent(state,n$0)
     {var _kz_=1 < n$0?1:0;
      if(! _kz_)return _kz_;
      var n$1=state[6] - n$0 | 0,_ky_=1 <= n$1?1:0;
      if(! _ky_)return _ky_;
      var n=pp_limit(n$1);
      state[7] = n;
      state[8] = state[6] - state[7] | 0;
      return pp_rinit(state)}
    function pp_get_max_indent(state,param){return state[8]}
    function pp_set_margin(state,n)
     {var _kx_=1 <= n?1:0;
      if(! _kx_)return _kx_;
      var n$0=pp_limit(n);
      state[6] = n$0;
      var
       new_max_indent=
        state[8] <= state[6]
         ?state[8]
         :max$1(max$1(state[6] - state[7] | 0,state[6] / 2 | 0),1);
      return pp_set_max_indent(state,new_max_indent)}
    function validate_geometry(param)
     {var margin=param[2],max_indent=param[1];
      return 2 <= max_indent?margin <= max_indent?_cv_:_cw_:_cx_}
    function check_geometry(geometry)
     {var match=validate_geometry(geometry);return 0 === match[0]?1:0}
    function pp_get_margin(state,param){return state[6]}
    function pp_set_full_geometry(state,param)
     {var margin=param[2],max_indent=param[1];
      pp_set_margin(state,margin);
      pp_set_max_indent(state,max_indent);
      return 0}
    function pp_set_geometry(state,max_indent,margin)
     {var geometry=[0,max_indent,margin],match=validate_geometry(geometry);
      if(0 === match[0])return pp_set_full_geometry(state,geometry);
      var msg=match[1];
      throw [0,Invalid_argument,cat(cst_Format_pp_set_geometry,msg)]}
    function pp_safe_set_geometry(state,max_indent,margin)
     {var geometry=[0,max_indent,margin],match=validate_geometry(geometry);
      return 0 === match[0]?pp_set_full_geometry(state,geometry):0}
    function pp_get_geometry(state,param){return [0,state[8],state[6]]}
    function pp_update_geometry(state,update)
     {var geometry=pp_get_geometry(state,0);
      return pp_set_full_geometry(state,caml_call1(update,geometry))}
    function pp_set_formatter_out_functions(state,param)
     {var j=param[5],i=param[4],h=param[3],g=param[2],f=param[1];
      state[17] = f;
      state[18] = g;
      state[19] = h;
      state[20] = i;
      state[21] = j;
      return 0}
    function pp_get_formatter_out_functions(state,param)
     {return [0,state[17],state[18],state[19],state[20],state[21]]}
    function pp_set_formatter_output_functi(state,f,g)
     {state[17] = f;state[18] = g;return 0}
    function pp_get_formatter_output_functi(state,param)
     {return [0,state[17],state[18]]}
    function display_newline(state,param)
     {return caml_call3(state[17],cst$71,0,1)}
    var blank_line=make$0(80,32);
    function display_indent(state,n)
     {var n$0=n;
      for(;;)
       {var _kw_=0 < n$0?1:0;
        if(! _kw_)return _kw_;
        if(80 >= n$0)return caml_call3(state[17],blank_line,0,n$0);
        caml_call3(state[17],blank_line,0,80);
        var n$1=n$0 - 80 | 0,n$0=n$1}}
    function pp_set_formatter_out_channel(state,oc)
     {state[17]
      =
      function(_kt_,_ku_,_kv_){return output_substring(oc,_kt_,_ku_,_kv_)};
      state[18] = function(param){return caml_ml_flush(oc)};
      state[19] = function(_ks_){return display_newline(state,_ks_)};
      state[20] = function(_kr_){return display_indent(state,_kr_)};
      state[21] = function(_kq_){return display_indent(state,_kq_)};
      return 0}
    function default_pp_mark_open_tag(param)
     {if(param[1] !== String_tag)return cst$74;
      var s=param[2];
      return cat(cst$73,cat(s,cst$72))}
    function default_pp_mark_close_tag(param)
     {if(param[1] !== String_tag)return cst$77;
      var s=param[2];
      return cat(cst$76,cat(s,cst$75))}
    function default_pp_print_open_tag(_kp_){return 0}
    function default_pp_print_close_tag(_ko_){return 0}
    function pp_make_formatter(f,g,h,i,j)
     {var pp_queue=create$1(0),sys_tok=[0,unknown,_cy_,0];
      add(sys_tok,pp_queue);
      var scan_stack=create$0(0);
      initialize_scan_stack(scan_stack);
      push([0,1,sys_tok],scan_stack);
      var _kl_=create$0(0),_km_=create$0(0),_kn_=create$0(0);
      return [0,
              scan_stack,
              create$0(0),
              _kn_,
              _km_,
              _kl_,
              78,
              10,
              68,
              78,
              0,
              1,
              1,
              1,
              1,
              max_int,
              cst$78,
              f,
              g,
              h,
              i,
              j,
              0,
              0,
              default_pp_mark_open_tag,
              default_pp_mark_close_tag,
              default_pp_print_open_tag,
              default_pp_print_close_tag,
              pp_queue]}
    function formatter_of_out_functions(out_funs)
     {return pp_make_formatter
              (out_funs[1],out_funs[2],out_funs[3],out_funs[4],out_funs[5])}
    function make_formatter(output,flush)
     {function _kd_(_kk_){return 0}
      function _ke_(_kj_){return 0}
      var
       ppf=
        pp_make_formatter(output,flush,function(_ki_){return 0},_ke_,_kd_);
      ppf[19] = function(_kh_){return display_newline(ppf,_kh_)};
      ppf[20] = function(_kg_){return display_indent(ppf,_kg_)};
      ppf[21] = function(_kf_){return display_indent(ppf,_kf_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _j$_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(_ka_,_kb_,_kc_)
                {return output_substring(oc,_ka_,_kb_,_kc_)},
               _j$_)}
    function formatter_of_buffer(b)
     {function _j6_(_j__){return 0}
      return make_formatter
              (function(_j7_,_j8_,_j9_)
                {return add_substring(b,_j7_,_j8_,_j9_)},
               _j6_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$2(pp_buffer_size)}
    var
     stdbuf=pp_make_buffer(0),
     std_formatter=formatter_of_out_channel(stdout),
     err_formatter=formatter_of_out_channel(stderr),
     str_formatter=formatter_of_buffer(stdbuf),
     stdbuf_key=caml_call2(_ac_[1],0,pp_make_buffer);
    caml_call2(_ac_[3],stdbuf_key,stdbuf);
    function _cz_(param)
     {return formatter_of_buffer(caml_call1(_ac_[2],stdbuf_key))}
    var str_formatter_key=caml_call2(_ac_[1],0,_cz_);
    caml_call2(_ac_[3],str_formatter_key,str_formatter);
    function buffered_out_string(key,str,ofs,len)
     {return add_substring(caml_call1(_ac_[2],key),str,ofs,len)}
    function buffered_out_flush(oc,key,param)
     {var buf=caml_call1(_ac_[2],key),len=buf[2],str=contents(buf);
      output_substring(oc,str,0,len);
      caml_ml_flush(oc);
      return clear$1(buf)}
    function _cA_(param){return create$2(pp_buffer_size)}
    var std_buf_key=caml_call2(_ac_[1],0,_cA_);
    function _cB_(param){return create$2(pp_buffer_size)}
    var err_buf_key=caml_call2(_ac_[1],0,_cB_);
    function _cC_(param)
     {function _jR_(_j5_){return 0}
      function _jS_(_j4_){return 0}
      function _jT_(_j3_){return 0}
      function _jU_(_j2_){return buffered_out_flush(stdout,std_buf_key,_j2_)}
      var
       ppf=
        pp_make_formatter
         (function(_jZ_,_j0_,_j1_)
           {return buffered_out_string(std_buf_key,_jZ_,_j0_,_j1_)},
          _jU_,
          _jT_,
          _jS_,
          _jR_);
      ppf[19] = function(_jY_){return display_newline(ppf,_jY_)};
      ppf[20] = function(_jX_){return display_indent(ppf,_jX_)};
      ppf[21] = function(_jW_){return display_indent(ppf,_jW_)};
      at_exit$0(function(_jV_){return pp_print_flush(ppf,_jV_)});
      return ppf}
    var std_formatter_key=caml_call2(_ac_[1],0,_cC_);
    caml_call2(_ac_[3],std_formatter_key,std_formatter);
    function _cD_(param)
     {function _jC_(_jQ_){return 0}
      function _jD_(_jP_){return 0}
      function _jE_(_jO_){return 0}
      function _jF_(_jN_){return buffered_out_flush(stderr,err_buf_key,_jN_)}
      var
       ppf=
        pp_make_formatter
         (function(_jK_,_jL_,_jM_)
           {return buffered_out_string(err_buf_key,_jK_,_jL_,_jM_)},
          _jF_,
          _jE_,
          _jD_,
          _jC_);
      ppf[19] = function(_jJ_){return display_newline(ppf,_jJ_)};
      ppf[20] = function(_jI_){return display_indent(ppf,_jI_)};
      ppf[21] = function(_jH_){return display_indent(ppf,_jH_)};
      at_exit$0(function(_jG_){return pp_print_flush(ppf,_jG_)});
      return ppf}
    var err_formatter_key=caml_call2(_ac_[1],0,_cD_);
    caml_call2(_ac_[3],err_formatter_key,err_formatter);
    function get_std_formatter(param)
     {return caml_call1(_ac_[2],std_formatter_key)}
    function get_err_formatter(param)
     {return caml_call1(_ac_[2],err_formatter_key)}
    function get_str_formatter(param)
     {return caml_call1(_ac_[2],str_formatter_key)}
    function get_stdbuf(param){return caml_call1(_ac_[2],stdbuf_key)}
    function flush_buffer_formatter(buf,ppf)
     {pp_flush_queue(ppf,0);var s=contents(buf);reset(buf);return s}
    function flush_str_formatter(param)
     {var
       stdbuf=caml_call1(_ac_[2],stdbuf_key),
       str_formatter=caml_call1(_ac_[2],str_formatter_key);
      return flush_buffer_formatter(stdbuf,str_formatter)}
    function make_synchronized_formatter(output,flush)
     {function _jx_(param)
       {var buf=create$2(pp_buffer_size);
        function output$0(_jz_,_jA_,_jB_)
         {return add_substring(buf,_jz_,_jA_,_jB_)}
        function flush$0(param)
         {var _jy_=buf[2];
          caml_call3(output,contents(buf),0,_jy_);
          clear$1(buf);
          return caml_call1(flush,0)}
        return make_formatter(output$0,flush$0)}
      return caml_call2(_ac_[1],0,_jx_)}
    function synchronized_formatter_of_out_(oc)
     {function _jt_(param){return caml_ml_flush(oc)}
      return make_synchronized_formatter
              (function(_ju_,_jv_,_jw_)
                {return output_substring(oc,_ju_,_jv_,_jw_)},
               _jt_)}
    function make_symbolic_output_buffer(param){return [0,0]}
    function clear_symbolic_output_buffer(sob){sob[1] = 0;return 0}
    function get_symbolic_output_buffer(sob){return rev(sob[1])}
    function flush_symbolic_output_buffer(sob)
     {var items=get_symbolic_output_buffer(sob);
      clear_symbolic_output_buffer(sob);
      return items}
    function add_symbolic_output_item(sob,item)
     {sob[1] = [0,item,sob[1]];return 0}
    function formatter_of_symbolic_output_b(sob)
     {function f(s,i,n){return add_symbolic_output_item(sob,[0,sub$0(s,i,n)])}
      function g(_js_){return add_symbolic_output_item(sob,0)}
      function h(_jr_){return add_symbolic_output_item(sob,1)}
      function i(n){return add_symbolic_output_item(sob,[1,n])}
      function j(n){return add_symbolic_output_item(sob,[2,n])}
      return pp_make_formatter(f,g,h,i,j)}
    function open_hbox(v)
     {return pp_open_hbox(caml_call1(_ac_[2],std_formatter_key),v)}
    function open_vbox(v)
     {return pp_open_vbox(caml_call1(_ac_[2],std_formatter_key),v)}
    function open_hvbox(v)
     {return pp_open_hvbox(caml_call1(_ac_[2],std_formatter_key),v)}
    function open_hovbox(v)
     {return pp_open_hovbox(caml_call1(_ac_[2],std_formatter_key),v)}
    function open_box(v)
     {return pp_open_box(caml_call1(_ac_[2],std_formatter_key),v)}
    function close_box(v)
     {return pp_close_box(caml_call1(_ac_[2],std_formatter_key),v)}
    function open_stag(v)
     {return pp_open_stag(caml_call1(_ac_[2],std_formatter_key),v)}
    function close_stag(v)
     {return pp_close_stag(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_as(v,w)
     {return pp_print_as(caml_call1(_ac_[2],std_formatter_key),v,w)}
    function print_string$0(v)
     {return pp_print_string(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_bytes$0(v)
     {return pp_print_bytes(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_int$0(v)
     {return pp_print_int(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_float$0(v)
     {return pp_print_float(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_char$0(v)
     {return pp_print_char(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_bool(v)
     {return pp_print_bool(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_break(v,w)
     {return pp_print_break(caml_call1(_ac_[2],std_formatter_key),v,w)}
    function print_cut(v)
     {return pp_print_cut(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_space(v)
     {return pp_print_space(caml_call1(_ac_[2],std_formatter_key),v)}
    function force_newline(v)
     {return pp_force_newline(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_flush(v)
     {return pp_print_flush(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_newline$0(v)
     {return pp_print_newline(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_if_newline(v)
     {return pp_print_if_newline(caml_call1(_ac_[2],std_formatter_key),v)}
    function open_tbox(v)
     {return pp_open_tbox(caml_call1(_ac_[2],std_formatter_key),v)}
    function close_tbox(v)
     {return pp_close_tbox(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_tbreak(v,w)
     {return pp_print_tbreak(caml_call1(_ac_[2],std_formatter_key),v,w)}
    function set_tab(v)
     {return pp_set_tab(caml_call1(_ac_[2],std_formatter_key),v)}
    function print_tab(v)
     {return pp_print_tab(caml_call1(_ac_[2],std_formatter_key),v)}
    function set_margin(v)
     {return pp_set_margin(caml_call1(_ac_[2],std_formatter_key),v)}
    function get_margin(v){return caml_call1(_ac_[2],std_formatter_key)[6]}
    function set_max_indent(v)
     {return pp_set_max_indent(caml_call1(_ac_[2],std_formatter_key),v)}
    function get_max_indent(v)
     {return caml_call1(_ac_[2],std_formatter_key)[8]}
    function set_geometry(max_indent,margin)
     {return pp_set_geometry
              (caml_call1(_ac_[2],std_formatter_key),max_indent,margin)}
    function safe_set_geometry(max_indent,margin)
     {return pp_safe_set_geometry
              (caml_call1(_ac_[2],std_formatter_key),max_indent,margin)}
    function get_geometry(v)
     {return pp_get_geometry(caml_call1(_ac_[2],std_formatter_key),v)}
    function update_geometry(v)
     {return pp_update_geometry(caml_call1(_ac_[2],std_formatter_key),v)}
    function set_max_boxes(v)
     {return pp_set_max_boxes(caml_call1(_ac_[2],std_formatter_key),v)}
    function get_max_boxes(v)
     {return caml_call1(_ac_[2],std_formatter_key)[15]}
    function over_max_boxes(v)
     {return pp_over_max_boxes(caml_call1(_ac_[2],std_formatter_key),v)}
    function set_ellipsis_text(v)
     {return pp_set_ellipsis_text(caml_call1(_ac_[2],std_formatter_key),v)}
    function get_ellipsis_text(v)
     {return caml_call1(_ac_[2],std_formatter_key)[16]}
    function set_formatter_out_channel(v)
     {return pp_set_formatter_out_channel
              (caml_call1(_ac_[2],std_formatter_key),v)}
    function set_formatter_out_functions(v)
     {return pp_set_formatter_out_functions
              (caml_call1(_ac_[2],std_formatter_key),v)}
    function get_formatter_out_functions(v)
     {return pp_get_formatter_out_functions
              (caml_call1(_ac_[2],std_formatter_key),v)}
    function set_formatter_output_functions(v,w)
     {return pp_set_formatter_output_functi
              (caml_call1(_ac_[2],std_formatter_key),v,w)}
    function get_formatter_output_functions(v)
     {return pp_get_formatter_output_functi
              (caml_call1(_ac_[2],std_formatter_key),v)}
    function set_formatter_stag_functions(v)
     {return pp_set_formatter_stag_function
              (caml_call1(_ac_[2],std_formatter_key),v)}
    function get_formatter_stag_functions(v)
     {return pp_get_formatter_stag_function
              (caml_call1(_ac_[2],std_formatter_key),v)}
    function set_print_tags(v)
     {return pp_set_print_tags(caml_call1(_ac_[2],std_formatter_key),v)}
    function get_print_tags(v)
     {return caml_call1(_ac_[2],std_formatter_key)[22]}
    function set_mark_tags(v)
     {return pp_set_mark_tags(caml_call1(_ac_[2],std_formatter_key),v)}
    function get_mark_tags(v)
     {return caml_call1(_ac_[2],std_formatter_key)[23]}
    function set_tags(v)
     {return pp_set_tags(caml_call1(_ac_[2],std_formatter_key),v)}
    function pp_print_list(opt,pp_v,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=pp_print_cut;
        if(! param$0)return 0;
        var _jq_=param$0[1];
        if(! param$0[2])return caml_call2(pp_v,ppf,_jq_);
        var vs=param$0[2];
        caml_call2(pp_v,ppf,_jq_);
        caml_call2(pp_sep,ppf,0);
        var opt$1=[0,pp_sep],opt$0=opt$1,param$0=vs}}
    function pp_print_seq(opt,pp_v,ppf,seq$1)
     {if(opt)var sth=opt[1],pp_sep=sth;else var pp_sep=pp_print_cut;
      var match$0=caml_call1(seq$1,0);
      if(! match$0)return 0;
      var seq$2=match$0[2],v$0=match$0[1];
      caml_call2(pp_v,ppf,v$0);
      var seq=seq$2;
      for(;;)
       {var match=caml_call1(seq,0);
        if(! match)return 0;
        var seq$0=match[2],v=match[1];
        caml_call2(pp_sep,ppf,0);
        caml_call2(pp_v,ppf,v);
        var seq=seq$0}}
    function pp_print_text(ppf,s)
     {var len=caml_ml_string_length(s),left=[0,0],right=[0,0];
      function flush(param)
       {pp_print_string(ppf,sub$0(s,left[1],right[1] - left[1] | 0));
        right[1]++;
        left[1] = right[1];
        return 0}
      for(;;)
       {if(right[1] === len)
         {var _jp_=left[1] !== len?1:0;return _jp_?flush(0):_jp_}
        var match=caml_string_get(s,right[1]);
        if(10 === match)
         {flush(0);pp_force_newline(ppf,0)}
        else
         if(32 === match){flush(0);pp_print_space(ppf,0)}else right[1]++}}
    function pp_print_option(opt,pp_v,ppf,param)
     {if(opt)
       var sth=opt[1],none=sth;
      else
       var none=function(param,_jo_){return 0};
      if(! param)return caml_call2(none,ppf,0);
      var v=param[1];
      return caml_call2(pp_v,ppf,v)}
    function pp_print_result(ok,error,ppf,param)
     {if(0 === param[0]){var v=param[1];return caml_call2(ok,ppf,v)}
      var e=param[1];
      return caml_call2(error,ppf,e)}
    function pp_print_either(left,right,ppf,param)
     {if(0 === param[0]){var l=param[1];return caml_call2(left,ppf,l)}
      var r=param[1];
      return caml_call2(right,ppf,r)}
    function compute_tag(output,tag_acc)
     {var buf=create$2(16),ppf=formatter_of_buffer(buf);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=buf[2];
      return 2 <= len?sub$3(buf,1,len - 2 | 0):contents(buf)}
    function output_formatting_lit(ppf,fmting_lit)
     {if(typeof fmting_lit === "number")
       switch(fmting_lit)
        {case 0:return pp_close_box(ppf,0);
         case 1:return pp_close_stag(ppf,0);
         case 2:return pp_print_flush(ppf,0);
         case 3:return pp_force_newline(ppf,0);
         case 4:return pp_print_newline(ppf,0);
         case 5:return pp_print_char(ppf,64);
         default:return pp_print_char(ppf,37)}
      switch(fmting_lit[0])
       {case 0:
         var offset=fmting_lit[3],width=fmting_lit[2];
         return pp_print_break(ppf,width,offset);
        case 1:return 0;
        default:
         var c=fmting_lit[1];pp_print_char(ppf,64);return pp_print_char(ppf,c)}}
    function output_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")return 0;
      switch(acc[0])
       {case 0:
         var f=acc[2],p=acc[1];
         output_acc$0(ppf,p);
         return output_formatting_lit(ppf,f);
        case 1:
         var _je_=acc[2],_jf_=acc[1];
         if(0 === _je_[0])
          {var acc$0=_je_[1];
           output_acc$0(ppf,_jf_);
           return pp_open_stag
                   (ppf,[0,String_tag,compute_tag(output_acc$0,acc$0)])}
         var acc$1=_je_[1];
         output_acc$0(ppf,_jf_);
         var
          match=open_box_of_string(compute_tag(output_acc$0,acc$1)),
          bty=match[2],
          indent=match[1];
         return pp_open_box_gen(ppf,indent,bty);
        case 2:
         var _jg_=acc[1],switch$1=0;
         if(typeof _jg_ !== "number" && 0 === _jg_[0])
          {var _jh_=_jg_[2],switch$2=0;
           if(typeof _jh_ !== "number" && 1 === _jh_[0])
            {var s$0=acc[2],size=_jh_[2],p$1=_jg_[1];
             switch$1 = 1;
             switch$2 = 1}}
         if(! switch$1){var s=acc[2],p$0=_jg_;switch$0 = 2}
         break;
        case 3:
         var _ji_=acc[1],switch$3=0;
         if(typeof _ji_ !== "number" && 0 === _ji_[0])
          {var _jj_=_ji_[2],switch$4=0;
           if(typeof _jj_ !== "number" && 1 === _jj_[0])
            {var c$0=acc[2],size$0=_jj_[2],p$3=_ji_[1];
             switch$0 = 1;
             switch$3 = 1;
             switch$4 = 1}}
         if(! switch$3){var c=acc[2],p$2=_ji_;switch$0 = 3}
         break;
        case 4:
         var _jk_=acc[1],switch$5=0;
         if(typeof _jk_ !== "number" && 0 === _jk_[0])
          {var _jl_=_jk_[2],switch$6=0;
           if(typeof _jl_ !== "number" && 1 === _jl_[0])
            {var s$0=acc[2],size=_jl_[2],p$1=_jk_[1];
             switch$5 = 1;
             switch$6 = 1}}
         if(! switch$5){var s=acc[2],p$0=_jk_;switch$0 = 2}
         break;
        case 5:
         var _jm_=acc[1],switch$7=0;
         if(typeof _jm_ === "number" || ! (0 === _jm_[0]))
          switch$7 = 1;
         else
          {var _jn_=_jm_[2],switch$8=0;
           if(typeof _jn_ !== "number" && 1 === _jn_[0])
            {var c$0=acc[2],size$0=_jn_[2],p$3=_jm_[1];
             switch$0 = 1;
             switch$8 = 1}
           if(! switch$8)switch$7 = 1}
         if(switch$7){var c=acc[2],p$2=_jm_;switch$0 = 3}
         break;
        case 6:
         var f$0=acc[2],p$4=acc[1];
         output_acc$0(ppf,p$4);
         return caml_call1(f$0,ppf);
        case 7:
         var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
        default:
         var msg=acc[2],p$6=acc[1];
         output_acc$0(ppf,p$6);
         return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         output_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$0));
        case 2:output_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:output_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function strput_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")return 0;
      switch(acc[0])
       {case 0:
         var f=acc[2],p=acc[1];
         strput_acc$0(ppf,p);
         return output_formatting_lit(ppf,f);
        case 1:
         var _i4_=acc[2],_i5_=acc[1];
         if(0 === _i4_[0])
          {var acc$0=_i4_[1];
           strput_acc$0(ppf,_i5_);
           return pp_open_stag
                   (ppf,[0,String_tag,compute_tag(strput_acc$0,acc$0)])}
         var acc$1=_i4_[1];
         strput_acc$0(ppf,_i5_);
         var
          match=open_box_of_string(compute_tag(strput_acc$0,acc$1)),
          bty=match[2],
          indent=match[1];
         return pp_open_box_gen(ppf,indent,bty);
        case 2:
         var _i6_=acc[1],switch$1=0;
         if(typeof _i6_ !== "number" && 0 === _i6_[0])
          {var _i7_=_i6_[2],switch$2=0;
           if(typeof _i7_ !== "number" && 1 === _i7_[0])
            {var s$0=acc[2],size=_i7_[2],p$1=_i6_[1];
             switch$1 = 1;
             switch$2 = 1}}
         if(! switch$1){var s=acc[2],p$0=_i6_;switch$0 = 2}
         break;
        case 3:
         var _i8_=acc[1],switch$3=0;
         if(typeof _i8_ !== "number" && 0 === _i8_[0])
          {var _i9_=_i8_[2],switch$4=0;
           if(typeof _i9_ !== "number" && 1 === _i9_[0])
            {var c$0=acc[2],size$0=_i9_[2],p$3=_i8_[1];
             switch$0 = 1;
             switch$3 = 1;
             switch$4 = 1}}
         if(! switch$3){var c=acc[2],p$2=_i8_;switch$0 = 3}
         break;
        case 4:
         var _i__=acc[1],switch$5=0;
         if(typeof _i__ !== "number" && 0 === _i__[0])
          {var _i$_=_i__[2],switch$6=0;
           if(typeof _i$_ !== "number" && 1 === _i$_[0])
            {var s$0=acc[2],size=_i$_[2],p$1=_i__[1];
             switch$5 = 1;
             switch$6 = 1}}
         if(! switch$5){var s=acc[2],p$0=_i__;switch$0 = 2}
         break;
        case 5:
         var _ja_=acc[1],switch$7=0;
         if(typeof _ja_ === "number" || ! (0 === _ja_[0]))
          switch$7 = 1;
         else
          {var _jb_=_ja_[2],switch$8=0;
           if(typeof _jb_ !== "number" && 1 === _jb_[0])
            {var c$0=acc[2],size$0=_jb_[2],p$3=_ja_[1];
             switch$0 = 1;
             switch$8 = 1}
           if(! switch$8)switch$7 = 1}
         if(switch$7){var c=acc[2],p$2=_ja_;switch$0 = 3}
         break;
        case 6:
         var _jc_=acc[1];
         if(typeof _jc_ !== "number" && 0 === _jc_[0])
          {var _jd_=_jc_[2];
           if(typeof _jd_ !== "number" && 1 === _jd_[0])
            {var f$1=acc[2],size$1=_jd_[2],p$4=_jc_[1];
             strput_acc$0(ppf,p$4);
             return pp_print_as_size(ppf,size$1,caml_call1(f$1,0))}}
         var f$0=acc[2];
         strput_acc$0(ppf,_jc_);
         return pp_print_string(ppf,caml_call1(f$0,0));
        case 7:
         var p$5=acc[1];strput_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
        default:
         var msg=acc[2],p$6=acc[1];
         strput_acc$0(ppf,p$6);
         return invalid_arg(msg)}
      switch(switch$0)
       {case 0:strput_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         strput_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$0));
        case 2:strput_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:strput_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function kfprintf$0(k,ppf,param)
     {var fmt=param[1],_i3_=0;
      return make_printf
              (function(acc){output_acc$0(ppf,acc);return caml_call1(k,ppf)},
               _i3_,
               fmt)}
    function ikfprintf$0(k,ppf,param)
     {var fmt=param[1];return make_iprintf(k,ppf,fmt)}
    function ifprintf$0(ppf,param)
     {var fmt=param[1],_i1_=0;
      return make_iprintf(function(_i2_){return 0},_i1_,fmt)}
    function fprintf$0(ppf)
     {function _iY_(_i0_){return 0}
      return function(_iZ_){return kfprintf$0(_iY_,ppf,_iZ_)}}
    function printf$0(param)
     {var fmt=param[1],_iX_=0;
      return make_printf
              (function(acc)
                {return output_acc$0
                         (caml_call1(_ac_[2],std_formatter_key),acc)},
               _iX_,
               fmt)}
    function eprintf$0(param)
     {var fmt=param[1],_iW_=0;
      return make_printf
              (function(acc)
                {return output_acc$0
                         (caml_call1(_ac_[2],err_formatter_key),acc)},
               _iW_,
               fmt)}
    function kdprintf(k,param)
     {var fmt=param[1],_iV_=0;
      return make_printf
              (function(acc)
                {return caml_call1
                         (k,function(ppf){return output_acc$0(ppf,acc)})},
               _iV_,
               fmt)}
    function dprintf(fmt){return kdprintf(function(i){return i},fmt)}
    function ksprintf$0(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(acc)
       {strput_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function sprintf$0(fmt){return ksprintf$0(id$0,fmt)}
    function kasprintf(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(acc)
       {output_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function asprintf(fmt){return kasprintf(id$0,fmt)}
    function flush_standard_formatters(param)
     {pp_print_flush(caml_call1(_ac_[2],std_formatter_key),0);
      return pp_print_flush(caml_call1(_ac_[2],err_formatter_key),0)}
    at_exit(flush_standard_formatters);
    before_first_spawn
     (function(param)
       {flush_standard_formatters(0);
        var
         fs=pp_get_formatter_out_functions(std_formatter,0),
         _iF_=fs[5],
         _iG_=fs[4],
         _iH_=fs[3];
        function _iI_(_iU_)
         {return buffered_out_flush(stdout,std_buf_key,_iU_)}
        pp_set_formatter_out_functions
         (std_formatter,
          [0,
           function(_iR_,_iS_,_iT_)
            {return buffered_out_string(std_buf_key,_iR_,_iS_,_iT_)},
           _iI_,
           _iH_,
           _iG_,
           _iF_]);
        var
         init=pp_get_formatter_out_functions(err_formatter,0),
         _iJ_=init[5],
         _iK_=init[4],
         _iL_=init[3];
        function _iM_(_iQ_)
         {return buffered_out_flush(stderr,err_buf_key,_iQ_)}
        return pp_set_formatter_out_functions
                (err_formatter,
                 [0,
                  function(_iN_,_iO_,_iP_)
                   {return buffered_out_string(err_buf_key,_iN_,_iO_,_iP_)},
                  _iM_,
                  _iL_,
                  _iK_,
                  _iJ_])});
    var
     Stdlib_Format=
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string$0,
       pp_print_bytes,
       print_bytes$0,
       pp_print_as,
       print_as,
       pp_print_int,
       print_int$0,
       pp_print_float,
       print_float$0,
       pp_print_char,
       print_char$0,
       pp_print_bool,
       print_bool,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_print_custom_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline$0,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       check_geometry,
       pp_set_geometry,
       set_geometry,
       pp_safe_set_geometry,
       safe_set_geometry,
       pp_update_geometry,
       update_geometry,
       pp_get_geometry,
       get_geometry,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       String_tag,
       pp_open_stag,
       open_stag,
       pp_close_stag,
       close_stag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functi,
       set_formatter_output_functions,
       pp_get_formatter_output_functi,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_stag_function,
       set_formatter_stag_functions,
       pp_get_formatter_stag_function,
       get_formatter_stag_functions,
       formatter_of_out_channel,
       synchronized_formatter_of_out_,
       std_formatter,
       get_std_formatter,
       err_formatter,
       get_err_formatter,
       formatter_of_buffer,
       stdbuf,
       get_stdbuf,
       str_formatter,
       get_str_formatter,
       flush_str_formatter,
       make_formatter,
       make_synchronized_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_b,
       pp_print_list,
       pp_print_seq,
       pp_print_text,
       pp_print_option,
       pp_print_result,
       pp_print_either,
       fprintf$0,
       printf$0,
       eprintf$0,
       sprintf$0,
       asprintf,
       dprintf,
       ifprintf$0,
       kfprintf$0,
       kdprintf,
       ikfprintf$0,
       ksprintf$0,
       kasprintf];
    caml_register_global(807,Stdlib_Format,"Stdlib__Format");
    var null_char=0;
    function next_char(ib)
     {try
       {var c=caml_call1(ib[7],0);
        ib[2] = c;
        ib[3] = 1;
        ib[4] = ib[4] + 1 | 0;
        if(10 === c)ib[5] = ib[5] + 1 | 0;
        return c}
      catch(_iE_)
       {_iE_ = caml_wrap_exception(_iE_);
        if(_iE_ !== End_of_file)throw _iE_;
        ib[2] = null_char;
        ib[3] = 0;
        ib[1] = 1;
        return null_char}}
    function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
    function checked_peek_char(ib)
     {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
    function end_of_input(ib){peek_char(ib);return ib[1]}
    function beginning_of_input(ib){return 0 === ib[4]?1:0}
    function name_of_input(ib)
     {var _iD_=ib[9];
      if(typeof _iD_ === "number")
       return 0 === _iD_?cst_unnamed_function:cst_unnamed_character_string;
      if(0 === _iD_[0])return cst_unnamed_Stdlib_input_chann;
      var fname=_iD_[1];
      return fname}
    function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
    function reset_token(ib){return reset(ib[8])}
    function invalidate_current_char(ib){ib[3] = 0;return 0}
    function token_string(ib)
     {var token_buffer=ib[8],tok=contents(token_buffer);
      clear$1(token_buffer);
      ib[6] = ib[6] + 1 | 0;
      return tok}
    function skip_char(width,ib){invalidate_current_char(ib);return width}
    function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
    function store_char(width,ib,c)
     {add_char(ib[8],c);return ignore_char(width,ib)}
    var default_token_buffer_size=1024;
    function create$9(iname,next)
     {return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              create$2(default_token_buffer_size),
              iname]}
    function from_string$1(s)
     {var i=[0,0],len=caml_ml_string_length(s);
      function next(param)
       {if(len <= i[1])throw End_of_file;
        var c=caml_string_get(s,i[1]);
        i[1]++;
        return c}
      return create$9(1,next)}
    var _cE_=0;
    function from_function$0(_iC_){return create$9(_cE_,_iC_)}
    var len=1024;
    function scan_close_at_end(ic)
     {caml_ml_close_channel(ic);throw End_of_file}
    function scan_raise_at_end(ic){throw End_of_file}
    function from_ic(scan_close_ic,iname,ic)
     {var buf=caml_create_bytes(1024),i=[0,0],lim=[0,0],eof=[0,0];
      function next(param)
       {if(i[1] < lim[1]){var c=caml_bytes_get(buf,i[1]);i[1]++;return c}
        if(eof[1])throw End_of_file;
        lim[1] = input(ic,buf,0,len);
        return 0 === lim[1]
                ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
                :(i[1] = 1,caml_bytes_get(buf,0))}
      return create$9(iname,next)}
    var stdin$0=from_ic(scan_raise_at_end,[1,cst$79,stdin],stdin);
    function open_in_file(open_in,fname)
     {if(! caml_string_notequal(fname,cst$80))return stdin$0;
      var ic=caml_call1(open_in,fname);
      return from_ic(scan_close_at_end,[1,fname,ic],ic)}
    function open_in(_iB_){return open_in_file(open_text$0,_iB_)}
    function open_in_bin(_iA_){return open_in_file(open_bin$0,_iA_)}
    function from_channel$0(ic){return from_ic(scan_raise_at_end,[0,ic],ic)}
    function close_in(ib)
     {var _iz_=ib[9];
      if(typeof _iz_ === "number")return 0;
      if(0 === _iz_[0]){var ic=_iz_[1];return caml_ml_close_channel(ic)}
      var ic$0=_iz_[2];
      return caml_ml_close_channel(ic$0)}
    var Scan_failure=[248,cst_Stdlib_Scanf_Scan_failure,caml_fresh_oo_id(0)];
    function bad_input(s){throw [0,Scan_failure,s]}
    function bad_input_escape(c)
     {return bad_input(caml_call1(sprintf(_cF_),c))}
    function bad_token_length(message)
     {return bad_input(caml_call1(sprintf(_cG_),message))}
    function bad_float(param)
     {return bad_input(cst_no_dot_or_exponent_part_fo)}
    function bad_hex_float(param)
     {return bad_input(cst_not_a_valid_float_in_hexad)}
    function character_mismatch(c,ci)
     {return bad_input(caml_call2(sprintf(_cI_),c,ci))}
    function check_this_char(ib,c)
     {var ci=checked_peek_char(ib);
      return ci === c?invalidate_current_char(ib):character_mismatch(c,ci)}
    function check_char(ib,c$0)
     {if(10 === c$0)
       {var ci=checked_peek_char(ib);
        return 10 === ci
                ?invalidate_current_char(ib)
                :13 === ci
                  ?(invalidate_current_char(ib),check_this_char(ib,10))
                  :character_mismatch(10,ci)}
      if(32 !== c$0)return check_this_char(ib,c$0);
      for(;;)
       {var c=peek_char(ib),_ix_=1 - ib[1];
        if(! _ix_)return _ix_;
        var _iy_=c - 9 | 0,switch$0=0;
        if(4 < _iy_ >>> 0)
         {if(23 === _iy_)switch$0 = 1}
        else
         if(1 < _iy_ - 2 >>> 0)switch$0 = 1;
        if(! switch$0)return 0;
        invalidate_current_char(ib)}}
    function token_char(ib){return caml_string_get(token_string(ib),0)}
    function token_bool(ib)
     {var s=token_string(ib);
      return caml_string_notequal(s,cst_false$3)
              ?caml_string_notequal(s,cst_true$3)
                ?bad_input(caml_call1(sprintf(_cJ_),s))
                :1
              :0}
    function integer_conversion_of_char(param)
     {var switcher=param - 88 | 0;
      if(32 >= switcher >>> 0)
       switch(switcher)
        {case 10:return 0;
         case 12:return 1;
         case 17:return 2;
         case 23:return 3;
         case 29:return 4;
         case 0:
         case 32:return 5
         }
      throw [0,Assert_failure,_cK_]}
    function token_int_literal(conv,ib)
     {switch(conv)
       {case 0:var tok=cat(cst_0b,token_string(ib));break;
        case 3:var tok=cat(cst_0o,token_string(ib));break;
        case 4:var tok=cat(cst_0u,token_string(ib));break;
        case 5:var tok=cat(cst_0x,token_string(ib));break;
        default:var tok=token_string(ib)}
      var l=caml_ml_string_length(tok);
      if(0 !== l && 43 === caml_string_get(tok,0))
       return sub$0(tok,1,l - 1 | 0);
      return tok}
    function token_float(ib){return caml_float_of_string(token_string(ib))}
    function scan_decimal_digit_star(width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(58 <= c)
         {if(95 === c)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
        else
         if(48 <= c)
          {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
        return width$0}}
    function scan_unsigned_decimal_int(width,ib)
     {if(0 === width)return bad_token_length(cst_decimal_digits);
      var c=checked_peek_char(ib);
      if(9 < c - 48 >>> 0)return bad_input(caml_call1(sprintf(_cL_),c));
      var width$0=store_char(width,ib,c);
      return scan_decimal_digit_star(width$0,ib)}
    function scan_digit_plus(basis,digitp,width$2,ib)
     {if(0 === width$2)return bad_token_length(cst_digits);
      var c$0=checked_peek_char(ib);
      if(! caml_call1(digitp,c$0))
       return bad_input(caml_call2(sprintf(_cM_),c$0,basis));
      var width$3=store_char(width$2,ib,c$0),width=width$3;
      for(;;)
       {if(0 === width)return width;
        var c=peek_char(ib);
        if(ib[1])return width;
        if(caml_call1(digitp,c))
         {var width$0=store_char(width,ib,c),width=width$0;continue}
        if(95 !== c)return width;
        var width$1=ignore_char(width,ib),width=width$1}}
    function is_binary_digit(param){return 1 < param - 48 >>> 0?0:1}
    function scan_binary_int(_iv_,_iw_)
     {return scan_digit_plus(cst_binary,is_binary_digit,_iv_,_iw_)}
    function is_octal_digit(param){return 7 < param - 48 >>> 0?0:1}
    function scan_octal_int(_it_,_iu_)
     {return scan_digit_plus(cst_octal,is_octal_digit,_it_,_iu_)}
    function is_hexa_digit(param)
     {var _is_=param - 48 | 0,switch$0=0;
      if(22 < _is_ >>> 0)
       {if(5 >= _is_ - 49 >>> 0)switch$0 = 1}
      else
       if(6 < _is_ - 10 >>> 0)switch$0 = 1;
      return switch$0?1:0}
    function scan_hexadecimal_int(_iq_,_ir_)
     {return scan_digit_plus(cst_hexadecimal,is_hexa_digit,_iq_,_ir_)}
    function scan_sign(width,ib)
     {var c=checked_peek_char(ib),switcher=c - 43 | 0;
      if(2 >= switcher >>> 0)
       switch(switcher)
        {case 0:return store_char(width,ib,c);
         case 1:break;
         default:return store_char(width,ib,c)}
      return width}
    function scan_optionally_signed_decimal(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_unsigned_decimal_int(width$0,ib)}
    function scan_int_conversion(conv,width$1,ib)
     {switch(conv)
       {case 0:return scan_binary_int(width$1,ib);
        case 1:return scan_optionally_signed_decimal(width$1,ib);
        case 2:
         var width$0=scan_sign(width$1,ib),c=checked_peek_char(ib);
         if(48 !== c)return scan_unsigned_decimal_int(width$0,ib);
         var width=store_char(width$0,ib,c);
         if(0 === width)return width;
         var c$0=peek_char(ib);
         if(ib[1])return width;
         var switch$0=0;
         if(99 <= c$0)
          {if(111 === c$0)return scan_octal_int(store_char(width,ib,c$0),ib);
           if(120 === c$0)switch$0 = 1}
         else
          if(88 === c$0)
           switch$0 = 1;
          else
           if(98 <= c$0)return scan_binary_int(store_char(width,ib,c$0),ib);
         return switch$0
                 ?scan_hexadecimal_int(store_char(width,ib,c$0),ib)
                 :scan_decimal_digit_star(width,ib);
        case 3:return scan_octal_int(width$1,ib);
        case 4:return scan_unsigned_decimal_int(width$1,ib);
        default:return scan_hexadecimal_int(width$1,ib)}}
    function scan_fractional_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      return ib[1]
              ?width
              :9 < c - 48 >>> 0
                ?width
                :scan_decimal_digit_star(store_char(width,ib,c),ib)}
    function scan_exponent_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      if(69 !== c && 101 !== c)return width;
      return scan_optionally_signed_decimal(store_char(width,ib,c),ib)}
    function scan_float(width$1,precision,ib)
     {var
       width=scan_sign(width$1,ib),
       width$0=scan_decimal_digit_star(width,ib);
      if(0 === width$0)return [0,width$0,precision];
      var c=peek_char(ib);
      if(ib[1])return [0,width$0,precision];
      if(46 !== c)return [0,scan_exponent_part(width$0,ib),precision];
      var
       width$2=store_char(width$0,ib,c),
       precision$0=min$1(width$2,precision),
       width$3=
        width$2
        -
        (precision$0 - scan_fractional_part(precision$0,ib) | 0)
        |
        0;
      return [0,scan_exponent_part(width$3,ib),precision$0]}
    function check_case_insensitive_string(width,ib,error,str)
     {function lowercase(c)
       {return 25 < c - 65 >>> 0?c:char_of_int((c - 65 | 0) + 97 | 0)}
      var
       len=caml_ml_string_length(str),
       width$0=[0,width],
       _in_=len - 1 | 0,
       _im_=0;
      if(_in_ >= 0)
       {var i=_im_;
        for(;;)
         {var c=peek_char(ib),_io_=lowercase(caml_string_get(str,i));
          if(lowercase(c) !== _io_)caml_call1(error,0);
          if(0 === width$0[1])caml_call1(error,0);
          width$0[1] = store_char(width$0[1],ib,c);
          var _ip_=i + 1 | 0;
          if(_in_ !== i){var i=_ip_;continue}
          break}}
      return width$0[1]}
    function scan_hex_float(width,precision,ib)
     {var _h$_=0 === width?1:0,_ia_=_h$_ || end_of_input(ib);
      if(_ia_)bad_hex_float(0);
      var
       width$0=scan_sign(width,ib),
       _ib_=0 === width$0?1:0,
       _ic_=_ib_ || end_of_input(ib);
      if(_ic_)bad_hex_float(0);
      var c=peek_char(ib),switch$0=0;
      if(78 <= c)
       {var switcher=c - 79 | 0;
        if(30 < switcher >>> 0)
         {if(32 > switcher)
           {var
             width$1=store_char(width$0,ib,c),
             _id_=0 === width$1?1:0,
             _ie_=_id_ || end_of_input(ib);
            if(_ie_)bad_hex_float(0);
            return check_case_insensitive_string
                    (width$1,ib,bad_hex_float,cst_an)}}
        else
         if(26 === switcher)switch$0 = 1}
      else
       {if(48 === c)
         {var
           width$3=store_char(width$0,ib,c),
           _ih_=0 === width$3?1:0,
           _ii_=_ih_ || end_of_input(ib);
          if(_ii_)bad_hex_float(0);
          var
           width$4=
            check_case_insensitive_string(width$3,ib,bad_hex_float,cst_x$1);
          if(0 !== width$4 && ! end_of_input(ib))
           {var match=peek_char(ib),_ij_=match - 46 | 0,switch$1=0;
            if(34 < _ij_ >>> 0)
             {if(66 === _ij_)switch$1 = 1}
            else
             if(32 < _ij_ - 1 >>> 0)switch$1 = 1;
            var width$5=switch$1?width$4:scan_hexadecimal_int(width$4,ib);
            if(0 !== width$5 && ! end_of_input(ib))
             {var c$0=peek_char(ib);
              if(46 === c$0)
               {var width$6=store_char(width$5,ib,c$0),switch$2=0;
                if(0 !== width$6 && ! end_of_input(ib))
                 {var match$0=peek_char(ib),switch$3=0;
                  if(80 !== match$0 && 112 !== match$0)
                   {var
                     precision$0=min$1(width$6,precision),
                     width$10=
                      width$6
                      -
                      (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                      |
                      0;
                    switch$3 = 1}
                  if(! switch$3)var width$10=width$6;
                  var width$7=width$10;
                  switch$2 = 1}
                if(! switch$2)var width$7=width$6;
                var width$8=width$7}
              else
               var width$8=width$5;
              if(0 !== width$8 && ! end_of_input(ib))
               {var c$1=peek_char(ib);
                if(80 !== c$1 && 112 !== c$1)return width$8;
                var
                 width$9=store_char(width$8,ib,c$1),
                 _ik_=0 === width$9?1:0,
                 _il_=_ik_ || end_of_input(ib);
                if(_il_)bad_hex_float(0);
                return scan_optionally_signed_decimal(width$9,ib)}
              return width$8}
            return width$5}
          return width$4}
        if(73 === c)switch$0 = 1}
      if(! switch$0)return bad_hex_float(0);
      var
       width$2=store_char(width$0,ib,c),
       _if_=0 === width$2?1:0,
       _ig_=_if_ || end_of_input(ib);
      if(_ig_)bad_hex_float(0);
      return check_case_insensitive_string
              (width$2,ib,bad_hex_float,cst_nfinity)}
    function scan_caml_float_rest(width,precision,ib)
     {var _h7_=0 === width?1:0,_h8_=_h7_ || end_of_input(ib);
      if(_h8_)bad_float(0);
      var
       width$0=scan_decimal_digit_star(width,ib),
       _h9_=0 === width$0?1:0,
       _h__=_h9_ || end_of_input(ib);
      if(_h__)bad_float(0);
      var c=peek_char(ib),switcher=c - 69 | 0;
      if(32 < switcher >>> 0)
       {if(-23 === switcher)
         {var
           width$1=store_char(width$0,ib,c),
           precision$0=min$1(width$1,precision),
           width_precision=scan_fractional_part(precision$0,ib),
           frac_width=precision$0 - width_precision | 0,
           width$2=width$1 - frac_width | 0;
          return scan_exponent_part(width$2,ib)}}
      else
       if(30 < switcher - 1 >>> 0)return scan_exponent_part(width$0,ib);
      return bad_float(0)}
    function scan_caml_float(width,precision,ib)
     {var _hT_=0 === width?1:0,_hU_=_hT_ || end_of_input(ib);
      if(_hU_)bad_float(0);
      var
       width$0=scan_sign(width,ib),
       _hV_=0 === width$0?1:0,
       _hW_=_hV_ || end_of_input(ib);
      if(_hW_)bad_float(0);
      var c=peek_char(ib);
      if(49 <= c)
       {if(58 > c)
         {var
           width$1=store_char(width$0,ib,c),
           _hX_=0 === width$1?1:0,
           _hY_=_hX_ || end_of_input(ib);
          if(_hY_)bad_float(0);
          return scan_caml_float_rest(width$1,precision,ib)}}
      else
       if(48 <= c)
        {var
          width$2=store_char(width$0,ib,c),
          _hZ_=0 === width$2?1:0,
          _h0_=_hZ_ || end_of_input(ib);
         if(_h0_)bad_float(0);
         var c$0=peek_char(ib);
         if(88 !== c$0 && 120 !== c$0)
          return scan_caml_float_rest(width$2,precision,ib);
         var
          width$3=store_char(width$2,ib,c$0),
          _h1_=0 === width$3?1:0,
          _h2_=_h1_ || end_of_input(ib);
         if(_h2_)bad_float(0);
         var
          width$4=scan_hexadecimal_int(width$3,ib),
          _h3_=0 === width$4?1:0,
          _h4_=_h3_ || end_of_input(ib);
         if(_h4_)bad_float(0);
         var c$1=peek_char(ib),switcher=c$1 - 80 | 0,switch$0=0;
         if(32 < switcher >>> 0)
          if(-34 === switcher)
           {var width$5=store_char(width$4,ib,c$1),switch$1=0;
            if(0 !== width$5 && ! end_of_input(ib))
             {var match=peek_char(ib),switch$2=0;
              if(80 !== match && 112 !== match)
               {var
                 precision$0=min$1(width$5,precision),
                 width$10=
                  width$5
                  -
                  (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                  |
                  0;
                switch$2 = 1}
              if(! switch$2)var width$10=width$5;
              var width$6=width$10;
              switch$1 = 1}
            if(! switch$1)var width$6=width$5;
            var width$7=width$6}
          else
           switch$0 = 1;
         else
          if(30 < switcher - 1 >>> 0)var width$7=width$4;else switch$0 = 1;
         var width$8=switch$0?bad_float(0):width$7;
         if(0 !== width$8 && ! end_of_input(ib))
          {var c$2=peek_char(ib);
           if(80 !== c$2 && 112 !== c$2)return width$8;
           var
            width$9=store_char(width$8,ib,c$2),
            _h5_=0 === width$9?1:0,
            _h6_=_h5_ || end_of_input(ib);
           if(_h6_)bad_hex_float(0);
           return scan_optionally_signed_decimal(width$9,ib)}
         return width$8}
      return bad_float(0)}
    function scan_string(stp,width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(stp)
         {var c$0=stp[1];
          if(c === c$0)return skip_char(width$0,ib);
          var width$1=store_char(width$0,ib,c),width$0=width$1;
          continue}
        var _hS_=c - 9 | 0,switch$0=0;
        if(4 < _hS_ >>> 0)
         {if(23 === _hS_)switch$0 = 1}
        else
         if(1 < _hS_ - 2 >>> 0)switch$0 = 1;
        if(switch$0)return width$0;
        var width$2=store_char(width$0,ib,c),width$0=width$2}}
    function scan_char(width,ib)
     {return store_char(width,ib,checked_peek_char(ib))}
    function hexadecimal_value_of_char(d)
     {return 97 <= d?d - 87 | 0:65 <= d?d - 55 | 0:d - 48 | 0}
    function check_next_char(message,width,ib)
     {if(0 === width)return bad_token_length(message);
      var c=peek_char(ib);
      return ib[1]?bad_input(caml_call1(sprintf(_cH_),message)):c}
    function check_next_char_for_char(_hQ_,_hR_)
     {return check_next_char(cst_a_Char,_hQ_,_hR_)}
    function check_next_char_for_string(_hO_,_hP_)
     {return check_next_char(cst_a_String,_hO_,_hP_)}
    function scan_backslash_char(width,ib)
     {var c0=check_next_char_for_char(width,ib),switch$0=0;
      if(40 <= c0)
       {if(58 <= c0)
         {var switcher=c0 - 92 | 0;
          if(28 >= switcher >>> 0)
           switch(switcher)
            {case 28:
              var
               get_digit=
                function(param)
                 {var c=next_char(ib),_hN_=c - 48 | 0,switch$0=0;
                  if(22 < _hN_ >>> 0)
                   {if(5 >= _hN_ - 49 >>> 0)switch$0 = 1}
                  else
                   if(6 < _hN_ - 10 >>> 0)switch$0 = 1;
                  return switch$0?c:bad_input_escape(c)},
               c1=get_digit(0),
               c2=get_digit(0),
               _hJ_=hexadecimal_value_of_char(c2),
               c$0=(16 * hexadecimal_value_of_char(c1) | 0) + _hJ_ | 0,
               switch$1=0;
              if(0 <= c$0 && 255 >= c$0)
               {var _hL_=char_of_int(c$0);switch$1 = 1}
              if(! switch$1)
               var _hL_=bad_input(caml_call2(sprintf(_cO_),c1,c2));
              return store_char(width - 2 | 0,ib,_hL_);
             case 0:
             case 6:
             case 18:
             case 22:
             case 24:switch$0 = 1;break
             }}
        else
         if(48 <= c0)
          {var
            get_digit$0=
             function(param)
              {var c=next_char(ib);
               return 9 < c - 48 >>> 0?bad_input_escape(c):c},
            c1$0=get_digit$0(0),
            c2$0=get_digit$0(0),
            c=
             ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
             +
             (c2$0 - 48 | 0)
             |
             0,
            switch$2=0;
           if(0 <= c && 255 >= c){var _hM_=char_of_int(c);switch$2 = 1}
           if(! switch$2)
            var _hM_=bad_input(caml_call3(sprintf(_cN_),c0,c1$0,c2$0));
           return store_char(width - 2 | 0,ib,_hM_)}}
      else
       if(34 === c0 || 39 <= c0)switch$0 = 1;
      if(! switch$0)return bad_input_escape(c0);
      var switch$3=0;
      if(110 <= c0)
       if(117 <= c0)
        switch$3 = 1;
       else
        switch(c0 - 110 | 0)
         {case 0:var _hK_=10;break;
          case 4:var _hK_=13;break;
          case 6:var _hK_=9;break;
          default:switch$3 = 1}
      else
       if(98 === c0)var _hK_=8;else switch$3 = 1;
      if(switch$3)var _hK_=c0;
      return store_char(width,ib,_hK_)}
    function scan_caml_char(width,ib)
     {function find_stop(width)
       {var c=check_next_char_for_char(width,ib);
        return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
      var c=checked_peek_char(ib);
      if(39 !== c)return character_mismatch(39,c);
      var
       width$0=ignore_char(width,ib),
       c$0=check_next_char_for_char(width$0,ib);
      return 92 === c$0
              ?find_stop(scan_backslash_char(ignore_char(width$0,ib),ib))
              :find_stop(store_char(width$0,ib,c$0))}
    function scan_caml_string(width,ib)
     {function find_stop$0(counter,width)
       {var width$0=width;
        for(;;)
         {var c=check_next_char_for_string(width$0,ib);
          if(34 === c)return ignore_char(width$0,ib);
          if(92 !== c)
           {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
          var
           width$1=ignore_char(width$0,ib),
           match=check_next_char_for_string(width$1,ib);
          if(10 === match)
           {var _hH_=ignore_char(width$1,ib);
            if(counter >= 50)
             return caml_trampoline_return(skip_spaces,[0,_hH_]);
            var counter$0=counter + 1 | 0;
            return skip_spaces(counter$0,_hH_)}
          if(13 !== match)
           {var width$4=scan_backslash_char(width$1,ib),width$0=width$4;
            continue}
          var
           width$3=ignore_char(width$1,ib),
           match$0=check_next_char_for_string(width$3,ib);
          if(10 !== match$0)
           {var width$5=store_char(width$3,ib,13),width$0=width$5;continue}
          var _hI_=ignore_char(width$3,ib);
          if(counter >= 50)
           return caml_trampoline_return(skip_spaces,[0,_hI_]);
          var counter$1=counter + 1 | 0;
          return skip_spaces(counter$1,_hI_)}}
      function skip_spaces(counter,width)
       {var width$0=width;
        for(;;)
         {var match=check_next_char_for_string(width$0,ib);
          if(32 === match)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
          if(counter >= 50)
           return caml_trampoline_return(find_stop$0,[0,width$0]);
          var counter$0=counter + 1 | 0;
          return find_stop$0(counter$0,width$0)}}
      function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
      var c=checked_peek_char(ib);
      return 34 === c
              ?find_stop(ignore_char(width,ib))
              :character_mismatch(34,c)}
    function scan_chars_in_char_set(char_set,scan_indic,width,ib)
     {function scan_chars(i,stp)
       {var i$0=i;
        for(;;)
         {var c=peek_char(ib),_hD_=0 < i$0?1:0;
          if(_hD_)
           {var _hE_=1 - ib[1];
            if(_hE_)
             var _hF_=is_in_char_set(char_set,c),_hG_=_hF_?c !== stp?1:0:_hF_;
            else
             var _hG_=_hE_}
          else
           var _hG_=_hD_;
          if(! _hG_)return _hG_;
          store_char(max_int,ib,c);
          var i$1=i$0 - 1 | 0,i$0=i$1}}
      if(! scan_indic)return scan_chars(width,-1);
      var c=scan_indic[1];
      scan_chars(width,c);
      var _hC_=1 - ib[1];
      if(! _hC_)return _hC_;
      var ci=peek_char(ib);
      return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
    function scanf_bad_input(ib,x)
     {if(x[1] === Scan_failure)
       var s=x[2];
      else
       {if(x[1] !== Failure)throw x;var s=x[2]}
      var i=char_count(ib);
      return bad_input(caml_call2(sprintf(_cQ_),i,s))}
    function get_counter(ib,counter)
     {switch(counter)
       {case 0:return ib[5];case 1:return char_count(ib);default:return ib[6]}}
    function width_of_pad_opt(pad_opt)
     {if(! pad_opt)return max_int;var width=pad_opt[1];return width}
    function stopper_of_formatting_lit(fmting)
     {if(6 === fmting)return _cR_;
      var
       str=string_of_formatting_lit(fmting),
       stp=caml_string_get(str,1),
       sub_str=sub$0(str,2,caml_ml_string_length(str) - 2 | 0);
      return [0,stp,sub_str]}
    function take_format_readers$0(counter,k,fmt)
     {var fmt$0=fmt;
      for(;;)
       {if(typeof fmt$0 === "number")return caml_call1(k,0);
        switch(fmt$0[0])
         {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
          case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
          case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
          case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
          case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
          case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
          case 9:var fmt$10=fmt$0[2],fmt$0=fmt$10;continue;
          case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
          case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
          case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
          case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
          case 14:
           var rest=fmt$0[3],fmtty=fmt$0[2],_hA_=erase_rel(symm(fmtty));
           if(counter >= 50)
            return caml_trampoline_return
                    (take_fmtty_format_readers$0,[0,k,_hA_,rest]);
           var counter$0=counter + 1 | 0;
           return take_fmtty_format_readers$0(counter$0,k,_hA_,rest);
          case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
          case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
          case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
          case 18:
           var _hB_=fmt$0[1];
           if(0 === _hB_[0])
            {var
              rest$0=fmt$0[2],
              match=_hB_[1],
              fmt$18=match[1],
              fmt$19=concat_fmt(fmt$18,rest$0),
              fmt$0=fmt$19;
             continue}
           var
            rest$1=fmt$0[2],
            match$0=_hB_[1],
            fmt$20=match$0[1],
            fmt$21=concat_fmt(fmt$20,rest$1),
            fmt$0=fmt$21;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_format_readers(new_k,fmt_rest)};
          case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
          case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
          case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
          case 23:
           var rest$2=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:
               return function(reader)
                {function new_k(readers_rest)
                  {return caml_call1(k,[0,reader,readers_rest])}
                 return take_format_readers(new_k,rest$2)};
              default:var fmt$0=rest$2;continue}
           switch(ign[0])
            {case 0:var fmt$0=rest$2;continue;
             case 1:var fmt$0=rest$2;continue;
             case 2:var fmt$0=rest$2;continue;
             case 3:var fmt$0=rest$2;continue;
             case 4:var fmt$0=rest$2;continue;
             case 5:var fmt$0=rest$2;continue;
             case 6:var fmt$0=rest$2;continue;
             case 7:var fmt$0=rest$2;continue;
             case 8:var fmt$0=rest$2;continue;
             case 9:
              var fmtty$0=ign[2];
              if(counter >= 50)
               return caml_trampoline_return
                       (take_fmtty_format_readers$0,[0,k,fmtty$0,rest$2]);
              var counter$1=counter + 1 | 0;
              return take_fmtty_format_readers$0(counter$1,k,fmtty$0,rest$2);
             case 10:var fmt$0=rest$2;continue;
             default:var fmt$0=rest$2;continue}
          default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}}
    function take_fmtty_format_readers$0(counter,k,fmtty,fmt)
     {var fmtty$0=fmtty;
      for(;;)
       {if(typeof fmtty$0 !== "number")
         switch(fmtty$0[0])
          {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
           case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
           case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
           case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
           case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
           case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
           case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
           case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
           case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
           case 9:
            var
             rest=fmtty$0[3],
             ty2=fmtty$0[2],
             ty1=fmtty$0[1],
             ty=trans(symm(ty1),ty2),
             fmtty$10=concat_fmtty(ty,rest),
             fmtty$0=fmtty$10;
            continue;
           case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
           case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
           case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
           case 13:
            var fmt_rest=fmtty$0[1];
            return function(reader)
             {function new_k(readers_rest)
               {return caml_call1(k,[0,reader,readers_rest])}
              return take_fmtty_format_readers(new_k,fmt_rest,fmt)};
           default:
            var fmt_rest$0=fmtty$0[1];
            return function(reader)
             {function new_k(readers_rest)
               {return caml_call1(k,[0,reader,readers_rest])}
              return take_fmtty_format_readers(new_k,fmt_rest$0,fmt)}}
        if(counter >= 50)
         return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
        var counter$0=counter + 1 | 0;
        return take_format_readers$0(counter$0,k,fmt)}}
    function take_format_readers(k,fmt)
     {return caml_trampoline(take_format_readers$0(0,k,fmt))}
    function take_fmtty_format_readers(k,fmtty,fmt)
     {return caml_trampoline(take_fmtty_format_readers$0(0,k,fmtty,fmt))}
    function pad_prec_scanf(ib,fmt,readers,pad,prec,scan,token)
     {if(typeof pad === "number")
       {if(typeof prec !== "number")
         {var p=prec[1];
          caml_call3(scan,max_int,p,ib);
          var x$0=caml_call1(token,ib);
          return [0,x$0,make_scanf(ib,fmt,readers)]}
        if(prec)return invalid_arg(cst_scanf_bad_conversion);
        caml_call3(scan,max_int,max_int,ib);
        var x=caml_call1(token,ib);
        return [0,x,make_scanf(ib,fmt,readers)]}
      if(0 !== pad[0])return invalid_arg(cst_scanf_bad_conversion$2);
      if(! pad[1])return invalid_arg(cst_scanf_bad_conversion$1);
      var _hz_=pad[2];
      if(typeof prec !== "number")
       {var p$0=prec[1];
        caml_call3(scan,_hz_,p$0,ib);
        var x$2=caml_call1(token,ib);
        return [0,x$2,make_scanf(ib,fmt,readers)]}
      if(prec)return invalid_arg(cst_scanf_bad_conversion$0);
      caml_call3(scan,_hz_,max_int,ib);
      var x$1=caml_call1(token,ib);
      return [0,x$1,make_scanf(ib,fmt,readers)]}
    function make_scanf(ib,fmt,readers)
     {var fmt$0=fmt;
      for(;;)
       {if(typeof fmt$0 === "number")return 0;
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           scan_char(0,ib);
           var c=token_char(ib);
           return [0,c,make_scanf(ib,rest,readers)];
          case 1:
           var rest$0=fmt$0[1];
           scan_caml_char(0,ib);
           var c$0=token_char(ib);
           return [0,c$0,make_scanf(ib,rest$0,readers)];
          case 2:
           var _hm_=fmt$0[1],_hn_=fmt$0[2];
           if(typeof _hn_ !== "number")
            switch(_hn_[0])
             {case 17:
               var
                rest$2=_hn_[2],
                fmting_lit=_hn_[1],
                match=stopper_of_formatting_lit(fmting_lit),
                str=match[2],
                stp=match[1],
                scan$0=
                 function(width,param,ib)
                  {return scan_string([0,stp],width,ib)},
                str_rest=[11,str,rest$2];
               return pad_prec_scanf
                       (ib,str_rest,readers,_hm_,0,scan$0,token_string);
              case 18:
               var _ho_=_hn_[1];
               if(0 === _ho_[0])
                {var
                  rest$3=_hn_[2],
                  match$0=_ho_[1],
                  fmt$1=match$0[1],
                  scan$1=
                   function(width,param,ib){return scan_string(_cS_,width,ib)};
                 return pad_prec_scanf
                         (ib,
                          concat_fmt(fmt$1,rest$3),
                          readers,
                          _hm_,
                          0,
                          scan$1,
                          token_string)}
               var
                rest$4=_hn_[2],
                match$1=_ho_[1],
                fmt$2=match$1[1],
                scan$2=
                 function(width,param,ib){return scan_string(_cT_,width,ib)};
               return pad_prec_scanf
                       (ib,
                        concat_fmt(fmt$2,rest$4),
                        readers,
                        _hm_,
                        0,
                        scan$2,
                        token_string)
              }
           var
            rest$1=fmt$0[2],
            scan=function(width,param,ib){return scan_string(0,width,ib)};
           return pad_prec_scanf(ib,rest$1,readers,_hm_,0,scan,token_string);
          case 3:
           var
            rest$5=fmt$0[2],
            pad=fmt$0[1],
            scan$3=function(width,param,ib){return scan_caml_string(width,ib)};
           return pad_prec_scanf(ib,rest$5,readers,pad,0,scan$3,token_string);
          case 4:
           var
            rest$6=fmt$0[4],
            prec=fmt$0[3],
            pad$0=fmt$0[2],
            iconv=fmt$0[1],
            conv=integer_conversion_of_char(char_of_iconv(iconv)),
            scan$4=
             function(width,param,ib)
              {return scan_int_conversion(conv,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$6,
                    readers,
                    pad$0,
                    prec,
                    scan$4,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv,ib))});
          case 5:
           var
            rest$7=fmt$0[4],
            prec$0=fmt$0[3],
            pad$1=fmt$0[2],
            iconv$0=fmt$0[1],
            conv$0=integer_conversion_of_char(char_of_iconv(iconv$0)),
            scan$5=
             function(width,param,ib)
              {return scan_int_conversion(conv$0,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$7,
                    readers,
                    pad$1,
                    prec$0,
                    scan$5,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$0,ib))});
          case 6:
           var
            rest$8=fmt$0[4],
            prec$1=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$1=fmt$0[1],
            conv$1=integer_conversion_of_char(char_of_iconv(iconv$1)),
            scan$6=
             function(width,param,ib)
              {return scan_int_conversion(conv$1,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$8,
                    readers,
                    pad$2,
                    prec$1,
                    scan$6,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$1,ib))});
          case 7:
           var
            rest$9=fmt$0[4],
            prec$2=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$2=fmt$0[1],
            conv$2=integer_conversion_of_char(char_of_iconv(iconv$2)),
            scan$7=
             function(width,param,ib)
              {return scan_int_conversion(conv$2,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$9,
                    readers,
                    pad$3,
                    prec$2,
                    scan$7,
                    function(ib)
                     {return caml_int64_of_string(token_int_literal(conv$2,ib))});
          case 8:
           switch(fmt$0[1][2])
            {case 5:
             case 8:
              var rest$11=fmt$0[4],prec$4=fmt$0[3],pad$5=fmt$0[2];
              return pad_prec_scanf
                      (ib,
                       rest$11,
                       readers,
                       pad$5,
                       prec$4,
                       scan_caml_float,
                       token_float);
             case 6:
             case 7:
              var rest$12=fmt$0[4],prec$5=fmt$0[3],pad$6=fmt$0[2];
              return pad_prec_scanf
                      (ib,rest$12,readers,pad$6,prec$5,scan_hex_float,token_float);
             default:
              var rest$10=fmt$0[4],prec$3=fmt$0[3],pad$4=fmt$0[2];
              return pad_prec_scanf
                      (ib,rest$10,readers,pad$4,prec$3,scan_float,token_float)}
          case 9:
           var
            rest$13=fmt$0[2],
            pad$7=fmt$0[1],
            scan$8=
             function(param,_hy_,ib)
              {var
                c=checked_peek_char(ib),
                m=
                 102 === c
                  ?5
                  :116 === c?4:bad_input(caml_call1(sprintf(_cP_),c));
               return scan_string(0,m,ib)};
           return pad_prec_scanf(ib,rest$13,readers,pad$7,0,scan$8,token_bool);
          case 10:
           var rest$14=fmt$0[1];
           if(! end_of_input(ib))return bad_input(cst_end_of_input_not_found);
           var fmt$0=rest$14;
           continue;
          case 11:
           var rest$15=fmt$0[2],str$0=fmt$0[1];
           iter$4(function(_hx_){return check_char(ib,_hx_)},str$0);
           var fmt$0=rest$15;
           continue;
          case 12:
           var rest$16=fmt$0[2],chr=fmt$0[1];
           check_char(ib,chr);
           var fmt$0=rest$16;
           continue;
          case 13:
           var rest$17=fmt$0[3],fmtty=fmt$0[2],pad_opt=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt),ib);
           var s=token_string(ib);
           try
            {var _hp_=format_of_string_fmtty(s,fmtty),fmt$3=_hp_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg=exn[2],fmt$3=bad_input(msg)}
           return [0,fmt$3,make_scanf(ib,rest$17,readers)];
          case 14:
           var rest$18=fmt$0[3],fmtty$0=fmt$0[2],pad_opt$0=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt$0),ib);
           var s$0=token_string(ib);
           try
            {var
              match$2=fmt_ebb_of_string(0,s$0),
              fmt$6=match$2[1],
              match$3=fmt_ebb_of_string(0,s$0),
              fmt$7=match$3[1],
              fmt$8=type_format(fmt$7,erase_rel(symm(fmtty$0))),
              _hr_=type_format(fmt$6,erase_rel(fmtty$0)),
              fmt$5=fmt$8,
              fmt$4=_hr_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var
              msg$0=exn[2],
              _hq_=bad_input(msg$0),
              fmt$5=_hq_[2],
              fmt$4=_hq_[1]}
           return [0,
                   [0,fmt$4,s$0],
                   make_scanf(ib,concat_fmt(fmt$5,rest$18),readers)];
          case 15:return invalid_arg(cst_scanf_bad_conversion_a);
          case 16:return invalid_arg(cst_scanf_bad_conversion_t);
          case 17:
           var
            rest$19=fmt$0[2],
            formatting_lit=fmt$0[1],
            _hs_=string_of_formatting_lit(formatting_lit);
           iter$4(function(_hw_){return check_char(ib,_hw_)},_hs_);
           var fmt$0=rest$19;
           continue;
          case 18:
           var _ht_=fmt$0[1];
           if(0 === _ht_[0])
            {var rest$20=fmt$0[2],match$4=_ht_[1],fmt$9=match$4[1];
             check_char(ib,64);
             check_char(ib,123);
             var fmt$10=concat_fmt(fmt$9,rest$20),fmt$0=fmt$10;
             continue}
           var rest$21=fmt$0[2],match$5=_ht_[1],fmt$11=match$5[1];
           check_char(ib,64);
           check_char(ib,91);
           var fmt$12=concat_fmt(fmt$11,rest$21),fmt$0=fmt$12;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           if(! readers)return invalid_arg(cst_scanf_missing_reader);
           var
            readers_rest=readers[2],
            reader=readers[1],
            x=caml_call1(reader,ib);
           return [0,x,make_scanf(ib,fmt_rest,readers_rest)];
          case 20:
           var _hu_=fmt$0[1],_hv_=fmt$0[3];
           if(typeof _hv_ !== "number" && 17 === _hv_[0])
            {var
              rest$23=_hv_[2],
              fmting_lit$0=_hv_[1],
              char_set$0=fmt$0[2],
              match$6=stopper_of_formatting_lit(fmting_lit$0),
              str$1=match$6[2],
              stp$0=match$6[1],
              width$0=width_of_pad_opt(_hu_);
             scan_chars_in_char_set(char_set$0,[0,stp$0],width$0,ib);
             var s$2=token_string(ib),str_rest$0=[11,str$1,rest$23];
             return [0,s$2,make_scanf(ib,str_rest$0,readers)]}
           var
            rest$22=fmt$0[3],
            char_set=fmt$0[2],
            width=width_of_pad_opt(_hu_);
           scan_chars_in_char_set(char_set,0,width,ib);
           var s$1=token_string(ib);
           return [0,s$1,make_scanf(ib,rest$22,readers)];
          case 21:
           var
            rest$24=fmt$0[2],
            counter=fmt$0[1],
            count=get_counter(ib,counter);
           return [0,count,make_scanf(ib,rest$24,readers)];
          case 22:
           var rest$25=fmt$0[1],c$1=checked_peek_char(ib);
           return [0,c$1,make_scanf(ib,rest$25,readers)];
          case 23:
           var
            rest$26=fmt$0[2],
            ign=fmt$0[1],
            match$7=param_format_of_ignored_format(ign,rest$26),
            fmt$13=match$7[1],
            match$8=make_scanf(ib,fmt$13,readers);
           if(! match$8)throw [0,Assert_failure,_cU_];
           var arg_rest=match$8[2];
           return arg_rest;
          default:return invalid_arg(cst_scanf_bad_conversion_custo)}}}
    function kscanf_gen(ib,ef,af,param)
     {var str=param[2],fmt=param[1];
      function apply(f,args)
       {var f$0=f,args$0=args;
        for(;;)
         {if(! args$0)return f$0;
          var r=args$0[2],x=args$0[1],f$1=caml_call1(f$0,x),f$0=f$1,args$0=r}}
      function k(readers,f)
       {reset_token(ib);
        try
         {var args=make_scanf(ib,fmt,readers)}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          if
           (exc[1]
            !==
            Scan_failure
            &&
            exc[1]
            !==
            Failure
            &&
            exc
            !==
            End_of_file)
           {if(exc[1] !== Invalid_argument)throw exc;
            var msg=exc[2];
            return invalid_arg
                    (cat(msg,cat(cst_in_format,cat(escaped$1(str),cst$81))))}
          return caml_call2(ef,ib,exc)}
        return caml_call1(af,apply(f,args))}
      return take_format_readers(k,fmt)}
    function kscanf(ib,ef,fmt)
     {return kscanf_gen(ib,ef,function(x){return x},fmt)}
    function kscanf_opt(ib,fmt)
     {function _hk_(x){return [0,x]}
      return kscanf_gen(ib,function(param,_hl_){return 0},_hk_,fmt)}
    function bscanf(ib,fmt){return kscanf(ib,scanf_bad_input,fmt)}
    function bscanf_opt(ib,fmt){return kscanf_opt(ib,fmt)}
    function ksscanf(s,ef,fmt){return kscanf(from_string$1(s),ef,fmt)}
    function sscanf(s,fmt)
     {return kscanf(from_string$1(s),scanf_bad_input,fmt)}
    function sscanf_opt(s,fmt){return kscanf_opt(from_string$1(s),fmt)}
    function scanf(fmt){return kscanf(stdin$0,scanf_bad_input,fmt)}
    function scanf_opt(fmt){return kscanf_opt(stdin$0,fmt)}
    function bscanf_format(ib,format,f)
     {scan_caml_string(max_int,ib);
      var str=token_string(ib);
      try
       {var _hj_=format_of_string_format(str,format),fmt=_hj_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== Failure)throw exn;
        var msg=exn[2],fmt=bad_input(msg)}
      return caml_call1(f,fmt)}
    function sscanf_format(s,format,f)
     {return bscanf_format(from_string$1(s),format,f)}
    function format_from_string(s,fmt)
     {function _hi_(x){return x}
      return sscanf_format(cat(cst$83,cat(escaped$1(s),cst$82)),fmt,_hi_)}
    function unescaped(s)
     {function _hh_(x){return x}
      return caml_call1(sscanf(cat(cst$85,cat(s,cst$84)),_cV_),_hh_)}
    var
     Stdlib_Scanf=
      [0,
       [0,
        stdin$0,
        open_in,
        open_in_bin,
        close_in,
        open_in,
        open_in_bin,
        from_string$1,
        from_function$0,
        from_channel$0,
        end_of_input,
        beginning_of_input,
        name_of_input],
       Scan_failure,
       bscanf,
       bscanf_opt,
       sscanf,
       sscanf_opt,
       scanf,
       scanf_opt,
       kscanf,
       ksscanf,
       bscanf_format,
       sscanf_format,
       format_from_string,
       unescaped];
    caml_register_global(808,Stdlib_Scanf,"Stdlib__Scanf");
    function register(name,v){return caml_register_named_value(name,v)}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var Stdlib_Callback=[0,register,register_exception];
    caml_register_global(809,Stdlib_Callback,"Stdlib__Callback");
    function copy$6(o){var o$0=o.slice();return caml_set_oo_id(o$0)}
    var params$0=[0,1,1,1,3,16],initial_object_size=2,dummy_item=0;
    function public_method_label(s)
     {var accu=[0,0],_he_=caml_ml_string_length(s) - 1 | 0,_hd_=0;
      if(_he_ >= 0)
       {var i=_hd_;
        for(;;)
         {var _hf_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _hf_ | 0;
          var _hg_=i + 1 | 0;
          if(_he_ !== i){var i=_hg_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    function compare$14(x,y){return caml_string_compare(x,y)}
    var Vars=caml_call1(Stdlib_Map[1],[0,compare$14]);
    function compare$15(x,y){return caml_string_compare(x,y)}
    var
     Meths=caml_call1(Stdlib_Map[1],[0,compare$15]),
     compare$16=caml_int_compare,
     Labs=caml_call1(Stdlib_Map[1],[0,compare$16]),
     dummy_table=[0,0,[0,dummy_item],Meths[1],Labs[1],0,0,Vars[1],0],
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _g9_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _g9_;
      var _g$_=len - 1 | 0,_g__=0;
      if(_g$_ >= 0)
       {var i=_g__;
        for(;;)
         {var
           _hb_=(i * 2 | 0) + 3 | 0,
           _ha_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_hb_)[1 + _hb_] = _ha_;
          var _hc_=i + 1 | 0;
          if(_g$_ !== i){var i=_hc_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$1(array,new_size)
     {var old_size=array[2].length - 1,_g7_=old_size < new_size?1:0;
      if(_g7_)
       {var new_buck=caml_make_vect(new_size,dummy_met);
        blit$1(array[2],0,new_buck,0,old_size);
        array[2] = new_buck;
        var _g8_=0}
      else
       var _g8_=_g7_;
      return _g8_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$1(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _g5_=caml_call2(Meths[28],name,table[3]);return _g5_}
      catch(_g6_)
       {_g6_ = caml_wrap_exception(_g6_);
        if(_g6_ !== Not_found)throw _g6_;
        var label=new_method(table);
        table[3] = caml_call3(Meths[4],name,label,table[3]);
        table[4] = caml_call3(Labs[4],label,1,table[4]);
        return label}}
    function get_method_labels(table,names)
     {return map$7(function(_g4_){return get_method_label(table,_g4_)},names)}
    function set_method(table,label,element)
     {method_count[1]++;
      return caml_call2(Labs[28],label,table[4])
              ?(resize$1(table,label + 1 | 0),
                caml_check_bound(table[2],label)[1 + label]
                =
                element,
                0)
              :(table[6] = [0,[0,label,element],table[6]],0)}
    function get_method(table,label)
     {try
       {var _g2_=assoc(label,table[6]);return _g2_}
      catch(_g3_)
       {_g3_ = caml_wrap_exception(_g3_);
        if(_g3_ === Not_found)
         return caml_check_bound(table[2],label)[1 + label];
        throw _g3_}}
    function to_list$3(arr){return 0 === arr?0:to_list$1(arr)}
    function narrow(table,vars,virt_meths,concr_meths)
     {var
       vars$0=to_list$3(vars),
       virt_meths$0=to_list$3(virt_meths),
       concr_meths$0=to_list$3(concr_meths),
       virt_meth_labs=
        map$4
         (function(_g1_){return get_method_label(table,_g1_)},virt_meths$0),
       concr_meth_labs=
        map$4
         (function(_g0_){return get_method_label(table,_g0_)},concr_meths$0);
      table[5]
      =
      [0,
       [0,table[3],table[4],table[6],table[7],virt_meth_labs,vars$0],
       table[5]];
      var _gR_=Vars[1],_gS_=table[7];
      function _gT_(lab,info,tvars)
       {return mem(lab,vars$0)?caml_call3(Vars[4],lab,info,tvars):tvars}
      table[7] = caml_call3(Vars[13],_gT_,_gS_,_gR_);
      var by_name=[0,Meths[1]],by_label=[0,Labs[1]];
      iter2$0
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          var _gW_=by_label[1];
          try
           {var _gY_=caml_call2(Labs[28],label,table[4]),_gX_=_gY_}
          catch(_gZ_)
           {_gZ_ = caml_wrap_exception(_gZ_);
            if(_gZ_ !== Not_found)throw _gZ_;
            var _gX_=1}
          by_label[1] = caml_call3(Labs[4],label,_gX_,_gW_);
          return 0},
        concr_meths$0,
        concr_meth_labs);
      iter2$0
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          by_label[1] = caml_call3(Labs[4],label,0,by_label[1]);
          return 0},
        virt_meths$0,
        virt_meth_labs);
      table[3] = by_name[1];
      table[4] = by_label[1];
      var _gU_=0,_gV_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meth_labs)?hm:[0,met,hm]},
        _gV_,
        _gU_);
      return 0}
    function widen(table)
     {var
       match=hd(table[5]),
       vars=match[6],
       virt_meths=match[5],
       saved_vars=match[4],
       saved_hidden_meths=match[3],
       by_label=match[2],
       by_name=match[1];
      table[5] = tl(table[5]);
      table[7]
      =
      fold_left$0
       (function(s,v)
         {var _gQ_=caml_call2(Vars[28],v,table[7]);
          return caml_call3(Vars[4],v,_gQ_,s)},
        saved_vars,
        vars);
      table[3] = by_name;
      table[4] = by_label;
      var _gP_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meths)?hm:[0,met,hm]},
        _gP_,
        saved_hidden_meths);
      return 0}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _gN_=caml_call2(Vars[28],name,table[7]);return _gN_}
      catch(_gO_)
       {_gO_ = caml_wrap_exception(_gO_);
        if(_gO_ !== Not_found)throw _gO_;
        var index=new_slot(table);
        if(caml_string_notequal(name,cst$86))
         table[7] = caml_call3(Vars[4],name,index,table[7]);
        return index}}
    function to_array(arr){return caml_equal(arr,0)?[0]:arr}
    function new_methods_variables(table,meths,vals)
     {var
       meths$0=to_array(meths),
       nmeths=meths$0.length - 1,
       nvals=vals.length - 1,
       res=caml_make_vect(nmeths + nvals | 0,0),
       _gF_=nmeths - 1 | 0,
       _gE_=0;
      if(_gF_ >= 0)
       {var i$0=_gE_;
        for(;;)
         {var
           _gL_=
            get_method_label(table,caml_check_bound(meths$0,i$0)[1 + i$0]);
          caml_check_bound(res,i$0)[1 + i$0] = _gL_;
          var _gM_=i$0 + 1 | 0;
          if(_gF_ !== i$0){var i$0=_gM_;continue}
          break}}
      var _gH_=nvals - 1 | 0,_gG_=0;
      if(_gH_ >= 0)
       {var i=_gG_;
        for(;;)
         {var
           _gJ_=i + nmeths | 0,
           _gI_=new_variable(table,caml_check_bound(vals,i)[1 + i]);
          caml_check_bound(res,_gJ_)[1 + _gJ_] = _gI_;
          var _gK_=i + 1 | 0;
          if(_gH_ !== i){var i=_gK_;continue}
          break}}
      return res}
    function get_variable(table,name)
     {try
       {var _gC_=caml_call2(Vars[28],name,table[7]);return _gC_}
      catch(_gD_)
       {_gD_ = caml_wrap_exception(_gD_);
        if(_gD_ === Not_found)throw [0,Assert_failure,_cW_];
        throw _gD_}}
    function get_variables(table,names)
     {return map$7(function(_gB_){return get_variable(table,_gB_)},names)}
    function add_initializer(table,f){table[8] = [0,f,table[8]];return 0}
    function create_table(public_methods)
     {if(0 === public_methods)return new_table([0]);
      var
       tags=map$7(public_method_label,public_methods),
       table=new_table(tags);
      iteri$3
       (function(i,met)
         {var lab=(i * 2 | 0) + 2 | 0;
          table[3] = caml_call3(Meths[4],met,lab,table[3]);
          table[4] = caml_call3(Labs[4],lab,1,table[4]);
          return 0},
        public_methods);
      return table}
    function init_class(table)
     {inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
      table[8] = rev(table[8]);
      return resize$1
              (table,
               3 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0)}
    function inherits(cla,vals,virt_meths,concr_meths,param,top)
     {var env=param[4],super$0=param[2];
      narrow(cla,vals,virt_meths,concr_meths);
      var init=top?caml_call2(super$0,cla,env):caml_call1(super$0,cla);
      widen(cla);
      var
       _gw_=0,
       _gx_=to_array(concr_meths),
       _gy_=
        [0,
         map$7
          (function(nm){return get_method(cla,get_method_label(cla,nm))},_gx_),
         _gw_],
       _gz_=to_array(vals);
      return caml_array_concat
              ([0,
                [0,init],
                [0,
                 map$7(function(_gA_){return get_variable(cla,_gA_)},_gz_),
                 _gy_]])}
    function make_class(pub_meths,class_init)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      return [0,caml_call1(env_init,0),class_init,env_init,0]}
    function make_class_store(pub_meths,class_init,init_table)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      init_table[2] = class_init;
      init_table[1] = env_init;
      return 0}
    function dummy_class(loc)
     {function undef(param){throw [0,Undefined_recursive_module,loc]}
      return [0,undef,undef,undef,0]}
    function create_object(table)
     {var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function create_object_opt(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function iter_f(obj,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var l=param$0[2],f=param$0[1];
        caml_call1(f,obj);
        var param$0=l}}
    function run_initializers(obj,table)
     {var inits=table[8],_gv_=0 !== inits?1:0;
      return _gv_?iter_f(obj,inits):_gv_}
    function run_initializers_opt(obj_0,obj,table)
     {if(obj_0)return obj;
      var inits=table[8];
      if(0 !== inits)iter_f(obj,inits);
      return obj}
    function create_object_and_run_initiali(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=create_object(table);
      run_initializers(obj,table);
      return obj}
    function get_data(param)
     {if(param)return param[2];throw [0,Assert_failure,_c0_]}
    function build_path(n,keys,tables)
     {var res=[0,0,0,0],r=[0,res],_gr_=0;
      if(n >= 0)
       {var i=_gr_;
        for(;;)
         {var _gt_=r[1];
          r[1] = [0,caml_check_bound(keys,i)[1 + i],_gt_,0];
          var _gu_=i + 1 | 0;
          if(n !== i){var i=_gu_;continue}
          break}}
      var _gs_=r[1];
      if(! tables)throw [0,Assert_failure,_cX_];
      tables[2] = _gs_;
      return res}
    function lookup_tables(root,keys)
     {var tables$2=get_data(root);
      if(! tables$2)return build_path(keys.length - 1 - 1 | 0,keys,root);
      var i$1=keys.length - 1 - 1 | 0,i=i$1,tables=tables$2;
      a:
      for(;;)
       {if(0 > i)return tables;
        var key=caml_check_bound(keys,i)[1 + i],tables$0=tables;
        for(;;)
         {if(! tables$0)throw [0,Assert_failure,_cZ_];
          if(tables$0[1] === key)
           {var tables$1=get_data(tables$0);
            if(! tables$1)throw [0,Assert_failure,_c2_];
            var i$0=i - 1 | 0,i=i$0,tables=tables$1;
            continue a}
          if(! tables$0)throw [0,Assert_failure,_c1_];
          var _gq_=tables$0[3];
          if(_gq_){var tables$0=_gq_;continue}
          var v=[0,key,0,0];
          if(! tables$0)throw [0,Assert_failure,_cY_];
          tables$0[3] = v;
          return build_path(i - 1 | 0,keys,v)}}}
    function new_cache(table)
     {var n=new_method(table),switch$0=0;
      if
       (0
        !==
        (n % 2 | 0)
        &&
        (2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0)
        >=
        n)
       {var n$0=new_method(table);switch$0 = 1}
      if(! switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[1 + n$0] = 0;
      return n$0}
    function set_methods(table,methods)
     {var len=methods.length - 1,i=[0,0];
      for(;;)
       {if(i[1] >= len)return 0;
        var
         _gk_=i[1],
         label=caml_check_bound(methods,_gk_)[1 + _gk_],
         next=
          function(param)
           {i[1]++;
            var _gp_=i[1];
            return caml_check_bound(methods,_gp_)[1 + _gp_]},
         clo=next(0);
        if(typeof clo === "number")
         switch(clo)
          {case 0:
            var
             x=next(0),
             clo$0=function(x){return function(obj){return x}}(x);
            break;
           case 1:
            var
             n=next(0),
             clo$0=function(n){return function(obj){return obj[1 + n]}}(n);
            break;
           case 2:
            var
             e=next(0),
             n$0=next(0),
             clo$0=
              function(e,n){return function(obj){return obj[1 + e][1 + n]}}
               (e,n$0);
            break;
           case 3:
            var
             n$1=next(0),
             clo$0=
              function(n)
                {return function(obj){return caml_call1(obj[1][1 + n],obj)}}
               (n$1);
            break;
           case 4:
            var
             n$2=next(0),
             clo$0=
              function(n){return function(obj,x){obj[1 + n] = x;return 0}}
               (n$2);
            break;
           case 5:
            var
             f=next(0),
             x$0=next(0),
             clo$0=
              function(f,x){return function(obj){return caml_call1(f,x)}}
               (f,x$0);
            break;
           case 6:
            var
             f$0=next(0),
             n$3=next(0),
             clo$0=
              function(f,n)
                {return function(obj){return caml_call1(f,obj[1 + n])}}
               (f$0,n$3);
            break;
           case 7:
            var
             f$1=next(0),
             e$0=next(0),
             n$4=next(0),
             clo$0=
              function(f,e,n)
                {return function(obj){return caml_call1(f,obj[1 + e][1 + n])}}
               (f$1,e$0,n$4);
            break;
           case 8:
            var
             f$2=next(0),
             n$5=next(0),
             clo$0=
              function(f,n)
                {return function(obj)
                  {return caml_call1(f,caml_call1(obj[1][1 + n],obj))}}
               (f$2,n$5);
            break;
           case 9:
            var
             f$3=next(0),
             x$1=next(0),
             y=next(0),
             clo$0=
              function(f,x,y){return function(obj){return caml_call2(f,x,y)}}
               (f$3,x$1,y);
            break;
           case 10:
            var
             f$4=next(0),
             x$2=next(0),
             n$6=next(0),
             clo$0=
              function(f,x,n)
                {return function(obj){return caml_call2(f,x,obj[1 + n])}}
               (f$4,x$2,n$6);
            break;
           case 11:
            var
             f$5=next(0),
             x$3=next(0),
             e$1=next(0),
             n$7=next(0),
             clo$0=
              function(f,x,e,n)
                {return function(obj)
                  {return caml_call2(f,x,obj[1 + e][1 + n])}}
               (f$5,x$3,e$1,n$7);
            break;
           case 12:
            var
             f$6=next(0),
             x$4=next(0),
             n$8=next(0),
             clo$0=
              function(f,x,n)
                {return function(obj)
                  {return caml_call2(f,x,caml_call1(obj[1][1 + n],obj))}}
               (f$6,x$4,n$8);
            break;
           case 13:
            var
             f$7=next(0),
             n$9=next(0),
             x$5=next(0),
             clo$0=
              function(f,n,x)
                {return function(obj){return caml_call2(f,obj[1 + n],x)}}
               (f$7,n$9,x$5);
            break;
           case 14:
            var
             f$8=next(0),
             e$2=next(0),
             n$10=next(0),
             x$6=next(0),
             clo$0=
              function(f,e,n,x)
                {return function(obj)
                  {return caml_call2(f,obj[1 + e][1 + n],x)}}
               (f$8,e$2,n$10,x$6);
            break;
           case 15:
            var
             f$9=next(0),
             n$11=next(0),
             x$7=next(0),
             clo$0=
              function(f,n,x)
                {return function(obj)
                  {return caml_call2(f,caml_call1(obj[1][1 + n],obj),x)}}
               (f$9,n$11,x$7);
            break;
           case 16:
            var
             n$12=next(0),
             x$8=next(0),
             clo$0=
              function(n,x)
                {return function(obj){return caml_call2(obj[1][1 + n],obj,x)}}
               (n$12,x$8);
            break;
           case 17:
            var
             n$13=next(0),
             m=next(0),
             clo$0=
              function(n,m)
                {return function(obj)
                  {return caml_call2(obj[1][1 + n],obj,obj[1 + m])}}
               (n$13,m);
            break;
           case 18:
            var
             n$14=next(0),
             e$3=next(0),
             m$0=next(0),
             clo$0=
              function(n,e,m)
                {return function(obj)
                  {return caml_call2(obj[1][1 + n],obj,obj[1 + e][1 + m])}}
               (n$14,e$3,m$0);
            break;
           case 19:
            var
             n$15=next(0),
             m$1=next(0),
             clo$0=
              function(n,m)
                {return function(obj)
                  {var _gn_=caml_call1(obj[1][1 + m],obj);
                   return caml_call2(obj[1][1 + n],obj,_gn_)}}
               (n$15,m$1);
            break;
           case 20:
            var m$2=next(0),x$9=next(0);
            new_cache(table);
            var
             clo$0=
              function(m,x)
                {return function(obj)
                  {return caml_call1(caml_get_public_method(x,m,0),x)}}
               (m$2,x$9);
            break;
           case 21:
            var m$3=next(0),n$16=next(0);
            new_cache(table);
            var
             clo$0=
              function(m,n)
                {return function(obj)
                  {var _gm_=obj[1 + n];
                   return caml_call1(caml_get_public_method(_gm_,m,0),_gm_)}}
               (m$3,n$16);
            break;
           case 22:
            var m$4=next(0),e$4=next(0),n$17=next(0);
            new_cache(table);
            var
             clo$0=
              function(m,e,n)
                {return function(obj)
                  {var _gl_=obj[1 + e][1 + n];
                   return caml_call1(caml_get_public_method(_gl_,m,0),_gl_)}}
               (m$4,e$4,n$17);
            break;
           default:
            var m$5=next(0),n$18=next(0);
            new_cache(table);
            var
             clo$0=
              function(m,n)
                {return function(obj)
                  {var _go_=caml_call1(obj[1][1 + n],obj);
                   return caml_call1(caml_get_public_method(_go_,m,0),_go_)}}
               (m$5,n$18)}
        else
         var clo$0=clo;
        set_method(table,label,clo$0);
        i[1]++}}
    function stats$0(param)
     {return [0,table_count[1],method_count[1],inst_var_count[1]]}
    var
     CamlinternalOO=
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy$6,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initiali,
       lookup_tables,
       params$0,
       stats$0];
    caml_register_global(810,CamlinternalOO,"CamlinternalOO");
    var Stdlib_Oo=[0,copy$6,public_method_label,public_method_label];
    caml_register_global(811,Stdlib_Oo,"Stdlib__Oo");
    function init_mod_block(loc,comps$0)
     {var
       length=comps$0.length - 1,
       modu=caml_obj_block(0,length),
       _gg_=length - 1 | 0,
       _gf_=0;
      if(_gg_ >= 0)
       {var i=_gf_;
        for(;;)
         {var shape=caml_check_bound(comps$0,i)[1 + i];
          if(typeof shape === "number")
           switch(shape)
            {case 0:
              var
               fn$0=
                function(i)
                 {function fn(x)
                   {var fn$0=modu[1 + i];
                    if(fn === fn$0)throw [0,Undefined_recursive_module,loc];
                    return caml_call1(fn$0,x)}
                  return fn},
               fn=fn$0(i),
               init=fn;
              break;
             case 1:
              var l=[];
              runtime.caml_update_dummy
               (l,
                [246,
                 function(l,i)
                   {return function(_gi_)
                     {var l$0=modu[1 + i];
                      if(l === l$0)throw [0,Undefined_recursive_module,loc];
                      var _gj_=caml_obj_tag(l$0);
                      if(250 === _gj_)return l$0[1];
                      if(246 !== _gj_ && 244 !== _gj_)return l$0;
                      return force_lazy_block(l$0)}}
                  (l,i)]);
              var init=l;
              break;
             default:var init=dummy_class(loc)}
          else
           if(0 === shape[0])
            var comps=shape[1],init=init_mod_block(loc,comps);
           else
            var v=shape[1],init=v;
          modu[1 + i] = init;
          var _gh_=i + 1 | 0;
          if(_gg_ !== i){var i=_gh_;continue}
          break}}
      return modu}
    function init_mod(loc,shape)
     {if(typeof shape !== "number" && 0 === shape[0])
       {var comps=shape[1];return init_mod_block(loc,comps)}
      return failwith(cst_CamlinternalMod_init_mod_n)}
    function update_mod_block(comps$0,o,n)
     {if(0 === caml_obj_tag(n) && comps$0.length - 1 <= n.length - 1)
       {var _gd_=comps$0.length - 1 - 1 | 0,_gc_=0;
        if(_gd_ >= 0)
         {var i=_gc_;
          for(;;)
           {var n$0=n[1 + i],shape=caml_check_bound(comps$0,i)[1 + i];
            if(typeof shape === "number")
             if(2 === shape)
              {var switch$0=0;
               if(0 === caml_obj_tag(n$0) && 4 === n$0.length - 1)
                {var cl=o[1 + i],j=0;
                 for(;;)
                  {cl[1 + j] = n$0[1 + j];
                   var _gb_=j + 1 | 0;
                   if(3 !== j){var j=_gb_;continue}
                   break}}
               else
                switch$0 = 1;
               if(switch$0)throw [0,Assert_failure,_c3_]}
             else
              o[1 + i] = n$0;
            else
             if(0 === shape[0])
              {var comps=shape[1];update_mod_block(comps,o[1 + i],n$0)}
            var _ge_=i + 1 | 0;
            if(_gd_ !== i){var i=_ge_;continue}
            break}}
        return 0}
      throw [0,Assert_failure,_c4_]}
    function update_mod(shape,o,n)
     {if(typeof shape !== "number" && 0 === shape[0])
       {var comps=shape[1];return update_mod_block(comps,o,n)}
      return failwith(cst_CamlinternalMod_update_mod)}
    var CamlinternalMod=[0,init_mod,update_mod];
    caml_register_global(812,CamlinternalMod,"CamlinternalMod");
    function MakeSeeded$0(H)
     {var prng=[246,function(_ga_){return caml_call1(_cq_[2],0)}];
      function create(opt,initial_size)
       {if(opt)
         var sth=opt[1],random=sth;
        else
         var random=caml_call1(Stdlib_Hashtbl[17],0);
        var x=16;
        for(;;)
         {if(initial_size > x && max_array_length >= (x * 2 | 0))
           {var x$0=x * 2 | 0,x=x$0;continue}
          if(random)
           {var _f__=caml_obj_tag(prng);
            if(250 === _f__)
             var _f$_=prng[1];
            else
             {var switch$0=0;
              if(246 === _f__ || 244 === _f__)switch$0 = 1;else var _f$_=prng;
              if(switch$0)var _f$_=force_lazy_block(prng)}
            var seed=caml_call1(_cq_[4],_f$_)}
          else
           var seed=0;
          return [0,0,caml_make_vect(x,0),seed,x]}}
      function clear(h)
       {h[1] = 0;
        var len=h[2].length - 1,_f8_=len - 1 | 0,_f7_=0;
        if(_f8_ >= 0)
         {var i=_f7_;
          for(;;)
           {caml_check_bound(h[2],i)[1 + i] = 0;
            var _f9_=i + 1 | 0;
            if(_f8_ !== i){var i=_f9_;continue}
            break}}
        return 0}
      function reset(h)
       {var len=h[2].length - 1;
        return len === h[4]
                ?clear(h)
                :(h[1] = 0,h[2] = caml_make_vect(h[4],0),0)}
      function copy(init)
       {var _f4_=init[4],_f5_=init[3],_f6_=copy$0(init[2]);
        return [0,init[1],_f6_,_f5_,_f4_]}
      function key_index(h,hkey){return hkey & (h[2].length - 1 - 1 | 0)}
      function clean(h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(! param$0)return 0;
            var hkey=param$0[1],rest=param$0[3],c=param$0[2];
            if(caml_call1(H[6],c))
             {var rest$0=param$0[3],c$0=param$0[2];
              return [0,hkey,c$0,do_bucket(rest$0)]}
            h[1] = h[1] - 1 | 0;
            var param$0=rest}}
        var d=h[2],_f1_=d.length - 1 - 1 | 0,_f0_=0;
        if(_f1_ >= 0)
         {var i=_f0_;
          for(;;)
           {var _f2_=do_bucket(caml_check_bound(d,i)[1 + i]);
            caml_check_bound(d,i)[1 + i] = _f2_;
            var _f3_=i + 1 | 0;
            if(_f1_ !== i){var i=_f3_;continue}
            break}}
        return 0}
      function resize(h)
       {var odata=h[2],osize=odata.length - 1,nsize=osize * 2 | 0;
        clean(h);
        var
         _fT_=nsize < max_array_length?1:0,
         _fU_=_fT_?(osize >>> 1 | 0) <= h[1]?1:0:_fT_;
        if(_fU_)
         {var ndata=caml_make_vect(nsize,0);
          h[2] = ndata;
          var
           insert_bucket=
            function(param)
             {if(! param)return 0;
              var rest=param[3],data=param[2],hkey=param[1];
              insert_bucket(rest);
              var
               nidx=key_index(h,hkey),
               _fZ_=[0,hkey,data,caml_check_bound(ndata,nidx)[1 + nidx]];
              caml_check_bound(ndata,nidx)[1 + nidx] = _fZ_;
              return 0},
           _fW_=osize - 1 | 0,
           _fV_=0;
          if(_fW_ >= 0)
           {var i=_fV_;
            for(;;)
             {insert_bucket(caml_check_bound(odata,i)[1 + i]);
              var _fY_=i + 1 | 0;
              if(_fW_ !== i){var i=_fY_;continue}
              break}}
          var _fX_=0}
        else
         var _fX_=_fU_;
        return _fX_}
      function add(h,key,info)
       {var
         hkey=caml_call2(H[2],h[3],key),
         i=key_index(h,hkey),
         container=caml_call2(H[1],key,info),
         bucket=[0,hkey,container,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _fS_=h[2].length - 1 << 1 < h[1]?1:0;
        return _fS_?resize(h):_fS_}
      function remove(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function remove_bucket(param)
         {var param$0=param;
          for(;;)
           {if(! param$0)return 0;
            var hk=param$0[1],next=param$0[3],c=param$0[2];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:h[1] = h[1] - 1 | 0;return next;
                case 1:return [0,hk,c,remove_bucket(next)];
                default:h[1] = h[1] - 1 | 0;var param$0=next;continue}}
            var next$0=param$0[3],c$0=param$0[2];
            return [0,hk,c$0,remove_bucket(next$0)]}}
        var
         i=key_index(h,hkey),
         _fR_=remove_bucket(caml_check_bound(h[2],i)[1 + i]);
        caml_check_bound(h[2],i)[1 + i] = _fR_;
        return 0}
      function find(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _fQ_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_fQ_)[1 + _fQ_],
         param=param$1;
        for(;;)
         {if(! param)throw Not_found;
          var hk=param[1],rest=param[3],c=param[2];
          if(hkey !== hk){var param$0=param[3],param=param$0;continue}
          var match=caml_call2(H[3],c,key);
          switch(match)
           {case 0:
             var match$0=caml_call1(H[4],c);
             if(match$0){var d=match$0[1];return d}
             var param=rest;
             continue;
            case 1:var param=rest;continue;
            default:var param=rest;continue}}}
      function find_opt(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _fP_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_fP_)[1 + _fP_],
         param=param$1;
        for(;;)
         {if(! param)return 0;
          var hk=param[1],rest=param[3],c=param[2];
          if(hkey !== hk){var param$0=param[3],param=param$0;continue}
          var match=caml_call2(H[3],c,key);
          switch(match)
           {case 0:
             var d=caml_call1(H[4],c);if(d)return d;var param=rest;continue;
            case 1:var param=rest;continue;
            default:var param=rest;continue}}}
      function find_all(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(! param$0)return 0;
            var hk=param$0[1],rest=param$0[3],c=param$0[2];
            if(hkey !== hk){var param$1=param$0[3],param$0=param$1;continue}
            var match=caml_call2(H[3],c,key);
            switch(match)
             {case 0:
               var match$0=caml_call1(H[4],c);
               if(match$0){var d=match$0[1];return [0,d,find_in_bucket(rest)]}
               var param$0=rest;
               continue;
              case 1:var param$0=rest;continue;
              default:var param$0=rest;continue}}}
        var _fO_=key_index(h,hkey);
        return find_in_bucket(caml_check_bound(h[2],_fO_)[1 + _fO_])}
      function replace(h,key,info)
       {var hkey=caml_call2(H[2],h[3],key);
        function replace_bucket(param)
         {var param$0=param;
          for(;;)
           {if(! param$0)throw Not_found;
            var hk=param$0[1],next=param$0[3],c=param$0[2];
            if(hkey !== hk){var param$1=param$0[3],param$0=param$1;continue}
            var match=caml_call2(H[3],c,key);
            if(! match)return caml_call3(H[5],c,key,info);
            var param$0=next}}
        var i=key_index(h,hkey),l=caml_check_bound(h[2],i)[1 + i];
        try
         {var _fM_=replace_bucket(l);return _fM_}
        catch(_fN_)
         {_fN_ = caml_wrap_exception(_fN_);
          if(_fN_ !== Not_found)throw _fN_;
          var container=caml_call2(H[1],key,info);
          caml_check_bound(h[2],i)[1 + i] = [0,hkey,container,l];
          h[1] = h[1] + 1 | 0;
          var _fL_=h[2].length - 1 << 1 < h[1]?1:0;
          return _fL_?resize(h):_fL_}}
      function mem(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _fK_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_fK_)[1 + _fK_],
         param=param$1;
        for(;;)
         {if(! param)return 0;
          var hk=param[1],rest=param[3],c=param[2];
          if(hk !== hkey){var param$0=param[3],param=param$0;continue}
          var match=caml_call2(H[3],c,key);
          if(! match)return 1;
          var param=rest}}
      function length(h){return h[1]}
      function bucket_length(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(! param$0)return accu$0;
          var
           param$1=param$0[3],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1}}
      function stats(h)
       {var
         _fG_=h[2],
         _fH_=0,
         mbl=
          fold_left$3
           (function(m,b){return max$1(m,bucket_length(0,b))},_fH_,_fG_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _fI_=h[2];
        iter$5
         (function(b)
           {var
             l=bucket_length(0,b),
             _fJ_=caml_check_bound(histo,l)[1 + l] + 1 | 0;
            caml_check_bound(histo,l)[1 + l] = _fJ_;
            return 0},
          _fI_);
        return [0,h[1],h[2].length - 1,mbl,histo]}
      function bucket_length_alive(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(! param$0)return accu$0;
          var rest=param$0[3],c=param$0[2];
          if(caml_call1(H[6],c))
           {var accu$1=accu$0 + 1 | 0,accu$0=accu$1,param$0=rest;continue}
          var param$1=param$0[3],param$0=param$1}}
      function stats_alive(h)
       {var
         size=[0,0],
         _fC_=h[2],
         _fD_=0,
         mbl=
          fold_left$3
           (function(m,b){return max$1(m,bucket_length_alive(0,b))},_fD_,_fC_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _fE_=h[2];
        iter$5
         (function(b)
           {var l=bucket_length_alive(0,b);
            size[1] = size[1] + l | 0;
            var _fF_=caml_check_bound(histo,l)[1 + l] + 1 | 0;
            caml_check_bound(histo,l)[1 + l] = _fF_;
            return 0},
          _fE_);
        return [0,size[1],h[2].length - 1,mbl,histo]}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              length,
              stats,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$10(param){return caml_call1(_o_[1],1)}
    function get_key$0(t){return caml_call2(_o_[3],t,0)}
    function set_key$0(t,k){return caml_call3(_o_[5],t,0,k)}
    function check_key$0(t){return caml_call2(_o_[7],t,0)}
    function get_data$0(t){return caml_call1(_o_[9],t)}
    function set_data(t,d){return caml_call2(_o_[11],t,d)}
    function make$5(key,data)
     {var eph=create$10(0);set_data(eph,data);set_key$0(eph,key);return eph}
    function query(eph,key)
     {var match=get_key$0(eph);
      if(! match)return 0;
      var k=match[1];
      return k === key?get_data$0(eph):0}
    function MakeSeeded$1(H)
     {function create(k,d)
       {var c=create$10(0);set_data(c,d);set_key$0(c,k);return c}
      var seeded_hash=H[2];
      function equal(c,k)
       {var match=get_key$0(c);
        if(! match)return 2;
        var k$0=match[1];
        return caml_call2(H[1],k,k$0)?0:1}
      function set_key_data(c,k,d)
       {caml_call1(_o_[12],c);set_key$0(c,k);return set_data(c,d)}
      return MakeSeeded$0
              ([0,
                create,
                seeded_hash,
                equal,
                get_data$0,
                set_key_data,
                check_key$0])}
    function Make$2(H)
     {var equal=H[1];
      function seeded_hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$1([0,equal,seeded_hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       length=include[12],
       stats=include[13],
       add_seq=include[14],
       replace_seq=include[15],
       clean=include[17],
       stats_alive=include[18],
       _fB_=include[1];
      function create(sz){return caml_call2(_fB_,_c5_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              length,
              stats,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function make$6(param){return [0,0]}
    function add$1(b,k,d){var _fA_=b[1];b[1] = [0,make$5(k,d),_fA_];return 0}
    function test_key(k,e)
     {var match=get_key$0(e);
      if(match){var x=match[1];if(x === k)return 1}
      return 0}
    function remove$0(b,k)
     {var l=b[1],acc=0;
      for(;;)
       {if(! l)return 0;
        var h=l[1],t=l[2];
        if(test_key(k,h)){b[1] = rev_append(acc,t);return 0}
        var l$0=l[2],acc$0=[0,h,acc],l=l$0,acc=acc$0}}
    function find$2(b,k)
     {var
       _fy_=b[1],
       match=find_opt(function(_fz_){return test_key(k,_fz_)},_fy_);
      if(! match)return 0;
      var e=match[1];
      return get_data$0(e)}
    function length$7(b){return length$1(b[1])}
    function clear$3(b){b[1] = 0;return 0}
    function create$11(param){return caml_call1(_o_[1],2)}
    function get_key1(t){return caml_call2(_o_[3],t,0)}
    function set_key1(t,k){return caml_call3(_o_[5],t,0,k)}
    function get_key2(t){return caml_call2(_o_[3],t,1)}
    function set_key2(t,k){return caml_call3(_o_[5],t,1,k)}
    function get_data$1(t){return caml_call1(_o_[9],t)}
    function set_data$0(t,d){return caml_call2(_o_[11],t,d)}
    function make$7(key1,key2,data)
     {var eph=create$11(0);
      set_data$0(eph,data);
      set_key1(eph,key1);
      set_key2(eph,key2);
      return eph}
    function query$0(eph,key1,key2)
     {var match=get_key1(eph);
      if(! match)return 0;
      var k=match[1];
      if(k !== key1)return 0;
      var match$0=get_key2(eph);
      if(! match$0)return 0;
      var k$0=match$0[1];
      return k$0 === key2?get_data$1(eph):0}
    function MakeSeeded$2(H1,H2)
     {function create(param,d)
       {var k2=param[2],k1=param[1],c=create$11(0);
        set_data$0(c,d);
        set_key1(c,k1);
        set_key2(c,k2);
        return c}
      function seeded_hash(seed,param)
       {var
         k2=param[2],
         k1=param[1],
         _fx_=caml_call2(H2[2],seed,k2) * 65599 | 0;
        return caml_call2(H1[2],seed,k1) + _fx_ | 0}
      function equal(c,param)
       {var k2=param[2],k1=param[1],match=get_key1(c),match$0=get_key2(c);
        if(match && match$0)
         {var k2$0=match$0[1],k1$0=match[1];
          if(caml_call2(H1[1],k1,k1$0) && caml_call2(H2[1],k2,k2$0))return 0;
          return 1}
        return 2}
      function set_key_data(c,param,d)
       {var k2=param[2],k1=param[1];
        caml_call1(_o_[12],c);
        set_key1(c,k1);
        set_key2(c,k2);
        return set_data$0(c,d)}
      function check_key(c)
       {var _fw_=caml_call2(_o_[7],c,0);
        return _fw_?caml_call2(_o_[7],c,1):_fw_}
      return MakeSeeded$0
              ([0,create,seeded_hash,equal,get_data$1,set_key_data,check_key])}
    function Make$3(H1,H2)
     {var equal=H2[1];
      function seeded_hash(seed,x){return caml_call1(H2[2],x)}
      var equal$0=H1[1],_fu_=[0,equal,seeded_hash];
      function seeded_hash$0(seed,x){return caml_call1(H1[2],x)}
      var
       include=MakeSeeded$2([0,equal$0,seeded_hash$0],_fu_),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       length=include[12],
       stats=include[13],
       add_seq=include[14],
       replace_seq=include[15],
       clean=include[17],
       stats_alive=include[18],
       _fv_=include[1];
      function create(sz){return caml_call2(_fv_,_c6_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              length,
              stats,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function make$8(param){return [0,0]}
    function add$2(b,k1,k2,d)
     {var _ft_=b[1];b[1] = [0,make$7(k1,k2,d),_ft_];return 0}
    function test_keys(k1,k2,e)
     {var match=get_key1(e),match$0=get_key2(e);
      if(match && match$0)
       {var x2=match$0[1],x1=match[1];if(x1 === k1 && x2 === k2)return 1}
      return 0}
    function remove$1(b,k1,k2)
     {var l=b[1],acc=0;
      for(;;)
       {if(! l)return 0;
        var h=l[1],t=l[2];
        if(test_keys(k1,k2,h)){b[1] = rev_append(acc,t);return 0}
        var l$0=l[2],acc$0=[0,h,acc],l=l$0,acc=acc$0}}
    function find$3(b,k1,k2)
     {var
       _fr_=b[1],
       match=find_opt(function(_fs_){return test_keys(k1,k2,_fs_)},_fr_);
      if(! match)return 0;
      var e=match[1];
      return get_data$1(e)}
    function length$8(b){return length$1(b[1])}
    function clear$4(b){b[1] = 0;return 0}
    function create$12(n){return caml_call1(_o_[1],n)}
    function length$9(k){return caml_call1(_o_[2],k)}
    function get_key$1(t,n){return caml_call2(_o_[3],t,n)}
    function set_key$1(t,n,k){return caml_call3(_o_[5],t,n,k)}
    function get_data$2(t){return caml_call1(_o_[9],t)}
    function set_data$1(t,d){return caml_call2(_o_[11],t,d)}
    function make$9(keys,data)
     {var l=keys.length - 1,eph=create$12(l);
      set_data$1(eph,data);
      var _fp_=l - 1 | 0,_fo_=0;
      if(_fp_ >= 0)
       {var i=_fo_;
        for(;;)
         {set_key$1(eph,i,caml_check_bound(keys,i)[1 + i]);
          var _fq_=i + 1 | 0;
          if(_fp_ !== i){var i=_fq_;continue}
          break}}
      return eph}
    function query$1(eph,keys)
     {var l=length$9(eph);
      try
       {if(l !== keys.length - 1)throw Exit;
        var _fk_=l - 1 | 0,_fj_=0;
        if(_fk_ >= 0)
         {var i=_fj_;
          for(;;)
           {var match=get_key$1(eph,i);
            if(! match)throw Exit;
            var k=match[1];
            if(k !== caml_check_bound(keys,i)[1 + i])throw Exit;
            var _fm_=i + 1 | 0;
            if(_fk_ !== i){var i=_fm_;continue}
            break}}
        var _fl_=get_data$2(eph);
        return _fl_}
      catch(_fn_)
       {_fn_ = caml_wrap_exception(_fn_);if(_fn_ === Exit)return 0;throw _fn_}}
    function MakeSeeded$3(H)
     {function create(k,d)
       {var c=create$12(k.length - 1);
        set_data$1(c,d);
        var _fh_=k.length - 1 - 1 | 0,_fg_=0;
        if(_fh_ >= 0)
         {var i=_fg_;
          for(;;)
           {set_key$1(c,i,caml_check_bound(k,i)[1 + i]);
            var _fi_=i + 1 | 0;
            if(_fh_ !== i){var i=_fi_;continue}
            break}}
        return c}
      function seeded_hash(seed,k)
       {var h=[0,0],_fc_=k.length - 1 - 1 | 0,_fb_=0;
        if(_fc_ >= 0)
         {var i=_fb_;
          for(;;)
           {var _fd_=h[1],_fe_=caml_check_bound(k,i)[1 + i];
            h[1] = (caml_call2(H[2],seed,_fe_) * 65599 | 0) + _fd_ | 0;
            var _ff_=i + 1 | 0;
            if(_fc_ !== i){var i=_ff_;continue}
            break}}
        return h[1]}
      function equal(c,k)
       {var len=k.length - 1,len$0=length$9(c);
        if(len !== len$0)return 1;
        var i$1=len - 1 | 0,i=i$1;
        for(;;)
         {if(0 > i)return 0;
          var match=get_key$1(c,i);
          if(! match)return 2;
          var ki=match[1],_fa_=caml_check_bound(k,i)[1 + i];
          if(! caml_call2(H[1],_fa_,ki))return 1;
          var i$0=i - 1 | 0,i=i$0}}
      function set_key_data(c,k,d)
       {caml_call1(_o_[12],c);
        var _e__=k.length - 1 - 1 | 0,_e9_=0;
        if(_e__ >= 0)
         {var i=_e9_;
          for(;;)
           {set_key$1(c,i,caml_check_bound(k,i)[1 + i]);
            var _e$_=i + 1 | 0;
            if(_e__ !== i){var i=_e$_;continue}
            break}}
        return set_data$1(c,d)}
      function check_key(c)
       {var i$1=length$9(c) - 1 | 0,i=i$1;
        for(;;)
         {var _e7_=i < 0?1:0;
          if(_e7_)
           var _e8_=_e7_;
          else
           {var _e6_=caml_call2(_o_[7],c,i);
            if(_e6_){var i$0=i - 1 | 0,i=i$0;continue}
            var _e8_=_e6_}
          return _e8_}}
      return MakeSeeded$0
              ([0,create,seeded_hash,equal,get_data$2,set_key_data,check_key])}
    function Make$4(H)
     {var equal=H[1];
      function seeded_hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$3([0,equal,seeded_hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       length=include[12],
       stats=include[13],
       add_seq=include[14],
       replace_seq=include[15],
       clean=include[17],
       stats_alive=include[18],
       _e5_=include[1];
      function create(sz){return caml_call2(_e5_,_c7_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              length,
              stats,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function make$10(param){return [0,0]}
    function add$3(b,k,d){var _e4_=b[1];b[1] = [0,make$9(k,d),_e4_];return 0}
    function test_keys$0(k,e)
     {try
       {if(length$9(e) !== k.length - 1)throw Exit;
        var _e0_=k.length - 1 - 1 | 0,_eZ_=0;
        if(_e0_ >= 0)
         {var i=_eZ_;
          for(;;)
           {var match=get_key$1(e,i),switch$0=0;
            if(match)
             {var x=match[1];
              if(x === caml_check_bound(k,i)[1 + i])
               {var _e2_=i + 1 | 0;
                if(_e0_ !== i){var i=_e2_;continue}
                switch$0 = 1}}
            if(! switch$0)throw Exit;
            break}}
        var _e1_=1;
        return _e1_}
      catch(_e3_)
       {_e3_ = caml_wrap_exception(_e3_);if(_e3_ === Exit)return 0;throw _e3_}}
    function remove$2(b,k)
     {var l=b[1],acc=0;
      for(;;)
       {if(! l)return 0;
        var h=l[1],t=l[2];
        if(test_keys$0(k,h)){b[1] = rev_append(acc,t);return 0}
        var l$0=l[2],acc$0=[0,h,acc],l=l$0,acc=acc$0}}
    function find$4(b,k)
     {var
       _eX_=b[1],
       match=find_opt(function(_eY_){return test_keys$0(k,_eY_)},_eX_);
      if(! match)return 0;
      var e=match[1];
      return get_data$2(e)}
    function length$10(b){return length$1(b[1])}
    function clear$5(b){b[1] = 0;return 0}
    var
     Stdlib_Ephemeron=
      [0,
       [0,
        make$5,
        query,
        Make$2,
        MakeSeeded$1,
        [0,make$6,add$1,remove$0,find$2,length$7,clear$3]],
       [0,
        make$7,
        query$0,
        Make$3,
        MakeSeeded$2,
        [0,make$8,add$2,remove$1,find$3,length$8,clear$4]],
       [0,
        make$9,
        query$1,
        Make$4,
        MakeSeeded$3,
        [0,make$10,add$3,remove$2,find$4,length$10,clear$5]]];
    caml_register_global(813,Stdlib_Ephemeron,"Stdlib__Ephemeron");
    function generic_basename(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$87))return current_dir_name;
      var n$3=caml_ml_string_length(name) - 1 | 0,n=n$3;
      for(;;)
       {if(0 > n)return sub$0(name,0,1);
        if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
        var p=n + 1 | 0,n$1=n;
        for(;;)
         {if(0 > n$1)return sub$0(name,0,p);
          if(caml_call2(is_dir_sep,name,n$1))
           return sub$0(name,n$1 + 1 | 0,(p - n$1 | 0) - 1 | 0);
          var n$2=n$1 - 1 | 0,n$1=n$2}}}
    function generic_dirname(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$88))return current_dir_name;
      var n$5=caml_ml_string_length(name) - 1 | 0,n=n$5;
      for(;;)
       {if(0 > n)return sub$0(name,0,1);
        if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
        var n$1=n;
        for(;;)
         {if(0 > n$1)return current_dir_name;
          if(! caml_call2(is_dir_sep,name,n$1))
           {var n$2=n$1 - 1 | 0,n$1=n$2;continue}
          var n$3=n$1;
          for(;;)
           {if(0 > n$3)return sub$0(name,0,1);
            if(! caml_call2(is_dir_sep,name,n$3))
             return sub$0(name,0,n$3 + 1 | 0);
            var n$4=n$3 - 1 | 0,n$3=n$4}}}}
    function is_dir_sep(s,i){return 47 === caml_string_get(s,i)?1:0}
    function is_relative(n)
     {var
       _eV_=caml_ml_string_length(n) < 1?1:0,
       _eW_=_eV_ || (47 !== caml_string_get(n,0)?1:0);
      return _eW_}
    function is_implicit(n)
     {var _eQ_=is_relative(n);
      if(_eQ_)
       {var
         _eR_=caml_ml_string_length(n) < 2?1:0,
         _eS_=_eR_ || caml_string_notequal(sub$0(n,0,2),cst$90);
        if(_eS_)
         var
          _eT_=caml_ml_string_length(n) < 3?1:0,
          _eU_=_eT_ || caml_string_notequal(sub$0(n,0,3),cst$89);
        else
         var _eU_=_eS_}
      else
       var _eU_=_eQ_;
      return _eU_}
    function check_suffix(name,suff){return ends_with$0(suff,name)}
    function chop_suffix_opt(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s > len_f)return 0;
      var r=sub$0(filename,len_f - len_s | 0,len_s);
      return caml_string_equal(r,suffix)
              ?[0,sub$0(filename,0,len_f - len_s | 0)]
              :0}
    try
     {var _dv_=caml_sys_getenv(cst_TMPDIR),_c8_=_dv_}
    catch(_eP_)
     {_eP_ = caml_wrap_exception(_eP_);
      if(_eP_ !== Not_found)throw _eP_;
      var _c8_=cst_tmp}
    function quote(s)
     {var l=caml_ml_string_length(s),b=create$2(l + 20 | 0);
      add_char(b,39);
      var _eN_=l - 1 | 0,_eM_=0;
      if(_eN_ >= 0)
       {var i=_eM_;
        for(;;)
         {if(39 === caml_string_get(s,i))
           add_string(b,quotequote);
          else
           add_char(b,caml_string_get(s,i));
          var _eO_=i + 1 | 0;
          if(_eN_ !== i){var i=_eO_;continue}
          break}}
      add_char(b,39);
      return contents(b)}
    function quote_command(cmd,stdin,stdout,stderr,args)
     {if(stderr)
       var
        f=stderr[1],
        _eG_=caml_equal(stderr,stdout)?cst_2_1:cat(cst_2,quote(f)),
        _eH_=_eG_;
      else
       var _eH_=cst$96;
      if(stdout)
       var f$0=stdout[1],_eI_=cat(cst$91,quote(f$0));
      else
       var _eI_=cst$95;
      var _eJ_=cat(_eI_,_eH_);
      if(stdin)
       var f$1=stdin[1],_eK_=cat(cst$92,quote(f$1));
      else
       var _eK_=cst$94;
      var _eL_=cat(_eK_,_eJ_);
      return cat(concat$1(cst$93,map$4(quote,[0,cmd,args])),_eL_)}
    function basename(_eF_)
     {return generic_basename(is_dir_sep,current_dir_name,_eF_)}
    function dirname(_eE_)
     {return generic_dirname(is_dir_sep,current_dir_name,_eE_)}
    var
     Unix=
      [0,
       null$0,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       is_dir_sep,
       is_relative,
       is_implicit,
       check_suffix,
       chop_suffix_opt,
       _c8_,
       quote,
       quote_command,
       basename,
       dirname];
    function is_dir_sep$0(s,i)
     {var c=caml_string_get(s,i),_eB_=47 === c?1:0;
      if(_eB_)
       var _eC_=_eB_;
      else
       var _eD_=92 === c?1:0,_eC_=_eD_ || (58 === c?1:0);
      return _eC_}
    function is_relative$0(n)
     {var
       _ev_=caml_ml_string_length(n) < 1?1:0,
       _ew_=_ev_ || (47 !== caml_string_get(n,0)?1:0);
      if(_ew_)
       {var
         _ex_=caml_ml_string_length(n) < 1?1:0,
         _ey_=_ex_ || (92 !== caml_string_get(n,0)?1:0);
        if(_ey_)
         var
          _ez_=caml_ml_string_length(n) < 2?1:0,
          _eA_=_ez_ || (58 !== caml_string_get(n,1)?1:0);
        else
         var _eA_=_ey_}
      else
       var _eA_=_ew_;
      return _eA_}
    function is_implicit$0(n)
     {var _em_=is_relative$0(n);
      if(_em_)
       {var
         _en_=caml_ml_string_length(n) < 2?1:0,
         _eo_=_en_ || caml_string_notequal(sub$0(n,0,2),cst$100);
        if(_eo_)
         {var
           _ep_=caml_ml_string_length(n) < 2?1:0,
           _eq_=_ep_ || caml_string_notequal(sub$0(n,0,2),cst$99);
          if(_eq_)
           {var
             _er_=caml_ml_string_length(n) < 3?1:0,
             _es_=_er_ || caml_string_notequal(sub$0(n,0,3),cst$98);
            if(_es_)
             var
              _et_=caml_ml_string_length(n) < 3?1:0,
              _eu_=_et_ || caml_string_notequal(sub$0(n,0,3),cst$97);
            else
             var _eu_=_es_}
          else
           var _eu_=_eq_}
        else
         var _eu_=_eo_}
      else
       var _eu_=_em_;
      return _eu_}
    function check_suffix$0(name,suff)
     {var _ej_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0;
      if(_ej_)
       var
        s=
         sub$0
          (name,
           caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
           caml_ml_string_length(suff)),
        _ek_=lowercase_ascii$1(suff),
        _el_=caml_string_equal(lowercase_ascii$1(s),_ek_);
      else
       var _el_=_ej_;
      return _el_}
    function chop_suffix_opt$0(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s > len_f)return 0;
      var
       r=sub$0(filename,len_f - len_s | 0,len_s),
       _ei_=lowercase_ascii$1(suffix);
      return caml_string_equal(lowercase_ascii$1(r),_ei_)
              ?[0,sub$0(filename,0,len_f - len_s | 0)]
              :0}
    try
     {var _du_=caml_sys_getenv(cst_TEMP),temp_dir_name=_du_}
    catch(_eh_)
     {_eh_ = caml_wrap_exception(_eh_);
      if(_eh_ !== Not_found)throw _eh_;
      var temp_dir_name=cst$101}
    function quote$0(s)
     {var l=caml_ml_string_length(s),b=create$2(l + 20 | 0);
      add_char(b,34);
      function add_bs(n)
       {var _ef_=1;
        if(n >= 1)
         {var j=_ef_;
          for(;;)
           {add_char(b,92);
            var _eg_=j + 1 | 0;
            if(n !== j){var j=_eg_;continue}
            break}}
        return 0}
      function loop$0(counter,i)
       {var i$0=i;
        for(;;)
         {if(i$0 === l)return add_char(b,34);
          var c=caml_string_get(s,i$0);
          if(34 === c)
           {var _ed_=0;
            if(counter >= 50)
             return caml_trampoline_return(loop_bs,[0,_ed_,i$0]);
            var counter$1=counter + 1 | 0;
            return loop_bs(counter$1,_ed_,i$0)}
          if(92 !== c){add_char(b,c);var i$1=i$0 + 1 | 0,i$0=i$1;continue}
          var _ee_=0;
          if(counter >= 50)
           return caml_trampoline_return(loop_bs,[0,_ee_,i$0]);
          var counter$0=counter + 1 | 0;
          return loop_bs(counter$0,_ee_,i$0)}}
      function loop_bs(counter,n,i)
       {var n$0=n,i$0=i;
        for(;;)
         {if(i$0 === l){add_char(b,34);return add_bs(n$0)}
          var match=caml_string_get(s,i$0);
          if(34 === match)
           {add_bs((2 * n$0 | 0) + 1 | 0);
            add_char(b,34);
            var _ec_=i$0 + 1 | 0;
            if(counter >= 50)return caml_trampoline_return(loop$0,[0,_ec_]);
            var counter$1=counter + 1 | 0;
            return loop$0(counter$1,_ec_)}
          if(92 === match)
           {var i$1=i$0 + 1 | 0,n$1=n$0 + 1 | 0,n$0=n$1,i$0=i$1;continue}
          add_bs(n$0);
          if(counter >= 50)return caml_trampoline_return(loop$0,[0,i$0]);
          var counter$0=counter + 1 | 0;
          return loop$0(counter$0,i$0)}}
      function loop(i){return caml_trampoline(loop$0(0,i))}
      loop(0);
      return contents(b)}
    function quote_cmd_filename(f)
     {if(! contains$0(f,34) && ! contains$0(f,37))
       return contains$0(f,32)?cat(cst$103,cat(f,cst$102)):f;
      return failwith(cat(cst_Filename_quote_command_bad,f))}
    function quote_command$0(cmd,stdin,stdout,stderr,args)
     {if(stderr)
       var
        f=stderr[1],
        _d5_=
         caml_equal(stderr,stdout)
          ?cst_2_1$0
          :cat(cst_2$0,quote_cmd_filename(f)),
        _d6_=_d5_;
      else
       var _d6_=cst$112;
      var _d7_=[0,_d6_,_c9_];
      if(stdout)
       var f$0=stdout[1],_d8_=cat(cst$104,quote_cmd_filename(f$0));
      else
       var _d8_=cst$111;
      var _d9_=[0,_d8_,_d7_];
      if(stdin)
       var f$1=stdin[1],_d__=cat(cst$105,quote_cmd_filename(f$1));
      else
       var _d__=cst$110;
      var
       s=concat$1(cst$106,map$4(quote$0,args)),
       b=create$2(caml_ml_string_length(s) + 20 | 0),
       _d$_=[0,_d__,_d9_];
      iter$4
       (function(c)
         {var switch$0=0;
          if(62 <= c)
           {var _eb_=c - 63 | 0;
            if(60 < _eb_ >>> 0)
             {if(62 > _eb_)switch$0 = 1}
            else
             if(31 === _eb_)switch$0 = 1}
          else
           if(42 <= c)
            {if(60 === c)switch$0 = 1}
           else
            if(33 <= c)
             switch(c - 33 | 0)
              {case 2:case 3:case 6:break;default:switch$0 = 1}
          return switch$0?(add_char(b,94),add_char(b,c)):add_char(b,c)},
        s);
      var _ea_=[0,cst$107,[0,contents(b),_d$_]];
      return concat$1(cst$109,[0,cst$108,[0,quote_cmd_filename(cmd),_ea_]])}
    function drive_and_path(s)
     {var _d1_=2 <= caml_ml_string_length(s)?1:0;
      if(_d1_)
       {var param=caml_string_get(s,0),switch$0=0;
        if(91 <= param)
         {if(25 >= param - 97 >>> 0)switch$0 = 1}
        else
         if(65 <= param)switch$0 = 1;
        var _d2_=switch$0?1:0,_d3_=_d2_?58 === caml_string_get(s,1)?1:0:_d2_}
      else
       var _d3_=_d1_;
      if(! _d3_)return [0,cst$113,s];
      var _d4_=sub$0(s,2,caml_ml_string_length(s) - 2 | 0);
      return [0,sub$0(s,0,2),_d4_]}
    function dirname$0(s)
     {var
       match=drive_and_path(s),
       path=match[2],
       drive=match[1],
       dir=generic_dirname(is_dir_sep$0,current_dir_name$0,path);
      return cat(drive,dir)}
    function basename$0(s)
     {var match=drive_and_path(s),path=match[2];
      return generic_basename(is_dir_sep$0,current_dir_name$0,path)}
    var
     Win32=
      [0,
       null$1,
       current_dir_name$0,
       parent_dir_name$0,
       dir_sep$0,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name,
       quote$0,
       quote_command$0,
       basename$0,
       dirname$0];
    function basename$1(_d0_)
     {return generic_basename(is_dir_sep$0,current_dir_name$1,_d0_)}
    function dirname$1(_dZ_)
     {return generic_dirname(is_dir_sep$0,current_dir_name$1,_dZ_)}
    var
     Cygwin=
      [0,
       null$2,
       current_dir_name$1,
       parent_dir_name$1,
       dir_sep$1,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       _c8_,
       quote,
       quote_command,
       basename$1,
       dirname$1],
     Unix$0=
      caml_string_notequal(os_type,cst_Cygwin)
       ?caml_string_notequal(os_type,cst_Win32)?Unix:Win32
       :Cygwin,
     _db_=Unix$0[4],
     _dc_=Unix$0[5],
     _df_=Unix$0[8],
     _c__=Unix$0[1],
     _c$_=Unix$0[2],
     _da_=Unix$0[3],
     _dd_=Unix$0[6],
     _de_=Unix$0[7],
     _dg_=Unix$0[9],
     _dh_=Unix$0[10],
     _di_=Unix$0[11],
     _dj_=Unix$0[12],
     _dk_=Unix$0[13],
     _dl_=Unix$0[14];
    function concat$4(dirname,filename)
     {var l=caml_ml_string_length(dirname);
      if(0 !== l && ! _dc_(dirname,l - 1 | 0))
       return cat(dirname,cat(_db_,filename));
      return cat(dirname,filename)}
    function chop_suffix(name,suff)
     {return _df_(name,suff)
              ?sub$0
                (name,
                 0,
                 caml_ml_string_length(name) - caml_ml_string_length(suff) | 0)
              :invalid_arg(cst_Filename_chop_suffix)}
    function extension_len(name)
     {var i$4=caml_ml_string_length(name) - 1 | 0,i$1=i$4;
      for(;;)
       {if(0 <= i$1 && ! _dc_(name,i$1))
         {if(46 !== caml_string_get(name,i$1))
           {var i$3=i$1 - 1 | 0,i$1=i$3;continue}
          var i$2=i$1 - 1 | 0,i=i$2;
          for(;;)
           {if(0 <= i && ! _dc_(name,i))
             {if(46 !== caml_string_get(name,i))
               return caml_ml_string_length(name) - i$1 | 0;
              var i$0=i - 1 | 0,i=i$0;
              continue}
            return 0}}
        return 0}}
    function extension(name)
     {var l=extension_len(name);
      return 0 === l?cst$114:sub$0(name,caml_ml_string_length(name) - l | 0,l)}
    function chop_extension(name)
     {var l=extension_len(name);
      return 0 === l
              ?invalid_arg(cst_Filename_chop_extension)
              :sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    function remove_extension(name)
     {var l=extension_len(name);
      return 0 === l?name:sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    var prng_key$0=caml_call2(_ac_[1],0,_cq_[2]);
    function temp_file_name(temp_dir,prefix,suffix)
     {var
       random_state=caml_call1(_ac_[2],prng_key$0),
       rnd=caml_call1(_cq_[4],random_state) & 16777215;
      return concat$4(temp_dir,caml_call3(sprintf(_dm_),prefix,rnd,suffix))}
    function _dn_(param){return _dh_}
    var
     _do_=[0,function(_dY_){return _dY_}],
     current_temp_dir_name=caml_call2(_ac_[1],_do_,_dn_);
    function set_temp_dir_name(s)
     {return caml_call2(_ac_[3],current_temp_dir_name,s)}
    function get_temp_dir_name(param)
     {return caml_call1(_ac_[2],current_temp_dir_name)}
    function temp_file(opt,prefix,suffix)
     {if(opt)
       var sth=opt[1],temp_dir=sth;
      else
       var temp_dir=caml_call1(_ac_[2],current_temp_dir_name);
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {runtime.caml_sys_close(caml_sys_open(name,_dp_,384));return name}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] !== Sys_error)throw e;
            if(1000 <= counter$0)throw e;
            var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
            continue}}}
      return try_name(0)}
    function open_temp_file(opt,_dW_,_dV_,prefix,suffix)
     {if(opt)var sth=opt[1],mode=sth;else var mode=_dq_;
      if(_dW_)var sth$0=_dW_[1],perms=sth$0;else var perms=384;
      if(_dV_)
       var sth$1=_dV_[1],temp_dir=sth$1;
      else
       var temp_dir=caml_call1(_ac_[2],current_temp_dir_name);
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {var _dX_=[0,name,open_gen([0,1,[0,3,[0,5,mode]]],perms,name)];
            return _dX_}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] !== Sys_error)throw e;
            if(1000 <= counter$0)throw e;
            var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
            continue}}}
      return try_name(0)}
    var
     Stdlib_Filename=
      [0,
       _c$_,
       _da_,
       _db_,
       concat$4,
       _dd_,
       _de_,
       _df_,
       chop_suffix,
       _dg_,
       extension,
       remove_extension,
       chop_extension,
       _dk_,
       _dl_,
       _c__,
       temp_file,
       open_temp_file,
       get_temp_dir_name,
       set_temp_dir_name,
       _di_,
       _dj_];
    caml_register_global(814,Stdlib_Filename,"Stdlib__Filename");
    function add$4(x,y){return [254,x[1] + y[1],x[2] + y[2]]}
    function sub$4(x,y){return [254,x[1] - y[1],x[2] - y[2]]}
    function neg(x){return [254,- x[1],- x[2]]}
    function conj(x){return [254,x[1],- x[2]]}
    function mul(x,y)
     {return [254,x[1] * y[1] - x[2] * y[2],x[1] * y[2] + x[2] * y[1]]}
    function div(x,y)
     {if(Math.abs(y[2]) <= Math.abs(y[1]))
       {var r=y[2] / y[1],d=y[1] + r * y[2];
        return [254,(x[1] + r * x[2]) / d,(x[2] - r * x[1]) / d]}
      var r$0=y[1] / y[2],d$0=y[2] + r$0 * y[1];
      return [254,(r$0 * x[1] + x[2]) / d$0,(r$0 * x[2] - x[1]) / d$0]}
    function inv(x){return div(one$4,x)}
    function norm2(x){return x[1] * x[1] + x[2] * x[2]}
    function norm(x){return runtime.caml_hypot_float(x[1],x[2])}
    function arg(x){return Math.atan2(x[2],x[1])}
    function polar(n,a){return [254,Math.cos(a) * n,Math.sin(a) * n]}
    function sqrt(x)
     {if(x[1] == 0. && x[2] == 0.)return _dr_;
      var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(i <= r)
       var
        q=i / r,
        w=Math.sqrt(r) * Math.sqrt(0.5 * (1. + Math.sqrt(1. + q * q)));
      else
       var
        q$0=r / i,
        w=Math.sqrt(i) * Math.sqrt(0.5 * (q$0 + Math.sqrt(1. + q$0 * q$0)));
      if(0. <= x[1])return [254,w,0.5 * x[2] / w];
      var w$0=0. <= x[2]?w:- w;
      return [254,0.5 * i / w,w$0]}
    function exp(x)
     {var e=Math.exp(x[1]);return [254,e * Math.cos(x[2]),e * Math.sin(x[2])]}
    function log(x)
     {var _dU_=Math.atan2(x[2],x[1]);return [254,Math.log(norm(x)),_dU_]}
    function pow(x,y){return exp(mul(y,log(x)))}
    var
     Stdlib_Complex=
      [0,
       zero$4,
       one$4,
       i,
       neg,
       conj,
       add$4,
       sub$4,
       mul,
       inv,
       div,
       sqrt,
       norm2,
       norm,
       arg,
       polar,
       exp,
       log,
       pow];
    caml_register_global(815,Stdlib_Complex,"Stdlib__Complex");
    var
     Stdlib_ArrayLabels=
      [0,
       init$3,
       make_matrix,
       append$1,
       concat$2,
       sub$1,
       copy$0,
       fill$0,
       blit$1,
       to_list$1,
       of_list,
       iter$5,
       iteri$3,
       map$7,
       mapi$3,
       fold_left$3,
       fold_left_map$0,
       fold_right$2,
       iter2$1,
       map2$1,
       for_all$3,
       exists$3,
       for_all2$1,
       exists2$1,
       mem$0,
       memq$0,
       find_opt$0,
       find_map$1,
       split$0,
       combine$0,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$4,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(816,Stdlib_ArrayLabels,"Stdlib__ArrayLabels");
    var
     Stdlib_ListLabels=
      [0,
       length$1,
       compare_lengths,
       compare_length_with,
       cons$0,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init$0,
       append,
       rev_append,
       flatten,
       flatten,
       equal$6,
       compare$6,
       iter$2,
       iteri$0,
       map$4,
       mapi$0,
       rev_map,
       filter_map$0,
       concat_map,
       fold_left_map,
       fold_left$0,
       fold_right,
       iter2$0,
       map2$0,
       rev_map2,
       fold_left2$0,
       fold_right2,
       for_all$0,
       exists$0,
       for_all2$0,
       exists2$0,
       mem,
       memq,
       find$0,
       find_opt,
       find_map$0,
       find_all,
       find_all,
       filteri,
       partition$0,
       partition_map$0,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq$1,
       of_seq];
    caml_register_global(817,Stdlib_ListLabels,"Stdlib__ListLabels");
    var
     Stdlib_BytesLabels=
      [0,
       make,
       init$1,
       empty$0,
       copy,
       to_bytes,
       of_bytes,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat$0,
       cat$0,
       iter$3,
       iteri$1,
       map$5,
       mapi$1,
       fold_left$1,
       fold_right$0,
       for_all$1,
       exists$1,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$8,
       equal$8,
       starts_with,
       ends_with,
       unsafe_to_string,
       unsafe_of_string,
       split_on_char,
       to_seq$2,
       to_seqi,
       of_seq$0,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le,
       unsafe_escape];
    caml_register_global(818,Stdlib_BytesLabels,"Stdlib__BytesLabels");
    var
     Stdlib_StringLabels=
      [0,
       make$0,
       init$2,
       empty$1,
       of_bytes,
       to_bytes,
       concat$1,
       cat,
       equal$9,
       compare$9,
       starts_with$0,
       ends_with$0,
       contains_from$0,
       rcontains_from$0,
       contains$0,
       sub$0,
       split_on_char$0,
       map$6,
       mapi$2,
       fold_left$2,
       fold_right$1,
       for_all$2,
       exists$2,
       trim$0,
       escaped$1,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       iter$4,
       iteri$2,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       to_seq$3,
       to_seqi$0,
       of_seq$1,
       get_utf_8_uchar$0,
       is_valid_utf_8$0,
       get_utf_16be_uchar$0,
       is_valid_utf_16be$0,
       get_utf_16le_uchar$0,
       is_valid_utf_16le$0,
       blit$0,
       get_uint8$0,
       get_int8$0,
       get_uint16_ne$0,
       get_uint16_be$0,
       get_uint16_le$0,
       get_int16_ne$0,
       get_int16_be$0,
       get_int16_le$0,
       get_int32_ne$0,
       hash$0,
       seeded_hash,
       get_int32_be$0,
       get_int32_le$0,
       get_int64_ne$0,
       get_int64_be$0,
       get_int64_le$0];
    caml_register_global(819,Stdlib_StringLabels,"Stdlib__StringLabels");
    var Stdlib_MoreLabels=[0,Stdlib_Hashtbl,Stdlib_Map,Stdlib_Set];
    caml_register_global(820,Stdlib_MoreLabels,"Stdlib__MoreLabels");
    var Stdlib_StdLabels=[0];
    caml_register_global(821,Stdlib_StdLabels,"Stdlib__StdLabels");
    function with_open(openfun,s,f)
     {var ic=caml_call1(openfun,s);
      function _dT_(param){return caml_call1(f,ic)}
      return protect(function(param){return close_noerr$0(ic)},_dT_)}
    function with_open_bin(s,f){return with_open(open_bin$0,s,f)}
    function with_open_text(s,f){return with_open(open_text$0,s,f)}
    function with_open_gen(flags,perm,s,f)
     {return with_open(function(_dS_){return open_gen$0(flags,perm,_dS_)},s,f)}
    var seek=_m_[4],pos=_m_[5],length$11=_m_[6];
    function input_char(ic)
     {try
       {var c=caml_ml_input_char(ic)}
      catch(_dR_)
       {_dR_ = caml_wrap_exception(_dR_);
        if(_dR_ === End_of_file)return 0;
        throw _dR_}
      return [0,c]}
    function input_byte(ic)
     {try
       {var n=caml_ml_input_char(ic)}
      catch(_dQ_)
       {_dQ_ = caml_wrap_exception(_dQ_);
        if(_dQ_ === End_of_file)return 0;
        throw _dQ_}
      return [0,n]}
    function input_line$0(ic)
     {try
       {var s=input_line(ic)}
      catch(_dP_)
       {_dP_ = caml_wrap_exception(_dP_);
        if(_dP_ === End_of_file)return 0;
        throw _dP_}
      return [0,s]}
    function really_input$0(ic,buf,pos,len)
     {try
       {really_input(ic,buf,pos,len);return _ds_}
      catch(_dO_)
       {_dO_ = caml_wrap_exception(_dO_);
        if(_dO_ === End_of_file)return 0;
        throw _dO_}}
    function really_input_string$0(ic,len)
     {try
       {var s=really_input_string(ic,len)}
      catch(_dN_)
       {_dN_ = caml_wrap_exception(_dN_);
        if(_dN_ === End_of_file)return 0;
        throw _dN_}
      return [0,s]}
    function read_upto(ic,buf,ofs,len)
     {var ofs$0=ofs,len$0=len;
      for(;;)
       {if(0 !== len$0)
         {var r=input(ic,buf,ofs$0,len$0);
          if(0 !== r)
           {var
             len$1=len$0 - r | 0,
             ofs$1=ofs$0 + r | 0,
             ofs$0=ofs$1,
             len$0=len$1;
            continue}}
        return ofs$0 - ofs | 0}}
    function ensure(buf,ofs,n)
     {var len=caml_ml_bytes_length(buf);
      if((ofs + n | 0) <= len)return buf;
      var new_len=[0,len];
      for(;;)
       {if(new_len[1] < (ofs + n | 0))
         {new_len[1] = (2 * new_len[1] | 0) + 1 | 0;continue}
        var
         new_len$0=new_len[1],
         new_len$1=
          new_len$0 <= max_string_length
           ?new_len$0
           :ofs < max_string_length
             ?max_string_length
             :failwith(cst_In_channel_input_all_chann),
         new_buf=caml_create_bytes(new_len$1);
        blit(buf,0,new_buf,0,ofs);
        return new_buf}}
    function input_all(ic)
     {var chunk_size=65536;
      try
       {var
         _dJ_=caml_ml_pos_in(ic),
         _dK_=caml_ml_channel_size(ic) - _dJ_ | 0,
         initial_size=_dK_}
      catch(_dM_)
       {_dM_ = caml_wrap_exception(_dM_);
        if(_dM_[1] !== Sys_error)throw _dM_;
        var initial_size=-1}
      var
       initial_size$0=0 <= initial_size?initial_size:chunk_size,
       initial_size$1=
        initial_size$0 <= max_string_length?initial_size$0:max_string_length,
       buf=caml_create_bytes(initial_size$1),
       nread=read_upto(ic,buf,0,initial_size$1);
      if(nread < initial_size$1)return sub_string(buf,0,nread);
      try
       {var c=caml_ml_input_char(ic)}
      catch(_dL_)
       {_dL_ = caml_wrap_exception(_dL_);
        if(_dL_ === End_of_file)return caml_string_of_bytes(buf);
        throw _dL_}
      function loop(buf,ofs)
       {var buf$0=buf,ofs$0=ofs;
        for(;;)
         {var
           buf$1=ensure(buf$0,ofs$0,chunk_size),
           rem=caml_ml_bytes_length(buf$1) - ofs$0 | 0,
           r=read_upto(ic,buf$1,ofs$0,rem);
          if(r < rem)return sub_string(buf$1,0,ofs$0 + r | 0);
          var ofs$1=ofs$0 + rem | 0,buf$0=buf$1,ofs$0=ofs$1}}
      var buf$0=ensure(buf,nread,65537);
      caml_bytes_set(buf$0,nread,c);
      return loop(buf$0,nread + 1 | 0)}
    var
     Stdlib_In_channel=
      [0,
       stdin,
       open_bin$0,
       open_text$0,
       open_gen$0,
       with_open_bin,
       with_open_text,
       with_open_gen,
       seek,
       pos,
       length$11,
       close$0,
       close_noerr$0,
       input_char,
       input_byte,
       input_line$0,
       input,
       really_input$0,
       really_input_string$0,
       input_all,
       set_binary_mode];
    caml_register_global(822,Stdlib_In_channel,"Stdlib__In_channel");
    function with_open$0(openfun,s,f)
     {var oc=caml_call1(openfun,s);
      function _dI_(param){return caml_call1(f,oc)}
      return protect(function(param){return close_noerr(oc)},_dI_)}
    function with_open_bin$0(s,f){return with_open$0(open_bin,s,f)}
    function with_open_text$0(s,f){return with_open$0(open_text,s,f)}
    function with_open_gen$0(flags,perm,s,f)
     {return with_open$0(function(_dH_){return open_gen(flags,perm,_dH_)},s,f)}
    var
     seek$0=_m_[1],
     pos$0=_m_[2],
     length$12=_m_[3],
     Stdlib_Out_channel=
      [0,
       stdout,
       stderr,
       open_bin,
       open_text,
       open_gen,
       with_open_bin$0,
       with_open_text$0,
       with_open_gen$0,
       seek$0,
       pos$0,
       length$12,
       close,
       close_noerr,
       flush,
       flush_all,
       output_char,
       output_byte,
       output_string,
       output_bytes,
       output,
       output_substring,
       set_binary_mode$0,
       runtime.caml_ml_set_buffered,
       runtime.caml_ml_is_buffered];
    caml_register_global(823,Stdlib_Out_channel,"Stdlib__Out_channel");
    var
     Unhandled=[248,cst_Stdlib_Effect_Unhandled,caml_fresh_oo_id(0)],
     Continuation_already_resumed=
      [248,cst_Stdlib_Effect_Continuation,caml_fresh_oo_id(0)];
    function printer(param)
     {if(param[1] !== Unhandled)return 0;
      var
       x=param[2],
       _dG_=string_of_extension_constructo(x),
       msg=caml_call1(sprintf(_dt_),_dG_);
      return [0,msg]}
    register_printer(printer);
    var
     Should_not_see_this=
      [248,cst_Stdlib_Effect_Should_not_s,caml_fresh_oo_id(0)];
    register_exception(cst_Effect_Unhandled,[0,Unhandled,Should_not_see_this]);
    register_exception
     (cst_Effect_Continuation_alread,Continuation_already_resumed);
    function continue$0(k,v)
     {function _dE_(x){return x}
      var _dF_=caml_continuation_use_noexc(k);
      return jsoo_effect_not_supported()}
    function discontinue(k,e)
     {function _dC_(e){throw e}
      var _dD_=caml_continuation_use_noexc(k);
      return jsoo_effect_not_supported()}
    function discontinue_with_backtrace(k,e,bt)
     {function _dA_(e){caml_restore_raw_backtrace(e,bt);throw e}
      var _dB_=caml_continuation_use_noexc(k);
      return jsoo_effect_not_supported()}
    function match_with(comp,arg,handler)
     {function effc(eff,k,last_fiber)
       {var match=caml_call1(handler[3],eff);
        if(! match)return jsoo_effect_not_supported();
        var f=match[1];
        return caml_call1(f,k)}
      var s=caml_alloc_stack(handler[1],handler[2],effc);
      return jsoo_effect_not_supported()}
    function try_with(comp,arg,handler)
     {function effc(eff,k,last_fiber)
       {var match=caml_call1(handler[1],eff);
        if(! match)return jsoo_effect_not_supported();
        var f=match[1];
        return caml_call1(f,k)}
      function _dz_(e){throw e}
      var s=caml_alloc_stack(function(x){return x},_dz_,effc);
      return jsoo_effect_not_supported()}
    var
     Deep=
      [0,
       continue$0,
       discontinue,
       discontinue_with_backtrace,
       match_with,
       try_with];
    function fiber(f)
     {var
       Initial_setup=[248,cst_Initial_setup,caml_fresh_oo_id(0)],
       E=[248,cst_E,caml_fresh_oo_id(0)];
      function f$0(param){return caml_call1(f,jsoo_effect_not_supported())}
      function error(param){return failwith(cst_impossible)}
      function effc(eff,k,last_fiber)
       {if(eff === Initial_setup)throw [0,E,k];return error(0)}
      var s=caml_alloc_stack(error,error,effc);
      try
       {jsoo_effect_not_supported();var _dy_=0}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== E)throw exn;
        var k=exn[2];
        return k}
      return error(0)}
    function continue_gen(k,resume_fun,v,handler)
     {function effc(eff,k,last_fiber)
       {var match=caml_call1(handler[3],eff);
        if(! match)return jsoo_effect_not_supported();
        var f=match[1];
        return caml_call1(f,k)}
      var
       stack=
        runtime.caml_continuation_use_and_update_handler_noexc
         (k,handler[1],handler[2],effc);
      return jsoo_effect_not_supported()}
    function continue_with(k,v,handler)
     {return continue_gen(k,function(x){return x},v,handler)}
    function discontinue_with(k,v,handler)
     {return continue_gen(k,function(e){throw e},v,handler)}
    function discontinue_with_backtrace$0(k,v,bt,handler)
     {return continue_gen
              (k,
               function(e){caml_restore_raw_backtrace(e,bt);throw e},
               v,
               handler)}
    var
     Stdlib_Effect=
      [0,
       Unhandled,
       Continuation_already_resumed,
       Deep,
       [0,fiber,continue_with,discontinue_with,discontinue_with_backtrace$0]];
    caml_register_global(824,Stdlib_Effect,"Stdlib__Effect");
    return}
  (globalThis));


//# 1 "../.js/default/js_of_ocaml-compiler.runtime/jsoo_runtime.cma.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_exn_with_js_backtrace=runtime.caml_exn_with_js_backtrace,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    var
     global_data=runtime.caml_get_global_data(),
     version=caml_string_of_jsbytes("5.0.1"),
     git_version=caml_string_of_jsbytes(""),
     cst_Jsoo_runtime_Error_Exn=
      caml_string_of_jsbytes("Jsoo_runtime.Error.Exn"),
     cst_jsError=caml_string_of_jsbytes("jsError"),
     Stdlib_Callback=global_data.Stdlib__Callback,
     Jsoo_runtime=[0];
    caml_register_global(5,Jsoo_runtime,"Jsoo_runtime__");
    var Jsoo_runtime_Runtime_version=[0,version,git_version];
    caml_register_global
     (6,Jsoo_runtime_Runtime_version,"Jsoo_runtime__Runtime_version");
    var
     Js=[0],
     Config=[0],
     Sys=[0,Config,version,git_version],
     Exn=[248,cst_Jsoo_runtime_Error_Exn,runtime.caml_fresh_oo_id(0)];
    caml_call2(Stdlib_Callback[2],cst_jsError,[0,Exn,[0]]);
    function raise(exn){throw exn}
    var
     Error=
      [0,
       raise,
       caml_exn_with_js_backtrace,
       runtime.caml_js_error_option_of_exception,
       Exn],
     For_compatibility_only=[0],
     Bigstring=[0],
     Typed_array=[0,Bigstring],
     Int64=[0],
     Jsoo_runtime$0=[0,Js,Sys,Error,For_compatibility_only,Typed_array,Int64];
    caml_register_global(8,Jsoo_runtime$0,"Jsoo_runtime");
    return}
  (globalThis));


//# 1 "../.js/default/js_of_ocaml/js_of_ocaml.cma.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var
     jsoo_exports=typeof module === "object" && module.exports || globalThis,
     runtime=globalThis.jsoo_runtime,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_js_from_array=runtime.caml_js_from_array,
     caml_js_get=runtime.caml_js_get,
     caml_js_html_escape=runtime.caml_js_html_escape,
     caml_js_set=runtime.caml_js_set,
     caml_js_wrap_callback=runtime.caml_js_wrap_callback,
     caml_js_wrap_meth_callback=runtime.caml_js_wrap_meth_callback,
     caml_jsbytes_of_string=runtime.caml_jsbytes_of_string,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_array=runtime.caml_string_of_array,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_parseFloat=caml_string_of_jsbytes("parseFloat"),
     cst_parseInt=caml_string_of_jsbytes("parseInt"),
     cst_can_t_retrieve_file_name_n=
      caml_string_of_jsbytes("can't retrieve file name: not implemented"),
     cst_endings=caml_string_of_jsbytes("endings"),
     cst_type=caml_string_of_jsbytes("type"),
     cst_loadstart=caml_string_of_jsbytes("loadstart"),
     cst_progress=caml_string_of_jsbytes("progress"),
     cst_abort=caml_string_of_jsbytes("abort"),
     cst_error=caml_string_of_jsbytes("error"),
     cst_load=caml_string_of_jsbytes("load"),
     cst_loadend=caml_string_of_jsbytes("loadend"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_area$1=caml_string_of_jsbytes("area"),
     cst_audio$1=caml_string_of_jsbytes("audio"),
     cst_base$1=caml_string_of_jsbytes("base"),
     cst_blockquote$1=caml_string_of_jsbytes("blockquote"),
     cst_body$1=caml_string_of_jsbytes("body"),
     cst_br$1=caml_string_of_jsbytes("br"),
     cst_button$1=caml_string_of_jsbytes("button"),
     cst_canvas$1=caml_string_of_jsbytes("canvas"),
     cst_caption$1=caml_string_of_jsbytes("caption"),
     cst_col$1=caml_string_of_jsbytes("col"),
     cst_colgroup$1=caml_string_of_jsbytes("colgroup"),
     cst_del$1=caml_string_of_jsbytes("del"),
     cst_div$1=caml_string_of_jsbytes("div"),
     cst_dl$1=caml_string_of_jsbytes("dl"),
     cst_embed$1=caml_string_of_jsbytes("embed"),
     cst_fieldset$1=caml_string_of_jsbytes("fieldset"),
     cst_form$1=caml_string_of_jsbytes("form"),
     cst_frame$1=caml_string_of_jsbytes("frame"),
     cst_frameset$1=caml_string_of_jsbytes("frameset"),
     cst_h1$1=caml_string_of_jsbytes("h1"),
     cst_h2$1=caml_string_of_jsbytes("h2"),
     cst_h3$1=caml_string_of_jsbytes("h3"),
     cst_h4$1=caml_string_of_jsbytes("h4"),
     cst_h5$1=caml_string_of_jsbytes("h5"),
     cst_h6$1=caml_string_of_jsbytes("h6"),
     cst_head$1=caml_string_of_jsbytes("head"),
     cst_hr$1=caml_string_of_jsbytes("hr"),
     cst_html$1=caml_string_of_jsbytes("html"),
     cst_iframe$1=caml_string_of_jsbytes("iframe"),
     cst_img$1=caml_string_of_jsbytes("img"),
     cst_input$2=caml_string_of_jsbytes("input"),
     cst_ins$1=caml_string_of_jsbytes("ins"),
     cst_label$1=caml_string_of_jsbytes("label"),
     cst_legend$1=caml_string_of_jsbytes("legend"),
     cst_li$1=caml_string_of_jsbytes("li"),
     cst_link$1=caml_string_of_jsbytes("link"),
     cst_map$1=caml_string_of_jsbytes("map"),
     cst_meta$1=caml_string_of_jsbytes("meta"),
     cst_object$1=caml_string_of_jsbytes("object"),
     cst_ol$1=caml_string_of_jsbytes("ol"),
     cst_optgroup$1=caml_string_of_jsbytes("optgroup"),
     cst_option$1=caml_string_of_jsbytes("option"),
     cst_p$1=caml_string_of_jsbytes("p"),
     cst_param$1=caml_string_of_jsbytes("param"),
     cst_pre$1=caml_string_of_jsbytes("pre"),
     cst_q$1=caml_string_of_jsbytes("q"),
     cst_script$1=caml_string_of_jsbytes("script"),
     cst_select$2=caml_string_of_jsbytes("select"),
     cst_style$1=caml_string_of_jsbytes("style"),
     cst_table$1=caml_string_of_jsbytes("table"),
     cst_tbody$1=caml_string_of_jsbytes("tbody"),
     cst_td$1=caml_string_of_jsbytes("td"),
     cst_textarea$1=caml_string_of_jsbytes("textarea"),
     cst_tfoot$1=caml_string_of_jsbytes("tfoot"),
     cst_th$1=caml_string_of_jsbytes("th"),
     cst_thead$1=caml_string_of_jsbytes("thead"),
     cst_title$1=caml_string_of_jsbytes("title"),
     cst_tr$1=caml_string_of_jsbytes("tr"),
     cst_ul$1=caml_string_of_jsbytes("ul"),
     cst_video$1=caml_string_of_jsbytes("video"),
     cst_KeyH=caml_string_of_jsbytes("KeyH"),
     cst_Digit6=caml_string_of_jsbytes("Digit6"),
     cst_BrowserRefresh=caml_string_of_jsbytes("BrowserRefresh"),
     cst_Backslash=caml_string_of_jsbytes("Backslash"),
     cst_AltLeft=caml_string_of_jsbytes("AltLeft"),
     cst_AltRight=caml_string_of_jsbytes("AltRight"),
     cst_ArrowDown=caml_string_of_jsbytes("ArrowDown"),
     cst_ArrowLeft=caml_string_of_jsbytes("ArrowLeft"),
     cst_ArrowRight=caml_string_of_jsbytes("ArrowRight"),
     cst_ArrowUp=caml_string_of_jsbytes("ArrowUp"),
     cst_Backquote=caml_string_of_jsbytes("Backquote"),
     cst_Backspace=caml_string_of_jsbytes("Backspace"),
     cst_BracketLeft=caml_string_of_jsbytes("BracketLeft"),
     cst_BracketRight=caml_string_of_jsbytes("BracketRight"),
     cst_BrowserBack=caml_string_of_jsbytes("BrowserBack"),
     cst_BrowserFavorites=caml_string_of_jsbytes("BrowserFavorites"),
     cst_BrowserForward=caml_string_of_jsbytes("BrowserForward"),
     cst_BrowserHome=caml_string_of_jsbytes("BrowserHome"),
     cst_Delete=caml_string_of_jsbytes("Delete"),
     cst_BrowserSearch=caml_string_of_jsbytes("BrowserSearch"),
     cst_BrowserStop=caml_string_of_jsbytes("BrowserStop"),
     cst_CapsLock=caml_string_of_jsbytes("CapsLock"),
     cst_Comma=caml_string_of_jsbytes("Comma"),
     cst_ContextMenu=caml_string_of_jsbytes("ContextMenu"),
     cst_ControlLeft=caml_string_of_jsbytes("ControlLeft"),
     cst_ControlRight=caml_string_of_jsbytes("ControlRight"),
     cst_Digit0=caml_string_of_jsbytes("Digit0"),
     cst_Digit1=caml_string_of_jsbytes("Digit1"),
     cst_Digit2=caml_string_of_jsbytes("Digit2"),
     cst_Digit3=caml_string_of_jsbytes("Digit3"),
     cst_Digit4=caml_string_of_jsbytes("Digit4"),
     cst_Digit5=caml_string_of_jsbytes("Digit5"),
     cst_F6=caml_string_of_jsbytes("F6"),
     cst_F1=caml_string_of_jsbytes("F1"),
     cst_Digit7=caml_string_of_jsbytes("Digit7"),
     cst_Digit8=caml_string_of_jsbytes("Digit8"),
     cst_Digit9=caml_string_of_jsbytes("Digit9"),
     cst_End=caml_string_of_jsbytes("End"),
     cst_Enter=caml_string_of_jsbytes("Enter"),
     cst_Equal=caml_string_of_jsbytes("Equal"),
     cst_Escape=caml_string_of_jsbytes("Escape"),
     cst_F10=caml_string_of_jsbytes("F10"),
     cst_F11=caml_string_of_jsbytes("F11"),
     cst_F12=caml_string_of_jsbytes("F12"),
     cst_F2=caml_string_of_jsbytes("F2"),
     cst_F3=caml_string_of_jsbytes("F3"),
     cst_F4=caml_string_of_jsbytes("F4"),
     cst_F5=caml_string_of_jsbytes("F5"),
     cst_KeyA=caml_string_of_jsbytes("KeyA"),
     cst_F7=caml_string_of_jsbytes("F7"),
     cst_F8=caml_string_of_jsbytes("F8"),
     cst_F9=caml_string_of_jsbytes("F9"),
     cst_Home=caml_string_of_jsbytes("Home"),
     cst_Insert=caml_string_of_jsbytes("Insert"),
     cst_IntlBackslash=caml_string_of_jsbytes("IntlBackslash"),
     cst_IntlYen=caml_string_of_jsbytes("IntlYen"),
     cst_KeyB=caml_string_of_jsbytes("KeyB"),
     cst_KeyC=caml_string_of_jsbytes("KeyC"),
     cst_KeyD=caml_string_of_jsbytes("KeyD"),
     cst_KeyE=caml_string_of_jsbytes("KeyE"),
     cst_KeyF=caml_string_of_jsbytes("KeyF"),
     cst_KeyG=caml_string_of_jsbytes("KeyG"),
     cst_Numpad4=caml_string_of_jsbytes("Numpad4"),
     cst_KeyX=caml_string_of_jsbytes("KeyX"),
     cst_KeyP=caml_string_of_jsbytes("KeyP"),
     cst_KeyI=caml_string_of_jsbytes("KeyI"),
     cst_KeyJ=caml_string_of_jsbytes("KeyJ"),
     cst_KeyK=caml_string_of_jsbytes("KeyK"),
     cst_KeyL=caml_string_of_jsbytes("KeyL"),
     cst_KeyM=caml_string_of_jsbytes("KeyM"),
     cst_KeyN=caml_string_of_jsbytes("KeyN"),
     cst_KeyO=caml_string_of_jsbytes("KeyO"),
     cst_KeyQ=caml_string_of_jsbytes("KeyQ"),
     cst_KeyR=caml_string_of_jsbytes("KeyR"),
     cst_KeyS=caml_string_of_jsbytes("KeyS"),
     cst_KeyT=caml_string_of_jsbytes("KeyT"),
     cst_KeyU=caml_string_of_jsbytes("KeyU"),
     cst_KeyV=caml_string_of_jsbytes("KeyV"),
     cst_KeyW=caml_string_of_jsbytes("KeyW"),
     cst_MetaRight=caml_string_of_jsbytes("MetaRight"),
     cst_KeyY=caml_string_of_jsbytes("KeyY"),
     cst_KeyZ=caml_string_of_jsbytes("KeyZ"),
     cst_MediaPlayPause=caml_string_of_jsbytes("MediaPlayPause"),
     cst_MediaStop=caml_string_of_jsbytes("MediaStop"),
     cst_MediaTrackNext=caml_string_of_jsbytes("MediaTrackNext"),
     cst_MediaTrackPrevious=caml_string_of_jsbytes("MediaTrackPrevious"),
     cst_MetaLeft=caml_string_of_jsbytes("MetaLeft"),
     cst_Minus=caml_string_of_jsbytes("Minus"),
     cst_NumLock=caml_string_of_jsbytes("NumLock"),
     cst_Numpad0=caml_string_of_jsbytes("Numpad0"),
     cst_Numpad1=caml_string_of_jsbytes("Numpad1"),
     cst_Numpad2=caml_string_of_jsbytes("Numpad2"),
     cst_Numpad3=caml_string_of_jsbytes("Numpad3"),
     cst_PageUp=caml_string_of_jsbytes("PageUp"),
     cst_NumpadDivide=caml_string_of_jsbytes("NumpadDivide"),
     cst_Numpad5=caml_string_of_jsbytes("Numpad5"),
     cst_Numpad6=caml_string_of_jsbytes("Numpad6"),
     cst_Numpad7=caml_string_of_jsbytes("Numpad7"),
     cst_Numpad8=caml_string_of_jsbytes("Numpad8"),
     cst_Numpad9=caml_string_of_jsbytes("Numpad9"),
     cst_NumpadAdd=caml_string_of_jsbytes("NumpadAdd"),
     cst_NumpadDecimal=caml_string_of_jsbytes("NumpadDecimal"),
     cst_NumpadEnter=caml_string_of_jsbytes("NumpadEnter"),
     cst_NumpadEqual=caml_string_of_jsbytes("NumpadEqual"),
     cst_NumpadMultiply=caml_string_of_jsbytes("NumpadMultiply"),
     cst_NumpadSubtract=caml_string_of_jsbytes("NumpadSubtract"),
     cst_OSLeft=caml_string_of_jsbytes("OSLeft"),
     cst_OSRight=caml_string_of_jsbytes("OSRight"),
     cst_PageDown=caml_string_of_jsbytes("PageDown"),
     cst_ShiftRight=caml_string_of_jsbytes("ShiftRight"),
     cst_Pause=caml_string_of_jsbytes("Pause"),
     cst_Period=caml_string_of_jsbytes("Period"),
     cst_PrintScreen=caml_string_of_jsbytes("PrintScreen"),
     cst_Quote=caml_string_of_jsbytes("Quote"),
     cst_ScrollLock=caml_string_of_jsbytes("ScrollLock"),
     cst_Semicolon=caml_string_of_jsbytes("Semicolon"),
     cst_ShiftLeft=caml_string_of_jsbytes("ShiftLeft"),
     cst_Slash=caml_string_of_jsbytes("Slash"),
     cst_Space=caml_string_of_jsbytes("Space"),
     cst_Tab=caml_string_of_jsbytes("Tab"),
     cst_VolumeDown=caml_string_of_jsbytes("VolumeDown"),
     cst_VolumeMute=caml_string_of_jsbytes("VolumeMute"),
     cst_VolumeUp=caml_string_of_jsbytes("VolumeUp"),
     cst_mouseout$0=caml_string_of_jsbytes("mouseout"),
     cst_mouseover$0=caml_string_of_jsbytes("mouseover"),
     cst_video$0=caml_string_of_jsbytes("video"),
     cst_audio$0=caml_string_of_jsbytes("audio"),
     cst_ul$0=caml_string_of_jsbytes("ul"),
     cst_tr$0=caml_string_of_jsbytes("tr"),
     cst_title$0=caml_string_of_jsbytes("title"),
     cst_thead$0=caml_string_of_jsbytes("thead"),
     cst_th$0=caml_string_of_jsbytes("th"),
     cst_tfoot$0=caml_string_of_jsbytes("tfoot"),
     cst_textarea$0=caml_string_of_jsbytes("textarea"),
     cst_td$0=caml_string_of_jsbytes("td"),
     cst_tbody$0=caml_string_of_jsbytes("tbody"),
     cst_table$0=caml_string_of_jsbytes("table"),
     cst_style$0=caml_string_of_jsbytes("style"),
     cst_select$1=caml_string_of_jsbytes("select"),
     cst_script$0=caml_string_of_jsbytes("script"),
     cst_q$0=caml_string_of_jsbytes("q"),
     cst_pre$0=caml_string_of_jsbytes("pre"),
     cst_param$0=caml_string_of_jsbytes("param"),
     cst_p$0=caml_string_of_jsbytes("p"),
     cst_option$0=caml_string_of_jsbytes("option"),
     cst_optgroup$0=caml_string_of_jsbytes("optgroup"),
     cst_ol$0=caml_string_of_jsbytes("ol"),
     cst_object$0=caml_string_of_jsbytes("object"),
     cst_meta$0=caml_string_of_jsbytes("meta"),
     cst_map$0=caml_string_of_jsbytes("map"),
     cst_link$0=caml_string_of_jsbytes("link"),
     cst_li$0=caml_string_of_jsbytes("li"),
     cst_legend$0=caml_string_of_jsbytes("legend"),
     cst_label$0=caml_string_of_jsbytes("label"),
     cst_ins$0=caml_string_of_jsbytes("ins"),
     cst_input$1=caml_string_of_jsbytes("input"),
     cst_img$0=caml_string_of_jsbytes("img"),
     cst_iframe$0=caml_string_of_jsbytes("iframe"),
     cst_html$0=caml_string_of_jsbytes("html"),
     cst_hr$0=caml_string_of_jsbytes("hr"),
     cst_head$0=caml_string_of_jsbytes("head"),
     cst_h6$0=caml_string_of_jsbytes("h6"),
     cst_h5$0=caml_string_of_jsbytes("h5"),
     cst_h4$0=caml_string_of_jsbytes("h4"),
     cst_h3$0=caml_string_of_jsbytes("h3"),
     cst_h2$0=caml_string_of_jsbytes("h2"),
     cst_h1$0=caml_string_of_jsbytes("h1"),
     cst_frame$0=caml_string_of_jsbytes("frame"),
     cst_frameset$0=caml_string_of_jsbytes("frameset"),
     cst_form$0=caml_string_of_jsbytes("form"),
     cst_embed$0=caml_string_of_jsbytes("embed"),
     cst_fieldset$0=caml_string_of_jsbytes("fieldset"),
     cst_dl$0=caml_string_of_jsbytes("dl"),
     cst_div$0=caml_string_of_jsbytes("div"),
     cst_del$0=caml_string_of_jsbytes("del"),
     cst_colgroup$0=caml_string_of_jsbytes("colgroup"),
     cst_col$0=caml_string_of_jsbytes("col"),
     cst_caption$0=caml_string_of_jsbytes("caption"),
     cst_canvas$0=caml_string_of_jsbytes("canvas"),
     cst_button$0=caml_string_of_jsbytes("button"),
     cst_br$0=caml_string_of_jsbytes("br"),
     cst_body$0=caml_string_of_jsbytes("body"),
     cst_blockquote$0=caml_string_of_jsbytes("blockquote"),
     cst_base$0=caml_string_of_jsbytes("base"),
     cst_area$0=caml_string_of_jsbytes("area"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_canvas=caml_string_of_jsbytes("canvas"),
     cst_video=caml_string_of_jsbytes("video"),
     cst_audio=caml_string_of_jsbytes("audio"),
     cst_iframe=caml_string_of_jsbytes("iframe"),
     cst_frame=caml_string_of_jsbytes("frame"),
     cst_frameset=caml_string_of_jsbytes("frameset"),
     cst_address=caml_string_of_jsbytes("address"),
     cst_noscript=caml_string_of_jsbytes("noscript"),
     cst_dt=caml_string_of_jsbytes("dt"),
     cst_dd=caml_string_of_jsbytes("dd"),
     cst_abbr=caml_string_of_jsbytes("abbr"),
     cst_var=caml_string_of_jsbytes("var"),
     cst_kbd=caml_string_of_jsbytes("kbd"),
     cst_samp=caml_string_of_jsbytes("samp"),
     cst_code=caml_string_of_jsbytes("code"),
     cst_dfn=caml_string_of_jsbytes("dfn"),
     cst_cite=caml_string_of_jsbytes("cite"),
     cst_strong=caml_string_of_jsbytes("strong"),
     cst_em=caml_string_of_jsbytes("em"),
     cst_small=caml_string_of_jsbytes("small"),
     cst_big=caml_string_of_jsbytes("big"),
     cst_b=caml_string_of_jsbytes("b"),
     cst_i=caml_string_of_jsbytes("i"),
     cst_tt=caml_string_of_jsbytes("tt"),
     cst_span=caml_string_of_jsbytes("span"),
     cst_sup=caml_string_of_jsbytes("sup"),
     cst_sub=caml_string_of_jsbytes("sub"),
     cst_td=caml_string_of_jsbytes("td"),
     cst_th=caml_string_of_jsbytes("th"),
     cst_tr=caml_string_of_jsbytes("tr"),
     cst_tbody=caml_string_of_jsbytes("tbody"),
     cst_tfoot=caml_string_of_jsbytes("tfoot"),
     cst_thead=caml_string_of_jsbytes("thead"),
     cst_colgroup=caml_string_of_jsbytes("colgroup"),
     cst_col=caml_string_of_jsbytes("col"),
     cst_caption=caml_string_of_jsbytes("caption"),
     cst_table=caml_string_of_jsbytes("table"),
     cst_script=caml_string_of_jsbytes("script"),
     cst_area=caml_string_of_jsbytes("area"),
     cst_map=caml_string_of_jsbytes("map"),
     cst_param=caml_string_of_jsbytes("param"),
     cst_object=caml_string_of_jsbytes("object"),
     cst_img=caml_string_of_jsbytes("img"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_del=caml_string_of_jsbytes("del"),
     cst_ins=caml_string_of_jsbytes("ins"),
     cst_hr=caml_string_of_jsbytes("hr"),
     cst_br=caml_string_of_jsbytes("br"),
     cst_pre=caml_string_of_jsbytes("pre"),
     cst_blockquote=caml_string_of_jsbytes("blockquote"),
     cst_q=caml_string_of_jsbytes("q"),
     cst_h6=caml_string_of_jsbytes("h6"),
     cst_h5=caml_string_of_jsbytes("h5"),
     cst_h4=caml_string_of_jsbytes("h4"),
     cst_h3=caml_string_of_jsbytes("h3"),
     cst_h2=caml_string_of_jsbytes("h2"),
     cst_h1=caml_string_of_jsbytes("h1"),
     cst_p=caml_string_of_jsbytes("p"),
     cst_embed=caml_string_of_jsbytes("embed"),
     cst_div=caml_string_of_jsbytes("div"),
     cst_li=caml_string_of_jsbytes("li"),
     cst_dl=caml_string_of_jsbytes("dl"),
     cst_ol=caml_string_of_jsbytes("ol"),
     cst_ul=caml_string_of_jsbytes("ul"),
     cst_legend=caml_string_of_jsbytes("legend"),
     cst_fieldset=caml_string_of_jsbytes("fieldset"),
     cst_label=caml_string_of_jsbytes("label"),
     cst_button=caml_string_of_jsbytes("button"),
     cst_textarea=caml_string_of_jsbytes("textarea"),
     cst_input$0=caml_string_of_jsbytes("input"),
     cst_select$0=caml_string_of_jsbytes("select"),
     cst_option=caml_string_of_jsbytes("option"),
     cst_optgroup=caml_string_of_jsbytes("optgroup"),
     cst_form=caml_string_of_jsbytes("form"),
     cst_body=caml_string_of_jsbytes("body"),
     cst_style=caml_string_of_jsbytes("style"),
     cst_base=caml_string_of_jsbytes("base"),
     cst_meta=caml_string_of_jsbytes("meta"),
     cst_title=caml_string_of_jsbytes("title"),
     cst_link=caml_string_of_jsbytes("link"),
     cst_head=caml_string_of_jsbytes("head"),
     cst_html=caml_string_of_jsbytes("html"),
     cst_click=caml_string_of_jsbytes("click"),
     cst_copy=caml_string_of_jsbytes("copy"),
     cst_cut=caml_string_of_jsbytes("cut"),
     cst_paste=caml_string_of_jsbytes("paste"),
     cst_dblclick=caml_string_of_jsbytes("dblclick"),
     cst_mousedown=caml_string_of_jsbytes("mousedown"),
     cst_mouseup=caml_string_of_jsbytes("mouseup"),
     cst_mouseover=caml_string_of_jsbytes("mouseover"),
     cst_mousemove=caml_string_of_jsbytes("mousemove"),
     cst_mouseout=caml_string_of_jsbytes("mouseout"),
     cst_keypress=caml_string_of_jsbytes("keypress"),
     cst_keydown=caml_string_of_jsbytes("keydown"),
     cst_keyup=caml_string_of_jsbytes("keyup"),
     cst_mousewheel=caml_string_of_jsbytes("mousewheel"),
     cst_wheel=caml_string_of_jsbytes("wheel"),
     cst_DOMMouseScroll=caml_string_of_jsbytes("DOMMouseScroll"),
     cst_touchstart=caml_string_of_jsbytes("touchstart"),
     cst_touchmove=caml_string_of_jsbytes("touchmove"),
     cst_touchend=caml_string_of_jsbytes("touchend"),
     cst_touchcancel=caml_string_of_jsbytes("touchcancel"),
     cst_dragstart=caml_string_of_jsbytes("dragstart"),
     cst_dragend=caml_string_of_jsbytes("dragend"),
     cst_dragenter=caml_string_of_jsbytes("dragenter"),
     cst_dragover=caml_string_of_jsbytes("dragover"),
     cst_dragleave=caml_string_of_jsbytes("dragleave"),
     cst_drag=caml_string_of_jsbytes("drag"),
     cst_drop=caml_string_of_jsbytes("drop"),
     cst_hashchange=caml_string_of_jsbytes("hashchange"),
     cst_change=caml_string_of_jsbytes("change"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_timeupdate=caml_string_of_jsbytes("timeupdate"),
     cst_submit=caml_string_of_jsbytes("submit"),
     cst_scroll=caml_string_of_jsbytes("scroll"),
     cst_focus=caml_string_of_jsbytes("focus"),
     cst_blur=caml_string_of_jsbytes("blur"),
     cst_load$0=caml_string_of_jsbytes("load"),
     cst_unload=caml_string_of_jsbytes("unload"),
     cst_beforeunload=caml_string_of_jsbytes("beforeunload"),
     cst_resize=caml_string_of_jsbytes("resize"),
     cst_orientationchange=caml_string_of_jsbytes("orientationchange"),
     cst_popstate=caml_string_of_jsbytes("popstate"),
     cst_error$0=caml_string_of_jsbytes("error"),
     cst_abort$0=caml_string_of_jsbytes("abort"),
     cst_select=caml_string_of_jsbytes("select"),
     cst_online=caml_string_of_jsbytes("online"),
     cst_offline=caml_string_of_jsbytes("offline"),
     cst_checking=caml_string_of_jsbytes("checking"),
     cst_noupdate=caml_string_of_jsbytes("noupdate"),
     cst_downloading=caml_string_of_jsbytes("downloading"),
     cst_progress$0=caml_string_of_jsbytes("progress"),
     cst_updateready=caml_string_of_jsbytes("updateready"),
     cst_cached=caml_string_of_jsbytes("cached"),
     cst_obsolete=caml_string_of_jsbytes("obsolete"),
     cst_DOMContentLoaded=caml_string_of_jsbytes("DOMContentLoaded"),
     cst_animationstart=caml_string_of_jsbytes("animationstart"),
     cst_animationend=caml_string_of_jsbytes("animationend"),
     cst_animationiteration=caml_string_of_jsbytes("animationiteration"),
     cst_animationcancel=caml_string_of_jsbytes("animationcancel"),
     cst_transitionrun=caml_string_of_jsbytes("transitionrun"),
     cst_transitionstart=caml_string_of_jsbytes("transitionstart"),
     cst_transitionend=caml_string_of_jsbytes("transitionend"),
     cst_transitioncancel=caml_string_of_jsbytes("transitioncancel"),
     cst_canplay=caml_string_of_jsbytes("canplay"),
     cst_canplaythrough=caml_string_of_jsbytes("canplaythrough"),
     cst_durationchange=caml_string_of_jsbytes("durationchange"),
     cst_emptied=caml_string_of_jsbytes("emptied"),
     cst_ended=caml_string_of_jsbytes("ended"),
     cst_gotpointercapture=caml_string_of_jsbytes("gotpointercapture"),
     cst_loadeddata=caml_string_of_jsbytes("loadeddata"),
     cst_loadedmetadata=caml_string_of_jsbytes("loadedmetadata"),
     cst_loadstart$0=caml_string_of_jsbytes("loadstart"),
     cst_lostpointercapture=caml_string_of_jsbytes("lostpointercapture"),
     cst_message=caml_string_of_jsbytes("message"),
     cst_pause=caml_string_of_jsbytes("pause"),
     cst_play=caml_string_of_jsbytes("play"),
     cst_playing=caml_string_of_jsbytes("playing"),
     cst_pointerenter=caml_string_of_jsbytes("pointerenter"),
     cst_pointercancel=caml_string_of_jsbytes("pointercancel"),
     cst_pointerdown=caml_string_of_jsbytes("pointerdown"),
     cst_pointerleave=caml_string_of_jsbytes("pointerleave"),
     cst_pointermove=caml_string_of_jsbytes("pointermove"),
     cst_pointerout=caml_string_of_jsbytes("pointerout"),
     cst_pointerover=caml_string_of_jsbytes("pointerover"),
     cst_pointerup=caml_string_of_jsbytes("pointerup"),
     cst_ratechange=caml_string_of_jsbytes("ratechange"),
     cst_seeked=caml_string_of_jsbytes("seeked"),
     cst_seeking=caml_string_of_jsbytes("seeking"),
     cst_stalled=caml_string_of_jsbytes("stalled"),
     cst_suspend=caml_string_of_jsbytes("suspend"),
     cst_volumechange=caml_string_of_jsbytes("volumechange"),
     cst_waiting=caml_string_of_jsbytes("waiting"),
     cst_Js_of_ocaml_Dom_html_Canva=
      caml_string_of_jsbytes("Js_of_ocaml__Dom_html.Canvas_not_available"),
     cst_checkbox=caml_string_of_jsbytes("checkbox"),
     cst_file=caml_string_of_jsbytes("file"),
     cst_password=caml_string_of_jsbytes("password"),
     cst_radio=caml_string_of_jsbytes("radio"),
     cst_reset=caml_string_of_jsbytes("reset"),
     cst_submit$0=caml_string_of_jsbytes("submit"),
     cst_text=caml_string_of_jsbytes("text"),
     cst_readystatechange=caml_string_of_jsbytes("readystatechange"),
     cst_loadstart$1=caml_string_of_jsbytes("loadstart"),
     cst_progress$1=caml_string_of_jsbytes("progress"),
     cst_abort$1=caml_string_of_jsbytes("abort"),
     cst_error$1=caml_string_of_jsbytes("error"),
     cst_load$1=caml_string_of_jsbytes("load"),
     cst_timeout=caml_string_of_jsbytes("timeout"),
     cst_loadend$0=caml_string_of_jsbytes("loadend"),
     cst_Worker_onmessage_is_undefi$0=
      caml_string_of_jsbytes("Worker.onmessage is undefined"),
     cst_Worker_onmessage_is_undefi=
      caml_string_of_jsbytes("Worker.onmessage is undefined"),
     cst_Worker_import_scripts_is_u=
      caml_string_of_jsbytes("Worker.import_scripts is undefined"),
     cst_webglcontextlost=caml_string_of_jsbytes("webglcontextlost"),
     cst_webglcontextrestored=caml_string_of_jsbytes("webglcontextrestored"),
     cst_webglcontextcreationerror=
      caml_string_of_jsbytes("webglcontextcreationerror"),
     cst_g=caml_string_of_jsbytes("g"),
     cst=caml_string_of_jsbytes("[\\][()\\\\|+*.?{}^$]"),
     cst$37=caml_string_of_jsbytes(""),
     cst$13=caml_string_of_jsbytes(""),
     cst$21=caml_string_of_jsbytes(""),
     cst$14=caml_string_of_jsbytes("#"),
     cst$15=caml_string_of_jsbytes("?"),
     cst$20=caml_string_of_jsbytes(""),
     cst$16=caml_string_of_jsbytes("/"),
     cst$17=caml_string_of_jsbytes("/"),
     cst$19=caml_string_of_jsbytes(":"),
     cst$18=caml_string_of_jsbytes(""),
     cst_http$1=caml_string_of_jsbytes("http://"),
     cst$22=caml_string_of_jsbytes(""),
     cst$30=caml_string_of_jsbytes(""),
     cst$23=caml_string_of_jsbytes("#"),
     cst$24=caml_string_of_jsbytes("?"),
     cst$29=caml_string_of_jsbytes(""),
     cst$25=caml_string_of_jsbytes("/"),
     cst$26=caml_string_of_jsbytes("/"),
     cst$28=caml_string_of_jsbytes(":"),
     cst$27=caml_string_of_jsbytes(""),
     cst_https$1=caml_string_of_jsbytes("https://"),
     cst$31=caml_string_of_jsbytes(""),
     cst$36=caml_string_of_jsbytes(""),
     cst$32=caml_string_of_jsbytes("#"),
     cst$33=caml_string_of_jsbytes("?"),
     cst$35=caml_string_of_jsbytes(""),
     cst$34=caml_string_of_jsbytes("/"),
     cst_file$2=caml_string_of_jsbytes("file://"),
     cst$12=caml_string_of_jsbytes(""),
     cst$11=caml_string_of_jsbytes(""),
     cst$10=caml_string_of_jsbytes(""),
     cst$9=caml_string_of_jsbytes(""),
     cst$8=caml_string_of_jsbytes(""),
     cst$7=caml_string_of_jsbytes(""),
     cst$6=caml_string_of_jsbytes(""),
     cst$4=caml_string_of_jsbytes("="),
     cst$5=caml_string_of_jsbytes("&"),
     cst$2=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_file$0=caml_string_of_jsbytes("file"),
     cst_file$1=caml_string_of_jsbytes("file:"),
     cst_http=caml_string_of_jsbytes("http"),
     cst_http$0=caml_string_of_jsbytes("http:"),
     cst_https=caml_string_of_jsbytes("https"),
     cst_https$0=caml_string_of_jsbytes("https:"),
     cst$1=caml_string_of_jsbytes(" "),
     cst_2B=caml_string_of_jsbytes("%2B"),
     cst_Js_of_ocaml_Url_Local_exn=
      caml_string_of_jsbytes("Js_of_ocaml__Url.Local_exn"),
     cst$0=caml_string_of_jsbytes("+"),
     cst_Js_of_ocaml_Url_Not_an_htt=
      caml_string_of_jsbytes("Js_of_ocaml__Url.Not_an_http_protocol"),
     cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0=
      caml_string_of_jsbytes
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
     cst_Ff_Ii_Ll_Ee=
      caml_string_of_jsbytes
       ("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
     s=caml_string_of_jsbytes("5.0.1"),
     git_version=caml_string_of_jsbytes(""),
     cst$38=caml_string_of_jsbytes(""),
     cst$41=caml_string_of_jsbytes("+"),
     cst_Jstable_keys=caml_string_of_jsbytes("Jstable.keys"),
     t5=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     cst_is_not_a_valid_length$0=
      caml_string_of_jsbytes(" is not a valid length"),
     cst_d_d_deg_grad_rad_turns=
      caml_string_of_jsbytes("^(\\d*(?:\\.\\d*))(deg|grad|rad|turns)$"),
     cst_length_conversion_error$0=
      caml_string_of_jsbytes("length conversion error: "),
     cst_deg$0=caml_string_of_jsbytes("deg"),
     cst_grad$0=caml_string_of_jsbytes("grad"),
     cst_rad$0=caml_string_of_jsbytes("rad"),
     cst_turns$0=caml_string_of_jsbytes("turns"),
     cst_deg=caml_string_of_jsbytes("deg"),
     cst_grad=caml_string_of_jsbytes("grad"),
     cst_rad=caml_string_of_jsbytes("rad"),
     cst_turns=caml_string_of_jsbytes("turns"),
     cst_is_not_a_valid_length=
      caml_string_of_jsbytes(" is not a valid length"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst_d_d_s_S=caml_string_of_jsbytes("^(\\d*(?:\\.\\d*)?)\\s*(\\S*)$"),
     cst_length_conversion_error=
      caml_string_of_jsbytes("length conversion error: "),
     cst_pc$0=caml_string_of_jsbytes("pc"),
     cst_ch$0=caml_string_of_jsbytes("ch"),
     cst_cm$0=caml_string_of_jsbytes("cm"),
     cst_em$1=caml_string_of_jsbytes("em"),
     cst_ex$0=caml_string_of_jsbytes("ex"),
     cst_gd$0=caml_string_of_jsbytes("gd"),
     cst_in$0=caml_string_of_jsbytes("in"),
     cst_mm$0=caml_string_of_jsbytes("mm"),
     cst_pt$0=caml_string_of_jsbytes("pt"),
     cst_px$0=caml_string_of_jsbytes("px"),
     cst_rem$0=caml_string_of_jsbytes("rem"),
     cst_vh$0=caml_string_of_jsbytes("vh"),
     cst_vm$0=caml_string_of_jsbytes("vm"),
     cst_vw$0=caml_string_of_jsbytes("vw"),
     cst_0=caml_string_of_jsbytes("0"),
     cst_em$0=caml_string_of_jsbytes("em"),
     cst_ex=caml_string_of_jsbytes("ex"),
     cst_px=caml_string_of_jsbytes("px"),
     cst_gd=caml_string_of_jsbytes("gd"),
     cst_rem=caml_string_of_jsbytes("rem"),
     cst_vw=caml_string_of_jsbytes("vw"),
     cst_vh=caml_string_of_jsbytes("vh"),
     cst_vm=caml_string_of_jsbytes("vm"),
     cst_ch=caml_string_of_jsbytes("ch"),
     cst_mm=caml_string_of_jsbytes("mm"),
     cst_cm=caml_string_of_jsbytes("cm"),
     cst_in=caml_string_of_jsbytes("in"),
     cst_pt=caml_string_of_jsbytes("pt"),
     cst_pc=caml_string_of_jsbytes("pc"),
     cst$40=caml_string_of_jsbytes("): "),
     cst_color_conversion_error$0=
      caml_string_of_jsbytes("color conversion error ("),
     cst$39=caml_string_of_jsbytes("): "),
     cst_color_conversion_error=
      caml_string_of_jsbytes("color conversion error ("),
     cst_is_not_a_valid_color$0=
      caml_string_of_jsbytes(" is not a valid color"),
     cst_rgba_d_d_d_d_d=
      caml_string_of_jsbytes
       ("(rgba?)\\((?:(\\d*),(\\d*),(\\d*)(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgba_d_d_d_d_d$0=
      caml_string_of_jsbytes
       ("(rgba?)\\((?:(\\d*)%,(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_hsla_d_d_d_d_d=
      caml_string_of_jsbytes
       ("(hsla?)\\((?:(\\d*),(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgb=caml_string_of_jsbytes("rgb"),
     cst_rgba=caml_string_of_jsbytes("rgba"),
     cst_rgb$0=caml_string_of_jsbytes("rgb"),
     cst_rgba$0=caml_string_of_jsbytes("rgba"),
     cst_hsl=caml_string_of_jsbytes("hsl"),
     cst_hsla=caml_string_of_jsbytes("hsla"),
     cst_rgb_s_d_s_d_s_d=
      caml_string_of_jsbytes("^rgb\\(\\s*\\d*,\\s*\\d*,\\s*\\d*\\)$"),
     cst_rgb_s_d_s_d_s_d$0=
      caml_string_of_jsbytes("^rgb\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d=
      caml_string_of_jsbytes
       ("^rgba\\(\\s*\\d*,\\s*\\d*,\\s*\\d*,\\d*\\.?\\d*\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d$0=
      caml_string_of_jsbytes
       ("^rgba\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_hsl_s_d_s_d_s_d=
      caml_string_of_jsbytes("^hsl\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_hsla_s_d_s_d_s_d_d_d=
      caml_string_of_jsbytes
       ("^hsla\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_is_not_a_valid_color=caml_string_of_jsbytes(" is not a valid color"),
     cst_is_out_of_valid_range=
      caml_string_of_jsbytes(" is out of valid range"),
     partial=[8,[0,0,0],0,0,[12,41,0]],
     partial$0=[12,41,0],
     partial$1=[0,0,0],
     cst_lightgrey$0=caml_string_of_jsbytes("lightgrey"),
     cst_darkslategray$0=caml_string_of_jsbytes("darkslategray"),
     cst_cornsilk$0=caml_string_of_jsbytes("cornsilk"),
     cst_blue$0=caml_string_of_jsbytes("blue"),
     cst_aliceblue$0=caml_string_of_jsbytes("aliceblue"),
     cst_antiquewhite$0=caml_string_of_jsbytes("antiquewhite"),
     cst_aqua$0=caml_string_of_jsbytes("aqua"),
     cst_aquamarine$0=caml_string_of_jsbytes("aquamarine"),
     cst_azure$0=caml_string_of_jsbytes("azure"),
     cst_beige$0=caml_string_of_jsbytes("beige"),
     cst_bisque$0=caml_string_of_jsbytes("bisque"),
     cst_black$0=caml_string_of_jsbytes("black"),
     cst_blanchedalmond$0=caml_string_of_jsbytes("blanchedalmond"),
     cst_blueviolet$0=caml_string_of_jsbytes("blueviolet"),
     cst_brown$0=caml_string_of_jsbytes("brown"),
     cst_burlywood$0=caml_string_of_jsbytes("burlywood"),
     cst_cadetblue$0=caml_string_of_jsbytes("cadetblue"),
     cst_chartreuse$0=caml_string_of_jsbytes("chartreuse"),
     cst_chocolate$0=caml_string_of_jsbytes("chocolate"),
     cst_coral$0=caml_string_of_jsbytes("coral"),
     cst_cornflowerblue$0=caml_string_of_jsbytes("cornflowerblue"),
     cst_darkkhaki$0=caml_string_of_jsbytes("darkkhaki"),
     cst_crimson$0=caml_string_of_jsbytes("crimson"),
     cst_cyan$0=caml_string_of_jsbytes("cyan"),
     cst_darkblue$0=caml_string_of_jsbytes("darkblue"),
     cst_darkcyan$0=caml_string_of_jsbytes("darkcyan"),
     cst_darkgoldenrod$0=caml_string_of_jsbytes("darkgoldenrod"),
     cst_darkgray$0=caml_string_of_jsbytes("darkgray"),
     cst_darkgreen$0=caml_string_of_jsbytes("darkgreen"),
     cst_darkgrey$0=caml_string_of_jsbytes("darkgrey"),
     cst_darkmagenta$0=caml_string_of_jsbytes("darkmagenta"),
     cst_darkolivegreen$0=caml_string_of_jsbytes("darkolivegreen"),
     cst_darkorange$0=caml_string_of_jsbytes("darkorange"),
     cst_darkorchid$0=caml_string_of_jsbytes("darkorchid"),
     cst_darkred$0=caml_string_of_jsbytes("darkred"),
     cst_darksalmon$0=caml_string_of_jsbytes("darksalmon"),
     cst_darkseagreen$0=caml_string_of_jsbytes("darkseagreen"),
     cst_darkslateblue$0=caml_string_of_jsbytes("darkslateblue"),
     cst_greenyellow$0=caml_string_of_jsbytes("greenyellow"),
     cst_floralwhite$0=caml_string_of_jsbytes("floralwhite"),
     cst_darkslategrey$0=caml_string_of_jsbytes("darkslategrey"),
     cst_darkturquoise$0=caml_string_of_jsbytes("darkturquoise"),
     cst_darkviolet$0=caml_string_of_jsbytes("darkviolet"),
     cst_deeppink$0=caml_string_of_jsbytes("deeppink"),
     cst_deepskyblue$0=caml_string_of_jsbytes("deepskyblue"),
     cst_dimgray$0=caml_string_of_jsbytes("dimgray"),
     cst_dimgrey$0=caml_string_of_jsbytes("dimgrey"),
     cst_dodgerblue$0=caml_string_of_jsbytes("dodgerblue"),
     cst_firebrick$0=caml_string_of_jsbytes("firebrick"),
     cst_forestgreen$0=caml_string_of_jsbytes("forestgreen"),
     cst_fuchsia$0=caml_string_of_jsbytes("fuchsia"),
     cst_gainsboro$0=caml_string_of_jsbytes("gainsboro"),
     cst_ghostwhite$0=caml_string_of_jsbytes("ghostwhite"),
     cst_gold$0=caml_string_of_jsbytes("gold"),
     cst_goldenrod$0=caml_string_of_jsbytes("goldenrod"),
     cst_gray$0=caml_string_of_jsbytes("gray"),
     cst_green$0=caml_string_of_jsbytes("green"),
     cst_lavenderblush$0=caml_string_of_jsbytes("lavenderblush"),
     cst_grey$0=caml_string_of_jsbytes("grey"),
     cst_honeydew$0=caml_string_of_jsbytes("honeydew"),
     cst_hotpink$0=caml_string_of_jsbytes("hotpink"),
     cst_indianred$0=caml_string_of_jsbytes("indianred"),
     cst_indigo$0=caml_string_of_jsbytes("indigo"),
     cst_ivory$0=caml_string_of_jsbytes("ivory"),
     cst_khaki$0=caml_string_of_jsbytes("khaki"),
     cst_lavender$0=caml_string_of_jsbytes("lavender"),
     cst_lawngreen$0=caml_string_of_jsbytes("lawngreen"),
     cst_lemonchiffon$0=caml_string_of_jsbytes("lemonchiffon"),
     cst_lightblue$0=caml_string_of_jsbytes("lightblue"),
     cst_lightcoral$0=caml_string_of_jsbytes("lightcoral"),
     cst_lightcyan$0=caml_string_of_jsbytes("lightcyan"),
     cst_lightgoldenrodyellow$0=caml_string_of_jsbytes("lightgoldenrodyellow"),
     cst_lightgray$0=caml_string_of_jsbytes("lightgray"),
     cst_lightgreen$0=caml_string_of_jsbytes("lightgreen"),
     cst_paleturquoise$0=caml_string_of_jsbytes("paleturquoise"),
     cst_mediumslateblue$0=caml_string_of_jsbytes("mediumslateblue"),
     cst_limegreen$0=caml_string_of_jsbytes("limegreen"),
     cst_lightpink$0=caml_string_of_jsbytes("lightpink"),
     cst_lightsalmon$0=caml_string_of_jsbytes("lightsalmon"),
     cst_lightseagreen$0=caml_string_of_jsbytes("lightseagreen"),
     cst_lightskyblue$0=caml_string_of_jsbytes("lightskyblue"),
     cst_lightslategray$0=caml_string_of_jsbytes("lightslategray"),
     cst_lightslategrey$0=caml_string_of_jsbytes("lightslategrey"),
     cst_lightsteelblue$0=caml_string_of_jsbytes("lightsteelblue"),
     cst_lightyellow$0=caml_string_of_jsbytes("lightyellow"),
     cst_lime$0=caml_string_of_jsbytes("lime"),
     cst_linen$0=caml_string_of_jsbytes("linen"),
     cst_magenta$0=caml_string_of_jsbytes("magenta"),
     cst_maroon$0=caml_string_of_jsbytes("maroon"),
     cst_mediumaquamarine$0=caml_string_of_jsbytes("mediumaquamarine"),
     cst_mediumblue$0=caml_string_of_jsbytes("mediumblue"),
     cst_mediumorchid$0=caml_string_of_jsbytes("mediumorchid"),
     cst_mediumpurple$0=caml_string_of_jsbytes("mediumpurple"),
     cst_mediumseagreen$0=caml_string_of_jsbytes("mediumseagreen"),
     cst_navy$0=caml_string_of_jsbytes("navy"),
     cst_mediumspringgreen$0=caml_string_of_jsbytes("mediumspringgreen"),
     cst_mediumturquoise$0=caml_string_of_jsbytes("mediumturquoise"),
     cst_mediumvioletred$0=caml_string_of_jsbytes("mediumvioletred"),
     cst_midnightblue$0=caml_string_of_jsbytes("midnightblue"),
     cst_mintcream$0=caml_string_of_jsbytes("mintcream"),
     cst_mistyrose$0=caml_string_of_jsbytes("mistyrose"),
     cst_moccasin$0=caml_string_of_jsbytes("moccasin"),
     cst_navajowhite$0=caml_string_of_jsbytes("navajowhite"),
     cst_oldlace$0=caml_string_of_jsbytes("oldlace"),
     cst_olive$0=caml_string_of_jsbytes("olive"),
     cst_olivedrab$0=caml_string_of_jsbytes("olivedrab"),
     cst_orange$0=caml_string_of_jsbytes("orange"),
     cst_orangered$0=caml_string_of_jsbytes("orangered"),
     cst_orchid$0=caml_string_of_jsbytes("orchid"),
     cst_palegoldenrod$0=caml_string_of_jsbytes("palegoldenrod"),
     cst_palegreen$0=caml_string_of_jsbytes("palegreen"),
     cst_skyblue$0=caml_string_of_jsbytes("skyblue"),
     cst_rosybrown$0=caml_string_of_jsbytes("rosybrown"),
     cst_palevioletred$0=caml_string_of_jsbytes("palevioletred"),
     cst_papayawhip$0=caml_string_of_jsbytes("papayawhip"),
     cst_peachpuff$0=caml_string_of_jsbytes("peachpuff"),
     cst_peru$0=caml_string_of_jsbytes("peru"),
     cst_pink$0=caml_string_of_jsbytes("pink"),
     cst_plum$0=caml_string_of_jsbytes("plum"),
     cst_powderblue$0=caml_string_of_jsbytes("powderblue"),
     cst_purple$0=caml_string_of_jsbytes("purple"),
     cst_red$0=caml_string_of_jsbytes("red"),
     cst_royalblue$0=caml_string_of_jsbytes("royalblue"),
     cst_saddlebrown$0=caml_string_of_jsbytes("saddlebrown"),
     cst_salmon$0=caml_string_of_jsbytes("salmon"),
     cst_sandybrown$0=caml_string_of_jsbytes("sandybrown"),
     cst_seagreen$0=caml_string_of_jsbytes("seagreen"),
     cst_seashell$0=caml_string_of_jsbytes("seashell"),
     cst_sienna$0=caml_string_of_jsbytes("sienna"),
     cst_silver$0=caml_string_of_jsbytes("silver"),
     cst_thistle$0=caml_string_of_jsbytes("thistle"),
     cst_slateblue$0=caml_string_of_jsbytes("slateblue"),
     cst_slategray$0=caml_string_of_jsbytes("slategray"),
     cst_slategrey$0=caml_string_of_jsbytes("slategrey"),
     cst_snow$0=caml_string_of_jsbytes("snow"),
     cst_springgreen$0=caml_string_of_jsbytes("springgreen"),
     cst_steelblue$0=caml_string_of_jsbytes("steelblue"),
     cst_tan$0=caml_string_of_jsbytes("tan"),
     cst_teal$0=caml_string_of_jsbytes("teal"),
     cst_tomato$0=caml_string_of_jsbytes("tomato"),
     cst_turquoise$0=caml_string_of_jsbytes("turquoise"),
     cst_violet$0=caml_string_of_jsbytes("violet"),
     cst_wheat$0=caml_string_of_jsbytes("wheat"),
     cst_white$0=caml_string_of_jsbytes("white"),
     cst_whitesmoke$0=caml_string_of_jsbytes("whitesmoke"),
     cst_yellow$0=caml_string_of_jsbytes("yellow"),
     cst_yellowgreen$0=caml_string_of_jsbytes("yellowgreen"),
     cst_is_not_a_valid_color_name=
      caml_string_of_jsbytes(" is not a valid color name"),
     cst_aliceblue=caml_string_of_jsbytes("aliceblue"),
     cst_antiquewhite=caml_string_of_jsbytes("antiquewhite"),
     cst_aqua=caml_string_of_jsbytes("aqua"),
     cst_aquamarine=caml_string_of_jsbytes("aquamarine"),
     cst_azure=caml_string_of_jsbytes("azure"),
     cst_beige=caml_string_of_jsbytes("beige"),
     cst_bisque=caml_string_of_jsbytes("bisque"),
     cst_black=caml_string_of_jsbytes("black"),
     cst_blanchedalmond=caml_string_of_jsbytes("blanchedalmond"),
     cst_blue=caml_string_of_jsbytes("blue"),
     cst_blueviolet=caml_string_of_jsbytes("blueviolet"),
     cst_brown=caml_string_of_jsbytes("brown"),
     cst_burlywood=caml_string_of_jsbytes("burlywood"),
     cst_cadetblue=caml_string_of_jsbytes("cadetblue"),
     cst_chartreuse=caml_string_of_jsbytes("chartreuse"),
     cst_chocolate=caml_string_of_jsbytes("chocolate"),
     cst_coral=caml_string_of_jsbytes("coral"),
     cst_cornflowerblue=caml_string_of_jsbytes("cornflowerblue"),
     cst_cornsilk=caml_string_of_jsbytes("cornsilk"),
     cst_crimson=caml_string_of_jsbytes("crimson"),
     cst_cyan=caml_string_of_jsbytes("cyan"),
     cst_darkblue=caml_string_of_jsbytes("darkblue"),
     cst_darkcyan=caml_string_of_jsbytes("darkcyan"),
     cst_darkgoldenrod=caml_string_of_jsbytes("darkgoldenrod"),
     cst_darkgray=caml_string_of_jsbytes("darkgray"),
     cst_darkgreen=caml_string_of_jsbytes("darkgreen"),
     cst_darkgrey=caml_string_of_jsbytes("darkgrey"),
     cst_darkkhaki=caml_string_of_jsbytes("darkkhaki"),
     cst_darkmagenta=caml_string_of_jsbytes("darkmagenta"),
     cst_darkolivegreen=caml_string_of_jsbytes("darkolivegreen"),
     cst_darkorange=caml_string_of_jsbytes("darkorange"),
     cst_darkorchid=caml_string_of_jsbytes("darkorchid"),
     cst_darkred=caml_string_of_jsbytes("darkred"),
     cst_darksalmon=caml_string_of_jsbytes("darksalmon"),
     cst_darkseagreen=caml_string_of_jsbytes("darkseagreen"),
     cst_darkslateblue=caml_string_of_jsbytes("darkslateblue"),
     cst_darkslategray=caml_string_of_jsbytes("darkslategray"),
     cst_darkslategrey=caml_string_of_jsbytes("darkslategrey"),
     cst_darkturquoise=caml_string_of_jsbytes("darkturquoise"),
     cst_darkviolet=caml_string_of_jsbytes("darkviolet"),
     cst_deeppink=caml_string_of_jsbytes("deeppink"),
     cst_deepskyblue=caml_string_of_jsbytes("deepskyblue"),
     cst_dimgray=caml_string_of_jsbytes("dimgray"),
     cst_dimgrey=caml_string_of_jsbytes("dimgrey"),
     cst_dodgerblue=caml_string_of_jsbytes("dodgerblue"),
     cst_firebrick=caml_string_of_jsbytes("firebrick"),
     cst_floralwhite=caml_string_of_jsbytes("floralwhite"),
     cst_forestgreen=caml_string_of_jsbytes("forestgreen"),
     cst_fuchsia=caml_string_of_jsbytes("fuchsia"),
     cst_gainsboro=caml_string_of_jsbytes("gainsboro"),
     cst_ghostwhite=caml_string_of_jsbytes("ghostwhite"),
     cst_gold=caml_string_of_jsbytes("gold"),
     cst_goldenrod=caml_string_of_jsbytes("goldenrod"),
     cst_gray=caml_string_of_jsbytes("gray"),
     cst_grey=caml_string_of_jsbytes("grey"),
     cst_green=caml_string_of_jsbytes("green"),
     cst_greenyellow=caml_string_of_jsbytes("greenyellow"),
     cst_honeydew=caml_string_of_jsbytes("honeydew"),
     cst_hotpink=caml_string_of_jsbytes("hotpink"),
     cst_indianred=caml_string_of_jsbytes("indianred"),
     cst_indigo=caml_string_of_jsbytes("indigo"),
     cst_ivory=caml_string_of_jsbytes("ivory"),
     cst_khaki=caml_string_of_jsbytes("khaki"),
     cst_lavender=caml_string_of_jsbytes("lavender"),
     cst_lavenderblush=caml_string_of_jsbytes("lavenderblush"),
     cst_lawngreen=caml_string_of_jsbytes("lawngreen"),
     cst_lemonchiffon=caml_string_of_jsbytes("lemonchiffon"),
     cst_lightblue=caml_string_of_jsbytes("lightblue"),
     cst_lightcoral=caml_string_of_jsbytes("lightcoral"),
     cst_lightcyan=caml_string_of_jsbytes("lightcyan"),
     cst_lightgoldenrodyellow=caml_string_of_jsbytes("lightgoldenrodyellow"),
     cst_lightgray=caml_string_of_jsbytes("lightgray"),
     cst_lightgreen=caml_string_of_jsbytes("lightgreen"),
     cst_lightgrey=caml_string_of_jsbytes("lightgrey"),
     cst_lightpink=caml_string_of_jsbytes("lightpink"),
     cst_lightsalmon=caml_string_of_jsbytes("lightsalmon"),
     cst_lightseagreen=caml_string_of_jsbytes("lightseagreen"),
     cst_lightskyblue=caml_string_of_jsbytes("lightskyblue"),
     cst_lightslategray=caml_string_of_jsbytes("lightslategray"),
     cst_lightslategrey=caml_string_of_jsbytes("lightslategrey"),
     cst_lightsteelblue=caml_string_of_jsbytes("lightsteelblue"),
     cst_lightyellow=caml_string_of_jsbytes("lightyellow"),
     cst_lime=caml_string_of_jsbytes("lime"),
     cst_limegreen=caml_string_of_jsbytes("limegreen"),
     cst_linen=caml_string_of_jsbytes("linen"),
     cst_magenta=caml_string_of_jsbytes("magenta"),
     cst_maroon=caml_string_of_jsbytes("maroon"),
     cst_mediumaquamarine=caml_string_of_jsbytes("mediumaquamarine"),
     cst_mediumblue=caml_string_of_jsbytes("mediumblue"),
     cst_mediumorchid=caml_string_of_jsbytes("mediumorchid"),
     cst_mediumpurple=caml_string_of_jsbytes("mediumpurple"),
     cst_mediumseagreen=caml_string_of_jsbytes("mediumseagreen"),
     cst_mediumslateblue=caml_string_of_jsbytes("mediumslateblue"),
     cst_mediumspringgreen=caml_string_of_jsbytes("mediumspringgreen"),
     cst_mediumturquoise=caml_string_of_jsbytes("mediumturquoise"),
     cst_mediumvioletred=caml_string_of_jsbytes("mediumvioletred"),
     cst_midnightblue=caml_string_of_jsbytes("midnightblue"),
     cst_mintcream=caml_string_of_jsbytes("mintcream"),
     cst_mistyrose=caml_string_of_jsbytes("mistyrose"),
     cst_moccasin=caml_string_of_jsbytes("moccasin"),
     cst_navajowhite=caml_string_of_jsbytes("navajowhite"),
     cst_navy=caml_string_of_jsbytes("navy"),
     cst_oldlace=caml_string_of_jsbytes("oldlace"),
     cst_olive=caml_string_of_jsbytes("olive"),
     cst_olivedrab=caml_string_of_jsbytes("olivedrab"),
     cst_orange=caml_string_of_jsbytes("orange"),
     cst_orangered=caml_string_of_jsbytes("orangered"),
     cst_orchid=caml_string_of_jsbytes("orchid"),
     cst_palegoldenrod=caml_string_of_jsbytes("palegoldenrod"),
     cst_palegreen=caml_string_of_jsbytes("palegreen"),
     cst_paleturquoise=caml_string_of_jsbytes("paleturquoise"),
     cst_palevioletred=caml_string_of_jsbytes("palevioletred"),
     cst_papayawhip=caml_string_of_jsbytes("papayawhip"),
     cst_peachpuff=caml_string_of_jsbytes("peachpuff"),
     cst_peru=caml_string_of_jsbytes("peru"),
     cst_pink=caml_string_of_jsbytes("pink"),
     cst_plum=caml_string_of_jsbytes("plum"),
     cst_powderblue=caml_string_of_jsbytes("powderblue"),
     cst_purple=caml_string_of_jsbytes("purple"),
     cst_red=caml_string_of_jsbytes("red"),
     cst_rosybrown=caml_string_of_jsbytes("rosybrown"),
     cst_royalblue=caml_string_of_jsbytes("royalblue"),
     cst_saddlebrown=caml_string_of_jsbytes("saddlebrown"),
     cst_salmon=caml_string_of_jsbytes("salmon"),
     cst_sandybrown=caml_string_of_jsbytes("sandybrown"),
     cst_seagreen=caml_string_of_jsbytes("seagreen"),
     cst_seashell=caml_string_of_jsbytes("seashell"),
     cst_sienna=caml_string_of_jsbytes("sienna"),
     cst_silver=caml_string_of_jsbytes("silver"),
     cst_skyblue=caml_string_of_jsbytes("skyblue"),
     cst_slateblue=caml_string_of_jsbytes("slateblue"),
     cst_slategray=caml_string_of_jsbytes("slategray"),
     cst_slategrey=caml_string_of_jsbytes("slategrey"),
     cst_snow=caml_string_of_jsbytes("snow"),
     cst_springgreen=caml_string_of_jsbytes("springgreen"),
     cst_steelblue=caml_string_of_jsbytes("steelblue"),
     cst_tan=caml_string_of_jsbytes("tan"),
     cst_teal=caml_string_of_jsbytes("teal"),
     cst_thistle=caml_string_of_jsbytes("thistle"),
     cst_tomato=caml_string_of_jsbytes("tomato"),
     cst_turquoise=caml_string_of_jsbytes("turquoise"),
     cst_violet=caml_string_of_jsbytes("violet"),
     cst_wheat=caml_string_of_jsbytes("wheat"),
     cst_white=caml_string_of_jsbytes("white"),
     cst_whitesmoke=caml_string_of_jsbytes("whitesmoke"),
     cst_yellow=caml_string_of_jsbytes("yellow"),
     cst_yellowgreen=caml_string_of_jsbytes("yellowgreen"),
     cst_vkern$0=caml_string_of_jsbytes("vkern"),
     cst_view$0=caml_string_of_jsbytes("view"),
     cst_use$0=caml_string_of_jsbytes("use"),
     cst_tspan$0=caml_string_of_jsbytes("tspan"),
     cst_tref$0=caml_string_of_jsbytes("tref"),
     cst_title$3=caml_string_of_jsbytes("title"),
     cst_textpath$0=caml_string_of_jsbytes("textpath"),
     cst_text$1=caml_string_of_jsbytes("text"),
     cst_symbol$0=caml_string_of_jsbytes("symbol"),
     cst_switch$0=caml_string_of_jsbytes("switch"),
     cst_svg$0=caml_string_of_jsbytes("svg"),
     cst_style$3=caml_string_of_jsbytes("style"),
     cst_stop$0=caml_string_of_jsbytes("stop"),
     cst_set$0=caml_string_of_jsbytes("set"),
     cst_script$3=caml_string_of_jsbytes("script"),
     cst_rect$0=caml_string_of_jsbytes("rect"),
     cst_radialgradient$0=caml_string_of_jsbytes("radialgradient"),
     cst_polyline$0=caml_string_of_jsbytes("polyline"),
     cst_polygon$0=caml_string_of_jsbytes("polygon"),
     cst_pattern$0=caml_string_of_jsbytes("pattern"),
     cst_path$0=caml_string_of_jsbytes("path"),
     cst_mpath$0=caml_string_of_jsbytes("mpath"),
     cst_missing_glyph$0=caml_string_of_jsbytes("missing-glyph"),
     cst_metadata$0=caml_string_of_jsbytes("metadata"),
     cst_mask$0=caml_string_of_jsbytes("mask"),
     cst_lineargradient$0=caml_string_of_jsbytes("lineargradient"),
     cst_line$0=caml_string_of_jsbytes("line"),
     cst_image$0=caml_string_of_jsbytes("image"),
     cst_hkern$0=caml_string_of_jsbytes("hkern"),
     cst_glyphref$0=caml_string_of_jsbytes("glyphref"),
     cst_glyph$0=caml_string_of_jsbytes("glyph"),
     cst_g$1=caml_string_of_jsbytes("g"),
     cst_foreignobject=caml_string_of_jsbytes("foreignobject"),
     cst_font_face_uri$0=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_src$0=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_name$0=caml_string_of_jsbytes("font-face-name"),
     cst_font_face_format$0=caml_string_of_jsbytes("font-face-format"),
     cst_font_face$0=caml_string_of_jsbytes("font-face"),
     cst_font$0=caml_string_of_jsbytes("font"),
     cst_filter$0=caml_string_of_jsbytes("filter"),
     cst_ellipse$0=caml_string_of_jsbytes("ellipse"),
     cst_desc$0=caml_string_of_jsbytes("desc"),
     cst_defs$0=caml_string_of_jsbytes("defs"),
     cst_cursor$0=caml_string_of_jsbytes("cursor"),
     cst_clippath$0=caml_string_of_jsbytes("clippath"),
     cst_circle$0=caml_string_of_jsbytes("circle"),
     cst_animatetransform$0=caml_string_of_jsbytes("animatetransform"),
     cst_animatemotion$0=caml_string_of_jsbytes("animatemotion"),
     cst_animatecolor$0=caml_string_of_jsbytes("animatecolor"),
     cst_animate$0=caml_string_of_jsbytes("animate"),
     cst_altglyphitem$0=caml_string_of_jsbytes("altglyphitem"),
     cst_altglyphdef$0=caml_string_of_jsbytes("altglyphdef"),
     cst_altglyph$0=caml_string_of_jsbytes("altglyph"),
     cst_a$3=caml_string_of_jsbytes("a"),
     cst_vkern=caml_string_of_jsbytes("vkern"),
     cst_view=caml_string_of_jsbytes("view"),
     cst_use=caml_string_of_jsbytes("use"),
     cst_tspan=caml_string_of_jsbytes("tspan"),
     cst_tref=caml_string_of_jsbytes("tref"),
     cst_title$2=caml_string_of_jsbytes("title"),
     cst_textpath=caml_string_of_jsbytes("textpath"),
     cst_text$0=caml_string_of_jsbytes("text"),
     cst_symbol=caml_string_of_jsbytes("symbol"),
     cst_switch=caml_string_of_jsbytes("switch"),
     cst_svg=caml_string_of_jsbytes("svg"),
     cst_style$2=caml_string_of_jsbytes("style"),
     cst_stop=caml_string_of_jsbytes("stop"),
     cst_set=caml_string_of_jsbytes("set"),
     cst_script$2=caml_string_of_jsbytes("script"),
     cst_rect=caml_string_of_jsbytes("rect"),
     cst_radialgradient=caml_string_of_jsbytes("radialgradient"),
     cst_polyline=caml_string_of_jsbytes("polyline"),
     cst_polygon=caml_string_of_jsbytes("polygon"),
     cst_pattern=caml_string_of_jsbytes("pattern"),
     cst_path=caml_string_of_jsbytes("path"),
     cst_mpath=caml_string_of_jsbytes("mpath"),
     cst_missing_glyph=caml_string_of_jsbytes("missing-glyph"),
     cst_metadata=caml_string_of_jsbytes("metadata"),
     cst_mask=caml_string_of_jsbytes("mask"),
     cst_lineargradient=caml_string_of_jsbytes("lineargradient"),
     cst_line=caml_string_of_jsbytes("line"),
     cst_image=caml_string_of_jsbytes("image"),
     cst_hkern=caml_string_of_jsbytes("hkern"),
     cst_glyphref=caml_string_of_jsbytes("glyphref"),
     cst_glyph=caml_string_of_jsbytes("glyph"),
     cst_g$0=caml_string_of_jsbytes("g"),
     cst_foreignObject=caml_string_of_jsbytes("foreignObject"),
     cst_font_face_uri=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_src=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_name=caml_string_of_jsbytes("font-face-name"),
     cst_font_face_format=caml_string_of_jsbytes("font-face-format"),
     cst_font_face=caml_string_of_jsbytes("font-face"),
     cst_font=caml_string_of_jsbytes("font"),
     cst_filter=caml_string_of_jsbytes("filter"),
     cst_ellipse=caml_string_of_jsbytes("ellipse"),
     cst_desc=caml_string_of_jsbytes("desc"),
     cst_defs=caml_string_of_jsbytes("defs"),
     cst_cursor=caml_string_of_jsbytes("cursor"),
     cst_clippath=caml_string_of_jsbytes("clippath"),
     cst_circle=caml_string_of_jsbytes("circle"),
     cst_animatetransform=caml_string_of_jsbytes("animatetransform"),
     cst_animatemotion=caml_string_of_jsbytes("animatemotion"),
     cst_animatecolor=caml_string_of_jsbytes("animatecolor"),
     cst_animate=caml_string_of_jsbytes("animate"),
     cst_altglyphitem=caml_string_of_jsbytes("altglyphitem"),
     cst_altglyphdef=caml_string_of_jsbytes("altglyphdef"),
     cst_altglyph=caml_string_of_jsbytes("altglyph"),
     cst_a$2=caml_string_of_jsbytes("a"),
     cst_Js_of_ocaml_Dom_svg_SVGErr=
      caml_string_of_jsbytes("Js_of_ocaml__Dom_svg.SVGError"),
     Stdlib_String=global_data.Stdlib__String,
     Stdlib_Char=global_data.Stdlib__Char,
     Stdlib=global_data.Stdlib,
     Jsoo_runtime=global_data.Jsoo_runtime,
     Stdlib_Printexc=global_data.Stdlib__Printexc,
     Assert_failure=global_data.Assert_failure,
     Stdlib_List=global_data.Stdlib__List,
     Stdlib_Array=global_data.Stdlib__Array,
     Stdlib_Uchar=global_data.Stdlib__Uchar,
     Stdlib_Printf=global_data.Stdlib__Printf;
    global_data.CamlinternalOO;
    var Stdlib_Obj=global_data.Stdlib__Obj,Js_of_ocaml=[0];
    caml_register_global(1653,Js_of_ocaml,"Js_of_ocaml__");
    var
     Poly=[0],
     _g_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom.ml"),351,67],
     _h_=[0,caml_string_of_jsbytes("transparent")],
     _i_=[0,caml_string_of_jsbytes("native")],
     _m_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom_html.ml"),2894,58],
     _l_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom_html.ml"),2893,61],
     _k_=
      [0,
       [11,
        caml_string_of_jsbytes("getElementById_exn: "),
        [3,0,[11,caml_string_of_jsbytes(" not found"),0]]],
       caml_string_of_jsbytes("getElementById_exn: %S not found")],
     _p_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/form.ml"),178,13],
     _o_=[0,1],
     _q_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/regexp.ml"),34,64],
     _r_=[0,caml_string_of_jsbytes(""),0],
     _cl_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cm_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cn_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _co_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b9_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b__=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b$_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ca_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cb_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cc_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cd_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ce_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cf_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cg_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ch_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ci_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cj_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ck_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b8_=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("aliceblue"),
         caml_string_of_jsbytes("antiquewhite"),
         caml_string_of_jsbytes("aqua"),
         caml_string_of_jsbytes("aquamarine"),
         caml_string_of_jsbytes("azure"),
         caml_string_of_jsbytes("beige"),
         caml_string_of_jsbytes("bisque"),
         caml_string_of_jsbytes("black"),
         caml_string_of_jsbytes("blanchedalmond"),
         caml_string_of_jsbytes("blue"),
         caml_string_of_jsbytes("blueviolet"),
         caml_string_of_jsbytes("brown"),
         caml_string_of_jsbytes("burlywood"),
         caml_string_of_jsbytes("cadetblue"),
         caml_string_of_jsbytes("chartreuse"),
         caml_string_of_jsbytes("chocolate"),
         caml_string_of_jsbytes("coral"),
         caml_string_of_jsbytes("cornflowerblue"),
         caml_string_of_jsbytes("cornsilk"),
         caml_string_of_jsbytes("crimson"),
         caml_string_of_jsbytes("cyan"),
         caml_string_of_jsbytes("darkblue"),
         caml_string_of_jsbytes("darkcyan"),
         caml_string_of_jsbytes("darkgoldenrod"),
         caml_string_of_jsbytes("darkgray"),
         caml_string_of_jsbytes("darkgreen"),
         caml_string_of_jsbytes("darkgrey"),
         caml_string_of_jsbytes("darkkhaki"),
         caml_string_of_jsbytes("darkmagenta"),
         caml_string_of_jsbytes("darkolivegreen"),
         caml_string_of_jsbytes("darkorange"),
         caml_string_of_jsbytes("darkorchid"),
         caml_string_of_jsbytes("darkred"),
         caml_string_of_jsbytes("darksalmon"),
         caml_string_of_jsbytes("darkseagreen"),
         caml_string_of_jsbytes("darkslateblue"),
         caml_string_of_jsbytes("darkslategray"),
         caml_string_of_jsbytes("darkslategrey"),
         caml_string_of_jsbytes("darkturquoise"),
         caml_string_of_jsbytes("darkviolet"),
         caml_string_of_jsbytes("deeppink"),
         caml_string_of_jsbytes("deepskyblue"),
         caml_string_of_jsbytes("dimgray"),
         caml_string_of_jsbytes("dimgrey"),
         caml_string_of_jsbytes("dodgerblue"),
         caml_string_of_jsbytes("firebrick"),
         caml_string_of_jsbytes("floralwhite"),
         caml_string_of_jsbytes("forestgreen"),
         caml_string_of_jsbytes("fuchsia"),
         caml_string_of_jsbytes("gainsboro"),
         caml_string_of_jsbytes("ghostwhite"),
         caml_string_of_jsbytes("gold"),
         caml_string_of_jsbytes("goldenrod"),
         caml_string_of_jsbytes("gray"),
         caml_string_of_jsbytes("green"),
         caml_string_of_jsbytes("greenyellow"),
         caml_string_of_jsbytes("grey"),
         caml_string_of_jsbytes("honeydew"),
         caml_string_of_jsbytes("hotpink"),
         caml_string_of_jsbytes("indianred"),
         caml_string_of_jsbytes("indigo"),
         caml_string_of_jsbytes("ivory"),
         caml_string_of_jsbytes("khaki"),
         caml_string_of_jsbytes("lavender"),
         caml_string_of_jsbytes("lavenderblush"),
         caml_string_of_jsbytes("lawngreen"),
         caml_string_of_jsbytes("lemonchiffon"),
         caml_string_of_jsbytes("lightblue"),
         caml_string_of_jsbytes("lightcoral"),
         caml_string_of_jsbytes("lightcyan"),
         caml_string_of_jsbytes("lightgoldenrodyellow"),
         caml_string_of_jsbytes("lightgray"),
         caml_string_of_jsbytes("lightgreen"),
         caml_string_of_jsbytes("lightgrey"),
         caml_string_of_jsbytes("lightpink"),
         caml_string_of_jsbytes("lightsalmon"),
         caml_string_of_jsbytes("lightseagreen"),
         caml_string_of_jsbytes("lightskyblue"),
         caml_string_of_jsbytes("lightslategray"),
         caml_string_of_jsbytes("lightslategrey"),
         caml_string_of_jsbytes("lightsteelblue"),
         caml_string_of_jsbytes("lightyellow"),
         caml_string_of_jsbytes("lime"),
         caml_string_of_jsbytes("limegreen"),
         caml_string_of_jsbytes("linen"),
         caml_string_of_jsbytes("magenta"),
         caml_string_of_jsbytes("maroon"),
         caml_string_of_jsbytes("mediumaquamarine"),
         caml_string_of_jsbytes("mediumblue"),
         caml_string_of_jsbytes("mediumorchid"),
         caml_string_of_jsbytes("mediumpurple"),
         caml_string_of_jsbytes("mediumseagreen"),
         caml_string_of_jsbytes("mediumslateblue"),
         caml_string_of_jsbytes("mediumspringgreen"),
         caml_string_of_jsbytes("mediumturquoise"),
         caml_string_of_jsbytes("mediumvioletred"),
         caml_string_of_jsbytes("midnightblue"),
         caml_string_of_jsbytes("mintcream"),
         caml_string_of_jsbytes("mistyrose"),
         caml_string_of_jsbytes("moccasin"),
         caml_string_of_jsbytes("navajowhite"),
         caml_string_of_jsbytes("navy"),
         caml_string_of_jsbytes("oldlace"),
         caml_string_of_jsbytes("olive"),
         caml_string_of_jsbytes("olivedrab"),
         caml_string_of_jsbytes("orange"),
         caml_string_of_jsbytes("orangered"),
         caml_string_of_jsbytes("orchid"),
         caml_string_of_jsbytes("palegoldenrod"),
         caml_string_of_jsbytes("palegreen"),
         caml_string_of_jsbytes("paleturquoise"),
         caml_string_of_jsbytes("palevioletred"),
         caml_string_of_jsbytes("papayawhip"),
         caml_string_of_jsbytes("peachpuff"),
         caml_string_of_jsbytes("peru"),
         caml_string_of_jsbytes("pink"),
         caml_string_of_jsbytes("plum"),
         caml_string_of_jsbytes("powderblue"),
         caml_string_of_jsbytes("purple"),
         caml_string_of_jsbytes("red"),
         caml_string_of_jsbytes("rosybrown"),
         caml_string_of_jsbytes("royalblue"),
         caml_string_of_jsbytes("saddlebrown"),
         caml_string_of_jsbytes("salmon"),
         caml_string_of_jsbytes("sandybrown"),
         caml_string_of_jsbytes("seagreen"),
         caml_string_of_jsbytes("seashell"),
         caml_string_of_jsbytes("sienna"),
         caml_string_of_jsbytes("silver"),
         caml_string_of_jsbytes("skyblue"),
         caml_string_of_jsbytes("slateblue"),
         caml_string_of_jsbytes("slategray"),
         caml_string_of_jsbytes("slategrey"),
         caml_string_of_jsbytes("snow"),
         caml_string_of_jsbytes("springgreen"),
         caml_string_of_jsbytes("steelblue"),
         caml_string_of_jsbytes("tan"),
         caml_string_of_jsbytes("teal"),
         caml_string_of_jsbytes("thistle"),
         caml_string_of_jsbytes("tomato"),
         caml_string_of_jsbytes("turquoise"),
         caml_string_of_jsbytes("violet"),
         caml_string_of_jsbytes("wheat"),
         caml_string_of_jsbytes("white"),
         caml_string_of_jsbytes("whitesmoke"),
         caml_string_of_jsbytes("yellow"),
         caml_string_of_jsbytes("yellowgreen")]),
     _b7_=
      [0,
       [12,35,[4,8,[0,2,2],0,[4,8,[0,2,2],0,[4,8,[0,2,2],0,0]]]],
       caml_string_of_jsbytes("#%02X%02X%02X")],
     _b1_=
      [0,
       [11,
        caml_string_of_jsbytes("rgb("),
        [4,0,0,0,[12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("rgb(%d,%d,%d)")],
     _b2_=
      [0,
       [11,
        caml_string_of_jsbytes("rgb("),
        [4,
         0,
         0,
         0,
         [12,37,[12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]]],
       caml_string_of_jsbytes("rgb(%d%%,%d%%,%d%%)")],
     _b3_=
      [0,
       [11,
        caml_string_of_jsbytes("rgba("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,44,[8,[0,0,0],0,0,[12,41,0]]]]]]]]],
       caml_string_of_jsbytes("rgba(%d,%d,%d,%f)")],
     _b4_=
      [0,
       [11,
        caml_string_of_jsbytes("rgba("),
        [4,
         0,
         0,
         0,
         [12,
          37,
          [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,44,partial]]]]]]]]]],
       caml_string_of_jsbytes("rgba(%d%%,%d%%,%d%%,%f)")],
     _b5_=
      [0,
       [11,
        caml_string_of_jsbytes("hsl("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]],
       caml_string_of_jsbytes("hsl(%d,%d%%,%d%%)")],
     _b6_=
      [0,
       [11,
        caml_string_of_jsbytes("hsla("),
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,
           0,
           0,
           0,
           [12,
            37,
            [12,44,[4,0,0,0,[12,37,[12,44,[8,partial$1,0,0,partial$0]]]]]]]]]],
       caml_string_of_jsbytes("hsla(%d,%d%%,%d%%,%f)")],
     _y_=[0,240,248,255],
     _z_=[0,250,235,215],
     _A_=[0,0,255,255],
     _B_=[0,127,255,212],
     _C_=[0,240,255,255],
     _D_=[0,245,245,220],
     _E_=[0,255,228,196],
     _F_=[0,0,0,0],
     _G_=[0,255,235,205],
     _H_=[0,0,0,255],
     _I_=[0,138,43,226],
     _J_=[0,165,42,42],
     _K_=[0,222,184,135],
     _L_=[0,95,158,160],
     _M_=[0,127,255,0],
     _N_=[0,210,105,30],
     _O_=[0,255,127,80],
     _P_=[0,100,149,237],
     _Q_=[0,255,248,220],
     _R_=[0,220,20,60],
     _S_=[0,0,255,255],
     _T_=[0,0,0,139],
     _U_=[0,0,139,139],
     _V_=[0,184,134,11],
     _W_=[0,169,169,169],
     _X_=[0,0,100,0],
     _Y_=[0,169,169,169],
     _Z_=[0,189,183,107],
     ___=[0,139,0,139],
     _$_=[0,85,107,47],
     _aa_=[0,255,140,0],
     _ab_=[0,153,50,204],
     _ac_=[0,139,0,0],
     _ad_=[0,233,150,122],
     _ae_=[0,143,188,143],
     _af_=[0,72,61,139],
     _ag_=[0,47,79,79],
     _ah_=[0,47,79,79],
     _ai_=[0,0,206,209],
     _aj_=[0,148,0,211],
     _ak_=[0,255,20,147],
     _al_=[0,0,191,255],
     _am_=[0,105,105,105],
     _an_=[0,105,105,105],
     _ao_=[0,30,144,255],
     _ap_=[0,178,34,34],
     _aq_=[0,255,250,240],
     _ar_=[0,34,139,34],
     _as_=[0,255,0,255],
     _at_=[0,220,220,220],
     _au_=[0,248,248,255],
     _av_=[0,255,215,0],
     _aw_=[0,218,165,32],
     _ax_=[0,128,128,128],
     _ay_=[0,128,128,128],
     _az_=[0,0,128,0],
     _aA_=[0,173,255,47],
     _aB_=[0,240,255,240],
     _aC_=[0,255,105,180],
     _aD_=[0,205,92,92],
     _aE_=[0,75,0,130],
     _aF_=[0,255,255,240],
     _aG_=[0,240,230,140],
     _aH_=[0,230,230,250],
     _aI_=[0,255,240,245],
     _aJ_=[0,124,252,0],
     _aK_=[0,255,250,205],
     _aL_=[0,173,216,230],
     _aM_=[0,240,128,128],
     _aN_=[0,224,255,255],
     _aO_=[0,250,250,210],
     _aP_=[0,211,211,211],
     _aQ_=[0,144,238,144],
     _aR_=[0,211,211,211],
     _aS_=[0,255,182,193],
     _aT_=[0,255,160,122],
     _aU_=[0,32,178,170],
     _aV_=[0,135,206,250],
     _aW_=[0,119,136,153],
     _aX_=[0,119,136,153],
     _aY_=[0,176,196,222],
     _aZ_=[0,255,255,224],
     _a0_=[0,0,255,0],
     _a1_=[0,50,205,50],
     _a2_=[0,250,240,230],
     _a3_=[0,255,0,255],
     _a4_=[0,128,0,0],
     _a5_=[0,102,205,170],
     _a6_=[0,0,0,205],
     _a7_=[0,186,85,211],
     _a8_=[0,147,112,219],
     _a9_=[0,60,179,113],
     _a__=[0,123,104,238],
     _a$_=[0,0,250,154],
     _ba_=[0,72,209,204],
     _bb_=[0,199,21,133],
     _bc_=[0,25,25,112],
     _bd_=[0,245,255,250],
     _be_=[0,255,228,225],
     _bf_=[0,255,228,181],
     _bg_=[0,255,222,173],
     _bh_=[0,0,0,128],
     _bi_=[0,253,245,230],
     _bj_=[0,128,128,0],
     _bk_=[0,107,142,35],
     _bl_=[0,255,165,0],
     _bm_=[0,255,69,0],
     _bn_=[0,218,112,214],
     _bo_=[0,238,232,170],
     _bp_=[0,152,251,152],
     _bq_=[0,175,238,238],
     _br_=[0,219,112,147],
     _bs_=[0,255,239,213],
     _bt_=[0,255,218,185],
     _bu_=[0,205,133,63],
     _bv_=[0,255,192,203],
     _bw_=[0,221,160,221],
     _bx_=[0,176,224,230],
     _by_=[0,128,0,128],
     _bz_=[0,255,0,0],
     _bA_=[0,188,143,143],
     _bB_=[0,65,105,225],
     _bC_=[0,139,69,19],
     _bD_=[0,250,128,114],
     _bE_=[0,244,164,96],
     _bF_=[0,46,139,87],
     _bG_=[0,255,245,238],
     _bH_=[0,160,82,45],
     _bI_=[0,192,192,192],
     _bJ_=[0,135,206,235],
     _bK_=[0,106,90,205],
     _bL_=[0,112,128,144],
     _bM_=[0,112,128,144],
     _bN_=[0,255,250,250],
     _bO_=[0,0,255,127],
     _bP_=[0,70,130,180],
     _bQ_=[0,210,180,140],
     _bR_=[0,0,128,128],
     _bS_=[0,216,191,216],
     _bT_=[0,255,99,71],
     _bU_=[0,64,224,208],
     _bV_=[0,238,130,238],
     _bW_=[0,245,222,179],
     _bX_=[0,255,255,255],
     _bY_=[0,245,245,245],
     _bZ_=[0,255,255,0],
     _b0_=[0,154,205,50];
    function symbol(x,y){return x < y?1:0}
    function symbol$0(x,y){return x <= y?1:0}
    function symbol$1(x,y){return x !== y?1:0}
    function symbol$2(x,y){return x === y?1:0}
    function symbol$3(x,y){return y < x?1:0}
    function symbol$4(x,y){return y <= x?1:0}
    var compare=runtime.caml_int_compare;
    function equal(x,y){return x === y?1:0}
    function max(x,y){return y <= x?x:y}
    function min(x,y){return x <= y?x:y}
    var
     Int_replace_polymorphic_compar=
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
     make=Stdlib_String[1],
     init=Stdlib_String[2],
     empty=Stdlib_String[3],
     of_bytes=Stdlib_String[4],
     to_bytes=Stdlib_String[5],
     concat=Stdlib_String[6],
     cat=Stdlib_String[7],
     compare$0=Stdlib_String[9],
     starts_with=Stdlib_String[10],
     ends_with=Stdlib_String[11],
     contains_from=Stdlib_String[12],
     rcontains_from=Stdlib_String[13],
     contains=Stdlib_String[14],
     sub=Stdlib_String[15],
     split_on_char=Stdlib_String[16],
     map=Stdlib_String[17],
     mapi=Stdlib_String[18],
     fold_left=Stdlib_String[19],
     fold_right=Stdlib_String[20],
     for_all=Stdlib_String[21],
     exists=Stdlib_String[22],
     trim=Stdlib_String[23],
     escaped=Stdlib_String[24],
     uppercase_ascii=Stdlib_String[25],
     lowercase_ascii=Stdlib_String[26],
     capitalize_ascii=Stdlib_String[27],
     uncapitalize_ascii=Stdlib_String[28],
     iter=Stdlib_String[29],
     iteri=Stdlib_String[30],
     index_from=Stdlib_String[31],
     index_from_opt=Stdlib_String[32],
     rindex_from=Stdlib_String[33],
     rindex_from_opt=Stdlib_String[34],
     index=Stdlib_String[35],
     index_opt=Stdlib_String[36],
     rindex=Stdlib_String[37],
     rindex_opt=Stdlib_String[38],
     to_seq=Stdlib_String[39],
     to_seqi=Stdlib_String[40],
     of_seq=Stdlib_String[41],
     get_utf_8_uchar=Stdlib_String[42],
     is_valid_utf_8=Stdlib_String[43],
     get_utf_16be_uchar=Stdlib_String[44],
     is_valid_utf_16be=Stdlib_String[45],
     get_utf_16le_uchar=Stdlib_String[46],
     is_valid_utf_16le=Stdlib_String[47],
     blit=Stdlib_String[48],
     get_uint8=Stdlib_String[49],
     get_int8=Stdlib_String[50],
     get_uint16_ne=Stdlib_String[51],
     get_uint16_be=Stdlib_String[52],
     get_uint16_le=Stdlib_String[53],
     get_int16_ne=Stdlib_String[54],
     get_int16_be=Stdlib_String[55],
     get_int16_le=Stdlib_String[56],
     get_int32_ne=Stdlib_String[57],
     hash=Stdlib_String[58],
     seeded_hash=Stdlib_String[59],
     get_int32_be=Stdlib_String[60],
     get_int32_le=Stdlib_String[61],
     get_int64_ne=Stdlib_String[62],
     get_int64_be=Stdlib_String[63],
     get_int64_le=Stdlib_String[64];
    function equal$0(x,y){return runtime.caml_string_equal(x,y)}
    var
     String=
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       concat,
       cat,
       compare$0,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       blit,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal$0],
     chr=Stdlib_Char[1],
     escaped$0=Stdlib_Char[2],
     lowercase_ascii$0=Stdlib_Char[3],
     uppercase_ascii$0=Stdlib_Char[4],
     compare$1=Stdlib_Char[5];
    function equal$1(x,y){return x === y?1:0}
    var
     Char=
      [0,chr,escaped$0,lowercase_ascii$0,uppercase_ascii$0,compare$1,equal$1],
     symbol$5=Int_replace_polymorphic_compar[1],
     symbol$6=Int_replace_polymorphic_compar[2],
     symbol$7=Int_replace_polymorphic_compar[3],
     symbol$8=Int_replace_polymorphic_compar[4],
     symbol$9=Int_replace_polymorphic_compar[5],
     symbol$10=Int_replace_polymorphic_compar[6],
     compare$2=Int_replace_polymorphic_compar[7],
     equal$2=Int_replace_polymorphic_compar[8],
     max$0=Int_replace_polymorphic_compar[9],
     min$0=Int_replace_polymorphic_compar[10],
     Js_of_ocaml_Import=
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       compare$2,
       equal$2,
       max$0,
       min$0];
    caml_register_global(1656,Js_of_ocaml_Import,"Js_of_ocaml__Import");
    var global=globalThis,Unsafe=[0,global],no_handler=null,t39=undefined;
    function return$0(_g3_){return _g3_}
    function map$0(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function bind(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function test(x){return 1 - (x == no_handler?1:0)}
    function iter$0(x,f)
     {var _g2_=1 - (x == no_handler?1:0);return _g2_?caml_call1(f,x):_g2_}
    function case$0(x,f,g)
     {return x == no_handler?caml_call1(f,0):caml_call1(g,x)}
    function get(x,f){return x == no_handler?caml_call1(f,0):x}
    function option(x){if(! x)return no_handler;var x$0=x[1];return x$0}
    function to_option(x)
     {function _g1_(x){return [0,x]}
      return case$0(x,function(param){return 0},_g1_)}
    var
     Opt=
      [0,
       no_handler,
       return$0,
       map$0,
       bind,
       test,
       iter$0,
       case$0,
       get,
       option,
       to_option];
    function return$1(_g0_){return _g0_}
    function map$1(x,f){return x === t39?t39:caml_call1(f,x)}
    function bind$0(x,f){return x === t39?t39:caml_call1(f,x)}
    function test$0(x){return x !== t39?1:0}
    function iter$1(x,f)
     {var _gZ_=x !== t39?1:0;return _gZ_?caml_call1(f,x):_gZ_}
    function case$1(x,f,g){return x === t39?caml_call1(f,0):caml_call1(g,x)}
    function get$0(x,f){return x === t39?caml_call1(f,0):x}
    function option$0(x){if(! x)return t39;var x$0=x[1];return x$0}
    function to_option$0(x)
     {function _gY_(x){return [0,x]}
      return case$1(x,function(param){return 0},_gY_)}
    var
     Optdef=
      [0,
       t39,
       return$1,
       map$1,
       bind$0,
       test$0,
       iter$1,
       case$1,
       get$0,
       option$0,
       to_option$0];
    function coerce(x,f,g)
     {function _gW_(param){return caml_call1(g,x)}
      var _gX_=caml_call1(f,x);
      return caml_call2(Opt[8],_gX_,_gW_)}
    function coerce_opt(x,f,g)
     {function _gU_(param){return caml_call1(g,x)}
      var _gV_=caml_call2(Opt[4],x,f);
      return caml_call2(Opt[8],_gV_,_gU_)}
    var
     t38=true,
     t4=false,
     nfc="NFC",
     nfd="NFD",
     nfkc="NFKC",
     nfkd="NFKD",
     string_constr=Unsafe[1].String,
     t11=Unsafe[1].RegExp,
     t4$0=Unsafe[1].Object;
    function object_keys(t3){return t4$0.keys(t3)}
    var
     array_length=Unsafe[1].Array,
     array_get=caml_js_get,
     array_set=caml_js_set;
    function array_map(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call1(f,x)}))}
    function array_mapi(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call2(f,idx,x)}))}
    function str_array(_gT_){return _gT_}
    function match_result(_gS_){return _gS_}
    var
     t116=Unsafe[1].Date,
     math=Unsafe[1].Math,
     error_constr=Unsafe[1].Error,
     include=Jsoo_runtime[3],
     raise=include[1],
     attach_js_backtrace=include[2],
     of_exn=include[3],
     Error=include[4];
    function name(e){return caml_string_of_jsstring(e.name)}
    function message(e){return caml_string_of_jsstring(e.message)}
    function stack(e)
     {var _gR_=caml_call2(Opt[3],e.stack,caml_string_of_jsstring);
      return caml_call1(Opt[10],_gR_)}
    function to_string(e){return caml_string_of_jsstring(e.toString())}
    function raise_js_error(e){return caml_call1(raise,e)}
    function string_of_error(e){return to_string(e)}
    var JSON=Unsafe[1].JSON;
    function decodeURI(s){return Unsafe[1].decodeURI(s)}
    function decodeURIComponent(s){return Unsafe[1].decodeURIComponent(s)}
    function encodeURI(s){return Unsafe[1].encodeURI(s)}
    function encodeURIComponent(s){return Unsafe[1].encodeURIComponent(s)}
    function escape(s){return Unsafe[1].escape(s)}
    function unescape(s){return Unsafe[1].unescape(s)}
    function isNaN(i){return Unsafe[1].isNaN(i) | 0}
    function parseInt(s)
     {var s$0=Unsafe[1].parseInt(s);
      return isNaN(s$0)?caml_call1(Stdlib[2],cst_parseInt):s$0}
    function parseFloat(s)
     {var s$0=Unsafe[1].parseFloat(s);
      return isNaN(s$0)?caml_call1(Stdlib[2],cst_parseFloat):s$0}
    function _a_(param)
     {if(param[1] !== Error)return 0;var e=param[2];return [0,to_string(e)]}
    caml_call1(Stdlib_Printexc[9],_a_);
    function _b_(e)
     {return e instanceof array_length
              ?0
              :[0,caml_string_of_jsstring(e.toString())]}
    caml_call1(Stdlib_Printexc[9],_b_);
    function export_js(field,x){return jsoo_exports[field] = x}
    function export$0(field,x)
     {return export_js(caml_jsstring_of_string(field),x)}
    function export_all(obj)
     {var
       t27=object_keys(obj),
       t26=
        caml_js_wrap_callback
         (function(key,param,_gQ_){return export_js(key,obj[key])});
      return t27.forEach(t26)}
    var _c_=runtime.caml_js_error_of_exception;
    function _d_(_gP_){return _gP_}
    var
     _e_=
      [0,
       to_string,
       name,
       message,
       stack,
       raise,
       attach_js_backtrace,
       of_exn,
       Error,
       function(_gO_){return _gO_},
       _d_];
    function _f_(_gN_){return _gN_}
    var
     Js_of_ocaml_Js=
      [0,
       no_handler,
       function(_gM_){return _gM_},
       t39,
       _f_,
       Opt,
       Optdef,
       t38,
       t4,
       nfd,
       nfc,
       nfkd,
       nfkc,
       string_constr,
       t11,
       t11,
       t11,
       object_keys,
       array_length,
       array_length,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       t116,
       t116,
       t116,
       t116,
       t116,
       t116,
       t116,
       t116,
       t116,
       math,
       error_constr,
       _e_,
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$0,
       export_all,
       Unsafe,
       string_of_error,
       raise_js_error,
       attach_js_backtrace,
       _c_,
       Error];
    caml_register_global(1660,Js_of_ocaml_Js,"Js_of_ocaml__Js");
    function list_of_nodeList(nodeList)
     {var length=nodeList.length,acc=0,i=0;
      for(;;)
       {if(! caml_call2(symbol$5,i,length))
         return caml_call1(Stdlib_List[9],acc);
        var _gL_=nodeList.item(i),match=caml_call1(Opt[10],_gL_);
        if(match)
         {var e=match[1],i$0=i + 1 | 0,acc$0=[0,e,acc],acc=acc$0,i=i$0;
          continue}
        var i$1=i + 1 | 0,i=i$1}}
    var
     disconnected=1,
     preceding=2,
     following=4,
     contains$0=8,
     contained_by=16,
     implementation_specific=32;
    function has(t,mask){return caml_call2(symbol$8,t & mask,mask)}
    function add(x,y){return x | y}
    var
     DocumentPosition=
      [0,
       disconnected,
       preceding,
       following,
       contains$0,
       contained_by,
       implementation_specific,
       has,
       add,
       add];
    function appendChild(p,n){p.appendChild(n);return 0}
    function removeChild(p,n){p.removeChild(n);return 0}
    function replaceChild(p,n,o){p.replaceChild(n,o);return 0}
    function insertBefore(p,n,o){p.insertBefore(n,o);return 0}
    function nodeType(e)
     {var match=e.nodeType;
      if(match)
       switch(match - 1 | 0)
        {case 0:return [0,e];case 1:return [1,e];case 2:case 3:return [2,e]}
      return [3,e]}
    function cast(e,t){return e.nodeType === t?e:no_handler}
    function element(e){return cast(e,1)}
    function text(e)
     {if(3 !== e.nodeType && 4 !== e.nodeType)return no_handler;return e}
    function attr(e){return cast(e,2)}
    function handler(f)
     {return runtime.caml_js_wrap_callback_unsafe
              (function(e)
                {if(caml_call1(Opt[5],e))
                  {var res=caml_call1(f,e);
                   if(1 - (res | 0))e.preventDefault();
                   return res}
                 var t18=event,t17=caml_call1(f,t18);
                 if(1 - (t17 | 0))t18.returnValue = t17;
                 return t17})}
    function full_handler(f)
     {return runtime.caml_js_wrap_meth_callback_unsafe
              (function(this$0,e)
                {if(caml_call1(Opt[5],e))
                  {var res=caml_call2(f,this$0,e);
                   if(1 - (res | 0))e.preventDefault();
                   return res}
                 var t21=event,t20=caml_call2(f,this$0,t21);
                 if(1 - (t20 | 0))t21.returnValue = t20;
                 return t20})}
    function invoke_handler(f,this$0,event){return f.call(this$0,event)}
    function eventTarget(e)
     {function _gI_(param)
       {function _gK_(param){throw Stdlib[8]}
        return caml_call2(Opt[8],e.srcElement,_gK_)}
      var t27=caml_call2(Opt[8],e.target,_gI_);
      if(! (t27 instanceof Unsafe[1].Node))return t27;
      if(3 !== t27.nodeType)return t27;
      function _gJ_(param){throw [0,Assert_failure,_g_]}
      return caml_call2(Opt[8],t27.parentNode,_gJ_)}
    function make$0(s){return caml_jsstring_of_string(s)}
    var Event=[0,make$0];
    function addEventListenerWithOptions(t50,t47,capture,once,passive,t48)
     {if(t50.addEventListener === t39)
       {var
         t34="on".concat(t47),
         t35=
          function(e)
           {var _gF_=[0,t48,e,[0]];
            return function(_gG_,_gH_)
             {return runtime.caml_js_call(_gF_,_gG_,_gH_)}};
        t50.attachEvent(t34,t35);
        return function(param){return t50.detachEvent(t34,t35)}}
      var t49={};
      function iter(t,f){if(! t)return 0;var b=t[1];return caml_call1(f,b)}
      iter(capture,function(t37){return t49.capture = t37});
      iter(once,function(t39){return t49.once = t39});
      iter(passive,function(t41){return t49.passive = t41});
      t50.addEventListener(t47,t48,t49);
      return function(param){return t50.removeEventListener(t47,t48,t49)}}
    function addEventListener(e,typ,h,capt)
     {return addEventListenerWithOptions(e,typ,[0,capt],0,0,h)}
    function removeEventListener(id){return caml_call1(id,0)}
    function preventDefault(t54)
     {if(caml_call1(Optdef[5],t54.preventDefault))return t54.preventDefault();
      var t53=! ! 0;
      return t54.returnValue = t53}
    function createCustomEvent(bubbles,cancelable,detail,t62)
     {function opt_iter(f,param)
       {if(! param)return 0;var x=param[1];return caml_call1(f,x)}
      var t63={};
      opt_iter(function(x){var t55=! ! x;return t63.bubbles = t55},bubbles);
      opt_iter
       (function(x){var t57=! ! x;return t63.cancelable = t57},cancelable);
      opt_iter(function(t59){return t63.detail = t59},detail);
      var t64=Unsafe[1].CustomEvent;
      return new t64(t62,t63)}
    var
     Js_of_ocaml_Dom=
      [0,
       DocumentPosition,
       insertBefore,
       replaceChild,
       removeChild,
       appendChild,
       list_of_nodeList,
       nodeType,
       [0,element,text,attr],
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       Event,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       preventDefault,
       createCustomEvent];
    caml_register_global(1663,Js_of_ocaml_Dom,"Js_of_ocaml__Dom");
    var
     arrayBuffer=Unsafe[1].ArrayBuffer,
     int8Array_inBuffer=Unsafe[1].Int8Array,
     t11$0=Unsafe[1].Uint8Array,
     int16Array_inBuffer=Unsafe[1].Int16Array,
     uint16Array_inBuffer=Unsafe[1].Uint16Array,
     int32Array_inBuffer=Unsafe[1].Int32Array,
     uint32Array_inBuffer=Unsafe[1].Uint32Array,
     float32Array_inBuffer=Unsafe[1].Float32Array,
     float64Array_inBuffer=Unsafe[1].Float64Array,
     set=caml_js_set;
    function get$1(a,i){return a[i]}
    function unsafe_get(a,i){return a[i]}
    var dataView=Unsafe[1].DataView;
    function of_arrayBuffer(ab)
     {var uint8=new t11$0(ab);return caml_string_of_array(uint8)}
    var
     Js_of_ocaml_Typed_array=
      [0,
       arrayBuffer,
       runtime.caml_ba_kind_of_typed_array,
       runtime.caml_ba_to_typed_array,
       runtime.caml_ba_from_typed_array,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       t11$0,
       t11$0,
       t11$0,
       t11$0,
       t11$0,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       set,
       get$1,
       unsafe_get,
       dataView,
       dataView,
       [0,
        runtime.bigstring_to_array_buffer,
        runtime.bigstring_to_typed_array,
        runtime.bigstring_of_array_buffer,
        runtime.bigstring_of_typed_array],
       [0,of_arrayBuffer,caml_string_of_array]];
    caml_register_global
     (1664,Js_of_ocaml_Typed_array,"Js_of_ocaml__Typed_array");
    var t3=Unsafe[1].Blob;
    function filter_map(f,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
        if(match){var v$0=match[1];return [0,v$0,filter_map(f,q)]}
        var param$0=q}}
    function blob_raw(contentType,endings,a)
     {var _gB_=0;
      if(endings)
       var _gC_=116179762 <= endings[1]?_h_:_i_,_gD_=_gC_;
      else
       var _gD_=0;
      var
       _gE_=[0,[0,cst_type,contentType],[0,[0,cst_endings,_gD_],_gB_]],
       options=
        filter_map
         (function(param)
           {var v=param[2],name=param[1];
            if(! v)return 0;
            var v$0=v[1];
            return [0,[0,name,caml_jsstring_of_string(v$0)]]},
          _gE_),
       options$0=
        options
         ?runtime.caml_js_object(caml_call1(Stdlib_Array[10],options))
         :t39,
       t1=caml_js_from_array(a);
      return new t3(t1,options$0)}
    function blob_from_string(contentType,endings,s)
     {return blob_raw(contentType,endings,[0,caml_jsstring_of_string(s)])}
    function blob_from_any(contentType,endings,l)
     {function _gz_(param)
       {var _gA_=param[1];
        if(155580615 === _gA_){var s=param[2];return s}
        if(486041214 <= _gA_)
         {if(1037850489 <= _gA_){var a=param[2];return a}
          var a$0=param[2];
          return a$0}
        if(288368849 <= _gA_)
         {var s$0=param[2];return caml_jsstring_of_string(s$0)}
        var b=param[2];
        return b}
      var l$0=caml_call2(Stdlib_List[19],_gz_,l);
      return blob_raw(contentType,endings,caml_call1(Stdlib_Array[10],l$0))}
    function filename(file)
     {var match=caml_call1(Optdef[10],file.name);
      if(match){var name=match[1];return name}
      var match$0=caml_call1(Optdef[10],file.fileName);
      if(! match$0)
       return caml_call1(Stdlib[2],cst_can_t_retrieve_file_name_n);
      var name$0=match$0[1];
      return name$0}
    var doc_constr=Unsafe[1].Document;
    function document(e){return e instanceof doc_constr?e:no_handler}
    function blob(e){return e instanceof t3?e:no_handler}
    function string(e){return typeof e === "string"?e:no_handler}
    function arrayBuffer$0(e){return e instanceof arrayBuffer?e:no_handler}
    var
     loadstart=caml_call1(Event[1],cst_loadstart),
     progress=caml_call1(Event[1],cst_progress),
     abort=caml_call1(Event[1],cst_abort),
     error=caml_call1(Event[1],cst_error),
     load=caml_call1(Event[1],cst_load),
     loadend=caml_call1(Event[1],cst_loadend),
     ReaderEvent=[0,loadstart,progress,abort,error,load,loadend],
     fileReader=Unsafe[1].FileReader,
     Js_of_ocaml_File=
      [0,
       blob_from_string,
       blob_from_any,
       [0,document,blob,function(_gy_){return _gy_},string,arrayBuffer$0],
       ReaderEvent,
       filename,
       fileReader,
       addEventListener];
    caml_register_global(1666,Js_of_ocaml_File,"Js_of_ocaml__File");
    var
     onIE=runtime.caml_js_on_ie(0) | 0,
     click=caml_call1(Event[1],cst_click),
     copy=caml_call1(Event[1],cst_copy),
     cut=caml_call1(Event[1],cst_cut),
     paste=caml_call1(Event[1],cst_paste),
     dblclick=caml_call1(Event[1],cst_dblclick),
     mousedown=caml_call1(Event[1],cst_mousedown),
     mouseup=caml_call1(Event[1],cst_mouseup),
     mouseover=caml_call1(Event[1],cst_mouseover),
     mousemove=caml_call1(Event[1],cst_mousemove),
     mouseout=caml_call1(Event[1],cst_mouseout),
     keypress=caml_call1(Event[1],cst_keypress),
     keydown=caml_call1(Event[1],cst_keydown),
     keyup=caml_call1(Event[1],cst_keyup),
     mousewheel=caml_call1(Event[1],cst_mousewheel),
     wheel=caml_call1(Event[1],cst_wheel),
     DOMMouseScroll=caml_call1(Event[1],cst_DOMMouseScroll),
     touchstart=caml_call1(Event[1],cst_touchstart),
     touchmove=caml_call1(Event[1],cst_touchmove),
     touchend=caml_call1(Event[1],cst_touchend),
     touchcancel=caml_call1(Event[1],cst_touchcancel),
     dragstart=caml_call1(Event[1],cst_dragstart),
     dragend=caml_call1(Event[1],cst_dragend),
     dragenter=caml_call1(Event[1],cst_dragenter),
     dragover=caml_call1(Event[1],cst_dragover),
     dragleave=caml_call1(Event[1],cst_dragleave),
     drag=caml_call1(Event[1],cst_drag),
     drop=caml_call1(Event[1],cst_drop),
     hashchange=caml_call1(Event[1],cst_hashchange),
     change=caml_call1(Event[1],cst_change),
     input=caml_call1(Event[1],cst_input),
     timeupdate=caml_call1(Event[1],cst_timeupdate),
     submit=caml_call1(Event[1],cst_submit),
     scroll=caml_call1(Event[1],cst_scroll),
     focus=caml_call1(Event[1],cst_focus),
     blur=caml_call1(Event[1],cst_blur),
     load$0=caml_call1(Event[1],cst_load$0),
     unload=caml_call1(Event[1],cst_unload),
     beforeunload=caml_call1(Event[1],cst_beforeunload),
     resize=caml_call1(Event[1],cst_resize),
     orientationchange=caml_call1(Event[1],cst_orientationchange),
     popstate=caml_call1(Event[1],cst_popstate),
     error$0=caml_call1(Event[1],cst_error$0),
     abort$0=caml_call1(Event[1],cst_abort$0),
     select=caml_call1(Event[1],cst_select),
     online=caml_call1(Event[1],cst_online),
     offline=caml_call1(Event[1],cst_offline),
     checking=caml_call1(Event[1],cst_checking),
     noupdate=caml_call1(Event[1],cst_noupdate),
     downloading=caml_call1(Event[1],cst_downloading),
     progress$0=caml_call1(Event[1],cst_progress$0),
     updateready=caml_call1(Event[1],cst_updateready),
     cached=caml_call1(Event[1],cst_cached),
     obsolete=caml_call1(Event[1],cst_obsolete),
     domContentLoaded=caml_call1(Event[1],cst_DOMContentLoaded),
     animationstart=caml_call1(Event[1],cst_animationstart),
     animationend=caml_call1(Event[1],cst_animationend),
     animationiteration=caml_call1(Event[1],cst_animationiteration),
     animationcancel=caml_call1(Event[1],cst_animationcancel),
     transitionrun=caml_call1(Event[1],cst_transitionrun),
     transitionstart=caml_call1(Event[1],cst_transitionstart),
     transitionend=caml_call1(Event[1],cst_transitionend),
     transitioncancel=caml_call1(Event[1],cst_transitioncancel),
     canplay=caml_call1(Event[1],cst_canplay),
     canplaythrough=caml_call1(Event[1],cst_canplaythrough),
     durationchange=caml_call1(Event[1],cst_durationchange),
     emptied=caml_call1(Event[1],cst_emptied),
     ended=caml_call1(Event[1],cst_ended),
     gotpointercapture=caml_call1(Event[1],cst_gotpointercapture),
     loadeddata=caml_call1(Event[1],cst_loadeddata),
     loadedmetadata=caml_call1(Event[1],cst_loadedmetadata),
     loadstart$0=caml_call1(Event[1],cst_loadstart$0),
     lostpointercapture=caml_call1(Event[1],cst_lostpointercapture),
     message$0=caml_call1(Event[1],cst_message),
     pause=caml_call1(Event[1],cst_pause),
     play=caml_call1(Event[1],cst_play),
     playing=caml_call1(Event[1],cst_playing),
     pointerenter=caml_call1(Event[1],cst_pointerenter),
     pointercancel=caml_call1(Event[1],cst_pointercancel),
     pointerdown=caml_call1(Event[1],cst_pointerdown),
     pointerleave=caml_call1(Event[1],cst_pointerleave),
     pointermove=caml_call1(Event[1],cst_pointermove),
     pointerout=caml_call1(Event[1],cst_pointerout),
     pointerover=caml_call1(Event[1],cst_pointerover),
     pointerup=caml_call1(Event[1],cst_pointerup),
     ratechange=caml_call1(Event[1],cst_ratechange),
     seeked=caml_call1(Event[1],cst_seeked),
     seeking=caml_call1(Event[1],cst_seeking),
     stalled=caml_call1(Event[1],cst_stalled),
     suspend=caml_call1(Event[1],cst_suspend),
     volumechange=caml_call1(Event[1],cst_volumechange),
     waiting=caml_call1(Event[1],cst_waiting),
     make$1=Event[1],
     d="2d";
    function location_origin(loc)
     {function _gw_(o){return o}
      function _gx_(param)
       {var t8=loc.protocol,t7=loc.hostname,t9=loc.port;
        if
         (caml_call2(symbol$8,t8.length,0)
          &&
          caml_call2(symbol$8,t7.length,0))
         return "";
        var t13=t8.concat("//",t7);
        if(! caml_call2(symbol$9,t9.length,0))return t13;
        var t12=loc.port;
        return t13.concat(":",t12)}
      return caml_call3(Optdef[7],loc.origin,_gx_,_gw_)}
    var _j_=Unsafe[1],t87=_j_.document;
    function getElementById(id)
     {function _gt_(pnode){return pnode}
      function _gu_(param){throw Stdlib[8]}
      var t15=caml_jsstring_of_string(id),_gv_=t87.getElementById(t15);
      return caml_call3(Opt[7],_gv_,_gu_,_gt_)}
    function getElementById_exn(id)
     {function _gp_(pnode){return pnode}
      function _gq_(param)
       {var _gs_=caml_call2(Stdlib_Printf[4],_k_,id);
        return caml_call1(Stdlib[2],_gs_)}
      var t17=caml_jsstring_of_string(id),_gr_=t87.getElementById(t17);
      return caml_call3(Opt[7],_gr_,_gq_,_gp_)}
    function getElementById_opt(id)
     {var t19=caml_jsstring_of_string(id),_go_=t87.getElementById(t19);
      return caml_call1(Opt[10],_go_)}
    function getElementById_coerce(id,coerce)
     {function _gk_(e)
       {var _gn_=caml_call1(coerce,e);return caml_call1(Opt[10],_gn_)}
      function _gl_(param){return 0}
      var t21=caml_jsstring_of_string(id),_gm_=t87.getElementById(t21);
      return caml_call3(Opt[7],_gm_,_gl_,_gk_)}
    function opt_iter(x,f){if(! x)return 0;var v=x[1];return caml_call1(f,v)}
    function createElement(t24,name)
     {var t23=caml_jsstring_of_string(name);return t24.createElement(t23)}
    function unsafeCreateElement(doc,name){return createElement(doc,name)}
    var createElementSyntax=[0,785140586];
    function unsafeCreateElementEx(type,name,doc,elt)
     {for(;;)
       {if(0 === type && 0 === name)return createElement(doc,elt);
        var _ge_=createElementSyntax[1];
        if(785140586 === _ge_)
         {try
           {var
             el=t87.createElement('<input name="x">'),
             _gh_=el.tagName.toLowerCase() === "input"?1:0,
             _gi_=_gh_?el.name === "x"?1:0:_gh_,
             _gf_=_gi_}
          catch(_gj_){var _gf_=0}
          var _gg_=_gf_?982028505:-1003883683;
          createElementSyntax[1] = _gg_;
          continue}
        if(982028505 <= _ge_)
         {var t40=new array_length();
          t40.push("<",caml_jsstring_of_string(elt));
          opt_iter
           (type,
            function(t)
             {var t34=caml_js_html_escape(t);
              t40.push(' type="',t34,'"');
              return 0});
          opt_iter
           (name,
            function(n)
             {var t38=caml_js_html_escape(n);
              t40.push(' name="',t38,'"');
              return 0});
          t40.push(">");
          return doc.createElement(t40.join(""))}
        var t28=createElement(doc,elt);
        opt_iter(type,function(t25){return t28.type = t25});
        opt_iter(name,function(t27){return t28.name = t27});
        return t28}}
    function createHtml(doc){return unsafeCreateElement(doc,cst_html)}
    function createHead(doc){return unsafeCreateElement(doc,cst_head)}
    function createLink(doc){return unsafeCreateElement(doc,cst_link)}
    function createTitle(doc){return unsafeCreateElement(doc,cst_title)}
    function createMeta(doc){return unsafeCreateElement(doc,cst_meta)}
    function createBase(doc){return unsafeCreateElement(doc,cst_base)}
    function createStyle(doc){return unsafeCreateElement(doc,cst_style)}
    function createBody(doc){return unsafeCreateElement(doc,cst_body)}
    function createForm(doc){return unsafeCreateElement(doc,cst_form)}
    function createOptgroup(doc){return unsafeCreateElement(doc,cst_optgroup)}
    function createOption(doc){return unsafeCreateElement(doc,cst_option)}
    function createSelect(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_select$0)}
    function createInput(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_input$0)}
    function createTextarea(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_textarea)}
    function createButton(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_button)}
    function createLabel(doc){return unsafeCreateElement(doc,cst_label)}
    function createFieldset(doc){return unsafeCreateElement(doc,cst_fieldset)}
    function createLegend(doc){return unsafeCreateElement(doc,cst_legend)}
    function createUl(doc){return unsafeCreateElement(doc,cst_ul)}
    function createOl(doc){return unsafeCreateElement(doc,cst_ol)}
    function createDl(doc){return unsafeCreateElement(doc,cst_dl)}
    function createLi(doc){return unsafeCreateElement(doc,cst_li)}
    function createDiv(doc){return unsafeCreateElement(doc,cst_div)}
    function createEmbed(doc){return unsafeCreateElement(doc,cst_embed)}
    function createP(doc){return unsafeCreateElement(doc,cst_p)}
    function createH1(doc){return unsafeCreateElement(doc,cst_h1)}
    function createH2(doc){return unsafeCreateElement(doc,cst_h2)}
    function createH3(doc){return unsafeCreateElement(doc,cst_h3)}
    function createH4(doc){return unsafeCreateElement(doc,cst_h4)}
    function createH5(doc){return unsafeCreateElement(doc,cst_h5)}
    function createH6(doc){return unsafeCreateElement(doc,cst_h6)}
    function createQ(doc){return unsafeCreateElement(doc,cst_q)}
    function createBlockquote(doc)
     {return unsafeCreateElement(doc,cst_blockquote)}
    function createPre(doc){return unsafeCreateElement(doc,cst_pre)}
    function createBr(doc){return unsafeCreateElement(doc,cst_br)}
    function createHr(doc){return unsafeCreateElement(doc,cst_hr)}
    function createIns(doc){return unsafeCreateElement(doc,cst_ins)}
    function createDel(doc){return unsafeCreateElement(doc,cst_del)}
    function createA(doc){return unsafeCreateElement(doc,cst_a)}
    function createImg(doc){return unsafeCreateElement(doc,cst_img)}
    function createObject(doc){return unsafeCreateElement(doc,cst_object)}
    function createParam(doc){return unsafeCreateElement(doc,cst_param)}
    function createMap(doc){return unsafeCreateElement(doc,cst_map)}
    function createArea(doc){return unsafeCreateElement(doc,cst_area)}
    function createScript(doc){return unsafeCreateElement(doc,cst_script)}
    function createTable(doc){return unsafeCreateElement(doc,cst_table)}
    function createCaption(doc){return unsafeCreateElement(doc,cst_caption)}
    function createCol(doc){return unsafeCreateElement(doc,cst_col)}
    function createColgroup(doc){return unsafeCreateElement(doc,cst_colgroup)}
    function createThead(doc){return unsafeCreateElement(doc,cst_thead)}
    function createTfoot(doc){return unsafeCreateElement(doc,cst_tfoot)}
    function createTbody(doc){return unsafeCreateElement(doc,cst_tbody)}
    function createTr(doc){return unsafeCreateElement(doc,cst_tr)}
    function createTh(doc){return unsafeCreateElement(doc,cst_th)}
    function createTd(doc){return unsafeCreateElement(doc,cst_td)}
    function createSub(doc){return createElement(doc,cst_sub)}
    function createSup(doc){return createElement(doc,cst_sup)}
    function createSpan(doc){return createElement(doc,cst_span)}
    function createTt(doc){return createElement(doc,cst_tt)}
    function createI(doc){return createElement(doc,cst_i)}
    function createB(doc){return createElement(doc,cst_b)}
    function createBig(doc){return createElement(doc,cst_big)}
    function createSmall(doc){return createElement(doc,cst_small)}
    function createEm(doc){return createElement(doc,cst_em)}
    function createStrong(doc){return createElement(doc,cst_strong)}
    function createCite(doc){return createElement(doc,cst_cite)}
    function createDfn(doc){return createElement(doc,cst_dfn)}
    function createCode(doc){return createElement(doc,cst_code)}
    function createSamp(doc){return createElement(doc,cst_samp)}
    function createKbd(doc){return createElement(doc,cst_kbd)}
    function createVar(doc){return createElement(doc,cst_var)}
    function createAbbr(doc){return createElement(doc,cst_abbr)}
    function createDd(doc){return createElement(doc,cst_dd)}
    function createDt(doc){return createElement(doc,cst_dt)}
    function createNoscript(doc){return createElement(doc,cst_noscript)}
    function createAddress(doc){return createElement(doc,cst_address)}
    function createFrameset(doc){return unsafeCreateElement(doc,cst_frameset)}
    function createFrame(doc){return unsafeCreateElement(doc,cst_frame)}
    function createIframe(doc){return unsafeCreateElement(doc,cst_iframe)}
    function createAudio(doc){return unsafeCreateElement(doc,cst_audio)}
    function createVideo(doc){return unsafeCreateElement(doc,cst_video)}
    var
     Canvas_not_available=
      [248,cst_Js_of_ocaml_Dom_html_Canva,caml_fresh_oo_id(0)];
    function createCanvas(doc)
     {var t52=unsafeCreateElement(doc,cst_canvas);
      if(1 - caml_call1(Opt[5],t52.getContext))throw Canvas_not_available;
      return t52}
    var
     html_element=Unsafe[1].HTMLElement,
     element$0=
      html_element === t39
       ?function(e){return e.innerHTML === t39?no_handler:e}
       :function(e){return e instanceof html_element?e:no_handler};
    function unsafeCoerce(tag,e)
     {var t56=e.tagName,_gd_=caml_jsstring_of_string(tag);
      return t56.toLowerCase() === _gd_?e:no_handler}
    function a(e){return unsafeCoerce(cst_a$0,e)}
    function area(e){return unsafeCoerce(cst_area$0,e)}
    function base(e){return unsafeCoerce(cst_base$0,e)}
    function blockquote(e){return unsafeCoerce(cst_blockquote$0,e)}
    function body(e){return unsafeCoerce(cst_body$0,e)}
    function br(e){return unsafeCoerce(cst_br$0,e)}
    function button(e){return unsafeCoerce(cst_button$0,e)}
    function canvas(e){return unsafeCoerce(cst_canvas$0,e)}
    function caption(e){return unsafeCoerce(cst_caption$0,e)}
    function col(e){return unsafeCoerce(cst_col$0,e)}
    function colgroup(e){return unsafeCoerce(cst_colgroup$0,e)}
    function del(e){return unsafeCoerce(cst_del$0,e)}
    function div(e){return unsafeCoerce(cst_div$0,e)}
    function dl(e){return unsafeCoerce(cst_dl$0,e)}
    function fieldset(e){return unsafeCoerce(cst_fieldset$0,e)}
    function embed(e){return unsafeCoerce(cst_embed$0,e)}
    function form(e){return unsafeCoerce(cst_form$0,e)}
    function frameset(e){return unsafeCoerce(cst_frameset$0,e)}
    function frame(e){return unsafeCoerce(cst_frame$0,e)}
    function h1(e){return unsafeCoerce(cst_h1$0,e)}
    function h2(e){return unsafeCoerce(cst_h2$0,e)}
    function h3(e){return unsafeCoerce(cst_h3$0,e)}
    function h4(e){return unsafeCoerce(cst_h4$0,e)}
    function h5(e){return unsafeCoerce(cst_h5$0,e)}
    function h6(e){return unsafeCoerce(cst_h6$0,e)}
    function head(e){return unsafeCoerce(cst_head$0,e)}
    function hr(e){return unsafeCoerce(cst_hr$0,e)}
    function html(e){return unsafeCoerce(cst_html$0,e)}
    function iframe(e){return unsafeCoerce(cst_iframe$0,e)}
    function img(e){return unsafeCoerce(cst_img$0,e)}
    function input$0(e){return unsafeCoerce(cst_input$1,e)}
    function ins(e){return unsafeCoerce(cst_ins$0,e)}
    function label(e){return unsafeCoerce(cst_label$0,e)}
    function legend(e){return unsafeCoerce(cst_legend$0,e)}
    function li(e){return unsafeCoerce(cst_li$0,e)}
    function link(e){return unsafeCoerce(cst_link$0,e)}
    function map$2(e){return unsafeCoerce(cst_map$0,e)}
    function meta(e){return unsafeCoerce(cst_meta$0,e)}
    function object(e){return unsafeCoerce(cst_object$0,e)}
    function ol(e){return unsafeCoerce(cst_ol$0,e)}
    function optgroup(e){return unsafeCoerce(cst_optgroup$0,e)}
    function option$1(e){return unsafeCoerce(cst_option$0,e)}
    function p(e){return unsafeCoerce(cst_p$0,e)}
    function param(e){return unsafeCoerce(cst_param$0,e)}
    function pre(e){return unsafeCoerce(cst_pre$0,e)}
    function q(e){return unsafeCoerce(cst_q$0,e)}
    function script(e){return unsafeCoerce(cst_script$0,e)}
    function select$0(e){return unsafeCoerce(cst_select$1,e)}
    function style(e){return unsafeCoerce(cst_style$0,e)}
    function table(e){return unsafeCoerce(cst_table$0,e)}
    function tbody(e){return unsafeCoerce(cst_tbody$0,e)}
    function td(e){return unsafeCoerce(cst_td$0,e)}
    function textarea(e){return unsafeCoerce(cst_textarea$0,e)}
    function tfoot(e){return unsafeCoerce(cst_tfoot$0,e)}
    function th(e){return unsafeCoerce(cst_th$0,e)}
    function thead(e){return unsafeCoerce(cst_thead$0,e)}
    function title(e){return unsafeCoerce(cst_title$0,e)}
    function tr(e){return unsafeCoerce(cst_tr$0,e)}
    function ul(e){return unsafeCoerce(cst_ul$0,e)}
    function audio(e){return unsafeCoerce(cst_audio$0,e)}
    function video(e){return unsafeCoerce(cst_video$0,e)}
    function unsafeCoerceEvent(constr,ev)
     {if(constr !== t39 && ev instanceof constr)return ev;return no_handler}
    function mouseEvent(ev){return unsafeCoerceEvent(Unsafe[1].MouseEvent,ev)}
    function keyboardEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].KeyboardEvent,ev)}
    function wheelEvent(ev){return unsafeCoerceEvent(Unsafe[1].WheelEvent,ev)}
    function mouseScrollEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].MouseScrollEvent,ev)}
    function popStateEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].PopStateEvent,ev)}
    function messageEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].MessageEvent,ev)}
    function eventRelatedTarget(e)
     {function _ga_(param)
       {var match=caml_string_of_jsstring(e.type);
        if(! caml_string_notequal(match,cst_mouseout$0))
         {var _gc_=function(param){throw [0,Assert_failure,_m_]};
          return caml_call2(Optdef[8],e.toElement,_gc_)}
        if(caml_string_notequal(match,cst_mouseover$0))return no_handler;
        function _gb_(param){throw [0,Assert_failure,_l_]}
        return caml_call2(Optdef[8],e.fromElement,_gb_)}
      return caml_call2(Optdef[8],e.relatedTarget,_ga_)}
    function eventAbsolutePosition(e)
     {var t70=t87.body,t71=t87.documentElement;
      return [0,
              (e.clientX + t70.scrollLeft | 0) + t71.scrollLeft | 0,
              (e.clientY + t70.scrollTop | 0) + t71.scrollTop | 0]}
    function eventAbsolutePosition$0(e)
     {function _f8_(x)
       {function _f__(y){return [0,x,y]}
        function _f$_(param){return eventAbsolutePosition(e)}
        return caml_call3(Optdef[7],e.pageY,_f$_,_f__)}
      function _f9_(param){return eventAbsolutePosition(e)}
      return caml_call3(Optdef[7],e.pageX,_f9_,_f8_)}
    function elementClientPosition(e)
     {var t80=e.getBoundingClientRect(),t81=t87.body,t82=t87.documentElement;
      return [0,
              ((t80.left | 0) - t81.clientLeft | 0) - t82.clientLeft | 0,
              ((t80.top | 0) - t81.clientTop | 0) - t82.clientTop | 0]}
    function getDocumentScroll(param)
     {var t88=t87.body,t89=t87.documentElement;
      return [0,
              t88.scrollLeft + t89.scrollLeft | 0,
              t88.scrollTop + t89.scrollTop | 0]}
    function buttonPressed(ev)
     {function _f6_(x){return x}
      function _f7_(param)
       {var match=ev.button,switcher=match - 1 | 0;
        if(3 >= switcher >>> 0)
         switch(switcher)
          {case 0:return 1;case 1:return 3;case 2:break;default:return 2}
        return 0}
      return caml_call3(Optdef[7],ev.which,_f7_,_f6_)}
    function addMousewheelEventListenerWith(e,capture,once,passive,h)
     {return addEventListenerWithOptions
              (e,
               wheel,
               capture,
               once,
               passive,
               handler
                (function(e)
                  {function _f4_(param){return 0}
                   var
                    dx=
                     (- caml_call2(Optdef[8],e.wheelDeltaX,_f4_) | 0) / 40 | 0;
                   function _f5_(param){return e.wheelDelta}
                   var
                    dy=
                     (- caml_call2(Optdef[8],e.wheelDeltaY,_f5_) | 0) / 40 | 0;
                   return caml_call3(h,e,dx,dy)}))}
    function addMousewheelEventListener(e,h,capt)
     {return addMousewheelEventListenerWith(e,[0,capt],0,0,h)}
    function f(v)
     {var
       match=caml_string_of_jsstring(v),
       switch$0=caml_string_compare(match,cst_KeyH);
      if(0 <= switch$0)
       {if(0 >= switch$0)return 8;
        var switch$1=caml_string_compare(match,cst_Numpad4);
        if(0 <= switch$1)
         {if(0 >= switch$1)return 72;
          var switch$2=caml_string_compare(match,cst_PageUp);
          if(0 <= switch$2)
           {if(0 >= switch$2)return 98;
            var switch$3=caml_string_compare(match,cst_ShiftRight);
            if(0 <= switch$3)
             {if(0 >= switch$3)return 91;
              if(! caml_string_notequal(match,cst_Slash))return 55;
              if(! caml_string_notequal(match,cst_Space))return 41;
              if(! caml_string_notequal(match,cst_Tab))return 39;
              if(! caml_string_notequal(match,cst_VolumeDown))return 103;
              if(! caml_string_notequal(match,cst_VolumeMute))return 102;
              if(! caml_string_notequal(match,cst_VolumeUp))return 104}
            else
             {if(! caml_string_notequal(match,cst_Pause))return 123;
              if(! caml_string_notequal(match,cst_Period))return 54;
              if(! caml_string_notequal(match,cst_PrintScreen))return 120;
              if(! caml_string_notequal(match,cst_Quote))return 50;
              if(! caml_string_notequal(match,cst_ScrollLock))return 119;
              if(! caml_string_notequal(match,cst_Semicolon))return 49;
              if(! caml_string_notequal(match,cst_ShiftLeft))return 90}}
          else
           {var switch$4=caml_string_compare(match,cst_NumpadDivide);
            if(0 <= switch$4)
             {if(0 >= switch$4)return 84;
              if(! caml_string_notequal(match,cst_NumpadEnter))return 83;
              if(! caml_string_notequal(match,cst_NumpadEqual))return 82;
              if(! caml_string_notequal(match,cst_NumpadMultiply))return 78;
              if(! caml_string_notequal(match,cst_NumpadSubtract))return 79;
              if(! caml_string_notequal(match,cst_OSLeft))return 117;
              if(! caml_string_notequal(match,cst_OSRight))return 118;
              if(! caml_string_notequal(match,cst_PageDown))return 99}
            else
             {if(! caml_string_notequal(match,cst_Numpad5))return 73;
              if(! caml_string_notequal(match,cst_Numpad6))return 74;
              if(! caml_string_notequal(match,cst_Numpad7))return 75;
              if(! caml_string_notequal(match,cst_Numpad8))return 76;
              if(! caml_string_notequal(match,cst_Numpad9))return 77;
              if(! caml_string_notequal(match,cst_NumpadAdd))return 80;
              if(! caml_string_notequal(match,cst_NumpadDecimal))return 81}}}
        else
         {var switch$5=caml_string_compare(match,cst_KeyX);
          if(0 <= switch$5)
           {if(0 >= switch$5)return 24;
            var switch$6=caml_string_compare(match,cst_MetaRight);
            if(0 <= switch$6)
             {if(0 >= switch$6)return 89;
              if(! caml_string_notequal(match,cst_Minus))return 37;
              if(! caml_string_notequal(match,cst_NumLock))return 85;
              if(! caml_string_notequal(match,cst_Numpad0))return 68;
              if(! caml_string_notequal(match,cst_Numpad1))return 69;
              if(! caml_string_notequal(match,cst_Numpad2))return 70;
              if(! caml_string_notequal(match,cst_Numpad3))return 71}
            else
             {if(! caml_string_notequal(match,cst_KeyY))return 25;
              if(! caml_string_notequal(match,cst_KeyZ))return 26;
              if(! caml_string_notequal(match,cst_MediaPlayPause))return 107;
              if(! caml_string_notequal(match,cst_MediaStop))return 108;
              if(! caml_string_notequal(match,cst_MediaTrackNext))return 106;
              if(! caml_string_notequal(match,cst_MediaTrackPrevious))
               return 105;
              if(! caml_string_notequal(match,cst_MetaLeft))return 88}}
          else
           {var switch$7=caml_string_compare(match,cst_KeyP);
            if(0 <= switch$7)
             {if(0 >= switch$7)return 16;
              if(! caml_string_notequal(match,cst_KeyQ))return 17;
              if(! caml_string_notequal(match,cst_KeyR))return 18;
              if(! caml_string_notequal(match,cst_KeyS))return 19;
              if(! caml_string_notequal(match,cst_KeyT))return 20;
              if(! caml_string_notequal(match,cst_KeyU))return 21;
              if(! caml_string_notequal(match,cst_KeyV))return 22;
              if(! caml_string_notequal(match,cst_KeyW))return 23}
            else
             {if(! caml_string_notequal(match,cst_KeyI))return 9;
              if(! caml_string_notequal(match,cst_KeyJ))return 10;
              if(! caml_string_notequal(match,cst_KeyK))return 11;
              if(! caml_string_notequal(match,cst_KeyL))return 12;
              if(! caml_string_notequal(match,cst_KeyM))return 13;
              if(! caml_string_notequal(match,cst_KeyN))return 14;
              if(! caml_string_notequal(match,cst_KeyO))return 15}}}}
      else
       {var switch$8=caml_string_compare(match,cst_Digit6);
        if(0 <= switch$8)
         {if(0 >= switch$8)return 33;
          var switch$9=caml_string_compare(match,cst_F6);
          if(0 <= switch$9)
           {if(0 >= switch$9)return 61;
            var switch$10=caml_string_compare(match,cst_KeyA);
            if(0 <= switch$10)
             {if(0 >= switch$10)return 1;
              if(! caml_string_notequal(match,cst_KeyB))return 2;
              if(! caml_string_notequal(match,cst_KeyC))return 3;
              if(! caml_string_notequal(match,cst_KeyD))return 4;
              if(! caml_string_notequal(match,cst_KeyE))return 5;
              if(! caml_string_notequal(match,cst_KeyF))return 6;
              if(! caml_string_notequal(match,cst_KeyG))return 7}
            else
             {if(! caml_string_notequal(match,cst_F7))return 62;
              if(! caml_string_notequal(match,cst_F8))return 63;
              if(! caml_string_notequal(match,cst_F9))return 64;
              if(! caml_string_notequal(match,cst_Home))return 100;
              if(! caml_string_notequal(match,cst_Insert))return 44;
              if(! caml_string_notequal(match,cst_IntlBackslash))return 121;
              if(! caml_string_notequal(match,cst_IntlYen))return 122}}
          else
           {var switch$11=caml_string_compare(match,cst_F1);
            if(0 <= switch$11)
             {if(0 >= switch$11)return 56;
              if(! caml_string_notequal(match,cst_F10))return 65;
              if(! caml_string_notequal(match,cst_F11))return 66;
              if(! caml_string_notequal(match,cst_F12))return 67;
              if(! caml_string_notequal(match,cst_F2))return 57;
              if(! caml_string_notequal(match,cst_F3))return 58;
              if(! caml_string_notequal(match,cst_F4))return 59;
              if(! caml_string_notequal(match,cst_F5))return 60}
            else
             {if(! caml_string_notequal(match,cst_Digit7))return 34;
              if(! caml_string_notequal(match,cst_Digit8))return 35;
              if(! caml_string_notequal(match,cst_Digit9))return 36;
              if(! caml_string_notequal(match,cst_End))return 101;
              if(! caml_string_notequal(match,cst_Enter))return 40;
              if(! caml_string_notequal(match,cst_Equal))return 38;
              if(! caml_string_notequal(match,cst_Escape))return 42}}}
        else
         {var switch$12=caml_string_compare(match,cst_BrowserRefresh);
          if(0 <= switch$12)
           {if(0 >= switch$12)return 113;
            var switch$13=caml_string_compare(match,cst_Delete);
            if(0 <= switch$13)
             {if(0 >= switch$13)return 45;
              if(! caml_string_notequal(match,cst_Digit0))return 27;
              if(! caml_string_notequal(match,cst_Digit1))return 28;
              if(! caml_string_notequal(match,cst_Digit2))return 29;
              if(! caml_string_notequal(match,cst_Digit3))return 30;
              if(! caml_string_notequal(match,cst_Digit4))return 31;
              if(! caml_string_notequal(match,cst_Digit5))return 32}
            else
             {if(! caml_string_notequal(match,cst_BrowserSearch))return 110;
              if(! caml_string_notequal(match,cst_BrowserStop))return 114;
              if(! caml_string_notequal(match,cst_CapsLock))return 46;
              if(! caml_string_notequal(match,cst_Comma))return 53;
              if(! caml_string_notequal(match,cst_ContextMenu))return 109;
              if(! caml_string_notequal(match,cst_ControlLeft))return 86;
              if(! caml_string_notequal(match,cst_ControlRight))return 87}}
          else
           {var switch$14=caml_string_compare(match,cst_Backslash);
            if(0 <= switch$14)
             {if(0 >= switch$14)return 52;
              if(! caml_string_notequal(match,cst_Backspace))return 43;
              if(! caml_string_notequal(match,cst_BracketLeft))return 47;
              if(! caml_string_notequal(match,cst_BracketRight))return 48;
              if(! caml_string_notequal(match,cst_BrowserBack))return 116;
              if(! caml_string_notequal(match,cst_BrowserFavorites))
               return 112;
              if(! caml_string_notequal(match,cst_BrowserForward))return 115;
              if(! caml_string_notequal(match,cst_BrowserHome))return 111}
            else
             {if(! caml_string_notequal(match,cst_AltLeft))return 92;
              if(! caml_string_notequal(match,cst_AltRight))return 93;
              if(! caml_string_notequal(match,cst_ArrowDown))return 97;
              if(! caml_string_notequal(match,cst_ArrowLeft))return 94;
              if(! caml_string_notequal(match,cst_ArrowRight))return 95;
              if(! caml_string_notequal(match,cst_ArrowUp))return 96;
              if(! caml_string_notequal(match,cst_Backquote))return 51}}}}
      return 0}
    function try_key_code_left(param)
     {if(19 <= param)
       {if(91 === param)return 88}
      else
       if(16 <= param)
        switch(param - 16 | 0)
         {case 0:return 90;case 1:return 86;default:return 92}
      return 0}
    function try_key_code_right(param)
     {if(19 <= param)
       {if(91 === param)return 89}
      else
       if(16 <= param)
        switch(param - 16 | 0)
         {case 0:return 91;case 1:return 87;default:return 93}
      return 0}
    function try_key_code_numpad(param)
     {if(47 <= param)
       {var switcher=param - 96 | 0;
        if(15 >= switcher >>> 0)
         switch(switcher)
          {case 0:return 68;
           case 1:return 69;
           case 2:return 70;
           case 3:return 71;
           case 4:return 72;
           case 5:return 73;
           case 6:return 74;
           case 7:return 75;
           case 8:return 76;
           case 9:return 77;
           case 10:return 78;
           case 11:return 80;
           case 12:break;
           case 13:return 79;
           case 14:return 81;
           default:return 84}}
      else
       if(12 <= param)
        switch(param - 12 | 0)
         {case 0:return 73;
          case 1:return 83;
          case 21:return 77;
          case 22:return 71;
          case 23:return 69;
          case 24:return 75;
          case 25:return 72;
          case 26:return 76;
          case 27:return 74;
          case 28:return 70;
          case 33:return 68;
          case 34:return 81
          }
      return 0}
    function try_key_code_normal(param)
     {var switcher=param - 8 | 0;
      if(214 >= switcher >>> 0)
       {var _f3_=switcher;
        if(67 <= _f3_)
         switch(_f3_)
          {case 67:return 11;
           case 68:return 12;
           case 69:return 13;
           case 70:return 14;
           case 71:return 15;
           case 72:return 16;
           case 73:return 17;
           case 74:return 18;
           case 75:return 19;
           case 76:return 20;
           case 77:return 21;
           case 78:return 22;
           case 79:return 23;
           case 80:return 24;
           case 81:return 25;
           case 82:return 26;
           case 85:return 109;
           case 104:return 56;
           case 105:return 57;
           case 106:return 58;
           case 107:return 59;
           case 108:return 60;
           case 109:return 61;
           case 110:return 62;
           case 111:return 63;
           case 112:return 64;
           case 113:return 65;
           case 114:return 66;
           case 115:return 67;
           case 137:return 119;
           case 178:return 49;
           case 179:return 38;
           case 180:return 53;
           case 181:return 37;
           case 182:return 54;
           case 183:return 55;
           case 184:return 51;
           case 211:return 47;
           case 212:return 52;
           case 213:return 48;
           case 214:return 50
           }
        else
         switch(_f3_)
          {case 0:return 43;
           case 1:return 39;
           case 5:return 40;
           case 11:return 123;
           case 12:return 46;
           case 19:return 42;
           case 24:return 41;
           case 25:return 98;
           case 26:return 99;
           case 27:return 101;
           case 28:return 100;
           case 29:return 94;
           case 30:return 96;
           case 31:return 95;
           case 32:return 97;
           case 34:return 120;
           case 37:return 44;
           case 38:return 45;
           case 40:return 27;
           case 41:return 28;
           case 42:return 29;
           case 43:return 30;
           case 44:return 31;
           case 45:return 32;
           case 46:return 33;
           case 47:return 34;
           case 48:return 35;
           case 49:return 36;
           case 57:return 1;
           case 58:return 2;
           case 59:return 3;
           case 60:return 4;
           case 61:return 5;
           case 62:return 6;
           case 63:return 7;
           case 64:return 8;
           case 65:return 9;
           case 66:return 10
           }}
      return 0}
    function make_unidentified(param){return 0}
    function run_next(value,f,v){return v?v:caml_call1(f,value)}
    function symbol$11(x,f){return caml_call1(f,x)}
    function of_event(evt)
     {var _fW_=evt.keyCode;
      function _fX_(_f2_){return run_next(_fW_,try_key_code_normal,_f2_)}
      var match=evt.location,switcher=match - 1 | 0;
      if(2 < switcher >>> 0)
       var _fY_=make_unidentified;
      else
       switch(switcher)
        {case 0:
          var
           _fT_=evt.keyCode,
           _fY_=function(_f0_){return run_next(_fT_,try_key_code_left,_f0_)};
          break;
         case 1:
          var
           _fU_=evt.keyCode,
           _fY_=function(_fZ_){return run_next(_fU_,try_key_code_right,_fZ_)};
          break;
         default:
          var
           _fV_=evt.keyCode,
           _fY_=function(_f1_){return run_next(_fV_,try_key_code_numpad,_f1_)}}
      var value=evt.code;
      return symbol$11
              (symbol$11
                (symbol$11
                  (0,
                   function(v)
                    {return v?v:caml_call3(Optdef[7],value,make_unidentified,f)}),
                 _fY_),
               _fX_)}
    function char_of_int(value)
     {if(! caml_call2(symbol$5,0,value))return 0;
      try
       {var _fR_=[0,caml_call1(Stdlib_Uchar[8],value)];return _fR_}
      catch(_fS_){return 0}}
    function empty_string(param){return ""}
    function none(param){return 0}
    function of_event$0(evt)
     {var t104=caml_call2(Optdef[8],evt.key,empty_string),match=t104.length;
      return 0 === match
              ?caml_call3(Optdef[7],evt.charCode,none,char_of_int)
              :1 === match?char_of_int(t104.charCodeAt(0) | 0):0}
    function element$1(_fQ_){return _fQ_}
    function tagged(e)
     {var t106=e.tagName,tag=caml_string_of_jsbytes(t106.toLowerCase());
      if(caml_call2(symbol$8,caml_ml_string_length(tag),0))return [61,e];
      var match=runtime.caml_string_unsafe_get(tag,0),switcher=match - 97 | 0;
      if(21 >= switcher >>> 0)
       switch(switcher)
        {case 0:
          return caml_string_notequal(tag,cst_a$1)
                  ?caml_string_notequal(tag,cst_area$1)
                    ?caml_string_notequal(tag,cst_audio$1)?[61,e]:[2,e]
                    :[1,e]
                  :[0,e];
         case 1:
          return caml_string_notequal(tag,cst_base$1)
                  ?caml_string_notequal(tag,cst_blockquote$1)
                    ?caml_string_notequal(tag,cst_body$1)
                      ?caml_string_notequal(tag,cst_br$1)
                        ?caml_string_notequal(tag,cst_button$1)?[61,e]:[7,e]
                        :[6,e]
                      :[5,e]
                    :[4,e]
                  :[3,e];
         case 2:
          return caml_string_notequal(tag,cst_canvas$1)
                  ?caml_string_notequal(tag,cst_caption$1)
                    ?caml_string_notequal(tag,cst_col$1)
                      ?caml_string_notequal(tag,cst_colgroup$1)?[61,e]:[11,e]
                      :[10,e]
                    :[9,e]
                  :[8,e];
         case 3:
          return caml_string_notequal(tag,cst_del$1)
                  ?caml_string_notequal(tag,cst_div$1)
                    ?caml_string_notequal(tag,cst_dl$1)?[61,e]:[14,e]
                    :[13,e]
                  :[12,e];
         case 4:return caml_string_notequal(tag,cst_embed$1)?[61,e]:[15,e];
         case 5:
          return caml_string_notequal(tag,cst_fieldset$1)
                  ?caml_string_notequal(tag,cst_form$1)
                    ?caml_string_notequal(tag,cst_frame$1)
                      ?caml_string_notequal(tag,cst_frameset$1)?[61,e]:[18,e]
                      :[19,e]
                    :[17,e]
                  :[16,e];
         case 7:
          return caml_string_notequal(tag,cst_h1$1)
                  ?caml_string_notequal(tag,cst_h2$1)
                    ?caml_string_notequal(tag,cst_h3$1)
                      ?caml_string_notequal(tag,cst_h4$1)
                        ?caml_string_notequal(tag,cst_h5$1)
                          ?caml_string_notequal(tag,cst_h6$1)
                            ?caml_string_notequal(tag,cst_head$1)
                              ?caml_string_notequal(tag,cst_hr$1)
                                ?caml_string_notequal(tag,cst_html$1)?[61,e]:[28,e]
                                :[27,e]
                              :[26,e]
                            :[25,e]
                          :[24,e]
                        :[23,e]
                      :[22,e]
                    :[21,e]
                  :[20,e];
         case 8:
          return caml_string_notequal(tag,cst_iframe$1)
                  ?caml_string_notequal(tag,cst_img$1)
                    ?caml_string_notequal(tag,cst_input$2)
                      ?caml_string_notequal(tag,cst_ins$1)?[61,e]:[32,e]
                      :[31,e]
                    :[30,e]
                  :[29,e];
         case 11:
          return caml_string_notequal(tag,cst_label$1)
                  ?caml_string_notequal(tag,cst_legend$1)
                    ?caml_string_notequal(tag,cst_li$1)
                      ?caml_string_notequal(tag,cst_link$1)?[61,e]:[36,e]
                      :[35,e]
                    :[34,e]
                  :[33,e];
         case 12:
          return caml_string_notequal(tag,cst_map$1)
                  ?caml_string_notequal(tag,cst_meta$1)?[61,e]:[38,e]
                  :[37,e];
         case 14:
          return caml_string_notequal(tag,cst_object$1)
                  ?caml_string_notequal(tag,cst_ol$1)
                    ?caml_string_notequal(tag,cst_optgroup$1)
                      ?caml_string_notequal(tag,cst_option$1)?[61,e]:[42,e]
                      :[41,e]
                    :[40,e]
                  :[39,e];
         case 15:
          return caml_string_notequal(tag,cst_p$1)
                  ?caml_string_notequal(tag,cst_param$1)
                    ?caml_string_notequal(tag,cst_pre$1)?[61,e]:[45,e]
                    :[44,e]
                  :[43,e];
         case 16:return caml_string_notequal(tag,cst_q$1)?[61,e]:[46,e];
         case 18:
          return caml_string_notequal(tag,cst_script$1)
                  ?caml_string_notequal(tag,cst_select$2)
                    ?caml_string_notequal(tag,cst_style$1)?[61,e]:[49,e]
                    :[48,e]
                  :[47,e];
         case 19:
          return caml_string_notequal(tag,cst_table$1)
                  ?caml_string_notequal(tag,cst_tbody$1)
                    ?caml_string_notequal(tag,cst_td$1)
                      ?caml_string_notequal(tag,cst_textarea$1)
                        ?caml_string_notequal(tag,cst_tfoot$1)
                          ?caml_string_notequal(tag,cst_th$1)
                            ?caml_string_notequal(tag,cst_thead$1)
                              ?caml_string_notequal(tag,cst_title$1)
                                ?caml_string_notequal(tag,cst_tr$1)?[61,e]:[58,e]
                                :[57,e]
                              :[56,e]
                            :[55,e]
                          :[54,e]
                        :[53,e]
                      :[52,e]
                    :[51,e]
                  :[50,e];
         case 20:return caml_string_notequal(tag,cst_ul$1)?[61,e]:[59,e];
         case 21:return caml_string_notequal(tag,cst_video$1)?[61,e]:[60,e]
         }
      return [61,e]}
    function opt_tagged(e)
     {function _fO_(e){return [0,tagged(e)]}
      function _fP_(param){return 0}
      return caml_call3(Opt[7],e,_fP_,_fO_)}
    function taggedEvent(ev)
     {function _fw_(ev){return [0,ev]}
      function _fx_(param)
       {function _fz_(ev){return [1,ev]}
        function _fA_(param)
         {function _fC_(ev){return [3,ev]}
          function _fD_(param)
           {function _fF_(ev){return [4,ev]}
            function _fG_(param)
             {function _fI_(ev){return [5,ev]}
              function _fJ_(param)
               {function _fL_(ev){return [2,ev]}
                function _fM_(param){return [6,ev]}
                var _fN_=messageEvent(ev);
                return caml_call3(Opt[7],_fN_,_fM_,_fL_)}
              var _fK_=popStateEvent(ev);
              return caml_call3(Opt[7],_fK_,_fJ_,_fI_)}
            var _fH_=mouseScrollEvent(ev);
            return caml_call3(Opt[7],_fH_,_fG_,_fF_)}
          var _fE_=wheelEvent(ev);
          return caml_call3(Opt[7],_fE_,_fD_,_fC_)}
        var _fB_=keyboardEvent(ev);
        return caml_call3(Opt[7],_fB_,_fA_,_fz_)}
      var _fy_=mouseEvent(ev);
      return caml_call3(Opt[7],_fy_,_fx_,_fw_)}
    function opt_taggedEvent(ev)
     {function _fu_(ev){return [0,taggedEvent(ev)]}
      function _fv_(param){return 0}
      return caml_call3(Opt[7],ev,_fv_,_fu_)}
    function stopPropagation(ev)
     {function _fs_(param){return ev.stopPropagation()}
      function _ft_(param){return ev.cancelBubble = t38}
      return caml_call3(Optdef[7],ev.stopPropagation,_ft_,_fs_)}
    var
     requestAnimationFrame=
      runtime.caml_js_pure_expr
       (function(param)
         {var
           l=
            [0,
             _j_.requestAnimationFrame,
             [0,
              _j_.mozRequestAnimationFrame,
              [0,
               _j_.webkitRequestAnimationFrame,
               [0,
                _j_.oRequestAnimationFrame,
                [0,_j_.msRequestAnimationFrame,0]]]]];
          try
           {var
             _fp_=function(c){return caml_call1(Optdef[5],c)},
             req=caml_call2(Stdlib_List[38],_fp_,l),
             _fq_=function(callback){return req(callback)};
            return _fq_}
          catch(_fr_)
           {_fr_ = caml_wrap_exception(_fr_);
            if(_fr_ !== Stdlib[8])throw _fr_;
            var
             now=function(param){var t117=new t116();return t117.getTime()},
             last=[0,now(0)];
            return function(callback)
             {var
               t=now(0),
               dt=last[1] + 16.6666666666666679 - t,
               dt$0=dt < 0.?0.:dt;
              last[1] = t;
              _j_.setTimeout(callback,dt$0);
              return 0}}});
    function hasPushState(param)
     {var t122=_j_.history;return caml_call1(Optdef[5],t122.pushState)}
    function hasPlaceholder(param)
     {var t123=createInput(0,0,t87);
      return caml_call1(Optdef[5],t123.placeholder)}
    function hasRequired(param)
     {var t124=createInput(0,0,t87);
      return caml_call1(Optdef[5],t124.required)}
    var overflow_limit=2147483000.;
    function setTimeout(callback,d)
     {var id=[0,0];
      function loop(d,param)
       {if(2147483000. < d)
         var remain=d - 2147483000.,step=overflow_limit;
        else
         var remain=0.,step=d;
        var
         cb=remain == 0.?callback:function(_fo_){return loop(remain,_fo_)},
         t125=caml_js_wrap_callback(cb);
        id[1] = [0,_j_.setTimeout(t125,step)];
        return 0}
      loop(d,0);
      return id}
    function clearTimeout(id)
     {var _fn_=id[1];
      if(! _fn_)return 0;
      var x=_fn_[1];
      id[1] = 0;
      return _j_.clearTimeout(x)}
    function js_array_of_collection(c){return [].slice.call(c)}
    var
     _n_=
      [0,
       click,
       copy,
       cut,
       paste,
       dblclick,
       mousedown,
       mouseup,
       mouseover,
       mousemove,
       mouseout,
       keypress,
       keydown,
       keyup,
       mousewheel,
       DOMMouseScroll,
       wheel,
       touchstart,
       touchmove,
       touchend,
       touchcancel,
       dragstart,
       dragend,
       dragenter,
       dragover,
       dragleave,
       drag,
       drop,
       hashchange,
       change,
       input,
       timeupdate,
       submit,
       scroll,
       focus,
       blur,
       load$0,
       unload,
       beforeunload,
       resize,
       orientationchange,
       popstate,
       error$0,
       abort$0,
       select,
       online,
       offline,
       checking,
       noupdate,
       downloading,
       progress$0,
       updateready,
       cached,
       obsolete,
       domContentLoaded,
       animationstart,
       animationend,
       animationiteration,
       animationcancel,
       transitionrun,
       transitionstart,
       transitionend,
       transitioncancel,
       canplay,
       canplaythrough,
       durationchange,
       emptied,
       ended,
       gotpointercapture,
       loadeddata,
       loadedmetadata,
       loadstart$0,
       lostpointercapture,
       message$0,
       pause,
       play,
       playing,
       pointerenter,
       pointercancel,
       pointerdown,
       pointerleave,
       pointermove,
       pointerout,
       pointerover,
       pointerup,
       ratechange,
       seeked,
       seeking,
       stalled,
       suspend,
       volumechange,
       waiting,
       make$1],
     Js_of_ocaml_Dom_html=
      [0,
       d,
       t87,
       getElementById_opt,
       getElementById_exn,
       getElementById_coerce,
       getElementById,
       location_origin,
       _j_,
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       eventRelatedTarget,
       _n_,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       addMousewheelEventListenerWith,
       addMousewheelEventListener,
       createCustomEvent,
       buttonPressed,
       eventAbsolutePosition$0,
       elementClientPosition,
       getDocumentScroll,
       [0,of_event,try_key_code_normal],
       [0,of_event$0],
       createHtml,
       createHead,
       createLink,
       createTitle,
       createMeta,
       createBase,
       createStyle,
       createBody,
       createForm,
       createOptgroup,
       createOption,
       createSelect,
       createInput,
       createTextarea,
       createButton,
       createLabel,
       createFieldset,
       createLegend,
       createUl,
       createOl,
       createDl,
       createLi,
       createDiv,
       createEmbed,
       createP,
       createH1,
       createH2,
       createH3,
       createH4,
       createH5,
       createH6,
       createQ,
       createBlockquote,
       createPre,
       createBr,
       createHr,
       createIns,
       createDel,
       createA,
       createImg,
       createObject,
       createParam,
       createMap,
       createArea,
       createScript,
       createTable,
       createCaption,
       createCol,
       createColgroup,
       createThead,
       createTfoot,
       createTbody,
       createTr,
       createTh,
       createTd,
       createSub,
       createSup,
       createSpan,
       createTt,
       createI,
       createB,
       createBig,
       createSmall,
       createEm,
       createStrong,
       createCite,
       createDfn,
       createCode,
       createSamp,
       createKbd,
       createVar,
       createAbbr,
       createDd,
       createDt,
       createNoscript,
       createAddress,
       createFrameset,
       createFrame,
       createIframe,
       createAudio,
       createVideo,
       Canvas_not_available,
       createCanvas,
       element$1,
       tagged,
       opt_tagged,
       taggedEvent,
       opt_taggedEvent,
       stopPropagation,
       [0,
        element$0,
        a,
        area,
        audio,
        base,
        blockquote,
        body,
        br,
        button,
        canvas,
        caption,
        col,
        colgroup,
        del,
        div,
        embed,
        dl,
        fieldset,
        form,
        frameset,
        frame,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        head,
        hr,
        html,
        iframe,
        img,
        input$0,
        ins,
        label,
        legend,
        li,
        link,
        map$2,
        meta,
        object,
        ol,
        optgroup,
        option$1,
        p,
        param,
        pre,
        q,
        script,
        select$0,
        style,
        table,
        tbody,
        td,
        textarea,
        tfoot,
        th,
        thead,
        title,
        tr,
        ul,
        video,
        mouseEvent,
        keyboardEvent,
        wheelEvent,
        mouseScrollEvent,
        popStateEvent,
        messageEvent],
       setTimeout,
       clearTimeout,
       js_array_of_collection,
       requestAnimationFrame,
       runtime.caml_js_html_entities,
       onIE,
       hasPushState,
       hasPlaceholder,
       hasRequired];
    caml_register_global(1669,Js_of_ocaml_Dom_html,"Js_of_ocaml__Dom_html");
    var formData=Unsafe[1].FormData,formData_form=Unsafe[1].FormData;
    function filter_map$0(f,param)
     {var param$0=param;
      for(;;)
       {if(! param$0)return 0;
        var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
        if(match){var v$0=match[1];return [0,v$0,filter_map$0(f,q)]}
        var param$0=q}}
    function have_content(elt)
     {var
       t3=elt.name,
       _fl_=caml_call2(symbol$9,t3.length,0),
       _fm_=_fl_?1 - (elt.disabled | 0):_fl_;
      return _fm_}
    function form_elements(get,form)
     {var t34=form.elements,i$2=t34.length - 1 | 0,acc=0,i=i$2;
      for(;;)
       {if(caml_call2(symbol$5,i,0))
         {var
           _fc_=
            function(v$2)
             {var match$3=tagged(v$2);
              switch(match$3[0])
               {case 31:
                 var v=match$3[1];
                 if(get)var sth=get[1],get$0=sth;else var get$0=0;
                 if(! have_content(v))return 0;
                 var
                  name$1=caml_string_of_jsstring(v.name),
                  value=v.value,
                  t20=v.type,
                  match=caml_string_of_jsbytes(t20.toLowerCase());
                 if(caml_string_notequal(match,cst_checkbox))
                  {if(! caml_string_notequal(match,cst_file))
                    {if(get$0)return [0,[0,name$1,[0,-976970511,value]],0];
                     var match$0=caml_call1(Optdef[10],v.files);
                     if(! match$0)return 0;
                     var list=match$0[1];
                     if(caml_call2(symbol$8,list.length,0))
                      return [0,[0,name$1,[0,-976970511,""]],0];
                     var match$1=caml_call1(Optdef[10],v.multiple);
                     if(match$1 && match$1[1])
                      {var
                        _fg_=function(t28){return list.item(t28)},
                        _fh_=caml_call2(Stdlib_Array[1],list.length,_fg_),
                        _fi_=caml_call1(Stdlib_Array[9],_fh_);
                       return filter_map$0
                               (function(f)
                                 {var match=caml_call1(Opt[10],f);
                                  if(! match)return 0;
                                  var file=match[1];
                                  return [0,[0,name$1,[0,781515420,file]]]},
                                _fi_)}
                     var _fj_=list.item(0),match$2=caml_call1(Opt[10],_fj_);
                     if(! match$2)return 0;
                     var file=match$2[1];
                     return [0,[0,name$1,[0,781515420,file]],0]}
                   var switch$0=0;
                   if(caml_string_notequal(match,cst_password))
                    {if(caml_string_notequal(match,cst_radio))
                      {var switch$1=0;
                       if
                        (caml_string_notequal(match,cst_reset)
                         &&
                         caml_string_notequal(match,cst_submit$0))
                        {if(caml_string_notequal(match,cst_text))
                          return [0,[0,name$1,[0,-976970511,value]],0];
                         switch$0 = 1;
                         switch$1 = 1}
                       if(! switch$1)return 0}}
                   else
                    switch$0 = 1;
                   if(switch$0)return [0,[0,name$1,[0,-976970511,value]],0]}
                 return v.checked | 0?[0,[0,name$1,[0,-976970511,value]],0]:0;
                case 48:
                 var v$0=match$3[1];
                 if(! have_content(v$0))return 0;
                 var name$0=caml_string_of_jsstring(v$0.name);
                 if(! (v$0.multiple | 0))
                  return [0,[0,name$0,[0,-976970511,v$0.value]],0];
                 var
                  _fe_=
                   function(i)
                    {var t13=v$0.options,_fk_=t13.item(i);
                     return caml_call1(Opt[10],_fk_)},
                  t10=v$0.options,
                  options=caml_call2(Stdlib_Array[1],t10.length,_fe_),
                  _ff_=caml_call1(Stdlib_Array[9],options);
                 return filter_map$0
                         (function(param)
                           {if(! param)return 0;
                            var e=param[1];
                            return e.selected | 0
                                    ?[0,[0,name$0,[0,-976970511,e.value]]]
                                    :0},
                          _ff_);
                case 53:
                 var v$1=match$3[1];
                 if(! have_content(v$1))return 0;
                 var name=caml_string_of_jsstring(v$1.name);
                 return [0,[0,name,[0,-976970511,v$1.value]],0];
                default:return 0}},
           _fd_=caml_call2(Stdlib_List[19],_fc_,acc);
          return caml_call1(Stdlib_List[14],_fd_)}
        var t32=form.elements,_fb_=t32.item(i),match=caml_call1(Opt[10],_fb_);
        if(match)
         {var x=match[1],i$0=i - 1 | 0,acc$0=[0,x,acc],acc=acc$0,i=i$0;
          continue}
        var i$1=i - i | 0,i=i$1}}
    function append(form_contents,form_elt)
     {if(891486873 <= form_contents[1])
       {var list=form_contents[2];list[1] = [0,form_elt,list[1]];return 0}
      var f=form_contents[2],_e$_=form_elt[2],_fa_=form_elt[1];
      if(781515420 <= _e$_[1])
       {var file=_e$_[2],t38=caml_jsstring_of_string(_fa_);
        return f.append(t38,file)}
      var s=_e$_[2],t35=caml_jsstring_of_string(_fa_);
      return f.append(t35,s)}
    function empty_form_contents(param)
     {var match=caml_call1(Optdef[10],formData);
      if(! match)return [0,891486873,[0,0]];
      var constr=match[1];
      return [0,808620462,new constr()]}
    function post_form_contents(form)
     {var contents=empty_form_contents(0),_e8_=form_elements(0,form);
      function _e9_(_e__){return append(contents,_e__)}
      caml_call2(Stdlib_List[17],_e9_,_e8_);
      return contents}
    function get_form_contents(form)
     {var _e5_=form_elements(_o_,form);
      function _e6_(param)
       {var _e7_=param[2];
        if(typeof _e7_ !== "number" && -976970511 === _e7_[1])
         {var s=_e7_[2],name=param[1];
          return [0,name,caml_string_of_jsstring(s)]}
        throw [0,Assert_failure,_p_]}
      return caml_call2(Stdlib_List[19],_e6_,_e5_)}
    var
     Js_of_ocaml_Form=
      [0,
       formData,
       formData_form,
       append,
       post_form_contents,
       get_form_contents,
       empty_form_contents,
       form_elements];
    caml_register_global(1670,Js_of_ocaml_Form,"Js_of_ocaml__Form");
    var
     readystatechange=caml_call1(Event[1],cst_readystatechange),
     loadstart$1=caml_call1(Event[1],cst_loadstart$1),
     progress$1=caml_call1(Event[1],cst_progress$1),
     abort$1=caml_call1(Event[1],cst_abort$1),
     error$1=caml_call1(Event[1],cst_error$1),
     load$1=caml_call1(Event[1],cst_load$1),
     timeout=caml_call1(Event[1],cst_timeout),
     loadend$0=caml_call1(Event[1],cst_loadend$0),
     Event$0=
      [0,
       readystatechange,
       loadstart$1,
       progress$1,
       abort$1,
       error$1,
       load$1,
       timeout,
       loadend$0],
     Js_of_ocaml_XmlHttpRequest=[0,runtime.caml_xmlhttprequest_create,Event$0];
    caml_register_global
     (1671,Js_of_ocaml_XmlHttpRequest,"Js_of_ocaml__XmlHttpRequest");
    var t2=Unsafe[1].Worker;
    function create(script)
     {var t1=caml_jsstring_of_string(script);return new t2(t1)}
    function import_scripts(scripts)
     {if(Unsafe[1].importScripts === t39)
       caml_call1(Stdlib[1],cst_Worker_import_scripts_is_u);
      var _e2_=caml_call1(Stdlib_Array[10],scripts);
      function _e3_(s){return caml_jsstring_of_string(s)}
      var _e4_=caml_call2(Stdlib_Array[13],_e3_,_e2_);
      return runtime.caml_js_fun_call(Unsafe[1].importScripts,_e4_)}
    function set_onmessage(handler)
     {if(Unsafe[1].onmessage === t39)
       caml_call1(Stdlib[1],cst_Worker_onmessage_is_undefi);
      function js_handler(ev){return caml_call1(handler,ev.data)}
      var t7=caml_js_wrap_callback(js_handler);
      return Unsafe[1].onmessage = t7}
    function post_message(t10)
     {if(Unsafe[1].postMessage === t39)
       caml_call1(Stdlib[1],cst_Worker_onmessage_is_undefi$0);
      return Unsafe[1].postMessage(t10)}
    var
     Js_of_ocaml_Worker=
      [0,create,import_scripts,set_onmessage,post_message];
    caml_register_global(1672,Js_of_ocaml_Worker,"Js_of_ocaml__Worker");
    var webSocket=Unsafe[1].WebSocket;
    function is_supported(param){return caml_call1(Optdef[5],webSocket)}
    var Js_of_ocaml_WebSockets=[0,webSocket,webSocket,webSocket,is_supported];
    caml_register_global
     (1673,Js_of_ocaml_WebSockets,"Js_of_ocaml__WebSockets");
    var
     defaultContextAttributes=
      {"alpha":t38,
       "depth":t38,
       "stencil":t4,
       "antialias":t38,
       "premultipliedAlpha":t4,
       "preserveDrawingBuffer":t4,
       "preferLowPowerToHighPerformance":t4,
       "failIfMajorPerformanceCaveat":t4},
     webglcontextlost=caml_call1(_n_[92],cst_webglcontextlost),
     webglcontextrestored=caml_call1(_n_[92],cst_webglcontextrestored),
     webglcontextcreationerror=
      caml_call1(_n_[92],cst_webglcontextcreationerror),
     Event$1=
      [0,webglcontextlost,webglcontextrestored,webglcontextcreationerror];
    function getContext(t3)
     {var ctx=t3.getContext("webgl");
      return caml_call1(Opt[5],ctx)?ctx:t3.getContext("experimental-webgl")}
    function getContextWithAttributes(t9,t8)
     {var ctx=t9.getContext("webgl",t8);
      return caml_call1(Opt[5],ctx)?ctx:t9.getContext("experimental-webgl",t8)}
    var
     Js_of_ocaml_WebGL=
      [0,defaultContextAttributes,Event$1,getContext,getContextWithAttributes];
    caml_register_global(1674,Js_of_ocaml_WebGL,"Js_of_ocaml__WebGL");
    function regexp(s)
     {var t0=caml_jsbytes_of_string(s);return new t11(t0,"g")}
    function regexp_case_fold(s)
     {var t3=caml_jsbytes_of_string(s);return new t11(t3,"gi")}
    function regexp_with_flag(s,f)
     {var
       t7=caml_jsstring_of_string(caml_call2(Stdlib[28],cst_g,f)),
       t6=caml_jsbytes_of_string(s);
      return new t11(t6,t7)}
    function blunt_str_array_get(a,i)
     {function _e0_(param){throw [0,Assert_failure,_q_]}
      var _e1_=a[i];
      return caml_string_of_jsbytes(caml_call2(Optdef[8],_e1_,_e0_))}
    function string_match(r,s,i)
     {r.lastIndex = i;
      var
       t11=caml_jsbytes_of_string(s),
       _eY_=r.exec(t11),
       _eZ_=caml_call2(Opt[3],_eY_,match_result);
      return caml_call1(Opt[10],_eZ_)}
    function search_forward(r,s,i)
     {r.lastIndex = i;
      var t15=caml_jsbytes_of_string(s);
      function _eV_(t17){return [0,t17.index,t17]}
      var _eW_=r.exec(t15),_eX_=caml_call2(Opt[3],_eW_,_eV_);
      return caml_call1(Opt[10],_eX_)}
    function matched_string(r){return blunt_str_array_get(r,0)}
    function matched_group(r,i)
     {var _eT_=r[i],_eU_=caml_call2(Optdef[3],_eT_,caml_string_of_jsbytes);
      return caml_call1(Optdef[10],_eU_)}
    var t21=new t11("[$]","g");
    function quote_repl(s)
     {var t23=caml_jsbytes_of_string(s);return t23.replace(t21,"$$$$")}
    function global_replace(r,s,s_by)
     {r.lastIndex = 0;
      var t27=quote_repl(s_by),t28=caml_jsbytes_of_string(s);
      return caml_string_of_jsbytes(t28.replace(r,t27))}
    function replace_first(r,s,s_by)
     {var
       match=r.ignoreCase | 0,
       match$0=r.multiline | 0,
       flags=match?match$0?"mi":"i":match$0?"m":"",
       t32=r.source,
       t35=new t11(t32,flags),
       t36=quote_repl(s_by),
       t37=caml_jsbytes_of_string(s);
      return caml_string_of_jsbytes(t37.replace(t35,t36))}
    function list_of_js_array(a)
     {var idx$1=a.length - 1 | 0,accu=0,idx=idx$1;
      for(;;)
       {if(caml_call2(symbol$5,idx,0))return accu;
        var
         idx$0=idx - 1 | 0,
         accu$0=[0,blunt_str_array_get(a,idx),accu],
         accu=accu$0,
         idx=idx$0}}
    function split(r,s)
     {r.lastIndex = 0;
      var t42=caml_jsbytes_of_string(s);
      return list_of_js_array(t42.split(r))}
    function bounded_split(r,s,i)
     {r.lastIndex = 0;
      var t47=caml_jsbytes_of_string(s);
      return list_of_js_array(t47.split(r,i))}
    var t48=regexp(cst);
    function quote(s)
     {var t50=caml_jsbytes_of_string(s);
      return caml_string_of_jsbytes(t50.replace(t48,"\\$&"))}
    function regexp_string(s){return regexp(quote(s))}
    function regexp_string_case_fold(s){return regexp_case_fold(quote(s))}
    var
     Js_of_ocaml_Regexp=
      [0,
       regexp,
       regexp_case_fold,
       regexp_with_flag,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_forward,
       matched_string,
       matched_group,
       global_replace,
       replace_first,
       split,
       bounded_split];
    caml_register_global(1675,Js_of_ocaml_Regexp,"Js_of_ocaml__Regexp");
    var Local_exn=[248,cst_Js_of_ocaml_Url_Local_exn,caml_fresh_oo_id(0)];
    function interrupt(param){throw Local_exn}
    var plus_re=regexp_string(cst$0),t14=new t11("\\+","g");
    function urldecode_js_string_string(s)
     {t14.lastIndex = 0;
      return caml_string_of_jsbytes(unescape(s.replace(t14," ")))}
    function urldecode(s)
     {return caml_string_of_jsbytes
              (unescape
                (caml_jsbytes_of_string(global_replace(plus_re,s,cst$1))))}
    function urlencode(opt,s)
     {if(opt)var sth=opt[1],with_plus=sth;else var with_plus=1;
      if(! with_plus)
       return caml_string_of_jsbytes(escape(caml_jsbytes_of_string(s)));
      var s$0=caml_string_of_jsbytes(escape(caml_jsbytes_of_string(s)));
      return global_replace(plus_re,s$0,cst_2B)}
    var
     Not_an_http_protocol=
      [248,cst_Js_of_ocaml_Url_Not_an_htt,caml_fresh_oo_id(0)],
     default_http_port=80,
     default_https_port=443;
    function path_of_path_string(s)
     {var l=caml_ml_string_length(s);
      function aux(i)
       {try
         {var _eR_=caml_call3(String[30],s,i,47),j=_eR_}
        catch(_eS_)
         {_eS_ = caml_wrap_exception(_eS_);
          if(_eS_ !== Stdlib[8])throw _eS_;
          var j=l}
        var word=caml_call3(String[14],s,i,j - i | 0);
        return caml_call2(symbol$10,j,l)?[0,word,0]:[0,word,aux(j + 1 | 0)]}
      var a=aux(0);
      if(a && ! caml_string_notequal(a[1],cst$2))
       {var _eQ_=a[2];
        if(! _eQ_)return 0;
        if(! caml_string_notequal(_eQ_[1],cst$3) && ! _eQ_[2])return _r_}
      return a}
    function encode_arguments(l)
     {function _eL_(param)
       {var
         v=param[2],
         n=param[1],
         _eN_=urlencode(0,v),
         _eO_=caml_call2(Stdlib[28],cst$4,_eN_),
         _eP_=urlencode(0,n);
        return caml_call2(Stdlib[28],_eP_,_eO_)}
      var _eM_=caml_call2(Stdlib_List[19],_eL_,l);
      return caml_call2(String[6],cst$5,_eM_)}
    function decode_arguments_js_string(s)
     {var
       t0=caml_jsstring_of_string(caml_call2(String[1],1,38)),
       t18=s.split(t0),
       len=t18.length;
      function aux(acc,idx)
       {var idx$0=idx;
        for(;;)
         {if(caml_call2(symbol$5,idx$0,0))return acc;
          try
           {var
             _eC_=idx$0 - 1 | 0,
             _eD_=
              function(s)
               {function _eJ_(param)
                 {var
                   y=param[2],
                   x=param[1],
                   _eK_=urldecode_js_string_string(y);
                  return [0,urldecode_js_string_string(x),_eK_]}
                var
                 t2=caml_jsstring_of_string(caml_call2(String[1],1,61)),
                 t5=s.indexOf(t2);
                if(caml_call2(symbol$5,t5,0))
                 var _eI_=t39;
                else
                 var
                  t7=t5 + 1 | 0,
                  _eH_=s.slice(t7),
                  _eI_=[0,s.slice(0,t5),_eH_];
                return caml_call3(Optdef[7],_eI_,interrupt,_eJ_)},
             _eE_=t18[idx$0],
             _eF_=aux([0,caml_call3(Optdef[7],_eE_,interrupt,_eD_),acc],_eC_);
            return _eF_}
          catch(_eG_)
           {_eG_ = caml_wrap_exception(_eG_);
            if(_eG_ !== Local_exn)throw _eG_;
            var idx$1=idx$0 - 1 | 0,idx$0=idx$1;
            continue}}}
      return aux(0,len - 1 | 0)}
    function decode_arguments(s)
     {return decode_arguments_js_string(caml_jsbytes_of_string(s))}
    var
     t19=caml_jsbytes_of_string(cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0),
     t24=new t11(t19),
     t21$0=caml_jsbytes_of_string(cst_Ff_Ii_Ll_Ee),
     t26=new t11(t21$0);
    function url_of_js_string(s)
     {function _ea_(res)
       {var
         _en_=res[1],
         prot_string=caml_call2(Optdef[8],_en_,interrupt),
         match=caml_string_of_jsbytes(prot_string.toLowerCase());
        if
         (caml_string_notequal(match,cst_file$0)
          &&
          caml_string_notequal(match,cst_file$1))
         {var switch$0=0;
          if
           (caml_string_notequal(match,cst_http)
            &&
            caml_string_notequal(match,cst_http$0))
           {var switch$1=0;
            if
             (caml_string_notequal(match,cst_https)
              &&
              caml_string_notequal(match,cst_https$0))
             switch$1 = 1;
            if(! switch$1){var ssl=1;switch$0 = 2}}
          else
           switch$0 = 1;
          var switch$2=0;
          switch(switch$0)
           {case 1:var ssl=0;switch$2 = 1;break;
            case 0:break;
            default:switch$2 = 1}
          if(switch$2)
           {var
             _eo_=function(param){return caml_jsbytes_of_string(cst$7)},
             _ep_=res[6],
             path_str=
              urldecode_js_string_string(caml_call2(Optdef[8],_ep_,_eo_)),
             _eq_=function(param){return caml_jsbytes_of_string(cst$8)},
             _er_=res[10],
             _es_=urldecode_js_string_string(caml_call2(Optdef[8],_er_,_eq_)),
             _et_=function(param){return caml_jsbytes_of_string(cst$9)},
             _eu_=res[8],
             _ev_=decode_arguments_js_string(caml_call2(Optdef[8],_eu_,_et_)),
             _ew_=path_of_path_string(path_str),
             _ex_=function(param){return caml_jsbytes_of_string(cst$10)},
             _ey_=res[4],
             s=caml_string_of_jsbytes(caml_call2(Optdef[8],_ey_,_ex_)),
             _ez_=
              caml_string_notequal(s,cst$6)?caml_int_of_string(s):ssl?443:80,
             _eA_=res[2],
             url=
              [0,
               urldecode_js_string_string
                (caml_call2(Optdef[8],_eA_,interrupt)),
               _ez_,
               _ew_,
               path_str,
               _ev_,
               _es_],
             _eB_=ssl?[1,url]:[0,url];
            return [0,_eB_]}}
        throw Not_an_http_protocol}
      function _eb_(param)
       {function _ed_(res)
         {var
           _eg_=res[2],
           path_str=
            urldecode_js_string_string(caml_call2(Optdef[8],_eg_,interrupt));
          function _eh_(param){return caml_jsbytes_of_string(cst$11)}
          var
           _ei_=res[6],
           _ej_=caml_string_of_jsbytes(caml_call2(Optdef[8],_ei_,_eh_));
          function _ek_(param){return caml_jsbytes_of_string(cst$12)}
          var
           _el_=res[4],
           _em_=decode_arguments_js_string(caml_call2(Optdef[8],_el_,_ek_));
          return [0,[2,[0,path_of_path_string(path_str),path_str,_em_,_ej_]]]}
        function _ee_(param){return 0}
        var _ef_=t26.exec(s);
        return caml_call3(Opt[7],_ef_,_ee_,_ed_)}
      var _ec_=t24.exec(s);
      return caml_call3(Opt[7],_ec_,_eb_,_ea_)}
    function url_of_string(s)
     {return url_of_js_string(caml_jsbytes_of_string(s))}
    function string_of_url(param)
     {switch(param[0])
       {case 0:
         var
          match=param[1],
          frag=match[6],
          args=match[5],
          path=match[3],
          port=match[2],
          host=match[1];
         if(caml_string_notequal(frag,cst$13))
          var _dz_=urlencode(0,frag),_dA_=caml_call2(Stdlib[28],cst$14,_dz_);
         else
          var _dA_=cst$21;
         if(args)
          var
           _dB_=encode_arguments(args),
           _dC_=caml_call2(Stdlib[28],cst$15,_dB_);
         else
          var _dC_=cst$20;
         var
          _dD_=caml_call2(Stdlib[28],_dC_,_dA_),
          _dE_=function(x){return urlencode(0,x)},
          _dF_=caml_call2(Stdlib_List[19],_dE_,path),
          _dG_=caml_call2(String[6],cst$16,_dF_),
          _dH_=caml_call2(Stdlib[28],_dG_,_dD_),
          _dI_=caml_call2(Stdlib[28],cst$17,_dH_);
         if(80 === port)
          var _dJ_=cst$18;
         else
          var
           _dN_=caml_call1(Stdlib[33],port),
           _dJ_=caml_call2(Stdlib[28],cst$19,_dN_);
         var
          _dK_=caml_call2(Stdlib[28],_dJ_,_dI_),
          _dL_=urlencode(0,host),
          _dM_=caml_call2(Stdlib[28],_dL_,_dK_);
         return caml_call2(Stdlib[28],cst_http$1,_dM_);
        case 1:
         var
          match$0=param[1],
          frag$0=match$0[6],
          args$0=match$0[5],
          path$0=match$0[3],
          port$0=match$0[2],
          host$0=match$0[1];
         if(caml_string_notequal(frag$0,cst$22))
          var
           _dO_=urlencode(0,frag$0),
           _dP_=caml_call2(Stdlib[28],cst$23,_dO_);
         else
          var _dP_=cst$30;
         if(args$0)
          var
           _dQ_=encode_arguments(args$0),
           _dR_=caml_call2(Stdlib[28],cst$24,_dQ_);
         else
          var _dR_=cst$29;
         var
          _dS_=caml_call2(Stdlib[28],_dR_,_dP_),
          _dT_=function(x){return urlencode(0,x)},
          _dU_=caml_call2(Stdlib_List[19],_dT_,path$0),
          _dV_=caml_call2(String[6],cst$25,_dU_),
          _dW_=caml_call2(Stdlib[28],_dV_,_dS_),
          _dX_=caml_call2(Stdlib[28],cst$26,_dW_);
         if(443 === port$0)
          var _dY_=cst$27;
         else
          var
           _d2_=caml_call1(Stdlib[33],port$0),
           _dY_=caml_call2(Stdlib[28],cst$28,_d2_);
         var
          _dZ_=caml_call2(Stdlib[28],_dY_,_dX_),
          _d0_=urlencode(0,host$0),
          _d1_=caml_call2(Stdlib[28],_d0_,_dZ_);
         return caml_call2(Stdlib[28],cst_https$1,_d1_);
        default:
         var
          match$1=param[1],
          frag$1=match$1[4],
          args$1=match$1[3],
          path$1=match$1[1];
         if(caml_string_notequal(frag$1,cst$31))
          var
           _d3_=urlencode(0,frag$1),
           _d4_=caml_call2(Stdlib[28],cst$32,_d3_);
         else
          var _d4_=cst$36;
         if(args$1)
          var
           _d5_=encode_arguments(args$1),
           _d6_=caml_call2(Stdlib[28],cst$33,_d5_);
         else
          var _d6_=cst$35;
         var
          _d7_=caml_call2(Stdlib[28],_d6_,_d4_),
          _d8_=function(x){return urlencode(0,x)},
          _d9_=caml_call2(Stdlib_List[19],_d8_,path$1),
          _d__=caml_call2(String[6],cst$34,_d9_),
          _d$_=caml_call2(Stdlib[28],_d__,_d7_);
         return caml_call2(Stdlib[28],cst_file$2,_d$_)}}
    var _s_=caml_call1(Optdef[2],_j_.location);
    if(caml_call1(Optdef[5],_s_))
     var _t_=_j_.location;
    else
     var
      t42=function(param,_dy_){return 0},
      t41=function(param,_dx_){return 0},
      t40=function(param){return 0},
      _t_=
       {"href":"",
        "protocol":"",
        "host":"",
        "hostname":"",
        "port":"",
        "pathname":"",
        "search":"",
        "hash":"",
        "origin":t39,
        "reload":caml_js_wrap_meth_callback(t40),
        "replace":caml_js_wrap_meth_callback(t41),
        "assign":caml_js_wrap_meth_callback(t42)};
    var
     host=urldecode_js_string_string(_t_.hostname),
     protocol=urldecode_js_string_string(_t_.protocol),
     _u_=0,
     port=
      function(param)
        {try
          {var _dv_=[0,caml_int_of_string(caml_string_of_jsbytes(_t_.port))];
           return _dv_}
         catch(_dw_)
          {_dw_ = caml_wrap_exception(_dw_);
           if(_dw_[1] === Stdlib[7])return 0;
           throw _dw_}}
       (_u_),
     path_string=urldecode_js_string_string(_t_.pathname),
     path=path_of_path_string(path_string),
     t49=_t_.search;
    if(t49.charAt(0) === "?")
     var t52=_t_.search,_v_=t52.slice(1);
    else
     var _v_=_t_.search;
    var arguments$0=decode_arguments_js_string(_v_);
    function get_fragment(param)
     {function _ds_(res){return caml_string_of_jsstring(res[1])}
      function _dt_(param){return cst$37}
      var t57=new t11("#(.*)"),t58=_t_.href,_du_=t58.match(t57);
      return caml_call3(Opt[7],_du_,_dt_,_ds_)}
    function set_fragment(s)
     {var t59=caml_jsbytes_of_string(urlencode(0,s));return _t_.hash = t59}
    function get$2(param){return url_of_js_string(_t_.href)}
    function set$0(u)
     {var t62=caml_jsbytes_of_string(string_of_url(u));return _t_.href = t62}
    var
     as_string=urldecode_js_string_string(_t_.href),
     Js_of_ocaml_Url=
      [0,
       urldecode,
       urlencode,
       default_http_port,
       default_https_port,
       path_of_path_string,
       encode_arguments,
       decode_arguments,
       url_of_string,
       string_of_url,
       [0,
        host,
        port,
        protocol,
        path_string,
        path,
        arguments$0,
        get_fragment,
        set_fragment,
        get$2,
        set$0,
        as_string]];
    caml_register_global(1677,Js_of_ocaml_Url,"Js_of_ocaml__Url");
    var Js_of_ocaml_Lib_version=[0,s,git_version];
    caml_register_global
     (1678,Js_of_ocaml_Lib_version,"Js_of_ocaml__Lib_version");
    function update_file(name,content)
     {var oc=caml_call1(Stdlib[60],name);
      caml_call2(Stdlib[66],oc,content);
      return caml_call1(Stdlib[76],oc)}
    function set_channel_flusher(out_channel,f)
     {var
       f$0=
        caml_js_wrap_callback
         (function(s){return caml_call1(f,caml_string_of_jsbytes(s))});
      return runtime.caml_ml_set_channel_output(out_channel,f$0)}
    function set_channel_filler(in_channel,f)
     {var f$0=caml_js_wrap_callback(f);
      return runtime.caml_ml_set_channel_refill(in_channel,f$0)}
    function mount(path,f)
     {return runtime.caml_mount_autoload
              (path,
               caml_js_wrap_callback
                (function(prefix,path){return caml_call2(f,prefix,path)}))}
    function unmount(path){return runtime.caml_unmount(path)}
    if(caml_call2(String[64],git_version,cst$38))
     var js_of_ocaml_version=s;
    else
     var
      _cp_=caml_call2(Stdlib[28],cst$41,git_version),
      js_of_ocaml_version=caml_call2(Stdlib[28],s,_cp_);
    var
     _w_=runtime.caml_create_file,
     _x_=runtime.caml_read_file_content,
     Js_of_ocaml_Sys_js=
      [0,
       set_channel_flusher,
       set_channel_filler,
       function(_dr_){return runtime.caml_list_mount_point(_dr_)},
       unmount,
       mount,
       _x_,
       _w_,
       update_file,
       js_of_ocaml_version];
    caml_register_global(1679,Js_of_ocaml_Sys_js,"Js_of_ocaml__Sys_js");
    function empty_resize_observer_options(param){return {}}
    var t2$0=Unsafe[1].ResizeObserver;
    function is_supported$0(param){return caml_call1(Optdef[5],t2$0)}
    function observe(node,f,box,param)
     {var t1=caml_js_wrap_callback(f),t4=new t2$0(t1);
      if(box)
       {var box$0=box[1],t8={};t8.box = box$0;t4.observe(node,t8)}
      else
       t4.observe(node);
      return t4}
    var
     Js_of_ocaml_ResizeObserver=
      [0,empty_resize_observer_options,t2$0,is_supported$0,observe];
    caml_register_global
     (1680,Js_of_ocaml_ResizeObserver,"Js_of_ocaml__ResizeObserver");
    var t4$1=Unsafe[1].PerformanceObserver;
    function is_supported$1(param){return caml_call1(Optdef[5],t4$1)}
    function observe$0(entry_types,f)
     {var
       _dq_=
        caml_call1
         (caml_call1(Stdlib_List[19],caml_jsstring_of_string),entry_types),
       t1=caml_js_from_array(caml_call1(Stdlib_Array[10],_dq_)),
       t5={};
      t5.entryTypes = t1;
      var t3=caml_js_wrap_callback(f),t6=new t4$1(t3);
      t6.observe(t5);
      return t6}
    var Js_of_ocaml_PerformanceObserve=[0,t4$1,is_supported$1,observe$0];
    caml_register_global
     (1681,Js_of_ocaml_PerformanceObserve,"Js_of_ocaml__PerformanceObserver");
    function empty_mutation_observer_init(param){return {}}
    var t2$1=Unsafe[1].MutationObserver;
    function is_supported$2(param){return caml_call1(Optdef[5],t2$1)}
    function observe$1
     (node,
      f,
      child_list,
      attributes,
      character_data,
      subtree,
      attribute_old_value,
      character_data_old_value,
      attribute_filter,
      _dp_)
     {function opt_iter(x,f)
       {if(! x)return 0;var x$0=x[1];return caml_call1(f,x$0)}
      var t1=caml_js_wrap_callback(f),t19=new t2$1(t1),t18={};
      opt_iter(child_list,function(t3){return t18.childList = t3});
      opt_iter(attributes,function(t5){return t18.attributes = t5});
      opt_iter(character_data,function(t7){return t18.characterData = t7});
      opt_iter(subtree,function(t9){return t18.subtree = t9});
      opt_iter
       (attribute_old_value,function(t11){return t18.attributeOldValue = t11});
      opt_iter
       (character_data_old_value,
        function(t13){return t18.characterDataOldValue = t13});
      opt_iter
       (attribute_filter,
        function(l)
         {var t15=caml_js_from_array(caml_call1(Stdlib_Array[10],l));
          return t18.attributeFilter = t15});
      t19.observe(node,t18);
      return t19}
    var
     Js_of_ocaml_MutationObserver=
      [0,empty_mutation_observer_init,t2$1,is_supported$2,observe$1];
    caml_register_global
     (1682,Js_of_ocaml_MutationObserver,"Js_of_ocaml__MutationObserver");
    var t1=Unsafe[1].Object;
    function create$0(param){return new t1()}
    function add$0(t,k,v){return t[k.concat("_")] = v}
    function remove(t,k){return delete t[k.concat("_")]}
    function find(t,k){return t[k.concat("_")]}
    function keys(t)
     {var
       t10=Unsafe[1].Object,
       t11=t10.keys(t),
       res=[0,0],
       _dk_=t11.length - 1 | 0,
       _dj_=0;
      if(_dk_ >= 0)
       {var i=_dj_;
        for(;;)
         {var
           _dl_=function(param){return caml_call1(Stdlib[2],cst_Jstable_keys)},
           _dm_=t11[i],
           t15=caml_call2(Optdef[8],_dm_,_dl_),
           t14=t15.length - 1 | 0,
           _dn_=res[1];
          res[1] = [0,t15.substring(0,t14),_dn_];
          var _do_=i + 1 | 0;
          if(_dk_ !== i){var i=_do_;continue}
          break}}
      return caml_call1(Stdlib_List[9],res[1])}
    var Js_of_ocaml_Jstable=[0,create$0,add$0,remove,find,keys];
    caml_register_global(1683,Js_of_ocaml_Jstable,"Js_of_ocaml__Jstable");
    var t11$1=Unsafe[1].JSON;
    function reviver(this$0,key,value)
     {if(typeof value === "string")return caml_string_of_jsbytes(value);
      if
       (value instanceof array_length
        &&
        4
        ===
        value.length
        &&
        255
        ===
        value[0])
       {var _dh_=value[3],_di_=value[2];
        return runtime.caml_int64_create_lo_mi_hi(value[1],_di_,_dh_)}
      return value}
    var t3$0=caml_js_wrap_meth_callback(reviver);
    function unsafe_input(t2){return t11$1.parse(t2,t3$0)}
    var mlInt64_constr=t5.constructor;
    function output_reviver(key,value)
     {var _dg_=Stdlib_Obj[15];
      return caml_call2(symbol$8,runtime.caml_obj_tag(value),_dg_)
              ?caml_jsbytes_of_string(value)
              :value instanceof mlInt64_constr
                ?caml_js_from_array([0,255,value.lo,value.mi,value.hi])
                :value}
    function output(t9)
     {var t10=caml_js_wrap_callback(output_reviver);
      return t11$1.stringify(t9,t10)}
    var Js_of_ocaml_Json=[0,output,unsafe_input];
    caml_register_global(1685,Js_of_ocaml_Json,"Js_of_ocaml__Json");
    function string_of_name(param)
     {var _df_=param;
      if(74 <= _df_)
       {if(111 <= _df_)
         switch(_df_)
          {case 111:return cst_palevioletred;
           case 112:return cst_papayawhip;
           case 113:return cst_peachpuff;
           case 114:return cst_peru;
           case 115:return cst_pink;
           case 116:return cst_plum;
           case 117:return cst_powderblue;
           case 118:return cst_purple;
           case 119:return cst_red;
           case 120:return cst_rosybrown;
           case 121:return cst_royalblue;
           case 122:return cst_saddlebrown;
           case 123:return cst_salmon;
           case 124:return cst_sandybrown;
           case 125:return cst_seagreen;
           case 126:return cst_seashell;
           case 127:return cst_sienna;
           case 128:return cst_silver;
           case 129:return cst_skyblue;
           case 130:return cst_slateblue;
           case 131:return cst_slategray;
           case 132:return cst_slategrey;
           case 133:return cst_snow;
           case 134:return cst_springgreen;
           case 135:return cst_steelblue;
           case 136:return cst_tan;
           case 137:return cst_teal;
           case 138:return cst_thistle;
           case 139:return cst_tomato;
           case 140:return cst_turquoise;
           case 141:return cst_violet;
           case 142:return cst_wheat;
           case 143:return cst_white;
           case 144:return cst_whitesmoke;
           case 145:return cst_yellow;
           default:return cst_yellowgreen}
        switch(_df_)
         {case 74:return cst_lightpink;
          case 75:return cst_lightsalmon;
          case 76:return cst_lightseagreen;
          case 77:return cst_lightskyblue;
          case 78:return cst_lightslategray;
          case 79:return cst_lightslategrey;
          case 80:return cst_lightsteelblue;
          case 81:return cst_lightyellow;
          case 82:return cst_lime;
          case 83:return cst_limegreen;
          case 84:return cst_linen;
          case 85:return cst_magenta;
          case 86:return cst_maroon;
          case 87:return cst_mediumaquamarine;
          case 88:return cst_mediumblue;
          case 89:return cst_mediumorchid;
          case 90:return cst_mediumpurple;
          case 91:return cst_mediumseagreen;
          case 92:return cst_mediumslateblue;
          case 93:return cst_mediumspringgreen;
          case 94:return cst_mediumturquoise;
          case 95:return cst_mediumvioletred;
          case 96:return cst_midnightblue;
          case 97:return cst_mintcream;
          case 98:return cst_mistyrose;
          case 99:return cst_moccasin;
          case 100:return cst_navajowhite;
          case 101:return cst_navy;
          case 102:return cst_oldlace;
          case 103:return cst_olive;
          case 104:return cst_olivedrab;
          case 105:return cst_orange;
          case 106:return cst_orangered;
          case 107:return cst_orchid;
          case 108:return cst_palegoldenrod;
          case 109:return cst_palegreen;
          default:return cst_paleturquoise}}
      if(37 <= _df_)
       switch(_df_)
        {case 37:return cst_darkslategrey;
         case 38:return cst_darkturquoise;
         case 39:return cst_darkviolet;
         case 40:return cst_deeppink;
         case 41:return cst_deepskyblue;
         case 42:return cst_dimgray;
         case 43:return cst_dimgrey;
         case 44:return cst_dodgerblue;
         case 45:return cst_firebrick;
         case 46:return cst_floralwhite;
         case 47:return cst_forestgreen;
         case 48:return cst_fuchsia;
         case 49:return cst_gainsboro;
         case 50:return cst_ghostwhite;
         case 51:return cst_gold;
         case 52:return cst_goldenrod;
         case 53:return cst_gray;
         case 54:return cst_grey;
         case 55:return cst_green;
         case 56:return cst_greenyellow;
         case 57:return cst_honeydew;
         case 58:return cst_hotpink;
         case 59:return cst_indianred;
         case 60:return cst_indigo;
         case 61:return cst_ivory;
         case 62:return cst_khaki;
         case 63:return cst_lavender;
         case 64:return cst_lavenderblush;
         case 65:return cst_lawngreen;
         case 66:return cst_lemonchiffon;
         case 67:return cst_lightblue;
         case 68:return cst_lightcoral;
         case 69:return cst_lightcyan;
         case 70:return cst_lightgoldenrodyellow;
         case 71:return cst_lightgray;
         case 72:return cst_lightgreen;
         default:return cst_lightgrey}
      switch(_df_)
       {case 0:return cst_aliceblue;
        case 1:return cst_antiquewhite;
        case 2:return cst_aqua;
        case 3:return cst_aquamarine;
        case 4:return cst_azure;
        case 5:return cst_beige;
        case 6:return cst_bisque;
        case 7:return cst_black;
        case 8:return cst_blanchedalmond;
        case 9:return cst_blue;
        case 10:return cst_blueviolet;
        case 11:return cst_brown;
        case 12:return cst_burlywood;
        case 13:return cst_cadetblue;
        case 14:return cst_chartreuse;
        case 15:return cst_chocolate;
        case 16:return cst_coral;
        case 17:return cst_cornflowerblue;
        case 18:return cst_cornsilk;
        case 19:return cst_crimson;
        case 20:return cst_cyan;
        case 21:return cst_darkblue;
        case 22:return cst_darkcyan;
        case 23:return cst_darkgoldenrod;
        case 24:return cst_darkgray;
        case 25:return cst_darkgreen;
        case 26:return cst_darkgrey;
        case 27:return cst_darkkhaki;
        case 28:return cst_darkmagenta;
        case 29:return cst_darkolivegreen;
        case 30:return cst_darkorange;
        case 31:return cst_darkorchid;
        case 32:return cst_darkred;
        case 33:return cst_darksalmon;
        case 34:return cst_darkseagreen;
        case 35:return cst_darkslateblue;
        default:return cst_darkslategray}}
    function name_of_string(s)
     {var switch$0=caml_string_compare(s,cst_lightgrey$0);
      if(0 <= switch$0)
       {if(0 >= switch$0)return 73;
        var switch$1=caml_string_compare(s,cst_paleturquoise$0);
        if(0 <= switch$1)
         {if(0 >= switch$1)return 110;
          var switch$2=caml_string_compare(s,cst_skyblue$0);
          if(0 <= switch$2)
           {if(0 >= switch$2)return 129;
            var switch$3=caml_string_compare(s,cst_thistle$0);
            if(0 <= switch$3)
             {if(0 >= switch$3)return 138;
              if(! caml_string_notequal(s,cst_tomato$0))return 139;
              if(! caml_string_notequal(s,cst_turquoise$0))return 140;
              if(! caml_string_notequal(s,cst_violet$0))return 141;
              if(! caml_string_notequal(s,cst_wheat$0))return 142;
              if(! caml_string_notequal(s,cst_white$0))return 143;
              if(! caml_string_notequal(s,cst_whitesmoke$0))return 144;
              if(! caml_string_notequal(s,cst_yellow$0))return 145;
              if(! caml_string_notequal(s,cst_yellowgreen$0))return 146}
            else
             {if(! caml_string_notequal(s,cst_slateblue$0))return 130;
              if(! caml_string_notequal(s,cst_slategray$0))return 131;
              if(! caml_string_notequal(s,cst_slategrey$0))return 132;
              if(! caml_string_notequal(s,cst_snow$0))return 133;
              if(! caml_string_notequal(s,cst_springgreen$0))return 134;
              if(! caml_string_notequal(s,cst_steelblue$0))return 135;
              if(! caml_string_notequal(s,cst_tan$0))return 136;
              if(! caml_string_notequal(s,cst_teal$0))return 137}}
          else
           {var switch$4=caml_string_compare(s,cst_rosybrown$0);
            if(0 <= switch$4)
             {if(0 >= switch$4)return 120;
              if(! caml_string_notequal(s,cst_royalblue$0))return 121;
              if(! caml_string_notequal(s,cst_saddlebrown$0))return 122;
              if(! caml_string_notequal(s,cst_salmon$0))return 123;
              if(! caml_string_notequal(s,cst_sandybrown$0))return 124;
              if(! caml_string_notequal(s,cst_seagreen$0))return 125;
              if(! caml_string_notequal(s,cst_seashell$0))return 126;
              if(! caml_string_notequal(s,cst_sienna$0))return 127;
              if(! caml_string_notequal(s,cst_silver$0))return 128}
            else
             {if(! caml_string_notequal(s,cst_palevioletred$0))return 111;
              if(! caml_string_notequal(s,cst_papayawhip$0))return 112;
              if(! caml_string_notequal(s,cst_peachpuff$0))return 113;
              if(! caml_string_notequal(s,cst_peru$0))return 114;
              if(! caml_string_notequal(s,cst_pink$0))return 115;
              if(! caml_string_notequal(s,cst_plum$0))return 116;
              if(! caml_string_notequal(s,cst_powderblue$0))return 117;
              if(! caml_string_notequal(s,cst_purple$0))return 118;
              if(! caml_string_notequal(s,cst_red$0))return 119}}}
        else
         {var switch$5=caml_string_compare(s,cst_mediumslateblue$0);
          if(0 <= switch$5)
           {if(0 >= switch$5)return 92;
            var switch$6=caml_string_compare(s,cst_navy$0);
            if(0 <= switch$6)
             {if(0 >= switch$6)return 101;
              if(! caml_string_notequal(s,cst_oldlace$0))return 102;
              if(! caml_string_notequal(s,cst_olive$0))return 103;
              if(! caml_string_notequal(s,cst_olivedrab$0))return 104;
              if(! caml_string_notequal(s,cst_orange$0))return 105;
              if(! caml_string_notequal(s,cst_orangered$0))return 106;
              if(! caml_string_notequal(s,cst_orchid$0))return 107;
              if(! caml_string_notequal(s,cst_palegoldenrod$0))return 108;
              if(! caml_string_notequal(s,cst_palegreen$0))return 109}
            else
             {if(! caml_string_notequal(s,cst_mediumspringgreen$0))return 93;
              if(! caml_string_notequal(s,cst_mediumturquoise$0))return 94;
              if(! caml_string_notequal(s,cst_mediumvioletred$0))return 95;
              if(! caml_string_notequal(s,cst_midnightblue$0))return 96;
              if(! caml_string_notequal(s,cst_mintcream$0))return 97;
              if(! caml_string_notequal(s,cst_mistyrose$0))return 98;
              if(! caml_string_notequal(s,cst_moccasin$0))return 99;
              if(! caml_string_notequal(s,cst_navajowhite$0))return 100}}
          else
           {var switch$7=caml_string_compare(s,cst_limegreen$0);
            if(0 <= switch$7)
             {if(0 >= switch$7)return 83;
              if(! caml_string_notequal(s,cst_linen$0))return 84;
              if(! caml_string_notequal(s,cst_magenta$0))return 85;
              if(! caml_string_notequal(s,cst_maroon$0))return 86;
              if(! caml_string_notequal(s,cst_mediumaquamarine$0))return 87;
              if(! caml_string_notequal(s,cst_mediumblue$0))return 88;
              if(! caml_string_notequal(s,cst_mediumorchid$0))return 89;
              if(! caml_string_notequal(s,cst_mediumpurple$0))return 90;
              if(! caml_string_notequal(s,cst_mediumseagreen$0))return 91}
            else
             {if(! caml_string_notequal(s,cst_lightpink$0))return 74;
              if(! caml_string_notequal(s,cst_lightsalmon$0))return 75;
              if(! caml_string_notequal(s,cst_lightseagreen$0))return 76;
              if(! caml_string_notequal(s,cst_lightskyblue$0))return 77;
              if(! caml_string_notequal(s,cst_lightslategray$0))return 78;
              if(! caml_string_notequal(s,cst_lightslategrey$0))return 79;
              if(! caml_string_notequal(s,cst_lightsteelblue$0))return 80;
              if(! caml_string_notequal(s,cst_lightyellow$0))return 81;
              if(! caml_string_notequal(s,cst_lime$0))return 82}}}}
      else
       {var switch$8=caml_string_compare(s,cst_darkslategray$0);
        if(0 <= switch$8)
         {if(0 >= switch$8)return 36;
          var switch$9=caml_string_compare(s,cst_greenyellow$0);
          if(0 <= switch$9)
           {if(0 >= switch$9)return 56;
            var switch$10=caml_string_compare(s,cst_lavenderblush$0);
            if(0 <= switch$10)
             {if(0 >= switch$10)return 64;
              if(! caml_string_notequal(s,cst_lawngreen$0))return 65;
              if(! caml_string_notequal(s,cst_lemonchiffon$0))return 66;
              if(! caml_string_notequal(s,cst_lightblue$0))return 67;
              if(! caml_string_notequal(s,cst_lightcoral$0))return 68;
              if(! caml_string_notequal(s,cst_lightcyan$0))return 69;
              if(! caml_string_notequal(s,cst_lightgoldenrodyellow$0))
               return 70;
              if(! caml_string_notequal(s,cst_lightgray$0))return 71;
              if(! caml_string_notequal(s,cst_lightgreen$0))return 72}
            else
             {if(! caml_string_notequal(s,cst_grey$0))return 54;
              if(! caml_string_notequal(s,cst_honeydew$0))return 57;
              if(! caml_string_notequal(s,cst_hotpink$0))return 58;
              if(! caml_string_notequal(s,cst_indianred$0))return 59;
              if(! caml_string_notequal(s,cst_indigo$0))return 60;
              if(! caml_string_notequal(s,cst_ivory$0))return 61;
              if(! caml_string_notequal(s,cst_khaki$0))return 62;
              if(! caml_string_notequal(s,cst_lavender$0))return 63}}
          else
           {var switch$11=caml_string_compare(s,cst_floralwhite$0);
            if(0 <= switch$11)
             {if(0 >= switch$11)return 46;
              if(! caml_string_notequal(s,cst_forestgreen$0))return 47;
              if(! caml_string_notequal(s,cst_fuchsia$0))return 48;
              if(! caml_string_notequal(s,cst_gainsboro$0))return 49;
              if(! caml_string_notequal(s,cst_ghostwhite$0))return 50;
              if(! caml_string_notequal(s,cst_gold$0))return 51;
              if(! caml_string_notequal(s,cst_goldenrod$0))return 52;
              if(! caml_string_notequal(s,cst_gray$0))return 53;
              if(! caml_string_notequal(s,cst_green$0))return 55}
            else
             {if(! caml_string_notequal(s,cst_darkslategrey$0))return 37;
              if(! caml_string_notequal(s,cst_darkturquoise$0))return 38;
              if(! caml_string_notequal(s,cst_darkviolet$0))return 39;
              if(! caml_string_notequal(s,cst_deeppink$0))return 40;
              if(! caml_string_notequal(s,cst_deepskyblue$0))return 41;
              if(! caml_string_notequal(s,cst_dimgray$0))return 42;
              if(! caml_string_notequal(s,cst_dimgrey$0))return 43;
              if(! caml_string_notequal(s,cst_dodgerblue$0))return 44;
              if(! caml_string_notequal(s,cst_firebrick$0))return 45}}}
        else
         {var switch$12=caml_string_compare(s,cst_cornsilk$0);
          if(0 <= switch$12)
           {if(0 >= switch$12)return 18;
            var switch$13=caml_string_compare(s,cst_darkkhaki$0);
            if(0 <= switch$13)
             {if(0 >= switch$13)return 27;
              if(! caml_string_notequal(s,cst_darkmagenta$0))return 28;
              if(! caml_string_notequal(s,cst_darkolivegreen$0))return 29;
              if(! caml_string_notequal(s,cst_darkorange$0))return 30;
              if(! caml_string_notequal(s,cst_darkorchid$0))return 31;
              if(! caml_string_notequal(s,cst_darkred$0))return 32;
              if(! caml_string_notequal(s,cst_darksalmon$0))return 33;
              if(! caml_string_notequal(s,cst_darkseagreen$0))return 34;
              if(! caml_string_notequal(s,cst_darkslateblue$0))return 35}
            else
             {if(! caml_string_notequal(s,cst_crimson$0))return 19;
              if(! caml_string_notequal(s,cst_cyan$0))return 20;
              if(! caml_string_notequal(s,cst_darkblue$0))return 21;
              if(! caml_string_notequal(s,cst_darkcyan$0))return 22;
              if(! caml_string_notequal(s,cst_darkgoldenrod$0))return 23;
              if(! caml_string_notequal(s,cst_darkgray$0))return 24;
              if(! caml_string_notequal(s,cst_darkgreen$0))return 25;
              if(! caml_string_notequal(s,cst_darkgrey$0))return 26}}
          else
           {var switch$14=caml_string_compare(s,cst_blue$0);
            if(0 <= switch$14)
             {if(0 >= switch$14)return 9;
              if(! caml_string_notequal(s,cst_blueviolet$0))return 10;
              if(! caml_string_notequal(s,cst_brown$0))return 11;
              if(! caml_string_notequal(s,cst_burlywood$0))return 12;
              if(! caml_string_notequal(s,cst_cadetblue$0))return 13;
              if(! caml_string_notequal(s,cst_chartreuse$0))return 14;
              if(! caml_string_notequal(s,cst_chocolate$0))return 15;
              if(! caml_string_notequal(s,cst_coral$0))return 16;
              if(! caml_string_notequal(s,cst_cornflowerblue$0))return 17}
            else
             {if(! caml_string_notequal(s,cst_aliceblue$0))return 0;
              if(! caml_string_notequal(s,cst_antiquewhite$0))return 1;
              if(! caml_string_notequal(s,cst_aqua$0))return 2;
              if(! caml_string_notequal(s,cst_aquamarine$0))return 3;
              if(! caml_string_notequal(s,cst_azure$0))return 4;
              if(! caml_string_notequal(s,cst_beige$0))return 5;
              if(! caml_string_notequal(s,cst_bisque$0))return 6;
              if(! caml_string_notequal(s,cst_black$0))return 7;
              if(! caml_string_notequal(s,cst_blanchedalmond$0))return 8}}}}
      var _de_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_color_name);
      throw [0,Stdlib[6],_de_]}
    function rgb_of_name(param)
     {var _dd_=param;
      if(74 <= _dd_)
       {if(111 <= _dd_)
         switch(_dd_)
          {case 111:return _br_;
           case 112:return _bs_;
           case 113:return _bt_;
           case 114:return _bu_;
           case 115:return _bv_;
           case 116:return _bw_;
           case 117:return _bx_;
           case 118:return _by_;
           case 119:return _bz_;
           case 120:return _bA_;
           case 121:return _bB_;
           case 122:return _bC_;
           case 123:return _bD_;
           case 124:return _bE_;
           case 125:return _bF_;
           case 126:return _bG_;
           case 127:return _bH_;
           case 128:return _bI_;
           case 129:return _bJ_;
           case 130:return _bK_;
           case 131:return _bL_;
           case 132:return _bM_;
           case 133:return _bN_;
           case 134:return _bO_;
           case 135:return _bP_;
           case 136:return _bQ_;
           case 137:return _bR_;
           case 138:return _bS_;
           case 139:return _bT_;
           case 140:return _bU_;
           case 141:return _bV_;
           case 142:return _bW_;
           case 143:return _bX_;
           case 144:return _bY_;
           case 145:return _bZ_;
           default:return _b0_}
        switch(_dd_)
         {case 74:return _aS_;
          case 75:return _aT_;
          case 76:return _aU_;
          case 77:return _aV_;
          case 78:return _aW_;
          case 79:return _aX_;
          case 80:return _aY_;
          case 81:return _aZ_;
          case 82:return _a0_;
          case 83:return _a1_;
          case 84:return _a2_;
          case 85:return _a3_;
          case 86:return _a4_;
          case 87:return _a5_;
          case 88:return _a6_;
          case 89:return _a7_;
          case 90:return _a8_;
          case 91:return _a9_;
          case 92:return _a__;
          case 93:return _a$_;
          case 94:return _ba_;
          case 95:return _bb_;
          case 96:return _bc_;
          case 97:return _bd_;
          case 98:return _be_;
          case 99:return _bf_;
          case 100:return _bg_;
          case 101:return _bh_;
          case 102:return _bi_;
          case 103:return _bj_;
          case 104:return _bk_;
          case 105:return _bl_;
          case 106:return _bm_;
          case 107:return _bn_;
          case 108:return _bo_;
          case 109:return _bp_;
          default:return _bq_}}
      if(37 <= _dd_)
       switch(_dd_)
        {case 37:return _ah_;
         case 38:return _ai_;
         case 39:return _aj_;
         case 40:return _ak_;
         case 41:return _al_;
         case 42:return _am_;
         case 43:return _an_;
         case 44:return _ao_;
         case 45:return _ap_;
         case 46:return _aq_;
         case 47:return _ar_;
         case 48:return _as_;
         case 49:return _at_;
         case 50:return _au_;
         case 51:return _av_;
         case 52:return _aw_;
         case 53:return _ax_;
         case 54:return _ay_;
         case 55:return _az_;
         case 56:return _aA_;
         case 57:return _aB_;
         case 58:return _aC_;
         case 59:return _aD_;
         case 60:return _aE_;
         case 61:return _aF_;
         case 62:return _aG_;
         case 63:return _aH_;
         case 64:return _aI_;
         case 65:return _aJ_;
         case 66:return _aK_;
         case 67:return _aL_;
         case 68:return _aM_;
         case 69:return _aN_;
         case 70:return _aO_;
         case 71:return _aP_;
         case 72:return _aQ_;
         default:return _aR_}
      switch(_dd_)
       {case 0:return _y_;
        case 1:return _z_;
        case 2:return _A_;
        case 3:return _B_;
        case 4:return _C_;
        case 5:return _D_;
        case 6:return _E_;
        case 7:return _F_;
        case 8:return _G_;
        case 9:return _H_;
        case 10:return _I_;
        case 11:return _J_;
        case 12:return _K_;
        case 13:return _L_;
        case 14:return _M_;
        case 15:return _N_;
        case 16:return _O_;
        case 17:return _P_;
        case 18:return _Q_;
        case 19:return _R_;
        case 20:return _S_;
        case 21:return _T_;
        case 22:return _U_;
        case 23:return _V_;
        case 24:return _W_;
        case 25:return _X_;
        case 26:return _Y_;
        case 27:return _Z_;
        case 28:return ___;
        case 29:return _$_;
        case 30:return _aa_;
        case 31:return _ab_;
        case 32:return _ac_;
        case 33:return _ad_;
        case 34:return _ae_;
        case 35:return _af_;
        default:return _ag_}}
    function rgb(a,r,g,b)
     {if(! a)return [1,[0,r,g,b]];var a$0=a[1];return [3,[0,r,g,b,a$0]]}
    function hsl(a,h,s,l)
     {if(! a)return [5,[0,h,s,l]];var a$0=a[1];return [6,[0,h,s,l,a$0]]}
    function string_of_t(param)
     {switch(param[0])
       {case 0:var n=param[1];return string_of_name(n);
        case 1:
         var match=param[1],b=match[3],g=match[2],r=match[1];
         return caml_call4(Stdlib_Printf[4],_b1_,r,g,b);
        case 2:
         var match$0=param[1],b$0=match$0[3],g$0=match$0[2],r$0=match$0[1];
         return caml_call4(Stdlib_Printf[4],_b2_,r$0,g$0,b$0);
        case 3:
         var
          match$1=param[1],
          a=match$1[4],
          b$1=match$1[3],
          g$1=match$1[2],
          r$1=match$1[1];
         return caml_call5(Stdlib_Printf[4],_b3_,r$1,g$1,b$1,a);
        case 4:
         var
          match$2=param[1],
          a$0=match$2[4],
          b$2=match$2[3],
          g$2=match$2[2],
          r$2=match$2[1];
         return caml_call5(Stdlib_Printf[4],_b4_,r$2,g$2,b$2,a$0);
        case 5:
         var match$3=param[1],l=match$3[3],s=match$3[2],h=match$3[1];
         return caml_call4(Stdlib_Printf[4],_b5_,h,s,l);
        default:
         var
          match$4=param[1],
          a$1=match$4[4],
          l$0=match$4[3],
          s$0=match$4[2],
          h$0=match$4[1];
         return caml_call5(Stdlib_Printf[4],_b6_,h$0,s$0,l$0,a$1)}}
    function hex_of_rgb(param)
     {var blue=param[3],green=param[2],red=param[1];
      function in_range(i)
       {var
         _c$_=caml_call2(symbol$5,i,0),
         _da_=_c$_ || caml_call2(symbol$9,i,255);
        if(! _da_)return _da_;
        var
         _db_=caml_call1(Stdlib[33],i),
         _dc_=caml_call2(Stdlib[28],_db_,cst_is_out_of_valid_range);
        throw [0,Stdlib[6],_dc_]}
      in_range(red);
      in_range(green);
      in_range(blue);
      return caml_call4(Stdlib_Printf[4],_b7_,red,green,blue)}
    function js_t_of_js_string(s)
     {var
       t0=caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d),
       t13=new t11(t0),
       t2=caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d$0),
       t17=new t11(t2),
       t4=caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d),
       t15=new t11(t4),
       t6=caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d$0),
       t19=new t11(t6),
       t8=caml_jsbytes_of_string(cst_hsl_s_d_s_d_s_d),
       t21=new t11(t8),
       t10=caml_jsbytes_of_string(cst_hsla_s_d_s_d_s_d_d_d),
       t23=new t11(t10);
      if
       (!
        (t13.test(s) | 0)
        &&
        !
        (t15.test(s) | 0)
        &&
        !
        (t17.test(s) | 0)
        &&
        !
        (t19.test(s) | 0)
        &&
        !
        (t21.test(s) | 0)
        &&
        !
        (t23.test(s) | 0))
       {var _c8_=caml_string_of_jsstring(s);
        if(caml_call2(Stdlib_List[36],_c8_,_b8_))return s;
        var
         _c9_=caml_string_of_jsstring(s),
         _c__=caml_call2(Stdlib[28],_c9_,cst_is_not_a_valid_color);
        throw [0,Stdlib[6],_c__]}
      return s}
    function js(c)
     {if(0 !== c[0])return caml_jsstring_of_string(string_of_t(c));
      var n=c[1];
      return caml_jsstring_of_string(string_of_name(n))}
    function ml(c)
     {var s=caml_string_of_jsstring(c);
      try
       {var _cV_=[0,name_of_string(s)];return _cV_}
      catch(_cW_)
       {_cW_ = caml_wrap_exception(_cW_);
        if(_cW_[1] !== Stdlib[6])throw _cW_;
        var
         fail=
          function(param)
           {var _c7_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_color$0);
            throw [0,Stdlib[6],_c7_]},
         re_rgb=regexp(cst_rgba_d_d_d_d_d),
         re_rgb_pct=regexp(cst_rgba_d_d_d_d_d$0),
         re_hsl=regexp(cst_hsla_d_d_d_d_d),
         i_of_s_o=
          function(param)
           {if(! param)return fail(0);
            var i=param[1];
            try
             {var _c5_=caml_int_of_string(i);return _c5_}
            catch(_c6_)
             {_c6_ = caml_wrap_exception(_c6_);
              if(_c6_[1] === Stdlib[6])
               var s=_c6_[2];
              else
               {if(_c6_[1] !== Stdlib[7])throw _c6_;var s=_c6_[2]}
              var
               _c2_=caml_call2(Stdlib[28],cst$39,s),
               _c3_=caml_call2(Stdlib[28],i,_c2_),
               _c4_=caml_call2(Stdlib[28],cst_color_conversion_error,_c3_);
              throw [0,Stdlib[6],_c4_]}},
         f_of_s=
          function(f)
           {try
             {var _c0_=caml_float_of_string(f);return _c0_}
            catch(_c1_)
             {_c1_ = caml_wrap_exception(_c1_);
              if(_c1_[1] === Stdlib[6])
               var s=_c1_[2];
              else
               {if(_c1_[1] !== Stdlib[7])throw _c1_;var s=_c1_[2]}
              var
               _cX_=caml_call2(Stdlib[28],cst$40,s),
               _cY_=caml_call2(Stdlib[28],f,_cX_),
               _cZ_=caml_call2(Stdlib[28],cst_color_conversion_error$0,_cY_);
              throw [0,Stdlib[6],_cZ_]}},
         match=string_match(re_rgb,s,0);
        if(match)
         {var
           r=match[1],
           red=matched_group(r,2),
           green=matched_group(r,3),
           blue=matched_group(r,4),
           alpha=matched_group(r,5),
           match$0=matched_group(r,1);
          if(match$0)
           {var _cD_=match$0[1];
            if(! caml_string_notequal(_cD_,cst_rgb))
             {if(alpha)return fail(0);
              var _cH_=i_of_s_o(blue),_cI_=i_of_s_o(green);
              return [1,[0,i_of_s_o(red),_cI_,_cH_]]}
            if(! caml_string_notequal(_cD_,cst_rgba))
             {if(! alpha)return fail(0);
              var
               a=alpha[1],
               _cE_=f_of_s(a),
               _cF_=i_of_s_o(blue),
               _cG_=i_of_s_o(green);
              return [3,[0,i_of_s_o(red),_cG_,_cF_,_cE_]]}}
          return fail(0)}
        var match$1=string_match(re_rgb_pct,s,0);
        if(match$1)
         {var
           r$0=match$1[1],
           red$0=matched_group(r$0,2),
           green$0=matched_group(r$0,3),
           blue$0=matched_group(r$0,4),
           alpha$0=matched_group(r$0,5),
           match$2=matched_group(r$0,1);
          if(match$2)
           {var _cJ_=match$2[1];
            if(! caml_string_notequal(_cJ_,cst_rgb$0))
             {if(alpha$0)return fail(0);
              var _cN_=i_of_s_o(blue$0),_cO_=i_of_s_o(green$0);
              return [2,[0,i_of_s_o(red$0),_cO_,_cN_]]}
            if(! caml_string_notequal(_cJ_,cst_rgba$0))
             {if(! alpha$0)return fail(0);
              var
               a$0=alpha$0[1],
               _cK_=f_of_s(a$0),
               _cL_=i_of_s_o(blue$0),
               _cM_=i_of_s_o(green$0);
              return [4,[0,i_of_s_o(red$0),_cM_,_cL_,_cK_]]}}
          return fail(0)}
        var match$3=string_match(re_hsl,s,0);
        if(! match$3)return fail(0);
        var
         r$1=match$3[1],
         red$1=matched_group(r$1,2),
         green$1=matched_group(r$1,3),
         blue$1=matched_group(r$1,4),
         alpha$1=matched_group(r$1,5),
         match$4=matched_group(r$1,1);
        if(match$4)
         {var _cP_=match$4[1];
          if(! caml_string_notequal(_cP_,cst_hsl))
           {if(alpha$1)return fail(0);
            var _cT_=i_of_s_o(blue$1),_cU_=i_of_s_o(green$1);
            return [5,[0,i_of_s_o(red$1),_cU_,_cT_]]}
          if(! caml_string_notequal(_cP_,cst_hsla))
           {if(! alpha$1)return fail(0);
            var
             a$1=alpha$1[1],
             _cQ_=f_of_s(a$1),
             _cR_=i_of_s_o(blue$1),
             _cS_=i_of_s_o(green$1);
            return [6,[0,i_of_s_o(red$1),_cS_,_cR_,_cQ_]]}}
        return fail(0)}}
    function string_of_t$0(param)
     {if(typeof param === "number")return cst_0;
      switch(param[0])
       {case 0:
         var f=param[1];return caml_call3(Stdlib_Printf[4],_b9_,f,cst_em$0);
        case 1:
         var f$0=param[1];return caml_call3(Stdlib_Printf[4],_b__,f$0,cst_ex);
        case 2:
         var f$1=param[1];return caml_call3(Stdlib_Printf[4],_b$_,f$1,cst_px);
        case 3:
         var f$2=param[1];return caml_call3(Stdlib_Printf[4],_ca_,f$2,cst_gd);
        case 4:
         var f$3=param[1];
         return caml_call3(Stdlib_Printf[4],_cb_,f$3,cst_rem);
        case 5:
         var f$4=param[1];return caml_call3(Stdlib_Printf[4],_cc_,f$4,cst_vw);
        case 6:
         var f$5=param[1];return caml_call3(Stdlib_Printf[4],_cd_,f$5,cst_vh);
        case 7:
         var f$6=param[1];return caml_call3(Stdlib_Printf[4],_ce_,f$6,cst_vm);
        case 8:
         var f$7=param[1];return caml_call3(Stdlib_Printf[4],_cf_,f$7,cst_ch);
        case 9:
         var f$8=param[1];return caml_call3(Stdlib_Printf[4],_cg_,f$8,cst_mm);
        case 10:
         var f$9=param[1];return caml_call3(Stdlib_Printf[4],_ch_,f$9,cst_cm);
        case 11:
         var f$10=param[1];
         return caml_call3(Stdlib_Printf[4],_ci_,f$10,cst_in);
        case 12:
         var f$11=param[1];
         return caml_call3(Stdlib_Printf[4],_cj_,f$11,cst_pt);
        default:
         var f$12=param[1];
         return caml_call3(Stdlib_Printf[4],_ck_,f$12,cst_pc)}}
    function js$0(t){return caml_jsstring_of_string(string_of_t$0(t))}
    function ml$0(t)
     {var s=caml_string_of_jsstring(t);
      if(caml_call2(String[64],s,cst_0$0))return 0;
      function fail(param)
       {var _cC_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_length);
        throw [0,Stdlib[6],_cC_]}
      var re=regexp(cst_d_d_s_S),match=string_match(re,s,0);
      if(! match)return fail(0);
      var r=match[1],match$0=matched_group(r,1);
      if(match$0)
       {var f=match$0[1];
        try
         {var _cA_=caml_float_of_string(f)}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] !== Stdlib[6])throw exn;
          var
           s$0=exn[2],
           _cz_=caml_call2(Stdlib[28],cst_length_conversion_error,s$0);
          throw [0,Stdlib[6],_cz_]}
        var f$0=_cA_}
      else
       var f$0=fail(0);
      var match$1=matched_group(r,2);
      if(! match$1)return fail(0);
      var _cB_=match$1[1],switch$0=caml_string_compare(_cB_,cst_pc$0);
      if(0 <= switch$0)
       {if(0 >= switch$0)return [13,f$0];
        if(! caml_string_notequal(_cB_,cst_pt$0))return [12,f$0];
        if(! caml_string_notequal(_cB_,cst_px$0))return [2,f$0];
        if(! caml_string_notequal(_cB_,cst_rem$0))return [4,f$0];
        if(! caml_string_notequal(_cB_,cst_vh$0))return [6,f$0];
        if(! caml_string_notequal(_cB_,cst_vm$0))return [7,f$0];
        if(! caml_string_notequal(_cB_,cst_vw$0))return [5,f$0]}
      else
       {if(! caml_string_notequal(_cB_,cst_ch$0))return [8,f$0];
        if(! caml_string_notequal(_cB_,cst_cm$0))return [10,f$0];
        if(! caml_string_notequal(_cB_,cst_em$1))return [0,f$0];
        if(! caml_string_notequal(_cB_,cst_ex$0))return [1,f$0];
        if(! caml_string_notequal(_cB_,cst_gd$0))return [3,f$0];
        if(! caml_string_notequal(_cB_,cst_in$0))return [11,f$0];
        if(! caml_string_notequal(_cB_,cst_mm$0))return [9,f$0]}
      return fail(0)}
    var Length=[0,string_of_t$0,js$0,ml$0];
    function string_of_t$1(param)
     {switch(param[0])
       {case 0:
         var f=param[1];return caml_call3(Stdlib_Printf[4],_cl_,f,cst_deg);
        case 1:
         var f$0=param[1];
         return caml_call3(Stdlib_Printf[4],_cm_,f$0,cst_grad);
        case 2:
         var f$1=param[1];
         return caml_call3(Stdlib_Printf[4],_cn_,f$1,cst_rad);
        default:
         var f$2=param[1];
         return caml_call3(Stdlib_Printf[4],_co_,f$2,cst_turns)}}
    function js$1(t){return caml_jsstring_of_string(string_of_t$1(t))}
    function ml$1(j)
     {var s=caml_string_of_jsstring(j),re=regexp(cst_d_d_deg_grad_rad_turns);
      function fail(param)
       {var _cy_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_length$0);
        throw [0,Stdlib[6],_cy_]}
      var match=string_match(re,s,0);
      if(! match)return fail(0);
      var r=match[1],match$0=matched_group(r,1);
      if(match$0)
       {var f=match$0[1];
        try
         {var _cw_=caml_float_of_string(f)}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] !== Stdlib[6])throw exn;
          var
           s$0=exn[2],
           _cv_=caml_call2(Stdlib[28],cst_length_conversion_error$0,s$0);
          throw [0,Stdlib[6],_cv_]}
        var f$0=_cw_}
      else
       var f$0=fail(0);
      var match$1=matched_group(r,2);
      if(match$1)
       {var _cx_=match$1[1];
        if(! caml_string_notequal(_cx_,cst_deg$0))return [0,f$0];
        if(! caml_string_notequal(_cx_,cst_grad$0))return [1,f$0];
        if(! caml_string_notequal(_cx_,cst_rad$0))return [2,f$0];
        if(! caml_string_notequal(_cx_,cst_turns$0))return [3,f$0]}
      return fail(0)}
    var
     Angle=[0,string_of_t$1,js$1,ml$1],
     Js_of_ocaml_CSS=
      [0,
       [0,
        string_of_name,
        rgb_of_name,
        hex_of_rgb,
        rgb,
        hsl,
        string_of_t,
        js,
        ml,
        js_t_of_js_string],
       Length,
       Angle];
    caml_register_global(1686,Js_of_ocaml_CSS,"Js_of_ocaml__CSS");
    function listen(opt,target,typ,cb)
     {if(opt)var sth=opt[1],capture=sth;else var capture=0;
      var _cu_=! ! capture;
      return addEventListener
              (target,
               typ,
               full_handler(function(n,e){return ! ! caml_call2(cb,n,e)}),
               _cu_)}
    var Js_of_ocaml_Dom_events=[0,_n_,listen,removeEventListener];
    caml_register_global
     (1687,Js_of_ocaml_Dom_events,"Js_of_ocaml__Dom_events");
    var
     t0="http://www.w3.org/2000/svg",
     SVGError=[248,cst_Js_of_ocaml_Dom_svg_SVGErr,caml_fresh_oo_id(0)];
    function createElement$0(t2,name)
     {var t1=caml_jsstring_of_string(name);
      return t2.createElementNS("http://www.w3.org/2000/svg",t1)}
    function unsafeCreateElement$0(doc,name){return createElement$0(doc,name)}
    function createA$0(doc){return unsafeCreateElement$0(doc,cst_a$2)}
    function createAltGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_altglyph)}
    function createAltGlyphDef(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphdef)}
    function createAltGlyphItem(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphitem)}
    function createAnimate(doc){return unsafeCreateElement$0(doc,cst_animate)}
    function createAnimateColor(doc)
     {return unsafeCreateElement$0(doc,cst_animatecolor)}
    function createAnimateMotion(doc)
     {return unsafeCreateElement$0(doc,cst_animatemotion)}
    function createAnimateTransform(doc)
     {return unsafeCreateElement$0(doc,cst_animatetransform)}
    function createCircle(doc){return unsafeCreateElement$0(doc,cst_circle)}
    function createClipPath(doc)
     {return unsafeCreateElement$0(doc,cst_clippath)}
    function createCursor(doc){return unsafeCreateElement$0(doc,cst_cursor)}
    function createDefs(doc){return unsafeCreateElement$0(doc,cst_defs)}
    function createDesc(doc){return unsafeCreateElement$0(doc,cst_desc)}
    function createEllipse(doc){return unsafeCreateElement$0(doc,cst_ellipse)}
    function createFilter(doc){return unsafeCreateElement$0(doc,cst_filter)}
    function createFont(doc){return unsafeCreateElement$0(doc,cst_font)}
    function createFontFace(doc)
     {return unsafeCreateElement$0(doc,cst_font_face)}
    function createFontFaceFormat(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_format)}
    function createFontFaceName(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_name)}
    function createFontFaceSrc(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_src)}
    function createFontFaceUri(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_uri)}
    function createForeignObject(doc)
     {return unsafeCreateElement$0(doc,cst_foreignObject)}
    function createG(doc){return unsafeCreateElement$0(doc,cst_g$0)}
    function createGlyph(doc){return unsafeCreateElement$0(doc,cst_glyph)}
    function createGlyphRef(doc)
     {return unsafeCreateElement$0(doc,cst_glyphref)}
    function createhkern(doc){return unsafeCreateElement$0(doc,cst_hkern)}
    function createImage(doc){return unsafeCreateElement$0(doc,cst_image)}
    function createLineElement(doc)
     {return unsafeCreateElement$0(doc,cst_line)}
    function createLinearElement(doc)
     {return unsafeCreateElement$0(doc,cst_lineargradient)}
    function createMask(doc){return unsafeCreateElement$0(doc,cst_mask)}
    function createMetaData(doc)
     {return unsafeCreateElement$0(doc,cst_metadata)}
    function createMissingGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_missing_glyph)}
    function createMPath(doc){return unsafeCreateElement$0(doc,cst_mpath)}
    function createPath(doc){return unsafeCreateElement$0(doc,cst_path)}
    function createPattern(doc){return unsafeCreateElement$0(doc,cst_pattern)}
    function createPolygon(doc){return unsafeCreateElement$0(doc,cst_polygon)}
    function createPolyline(doc)
     {return unsafeCreateElement$0(doc,cst_polyline)}
    function createRadialgradient(doc)
     {return unsafeCreateElement$0(doc,cst_radialgradient)}
    function createRect(doc){return unsafeCreateElement$0(doc,cst_rect)}
    function createScript$0(doc)
     {return unsafeCreateElement$0(doc,cst_script$2)}
    function createSet(doc){return unsafeCreateElement$0(doc,cst_set)}
    function createStop(doc){return unsafeCreateElement$0(doc,cst_stop)}
    function createStyle$0(doc){return unsafeCreateElement$0(doc,cst_style$2)}
    function createSvg(doc){return unsafeCreateElement$0(doc,cst_svg)}
    function createSwitch(doc){return unsafeCreateElement$0(doc,cst_switch)}
    function createSymbol(doc){return unsafeCreateElement$0(doc,cst_symbol)}
    function createTextElement(doc)
     {return unsafeCreateElement$0(doc,cst_text$0)}
    function createTextpath(doc)
     {return unsafeCreateElement$0(doc,cst_textpath)}
    function createTitle$0(doc){return unsafeCreateElement$0(doc,cst_title$2)}
    function createTref(doc){return unsafeCreateElement$0(doc,cst_tref)}
    function createTspan(doc){return unsafeCreateElement$0(doc,cst_tspan)}
    function createUse(doc){return unsafeCreateElement$0(doc,cst_use)}
    function createView(doc){return unsafeCreateElement$0(doc,cst_view)}
    function createvkern(doc){return unsafeCreateElement$0(doc,cst_vkern)}
    var svg_element=Unsafe[1].SVGElement,document$0=Unsafe[1].document;
    function getElementById$0(id)
     {function _cr_(e){if(e instanceof svg_element)return e;throw Stdlib[8]}
      function _cs_(param){throw Stdlib[8]}
      var
       t6=caml_jsstring_of_string(id),
       t7=Unsafe[1].document,
       _ct_=t7.getElementById(t6);
      return caml_call3(Opt[7],_ct_,_cs_,_cr_)}
    function element$2(e){return e instanceof svg_element?e:no_handler}
    function unsafeCoerce$0(e,tag)
     {var t9=e.tagName,_cq_=caml_jsstring_of_string(tag);
      return t9.toLowerCase() === _cq_?e:no_handler}
    function a$0(e){return unsafeCoerce$0(e,cst_a$3)}
    function altGlyph(e){return unsafeCoerce$0(e,cst_altglyph$0)}
    function altGlyphDef(e){return unsafeCoerce$0(e,cst_altglyphdef$0)}
    function altGlyphItem(e){return unsafeCoerce$0(e,cst_altglyphitem$0)}
    function animate(e){return unsafeCoerce$0(e,cst_animate$0)}
    function animateColor(e){return unsafeCoerce$0(e,cst_animatecolor$0)}
    function animateMotion(e){return unsafeCoerce$0(e,cst_animatemotion$0)}
    function animateTransform(e)
     {return unsafeCoerce$0(e,cst_animatetransform$0)}
    function circle(e){return unsafeCoerce$0(e,cst_circle$0)}
    function clipPath(e){return unsafeCoerce$0(e,cst_clippath$0)}
    function cursor(e){return unsafeCoerce$0(e,cst_cursor$0)}
    function defs(e){return unsafeCoerce$0(e,cst_defs$0)}
    function desc(e){return unsafeCoerce$0(e,cst_desc$0)}
    function ellipse(e){return unsafeCoerce$0(e,cst_ellipse$0)}
    function filter(e){return unsafeCoerce$0(e,cst_filter$0)}
    function font(e){return unsafeCoerce$0(e,cst_font$0)}
    function fontFace(e){return unsafeCoerce$0(e,cst_font_face$0)}
    function fontFaceFormat(e)
     {return unsafeCoerce$0(e,cst_font_face_format$0)}
    function fontFaceName(e){return unsafeCoerce$0(e,cst_font_face_name$0)}
    function fontFaceSrc(e){return unsafeCoerce$0(e,cst_font_face_src$0)}
    function fontFaceUri(e){return unsafeCoerce$0(e,cst_font_face_uri$0)}
    function foreignObject(e){return unsafeCoerce$0(e,cst_foreignobject)}
    function g(e){return unsafeCoerce$0(e,cst_g$1)}
    function glyph(e){return unsafeCoerce$0(e,cst_glyph$0)}
    function glyphRef(e){return unsafeCoerce$0(e,cst_glyphref$0)}
    function hkern(e){return unsafeCoerce$0(e,cst_hkern$0)}
    function image(e){return unsafeCoerce$0(e,cst_image$0)}
    function lineElement(e){return unsafeCoerce$0(e,cst_line$0)}
    function linearElement(e){return unsafeCoerce$0(e,cst_lineargradient$0)}
    function mask(e){return unsafeCoerce$0(e,cst_mask$0)}
    function metaData(e){return unsafeCoerce$0(e,cst_metadata$0)}
    function missingGlyph(e){return unsafeCoerce$0(e,cst_missing_glyph$0)}
    function mPath(e){return unsafeCoerce$0(e,cst_mpath$0)}
    function path$0(e){return unsafeCoerce$0(e,cst_path$0)}
    function pattern(e){return unsafeCoerce$0(e,cst_pattern$0)}
    function polygon(e){return unsafeCoerce$0(e,cst_polygon$0)}
    function polyline(e){return unsafeCoerce$0(e,cst_polyline$0)}
    function radialgradient(e){return unsafeCoerce$0(e,cst_radialgradient$0)}
    function rect(e){return unsafeCoerce$0(e,cst_rect$0)}
    function script$0(e){return unsafeCoerce$0(e,cst_script$3)}
    function set$1(e){return unsafeCoerce$0(e,cst_set$0)}
    function stop(e){return unsafeCoerce$0(e,cst_stop$0)}
    function style$0(e){return unsafeCoerce$0(e,cst_style$3)}
    function svg(e){return unsafeCoerce$0(e,cst_svg$0)}
    function switch$0(e){return unsafeCoerce$0(e,cst_switch$0)}
    function symbol$12(e){return unsafeCoerce$0(e,cst_symbol$0)}
    function textElement(e){return unsafeCoerce$0(e,cst_text$1)}
    function textpath(e){return unsafeCoerce$0(e,cst_textpath$0)}
    function title$0(e){return unsafeCoerce$0(e,cst_title$3)}
    function tref(e){return unsafeCoerce$0(e,cst_tref$0)}
    function tspan(e){return unsafeCoerce$0(e,cst_tspan$0)}
    function use(e){return unsafeCoerce$0(e,cst_use$0)}
    function view(e){return unsafeCoerce$0(e,cst_view$0)}
    function vkern(e){return unsafeCoerce$0(e,cst_vkern$0)}
    var
     Js_of_ocaml_Dom_svg=
      [0,
       t0,
       SVGError,
       createElement$0,
       createA$0,
       createAltGlyph,
       createAltGlyphDef,
       createAltGlyphItem,
       createAnimate,
       createAnimateColor,
       createAnimateMotion,
       createAnimateTransform,
       createCircle,
       createClipPath,
       createCursor,
       createDefs,
       createDesc,
       createEllipse,
       createFilter,
       createFont,
       createFontFace,
       createFontFaceFormat,
       createFontFaceName,
       createFontFaceSrc,
       createFontFaceUri,
       createForeignObject,
       createG,
       createGlyph,
       createGlyphRef,
       createhkern,
       createImage,
       createLineElement,
       createLinearElement,
       createMask,
       createMetaData,
       createMissingGlyph,
       createMPath,
       createPath,
       createPattern,
       createPolygon,
       createPolyline,
       createRadialgradient,
       createRect,
       createScript$0,
       createSet,
       createStop,
       createStyle$0,
       createSvg,
       createSwitch,
       createSymbol,
       createTextElement,
       createTextpath,
       createTitle$0,
       createTref,
       createTspan,
       createUse,
       createView,
       createvkern,
       svg_element,
       document$0,
       getElementById$0,
       [0,
        element$2,
        a$0,
        altGlyph,
        altGlyphDef,
        altGlyphItem,
        animate,
        animateColor,
        animateMotion,
        animateTransform,
        circle,
        clipPath,
        cursor,
        defs,
        desc,
        ellipse,
        filter,
        font,
        fontFace,
        fontFaceFormat,
        fontFaceName,
        fontFaceSrc,
        fontFaceUri,
        foreignObject,
        g,
        glyph,
        glyphRef,
        hkern,
        image,
        lineElement,
        linearElement,
        mask,
        metaData,
        missingGlyph,
        mPath,
        path$0,
        pattern,
        polygon,
        polyline,
        radialgradient,
        rect,
        script$0,
        set$1,
        stop,
        style$0,
        svg,
        switch$0,
        symbol$12,
        textElement,
        textpath,
        title$0,
        tref,
        tspan,
        use,
        view,
        vkern]];
    caml_register_global(1688,Js_of_ocaml_Dom_svg,"Js_of_ocaml__Dom_svg");
    function withCredentials(b)
     {var t1={},t0=! ! b;t1.withCredentials = t0;return t1}
    var
     eventSource=Unsafe[1].EventSource,
     eventSource_options=Unsafe[1].EventSource,
     Js_of_ocaml_EventSource=
      [0,withCredentials,eventSource,eventSource_options,addEventListener];
    caml_register_global
     (1689,Js_of_ocaml_EventSource,"Js_of_ocaml__EventSource");
    var
     console=runtime.caml_js_get_console(0),
     Js_of_ocaml_Firebug=[0,console];
    caml_register_global(1690,Js_of_ocaml_Firebug,"Js_of_ocaml__Firebug");
    function empty_position_options(param){return {}}
    var
     t1$0=Unsafe[1].navigator,
     geolocation=caml_call1(Optdef[5],t1$0)?t1$0.geolocation:t1$0;
    function is_supported$3(param){return caml_call1(Optdef[5],geolocation)}
    var
     Js_of_ocaml_Geolocation=
      [0,empty_position_options,geolocation,is_supported$3];
    caml_register_global
     (1691,Js_of_ocaml_Geolocation,"Js_of_ocaml__Geolocation");
    function empty_intersection_observer_op(param){return {}}
    var intersectionObserver_unsafe=Unsafe[1].IntersectionObserver;
    function is_supported$4(param)
     {return caml_call1(Optdef[5],intersectionObserver_unsafe)}
    var
     Js_of_ocaml_IntersectionObserv=
      [0,
       empty_intersection_observer_op,
       is_supported$4,
       intersectionObserver_unsafe];
    caml_register_global
     (1692,Js_of_ocaml_IntersectionObserv,"Js_of_ocaml__IntersectionObserver");
    function object_options(param){return {"localeMatcher":"best fit"}}
    function options(param)
     {return {"localeMatcher":"best fit",
              "usage":"sort",
              "sensitivity":"variant",
              "ignorePunctuation":t4,
              "numeric":t4,
              "caseFirst":"false"}}
    var Collator=[0,object_options,options];
    function options$0(param)
     {return {"dateStyle":t39,
              "timeStyle":t39,
              "calendar":t39,
              "dayPeriod":t39,
              "numberingSystem":t39,
              "localeMatcher":"best fit",
              "timeZone":t39,
              "hour12":t39,
              "hourCycle":t39,
              "formatMatcher":"best fit",
              "weekday":t39,
              "era":t39,
              "year":t39,
              "month":t39,
              "day":t39,
              "hour":t39,
              "minute":t39,
              "second":t39,
              "fractionalSecondDigits":t39,
              "timeZoneName":t39}}
    var DateTimeFormat=[0,object_options,options$0];
    function options$1(param)
     {return {"compactDisplay":t39,
              "currency":t39,
              "currencyDisplay":t39,
              "currencySign":t39,
              "localeMatcher":"best fit",
              "notation":t39,
              "numberingSystem":t39,
              "signDisplay":t39,
              "style":"decimal",
              "unit":t39,
              "unitDisplay":t39,
              "useGrouping":t38,
              "roundingMode":t39,
              "roundingPriority":t39,
              "roundingIncrement":t39,
              "trailingZeroDisplay":t39,
              "minimumIntegerDigits":t39,
              "minimumFractionDigits":t39,
              "maximumFractionDigits":t39,
              "minimumSignificantDigits":t39,
              "maximumSignificantDigits":t39}}
    var NumberFormat=[0,object_options,options$1];
    function options$2(param)
     {return {"localeMatcher":"best fit","type":"cardinal"}}
    var
     PluralRules=[0,object_options,options$2],
     intl=Unsafe[1].Intl,
     t52$0=Unsafe[1].Intl,
     collator_constr=t52$0.Collator,
     t54=Unsafe[1].Intl,
     dateTimeFormat_constr=t54.DateTimeFormat,
     t56=Unsafe[1].Intl,
     numberFormat_constr=t56.NumberFormat,
     t58=Unsafe[1].Intl,
     pluralRules_constr=t58.PluralRules;
    function is_supported$5(param){return caml_call1(Optdef[5],intl)}
    var
     Js_of_ocaml_Intl=
      [0,
       Collator,
       DateTimeFormat,
       NumberFormat,
       PluralRules,
       intl,
       collator_constr,
       dateTimeFormat_constr,
       numberFormat_constr,
       pluralRules_constr,
       is_supported$5];
    caml_register_global(1693,Js_of_ocaml_Intl,"Js_of_ocaml__Intl");
    var Js_of_ocaml$0=[0];
    caml_register_global(1694,Js_of_ocaml$0,"Js_of_ocaml");
    return}
  (globalThis));


//# 1 "../.js/default/brr/brr.cma.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_equal=runtime.caml_equal,
     caml_js_from_bool=runtime.caml_js_from_bool,
     caml_js_get=runtime.caml_js_get,
     caml_js_instanceof=runtime.caml_js_instanceof,
     caml_js_meth_call=runtime.caml_js_meth_call,
     caml_js_new=runtime.caml_js_new,
     caml_js_to_bool=runtime.caml_js_to_bool,
     caml_js_wrap_callback_strict=runtime.caml_js_wrap_callback_strict,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_list_to_js_array=runtime.caml_list_to_js_array,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_parseInt=caml_string_of_jsbytes("parseInt"),
     cst_done=caml_string_of_jsbytes("done"),
     cst_value=caml_string_of_jsbytes("value"),
     cst_substr=caml_string_of_jsbytes("substr"),
     cst_slice=caml_string_of_jsbytes("slice"),
     cst_String=caml_string_of_jsbytes("String"),
     cst_length=caml_string_of_jsbytes("length"),
     cst_Number=caml_string_of_jsbytes("Number"),
     cst_value$1=caml_string_of_jsbytes("value"),
     cst_value$0=caml_string_of_jsbytes("value"),
     cst_done$0=caml_string_of_jsbytes("done"),
     cst_stack=caml_string_of_jsbytes("stack"),
     cst_message=caml_string_of_jsbytes("message"),
     cst_name$1=caml_string_of_jsbytes("name"),
     cst_NotAllowedError=caml_string_of_jsbytes("NotAllowedError"),
     cst_InvalidAccessError=caml_string_of_jsbytes("InvalidAccessError"),
     cst_AbortError=caml_string_of_jsbytes("AbortError"),
     cst_ConstraintError=caml_string_of_jsbytes("ConstraintError"),
     cst_DataCloneError=caml_string_of_jsbytes("DataCloneError"),
     cst_DataError=caml_string_of_jsbytes("DataError"),
     cst_EncodingError=caml_string_of_jsbytes("EncodingError"),
     cst_HierarchyRequestError=caml_string_of_jsbytes("HierarchyRequestError"),
     cst_IndexSizeError=caml_string_of_jsbytes("IndexSizeError"),
     cst_InvalidCharacterError=caml_string_of_jsbytes("InvalidCharacterError"),
     cst_InvalidModificationError=
      caml_string_of_jsbytes("InvalidModificationError"),
     cst_InvalidNodeTypeError=caml_string_of_jsbytes("InvalidNodeTypeError"),
     cst_InvalidStateError=caml_string_of_jsbytes("InvalidStateError"),
     cst_NamespaceError=caml_string_of_jsbytes("NamespaceError"),
     cst_NetworkError=caml_string_of_jsbytes("NetworkError"),
     cst_NoModificationAllowedError=
      caml_string_of_jsbytes("NoModificationAllowedError"),
     cst_SyntaxError=caml_string_of_jsbytes("SyntaxError"),
     cst_NotFoundError=caml_string_of_jsbytes("NotFoundError"),
     cst_NotReadableError=caml_string_of_jsbytes("NotReadableError"),
     cst_NotSupportedError=caml_string_of_jsbytes("NotSupportedError"),
     cst_OperationError=caml_string_of_jsbytes("OperationError"),
     cst_QuotaExceededError=caml_string_of_jsbytes("QuotaExceededError"),
     cst_ReadOnlyError=caml_string_of_jsbytes("ReadOnlyError"),
     cst_SecurityError=caml_string_of_jsbytes("SecurityError"),
     cst_TimeoutError=caml_string_of_jsbytes("TimeoutError"),
     cst_TransactionInactiveError=
      caml_string_of_jsbytes("TransactionInactiveError"),
     cst_TypeMismatchError=caml_string_of_jsbytes("TypeMismatchError"),
     cst_URLMismatchError=caml_string_of_jsbytes("URLMismatchError"),
     cst_UnknownError=caml_string_of_jsbytes("UnknownError"),
     cst_VersionError=caml_string_of_jsbytes("VersionError"),
     cst_WrongDocumentError=caml_string_of_jsbytes("WrongDocumentError"),
     cst_name$0=caml_string_of_jsbytes("name"),
     cst_Error=caml_string_of_jsbytes("Error"),
     cst_name=caml_string_of_jsbytes("name"),
     cst_length$0=caml_string_of_jsbytes("length"),
     cst_Array=caml_string_of_jsbytes("Array"),
     cst_Promise=caml_string_of_jsbytes("Promise"),
     cst_setTimeout=caml_string_of_jsbytes("setTimeout"),
     cst_fut$0=caml_string_of_jsbytes("fut"),
     cst_fut=caml_string_of_jsbytes("fut"),
     cst_clearMeasures=caml_string_of_jsbytes("clearMeasures"),
     cst_clearMarks=caml_string_of_jsbytes("clearMarks"),
     cst_timeOrigin=caml_string_of_jsbytes("timeOrigin"),
     cst_redirectCount=caml_string_of_jsbytes("redirectCount"),
     cst_type$3=caml_string_of_jsbytes("type'"),
     cst_loadEventEnd=caml_string_of_jsbytes("loadEventEnd"),
     cst_loadEventStart=caml_string_of_jsbytes("loadEventStart"),
     cst_domComplete=caml_string_of_jsbytes("domComplete"),
     cst_domContentLoadedEventEnd=
      caml_string_of_jsbytes("domContentLoadedEventEnd"),
     cst_domContentLoadedEventStart=
      caml_string_of_jsbytes("domContentLoadedEventStart"),
     cst_domInteractive=caml_string_of_jsbytes("domInteractive"),
     cst_unloadEventEnd=caml_string_of_jsbytes("unloadEventEnd"),
     cst_unloadEventStart=caml_string_of_jsbytes("unloadEventStart"),
     cst_decodedBodySize=caml_string_of_jsbytes("decodedBodySize"),
     cst_encodedBodySize=caml_string_of_jsbytes("encodedBodySize"),
     cst_transferSize=caml_string_of_jsbytes("transferSize"),
     cst_responseEnd=caml_string_of_jsbytes("responseEnd"),
     cst_responseStart=caml_string_of_jsbytes("responseStart"),
     cst_requestStart=caml_string_of_jsbytes("requestStart"),
     cst_secureConnectionStart=caml_string_of_jsbytes("secureConnectionStart"),
     cst_connectEnd=caml_string_of_jsbytes("connectEnd"),
     cst_connectStart=caml_string_of_jsbytes("connectStart"),
     cst_domainLookupEnd=caml_string_of_jsbytes("domainLookupEnd"),
     cst_domainLookupStart=caml_string_of_jsbytes("domainLookupStart"),
     cst_fetchStart=caml_string_of_jsbytes("fetchStart"),
     cst_redirectEnd=caml_string_of_jsbytes("redirectEnd"),
     cst_redirectStart=caml_string_of_jsbytes("redirectStart"),
     cst_workerStart=caml_string_of_jsbytes("workerStart"),
     cst_nextHopProtocol=caml_string_of_jsbytes("nextHopProtocol"),
     cst_initiatorType=caml_string_of_jsbytes("initiatorType"),
     cst_duration=caml_string_of_jsbytes("duration"),
     cst_endTime=caml_string_of_jsbytes("endTime"),
     cst_startTime=caml_string_of_jsbytes("startTime"),
     cst_entryType=caml_string_of_jsbytes("entryType"),
     cst_name$4=caml_string_of_jsbytes("name"),
     cst_onLine=caml_string_of_jsbytes("onLine"),
     cst_maxTouchPoints=caml_string_of_jsbytes("maxTouchPoints"),
     cst_languages=caml_string_of_jsbytes("languages"),
     cst_language=caml_string_of_jsbytes("language"),
     cst_history=caml_string_of_jsbytes("history"),
     cst_state$0=caml_string_of_jsbytes("state"),
     cst_state=caml_string_of_jsbytes("state"),
     cst_scrollRestoration$0=caml_string_of_jsbytes("scrollRestoration"),
     cst_scrollRestoration=caml_string_of_jsbytes("scrollRestoration"),
     cst_length$5=caml_string_of_jsbytes("length"),
     cst_location$2=caml_string_of_jsbytes("location"),
     cst_location$1=caml_string_of_jsbytes("location"),
     cst_location$0=caml_string_of_jsbytes("location"),
     cst_matches=caml_string_of_jsbytes("matches"),
     cst_devicePixelRatio=caml_string_of_jsbytes("devicePixelRatio"),
     cst_scrollY=caml_string_of_jsbytes("scrollY"),
     cst_scrollX=caml_string_of_jsbytes("scrollX"),
     cst_closed=caml_string_of_jsbytes("closed"),
     cst_timeStamp$0=caml_string_of_jsbytes("timeStamp"),
     cst_profileEnd=caml_string_of_jsbytes("profileEnd"),
     cst_profile=caml_string_of_jsbytes("profile"),
     cst_timeEnd=caml_string_of_jsbytes("timeEnd"),
     cst_timeLog=caml_string_of_jsbytes("timeLog"),
     cst_time=caml_string_of_jsbytes("time"),
     cst_countReset=caml_string_of_jsbytes("countReset"),
     cst_count=caml_string_of_jsbytes("count"),
     cst_groupCollapsed=caml_string_of_jsbytes("groupCollapsed"),
     cst_group=caml_string_of_jsbytes("group"),
     cst_groupEnd=caml_string_of_jsbytes("groupEnd"),
     cst_table=caml_string_of_jsbytes("table"),
     cst_dir=caml_string_of_jsbytes("dir"),
     cst_assert=caml_string_of_jsbytes("assert"),
     cst_debug=caml_string_of_jsbytes("debug"),
     cst_info=caml_string_of_jsbytes("info"),
     cst_warn=caml_string_of_jsbytes("warn"),
     cst_error$1=caml_string_of_jsbytes("error"),
     cst_trace=caml_string_of_jsbytes("trace"),
     cst_log=caml_string_of_jsbytes("log"),
     cst_clear=caml_string_of_jsbytes("clear"),
     cst_signal=caml_string_of_jsbytes("signal"),
     cst_AbortController=caml_string_of_jsbytes("AbortController"),
     cst_aborted=caml_string_of_jsbytes("aborted"),
     cst_fullscreenElement=caml_string_of_jsbytes("fullscreenElement"),
     cst_fullscreenEnabled=caml_string_of_jsbytes("fullscreenEnabled"),
     cst_pointerLockElement$0=caml_string_of_jsbytes("pointerLockElement"),
     cst_visibilityState=caml_string_of_jsbytes("visibilityState"),
     cst_title$0=caml_string_of_jsbytes("title"),
     cst_title=caml_string_of_jsbytes("title"),
     cst_referrer=caml_string_of_jsbytes("referrer"),
     cst_activeElement$0=caml_string_of_jsbytes("activeElement"),
     cst_head=caml_string_of_jsbytes("head"),
     cst_body=caml_string_of_jsbytes("body"),
     cst_documentElement=caml_string_of_jsbytes("documentElement"),
     cst_classList=caml_string_of_jsbytes("classList"),
     cst_files=caml_string_of_jsbytes("files"),
     cst_navigationUI=caml_string_of_jsbytes("navigationUI"),
     cst_pointerLockElement=caml_string_of_jsbytes("pointerLockElement"),
     cst_activeElement=caml_string_of_jsbytes("activeElement"),
     cst_scrollHeight=caml_string_of_jsbytes("scrollHeight"),
     cst_scrollWidth=caml_string_of_jsbytes("scrollWidth"),
     cst_scrollTop=caml_string_of_jsbytes("scrollTop"),
     cst_scrollLeft=caml_string_of_jsbytes("scrollLeft"),
     cst_height$0=caml_string_of_jsbytes("height"),
     cst_width$0=caml_string_of_jsbytes("width"),
     cst_y=caml_string_of_jsbytes("y"),
     cst_x=caml_string_of_jsbytes("x"),
     cst_clientHeight=caml_string_of_jsbytes("clientHeight"),
     cst_clientWidth=caml_string_of_jsbytes("clientWidth"),
     cst_clientTop=caml_string_of_jsbytes("clientTop"),
     cst_clientLeft=caml_string_of_jsbytes("clientLeft"),
     cst_style$1=caml_string_of_jsbytes("style"),
     cst_style$0=caml_string_of_jsbytes("style"),
     cst_style=caml_string_of_jsbytes("style"),
     cst_window=caml_string_of_jsbytes("window"),
     cst_classList$1=caml_string_of_jsbytes("classList"),
     cst_classList$2=caml_string_of_jsbytes("classList"),
     cst_classList$0=caml_string_of_jsbytes("classList"),
     cst_after=caml_string_of_jsbytes("after"),
     cst_before=caml_string_of_jsbytes("before"),
     cst_replaceWith=caml_string_of_jsbytes("replaceWith"),
     cst_nextElementSibling=caml_string_of_jsbytes("nextElementSibling"),
     cst_previousElementSibling=
      caml_string_of_jsbytes("previousElementSibling"),
     cst_append=caml_string_of_jsbytes("append"),
     cst_prepend=caml_string_of_jsbytes("prepend"),
     cst_children=caml_string_of_jsbytes("children"),
     cst_childNodes=caml_string_of_jsbytes("childNodes"),
     cst_firstChild$0=caml_string_of_jsbytes("firstChild"),
     cst_firstChild=caml_string_of_jsbytes("firstChild"),
     cst_parentNode=caml_string_of_jsbytes("parentNode"),
     cst_length$4=caml_string_of_jsbytes("length"),
     cst_nodeValue=caml_string_of_jsbytes("nodeValue"),
     cst_nodeName=caml_string_of_jsbytes("nodeName"),
     cst_nodeType$0=caml_string_of_jsbytes("nodeType"),
     cst_nodeType=caml_string_of_jsbytes("nodeType"),
     cst=caml_string_of_jsbytes("\xc2\xa0"),
     cst_length$3=caml_string_of_jsbytes("length"),
     cst_ownerDocument=caml_string_of_jsbytes("ownerDocument"),
     cst_hash$0=caml_string_of_jsbytes("hash"),
     cst_pathname$0=caml_string_of_jsbytes("pathname"),
     cst_search$0=caml_string_of_jsbytes("search"),
     cst_port$0=caml_string_of_jsbytes("port"),
     cst_hostname$0=caml_string_of_jsbytes("hostname"),
     cst_protocol$0=caml_string_of_jsbytes("protocol"),
     cst_protocol=caml_string_of_jsbytes("protocol"),
     cst_hostname=caml_string_of_jsbytes("hostname"),
     cst_port=caml_string_of_jsbytes("port"),
     cst_pathname=caml_string_of_jsbytes("pathname"),
     cst_search=caml_string_of_jsbytes("search"),
     cst_hash=caml_string_of_jsbytes("hash"),
     cst_atob=caml_string_of_jsbytes("atob"),
     cst_btoa=caml_string_of_jsbytes("btoa"),
     cst_lastModified$0=caml_string_of_jsbytes("lastModified"),
     cst_webkitRelativePath=caml_string_of_jsbytes("webkitRelativePath"),
     cst_name$3=caml_string_of_jsbytes("name"),
     cst_lastModified=caml_string_of_jsbytes("lastModified"),
     cst_error$0=caml_string_of_jsbytes("error"),
     cst_result=caml_string_of_jsbytes("result"),
     cst_FileReader=caml_string_of_jsbytes("FileReader"),
     cst_stream=caml_string_of_jsbytes("stream"),
     cst_type$2=caml_string_of_jsbytes("type"),
     cst_size=caml_string_of_jsbytes("size"),
     cst_type$1=caml_string_of_jsbytes("type"),
     cst_endings=caml_string_of_jsbytes("endings"),
     cst_String$0=caml_string_of_jsbytes("String"),
     cst_TextDecoder=caml_string_of_jsbytes("TextDecoder"),
     cst_TextEncoder=caml_string_of_jsbytes("TextEncoder"),
     cst_name$2=caml_string_of_jsbytes("name"),
     cst_constructor=caml_string_of_jsbytes("constructor"),
     cst_Float32Array$0=caml_string_of_jsbytes("Float32Array"),
     cst_Float64Array$0=caml_string_of_jsbytes("Float64Array"),
     cst_Int16Array$0=caml_string_of_jsbytes("Int16Array"),
     cst_Int32Array$0=caml_string_of_jsbytes("Int32Array"),
     cst_Int8Array$0=caml_string_of_jsbytes("Int8Array"),
     cst_Uint16Array$0=caml_string_of_jsbytes("Uint16Array"),
     cst_Uint32Array$0=caml_string_of_jsbytes("Uint32Array"),
     cst_Uint8Array$0=caml_string_of_jsbytes("Uint8Array"),
     cst_Uint8ClampedArray$0=caml_string_of_jsbytes("Uint8ClampedArray"),
     cst_length$2=caml_string_of_jsbytes("length"),
     cst_Int8Array=caml_string_of_jsbytes("Int8Array"),
     cst_Int16Array=caml_string_of_jsbytes("Int16Array"),
     cst_Int32Array=caml_string_of_jsbytes("Int32Array"),
     cst_Uint8Array=caml_string_of_jsbytes("Uint8Array"),
     cst_Uint8ClampedArray=caml_string_of_jsbytes("Uint8ClampedArray"),
     cst_Uint16Array=caml_string_of_jsbytes("Uint16Array"),
     cst_Uint32Array=caml_string_of_jsbytes("Uint32Array"),
     cst_Float32Array=caml_string_of_jsbytes("Float32Array"),
     cst_Float64Array=caml_string_of_jsbytes("Float64Array"),
     cst_byteLength$0=caml_string_of_jsbytes("byteLength"),
     cst_byteOffset=caml_string_of_jsbytes("byteOffset"),
     cst_buffer=caml_string_of_jsbytes("buffer"),
     cst_byteLength=caml_string_of_jsbytes("byteLength"),
     cst_deltaMode=caml_string_of_jsbytes("deltaMode"),
     cst_deltaZ=caml_string_of_jsbytes("deltaZ"),
     cst_deltaY=caml_string_of_jsbytes("deltaY"),
     cst_deltaX=caml_string_of_jsbytes("deltaX"),
     cst_isPrimary=caml_string_of_jsbytes("isPrimary"),
     cst_pointerType=caml_string_of_jsbytes("pointerType"),
     cst_azimuthAngle=caml_string_of_jsbytes("azimuthAngle"),
     cst_altitudeAngle=caml_string_of_jsbytes("altitudeAngle"),
     cst_twist=caml_string_of_jsbytes("twist"),
     cst_tiltY=caml_string_of_jsbytes("tiltY"),
     cst_tiltX=caml_string_of_jsbytes("tiltX"),
     cst_tangentialPressure=caml_string_of_jsbytes("tangentialPressure"),
     cst_pressure=caml_string_of_jsbytes("pressure"),
     cst_height=caml_string_of_jsbytes("height"),
     cst_width=caml_string_of_jsbytes("width"),
     cst_pointerId=caml_string_of_jsbytes("pointerId"),
     cst_dataTransfer$0=caml_string_of_jsbytes("dataTransfer"),
     cst_metaKey$0=caml_string_of_jsbytes("metaKey"),
     cst_shiftKey$0=caml_string_of_jsbytes("shiftKey"),
     cst_ctrlKey$0=caml_string_of_jsbytes("ctrlKey"),
     cst_altKey$0=caml_string_of_jsbytes("altKey"),
     cst_buttons=caml_string_of_jsbytes("buttons"),
     cst_button=caml_string_of_jsbytes("button"),
     cst_movementY=caml_string_of_jsbytes("movementY"),
     cst_movementX=caml_string_of_jsbytes("movementX"),
     cst_screenY=caml_string_of_jsbytes("screenY"),
     cst_screenX=caml_string_of_jsbytes("screenX"),
     cst_pageY=caml_string_of_jsbytes("pageY"),
     cst_pageX=caml_string_of_jsbytes("pageX"),
     cst_clientY=caml_string_of_jsbytes("clientY"),
     cst_clientX=caml_string_of_jsbytes("clientX"),
     cst_offsetY=caml_string_of_jsbytes("offsetY"),
     cst_offsetX=caml_string_of_jsbytes("offsetX"),
     cst_relatedTarget$0=caml_string_of_jsbytes("relatedTarget"),
     cst_metaKey=caml_string_of_jsbytes("metaKey"),
     cst_shiftKey=caml_string_of_jsbytes("shiftKey"),
     cst_ctrlKey=caml_string_of_jsbytes("ctrlKey"),
     cst_altKey=caml_string_of_jsbytes("altKey"),
     cst_isComposing$0=caml_string_of_jsbytes("isComposing"),
     cst_repeat=caml_string_of_jsbytes("repeat"),
     cst_location=caml_string_of_jsbytes("location"),
     cst_code=caml_string_of_jsbytes("code"),
     cst_key=caml_string_of_jsbytes("key"),
     cst_isComposing=caml_string_of_jsbytes("isComposing"),
     cst_inputType=caml_string_of_jsbytes("inputType"),
     cst_dataTransfer=caml_string_of_jsbytes("dataTransfer"),
     cst_data$0=caml_string_of_jsbytes("data"),
     cst_newURL=caml_string_of_jsbytes("newURL"),
     cst_oldURL=caml_string_of_jsbytes("oldURL"),
     cst_relatedTarget=caml_string_of_jsbytes("relatedTarget"),
     cst_error=caml_string_of_jsbytes("error"),
     cst_colno=caml_string_of_jsbytes("colno"),
     cst_lineno=caml_string_of_jsbytes("lineno"),
     cst_filename=caml_string_of_jsbytes("filename"),
     cst_message$0=caml_string_of_jsbytes("message"),
     cst_data=caml_string_of_jsbytes("data"),
     cst_clipboardData=caml_string_of_jsbytes("clipboardData"),
     cst_items=caml_string_of_jsbytes("items"),
     cst_effectAllowed$0=caml_string_of_jsbytes("effectAllowed"),
     cst_effectAllowed=caml_string_of_jsbytes("effectAllowed"),
     cst_dropEffect$0=caml_string_of_jsbytes("dropEffect"),
     cst_dropEffect=caml_string_of_jsbytes("dropEffect"),
     cst_length$1=caml_string_of_jsbytes("length"),
     cst_type$0=caml_string_of_jsbytes("type"),
     cst_kind=caml_string_of_jsbytes("kind"),
     cst_capture=caml_string_of_jsbytes("capture"),
     cst_once=caml_string_of_jsbytes("once"),
     cst_passive=caml_string_of_jsbytes("passive"),
     cst_timeStamp=caml_string_of_jsbytes("timeStamp"),
     cst_isTrusted=caml_string_of_jsbytes("isTrusted"),
     cst_composed$0=caml_string_of_jsbytes("composed"),
     cst_defaultPrevented=caml_string_of_jsbytes("defaultPrevented"),
     cst_cancelable$0=caml_string_of_jsbytes("cancelable"),
     cst_bubbles$0=caml_string_of_jsbytes("bubbles"),
     cst_eventPhase=caml_string_of_jsbytes("eventPhase"),
     cst_currentTarget=caml_string_of_jsbytes("currentTarget"),
     cst_target=caml_string_of_jsbytes("target"),
     cst_type=caml_string_of_jsbytes("type"),
     cst_bubbles=caml_string_of_jsbytes("bubbles"),
     cst_cancelable=caml_string_of_jsbytes("cancelable"),
     cst_composed=caml_string_of_jsbytes("composed"),
     cst_Event=caml_string_of_jsbytes("Event"),
     cst_ArrayBuffer=caml_string_of_jsbytes("ArrayBuffer"),
     cst_DataView=caml_string_of_jsbytes("DataView"),
     cst_Blob=caml_string_of_jsbytes("Blob"),
     cst_File=caml_string_of_jsbytes("File"),
     cst_JSON=caml_string_of_jsbytes("JSON"),
     cst_encodeURI=caml_string_of_jsbytes("encodeURI"),
     cst_decodeURI=caml_string_of_jsbytes("decodeURI"),
     cst_URL=caml_string_of_jsbytes("URL"),
     cst_URLSearchParams=caml_string_of_jsbytes("URLSearchParams"),
     cst_encodeURIComponent=caml_string_of_jsbytes("encodeURIComponent"),
     cst_decodeURIComponent=caml_string_of_jsbytes("decodeURIComponent"),
     cst_document=caml_string_of_jsbytes("document"),
     cst_documentElement$0=caml_string_of_jsbytes("documentElement"),
     cst_console=caml_string_of_jsbytes("console"),
     cst_console$0=caml_string_of_jsbytes("console"),
     cst_navigator=caml_string_of_jsbytes("navigator"),
     cst_performance=caml_string_of_jsbytes("performance"),
     cst_window$0=caml_string_of_jsbytes("window"),
     cst_isSecureContext=caml_string_of_jsbytes("isSecureContext"),
     cst_reason=caml_string_of_jsbytes("reason"),
     cst_code$2=caml_string_of_jsbytes("code"),
     cst_wasClean=caml_string_of_jsbytes("wasClean"),
     cst_protocol$1=caml_string_of_jsbytes("protocol"),
     cst_extensions=caml_string_of_jsbytes("extensions"),
     cst_bufferedAmount=caml_string_of_jsbytes("bufferedAmount"),
     cst_readyState$1=caml_string_of_jsbytes("readyState"),
     cst_url$2=caml_string_of_jsbytes("url"),
     cst_binaryType$0=caml_string_of_jsbytes("binaryType"),
     cst_binaryType=caml_string_of_jsbytes("binaryType"),
     cst_storageArea=caml_string_of_jsbytes("storageArea"),
     cst_url$1=caml_string_of_jsbytes("url"),
     cst_newValue=caml_string_of_jsbytes("newValue"),
     cst_oldValue=caml_string_of_jsbytes("oldValue"),
     cst_key$0=caml_string_of_jsbytes("key"),
     cst_length$7=caml_string_of_jsbytes("length"),
     cst_sessionStorage=caml_string_of_jsbytes("sessionStorage"),
     cst_localStorage=caml_string_of_jsbytes("localStorage"),
     cst_action$2=caml_string_of_jsbytes("action"),
     cst_notification=caml_string_of_jsbytes("notification"),
     cst_title$3=caml_string_of_jsbytes("title"),
     cst_timestamp$1=caml_string_of_jsbytes("timestamp"),
     cst_silent$0=caml_string_of_jsbytes("silent"),
     cst_requireInteraction$0=caml_string_of_jsbytes("requireInteraction"),
     cst_renotify$0=caml_string_of_jsbytes("renotify"),
     cst_image$0=caml_string_of_jsbytes("image"),
     cst_icon$2=caml_string_of_jsbytes("icon"),
     cst_tag=caml_string_of_jsbytes("tag"),
     cst_lang$0=caml_string_of_jsbytes("lang"),
     cst_dir$1=caml_string_of_jsbytes("dir"),
     cst_data$4=caml_string_of_jsbytes("data"),
     cst_body$3=caml_string_of_jsbytes("body"),
     cst_badge$0=caml_string_of_jsbytes("badge"),
     cst_actions$0=caml_string_of_jsbytes("actions"),
     cst_dir$0=caml_string_of_jsbytes("dir"),
     cst_lang=caml_string_of_jsbytes("lang"),
     cst_body$2=caml_string_of_jsbytes("body"),
     cst_image=caml_string_of_jsbytes("image"),
     cst_icon$1=caml_string_of_jsbytes("icon"),
     cst_badge=caml_string_of_jsbytes("badge"),
     cst_timestamp$0=caml_string_of_jsbytes("timestamp"),
     cst_renotify=caml_string_of_jsbytes("renotify"),
     cst_silent=caml_string_of_jsbytes("silent"),
     cst_requireInteraction=caml_string_of_jsbytes("requireInteraction"),
     cst_data$3=caml_string_of_jsbytes("data"),
     cst_actions=caml_string_of_jsbytes("actions"),
     cst_icon$0=caml_string_of_jsbytes("icon"),
     cst_title$2=caml_string_of_jsbytes("title"),
     cst_action$1=caml_string_of_jsbytes("action"),
     cst_action$0=caml_string_of_jsbytes("action"),
     cst_title$1=caml_string_of_jsbytes("title"),
     cst_icon=caml_string_of_jsbytes("icon"),
     cst_maxActions=caml_string_of_jsbytes("maxActions"),
     cst_permission=caml_string_of_jsbytes("permission"),
     cst_ports=caml_string_of_jsbytes("ports"),
     cst_source=caml_string_of_jsbytes("source"),
     cst_lastEventId=caml_string_of_jsbytes("lastEventId"),
     cst_origin=caml_string_of_jsbytes("origin"),
     cst_data$2=caml_string_of_jsbytes("data"),
     cst_name$6=caml_string_of_jsbytes("name"),
     cst_port2=caml_string_of_jsbytes("port2"),
     cst_port1=caml_string_of_jsbytes("port1"),
     cst_targetOrigin=caml_string_of_jsbytes("targetOrigin"),
     cst_transfer=caml_string_of_jsbytes("transfer"),
     cst_textTracks=caml_string_of_jsbytes("textTracks"),
     cst_videoTracks=caml_string_of_jsbytes("videoTracks"),
     cst_audioTracks=caml_string_of_jsbytes("audioTracks"),
     cst_defaultMuted$0=caml_string_of_jsbytes("defaultMuted"),
     cst_defaultMuted=caml_string_of_jsbytes("defaultMuted"),
     cst_muted$1=caml_string_of_jsbytes("muted"),
     cst_muted$0=caml_string_of_jsbytes("muted"),
     cst_volume$0=caml_string_of_jsbytes("volume"),
     cst_volume=caml_string_of_jsbytes("volume"),
     cst_controls$0=caml_string_of_jsbytes("controls"),
     cst_controls=caml_string_of_jsbytes("controls"),
     cst_loop$0=caml_string_of_jsbytes("loop"),
     cst_loop=caml_string_of_jsbytes("loop"),
     cst_autoplay$0=caml_string_of_jsbytes("autoplay"),
     cst_autoplay=caml_string_of_jsbytes("autoplay"),
     cst_ended=caml_string_of_jsbytes("ended"),
     cst_seekable=caml_string_of_jsbytes("seekable"),
     cst_played=caml_string_of_jsbytes("played"),
     cst_playbackRate$0=caml_string_of_jsbytes("playbackRate"),
     cst_playbackRate=caml_string_of_jsbytes("playbackRate"),
     cst_defaultPlaybackRate$0=caml_string_of_jsbytes("defaultPlaybackRate"),
     cst_defaultPlaybackRate=caml_string_of_jsbytes("defaultPlaybackRate"),
     cst_paused=caml_string_of_jsbytes("paused"),
     cst_duration$0=caml_string_of_jsbytes("duration"),
     cst_currentTime$0=caml_string_of_jsbytes("currentTime"),
     cst_currentTime=caml_string_of_jsbytes("currentTime"),
     cst_seeking=caml_string_of_jsbytes("seeking"),
     cst_readyState$0=caml_string_of_jsbytes("readyState"),
     cst_buffered=caml_string_of_jsbytes("buffered"),
     cst_preload$0=caml_string_of_jsbytes("preload"),
     cst_preload=caml_string_of_jsbytes("preload"),
     cst_networkState=caml_string_of_jsbytes("networkState"),
     cst_crossOrigin$0=caml_string_of_jsbytes("crossOrigin"),
     cst_crossOrigin=caml_string_of_jsbytes("crossOrigin"),
     cst_currentSrc=caml_string_of_jsbytes("currentSrc"),
     cst_srcObject$0=caml_string_of_jsbytes("srcObject"),
     cst_srcObject=caml_string_of_jsbytes("srcObject"),
     cst_src$0=caml_string_of_jsbytes("src"),
     cst_src=caml_string_of_jsbytes("src"),
     cst_error$3=caml_string_of_jsbytes("error"),
     cst_length$6=caml_string_of_jsbytes("length"),
     cst_message$2=caml_string_of_jsbytes("message"),
     cst_code$1=caml_string_of_jsbytes("code"),
     cst_mediaDevices=caml_string_of_jsbytes("mediaDevices"),
     cst_groupId=caml_string_of_jsbytes("groupId"),
     cst_label$0=caml_string_of_jsbytes("label"),
     cst_kind$1=caml_string_of_jsbytes("kind"),
     cst_deviceId=caml_string_of_jsbytes("deviceId"),
     cst_error$2=caml_string_of_jsbytes("error"),
     cst_timecode=caml_string_of_jsbytes("timecode"),
     cst_data$1=caml_string_of_jsbytes("data"),
     cst_start=caml_string_of_jsbytes("start"),
     cst_audioBitrateMode$0=caml_string_of_jsbytes("audioBitrateMode"),
     cst_audioBitsPerSecond$0=caml_string_of_jsbytes("audioBitsPerSecond"),
     cst_videoBitsPerSecond$0=caml_string_of_jsbytes("videoBitsPerSecond"),
     cst_state$1=caml_string_of_jsbytes("state"),
     cst_mimeType$0=caml_string_of_jsbytes("mimeType"),
     cst_stream$0=caml_string_of_jsbytes("stream"),
     cst_mimeType=caml_string_of_jsbytes("mimeType"),
     cst_audioBitsPerSecond=caml_string_of_jsbytes("audioBitsPerSecond"),
     cst_videoBitsPerSecond=caml_string_of_jsbytes("videoBitsPerSecond"),
     cst_bitsPerSecond=caml_string_of_jsbytes("bitsPerSecond"),
     cst_audioBitrateMode=caml_string_of_jsbytes("audioBitrateMode"),
     cst_active=caml_string_of_jsbytes("active"),
     cst_id$0=caml_string_of_jsbytes("id"),
     cst_audio=caml_string_of_jsbytes("audio"),
     cst_video=caml_string_of_jsbytes("video"),
     cst_track=caml_string_of_jsbytes("track"),
     cst_applyConstraints=caml_string_of_jsbytes("applyConstraints"),
     cst_enabled$0=caml_string_of_jsbytes("enabled"),
     cst_enabled=caml_string_of_jsbytes("enabled"),
     cst_readyState=caml_string_of_jsbytes("readyState"),
     cst_muted=caml_string_of_jsbytes("muted"),
     cst_label=caml_string_of_jsbytes("label"),
     cst_kind$0=caml_string_of_jsbytes("kind"),
     cst_isolated=caml_string_of_jsbytes("isolated"),
     cst_id=caml_string_of_jsbytes("id"),
     cst_Object=caml_string_of_jsbytes("Object"),
     cst_exact$2=caml_string_of_jsbytes("exact"),
     cst_ideal$2=caml_string_of_jsbytes("ideal"),
     cst_min$4=caml_string_of_jsbytes("min"),
     cst_max$4=caml_string_of_jsbytes("max"),
     cst_exact$1=caml_string_of_jsbytes("exact"),
     cst_ideal$1=caml_string_of_jsbytes("ideal"),
     cst_max$3=caml_string_of_jsbytes("max"),
     cst_min$3=caml_string_of_jsbytes("min"),
     cst_min$2=caml_string_of_jsbytes("min"),
     cst_max$2=caml_string_of_jsbytes("max"),
     cst_min$1=caml_string_of_jsbytes("min"),
     cst_max$1=caml_string_of_jsbytes("max"),
     cst_exact$0=caml_string_of_jsbytes("exact"),
     cst_ideal$0=caml_string_of_jsbytes("ideal"),
     cst_max$0=caml_string_of_jsbytes("max"),
     cst_min$0=caml_string_of_jsbytes("min"),
     cst_min=caml_string_of_jsbytes("min"),
     cst_max=caml_string_of_jsbytes("max"),
     cst_exact=caml_string_of_jsbytes("exact"),
     cst_ideal=caml_string_of_jsbytes("ideal"),
     cst_enableHighAccuracy=caml_string_of_jsbytes("enableHighAccuracy"),
     cst_timeout=caml_string_of_jsbytes("timeout"),
     cst_maximumAge=caml_string_of_jsbytes("maximumAge"),
     cst_geolocation=caml_string_of_jsbytes("geolocation"),
     cst_timestamp=caml_string_of_jsbytes("timestamp"),
     cst_speed=caml_string_of_jsbytes("speed"),
     cst_heading=caml_string_of_jsbytes("heading"),
     cst_altitudeAccuracy=caml_string_of_jsbytes("altitudeAccuracy"),
     cst_accuracy=caml_string_of_jsbytes("accuracy"),
     cst_altitude=caml_string_of_jsbytes("altitude"),
     cst_longitude=caml_string_of_jsbytes("longitude"),
     cst_latitude=caml_string_of_jsbytes("latitude"),
     cst_coords=caml_string_of_jsbytes("coords"),
     cst_message$1=caml_string_of_jsbytes("message"),
     cst_code$0=caml_string_of_jsbytes("code"),
     cst_handled=caml_string_of_jsbytes("handled"),
     cst_replacesClientId=caml_string_of_jsbytes("replacesClientId"),
     cst_resultingClientId=caml_string_of_jsbytes("resultingClientId"),
     cst_clientId=caml_string_of_jsbytes("clientId"),
     cst_preloadReponse=caml_string_of_jsbytes("preloadReponse"),
     cst_request=caml_string_of_jsbytes("request"),
     cst_ignoreSearch=caml_string_of_jsbytes("ignoreSearch"),
     cst_ignoreMethod=caml_string_of_jsbytes("ignoreMethod"),
     cst_ignoreVary=caml_string_of_jsbytes("ignoreVary"),
     cst_cacheName=caml_string_of_jsbytes("cacheName"),
     cst_url$0=caml_string_of_jsbytes("url"),
     cst_statusText$0=caml_string_of_jsbytes("statusText"),
     cst_status$0=caml_string_of_jsbytes("status"),
     cst_redirected=caml_string_of_jsbytes("redirected"),
     cst_ok=caml_string_of_jsbytes("ok"),
     cst_headers$2=caml_string_of_jsbytes("headers"),
     cst_redirect$1=caml_string_of_jsbytes("redirect"),
     cst_headers$1=caml_string_of_jsbytes("headers"),
     cst_status=caml_string_of_jsbytes("status"),
     cst_statusText=caml_string_of_jsbytes("statusText"),
     cst_url=caml_string_of_jsbytes("url"),
     cst_signal$1=caml_string_of_jsbytes("signal"),
     cst_referrerPolicy$0=caml_string_of_jsbytes("referrerPolicy"),
     cst_referrer$1=caml_string_of_jsbytes("referrer"),
     cst_redirect$0=caml_string_of_jsbytes("redirect"),
     cst_mode$0=caml_string_of_jsbytes("mode"),
     cst_method$1=caml_string_of_jsbytes("method'"),
     cst_keepalive$0=caml_string_of_jsbytes("keepalive"),
     cst_isReloadNavigation=caml_string_of_jsbytes("isReloadNavigation"),
     cst_isHistoryNavigation=caml_string_of_jsbytes("isHistoryNavigation"),
     cst_integrity$0=caml_string_of_jsbytes("integrity"),
     cst_headers$0=caml_string_of_jsbytes("headers"),
     cst_destination=caml_string_of_jsbytes("destination"),
     cst_credentials$0=caml_string_of_jsbytes("credentials"),
     cst_cache$0=caml_string_of_jsbytes("cache"),
     cst_body$1=caml_string_of_jsbytes("body"),
     cst_cache=caml_string_of_jsbytes("cache"),
     cst_credentials=caml_string_of_jsbytes("credentials"),
     cst_headers=caml_string_of_jsbytes("headers"),
     cst_integrity=caml_string_of_jsbytes("integrity"),
     cst_keepalive=caml_string_of_jsbytes("keepalive"),
     cst_method$0=caml_string_of_jsbytes("method"),
     cst_mode=caml_string_of_jsbytes("mode"),
     cst_redirect=caml_string_of_jsbytes("redirect"),
     cst_referrer$0=caml_string_of_jsbytes("referrer"),
     cst_referrerPolicy=caml_string_of_jsbytes("referrerPolicy"),
     cst_signal$0=caml_string_of_jsbytes("signal"),
     cst_body$0=caml_string_of_jsbytes("body"),
     cst_bodyUsed=caml_string_of_jsbytes("bodyUsed"),
     cst_submitter=caml_string_of_jsbytes("submitter"),
     cst_formData=caml_string_of_jsbytes("formData"),
     cst_URLSearchParams$0=caml_string_of_jsbytes("URLSearchParams"),
     cst_File$1=caml_string_of_jsbytes("File"),
     cst_File$0=caml_string_of_jsbytes("File"),
     cst_requestSubmit=caml_string_of_jsbytes("requestSubmit"),
     cst_noValidate=caml_string_of_jsbytes("noValidate"),
     cst_autocomplete=caml_string_of_jsbytes("autocomplete"),
     cst_acceptCharset=caml_string_of_jsbytes("acceptCharset"),
     cst_enctype=caml_string_of_jsbytes("enctype"),
     cst_action=caml_string_of_jsbytes("action"),
     cst_target$0=caml_string_of_jsbytes("target"),
     cst_method=caml_string_of_jsbytes("method"),
     cst_name$5=caml_string_of_jsbytes("name"),
     cst_clipboard=caml_string_of_jsbytes("clipboard"),
     cst_types=caml_string_of_jsbytes("types"),
     cst_delayed=caml_string_of_jsbytes("delayed"),
     cst_lastModified$1=caml_string_of_jsbytes("lastModified"),
     cst_presentationStyle$0=caml_string_of_jsbytes("presentationStyle"),
     cst_presentationStyle=caml_string_of_jsbytes("presentationStyle"),
     cst_ClipboardItem=caml_string_of_jsbytes("ClipboardItem"),
     cst_FormData=caml_string_of_jsbytes("FormData"),
     cst_Headers=caml_string_of_jsbytes("Headers"),
     cst_Request=caml_string_of_jsbytes("Request"),
     cst_Response=caml_string_of_jsbytes("Response"),
     cst_fetch=caml_string_of_jsbytes("fetch"),
     cst_caches=caml_string_of_jsbytes("caches"),
     cst_MediaStream=caml_string_of_jsbytes("MediaStream"),
     cst_MediaRecorder=caml_string_of_jsbytes("MediaRecorder"),
     cst_MessageChannel=caml_string_of_jsbytes("MessageChannel"),
     cst_BroadcastChannel=caml_string_of_jsbytes("BroadcastChannel"),
     cst_Notification=caml_string_of_jsbytes("Notification"),
     cst_WebSocket=caml_string_of_jsbytes("WebSocket"),
     cst_precision=caml_string_of_jsbytes("precision"),
     cst_rangeMax=caml_string_of_jsbytes("rangeMax"),
     cst_rangeMin=caml_string_of_jsbytes("rangeMin"),
     cst_name$7=caml_string_of_jsbytes("name"),
     cst_type$6=caml_string_of_jsbytes("type"),
     cst_size$0=caml_string_of_jsbytes("size"),
     cst_isContextLost=caml_string_of_jsbytes("isContextLost"),
     cst_drawingBufferHeight=caml_string_of_jsbytes("drawingBufferHeight"),
     cst_drawingBufferWidth=caml_string_of_jsbytes("drawingBufferWidth"),
     cst_canvas$0=caml_string_of_jsbytes("canvas"),
     cst_webgl=caml_string_of_jsbytes("webgl"),
     cst_webgl2=caml_string_of_jsbytes("webgl2"),
     cst_desynchronized$1=caml_string_of_jsbytes("desynchronized"),
     cst_powerPreference$0=caml_string_of_jsbytes("powerPreference"),
     cst_preserveDrawingBuffer$0=
      caml_string_of_jsbytes("preserveDrawingBuffer"),
     cst_premultipliedApha$0=caml_string_of_jsbytes("premultipliedApha"),
     cst_antialias$0=caml_string_of_jsbytes("antialias"),
     cst_stencil$0=caml_string_of_jsbytes("stencil"),
     cst_depth$0=caml_string_of_jsbytes("depth"),
     cst_alpha$1=caml_string_of_jsbytes("alpha"),
     cst_alpha$0=caml_string_of_jsbytes("alpha"),
     cst_depth=caml_string_of_jsbytes("depth"),
     cst_stencil=caml_string_of_jsbytes("stencil"),
     cst_antialias=caml_string_of_jsbytes("antialias"),
     cst_premultipliedApha=caml_string_of_jsbytes("premultipliedApha"),
     cst_preserveDrawingBuffer=caml_string_of_jsbytes("preserveDrawingBuffer"),
     cst_powerPreference=caml_string_of_jsbytes("powerPreference"),
     cst_failIfMajorPerformanceCave=
      caml_string_of_jsbytes("failIfMajorPerformanceCaveat"),
     cst_desynchronized$0=caml_string_of_jsbytes("desynchronized"),
     cst_data$5=caml_string_of_jsbytes("data"),
     cst_height$4=caml_string_of_jsbytes("height"),
     cst_width$5=caml_string_of_jsbytes("width"),
     cst_ideographicBaseline=caml_string_of_jsbytes("ideographicBaseline"),
     cst_alphabeticBaseline=caml_string_of_jsbytes("alphabeticBaseline"),
     cst_hangingBaseline=caml_string_of_jsbytes("hangingBaseline"),
     cst_emHeightDescent=caml_string_of_jsbytes("emHeightDescent"),
     cst_emHeightAscent=caml_string_of_jsbytes("emHeightAscent"),
     cst_actualBoundingBoxDescent=
      caml_string_of_jsbytes("actualBoundingBoxDescent"),
     cst_actualBoundingBoxAscent=
      caml_string_of_jsbytes("actualBoundingBoxAscent"),
     cst_fontBoundingBoxDescent=
      caml_string_of_jsbytes("fontBoundingBoxDescent"),
     cst_fontBoundingBoxAscent=caml_string_of_jsbytes("fontBoundingBoxAscent"),
     cst_actualBoundingBoxRight=
      caml_string_of_jsbytes("actualBoundingBoxRight"),
     cst_actualBoundingBoxLeft=caml_string_of_jsbytes("actualBoundingBoxLeft"),
     cst_width$4=caml_string_of_jsbytes("width"),
     cst_strokeText=caml_string_of_jsbytes("strokeText"),
     cst_fillText=caml_string_of_jsbytes("fillText"),
     cst_direction$0=caml_string_of_jsbytes("direction"),
     cst_direction=caml_string_of_jsbytes("direction"),
     cst_textBaseline$0=caml_string_of_jsbytes("textBaseline"),
     cst_textBaseline=caml_string_of_jsbytes("textBaseline"),
     cst_textAlign$0=caml_string_of_jsbytes("textAlign"),
     cst_textAlign=caml_string_of_jsbytes("textAlign"),
     cst_font$0=caml_string_of_jsbytes("font"),
     cst_font=caml_string_of_jsbytes("font"),
     cst_shadowColor$0=caml_string_of_jsbytes("shadowColor"),
     cst_shadowColor=caml_string_of_jsbytes("shadowColor"),
     cst_shadowOffsetY$0=caml_string_of_jsbytes("shadowOffsetY"),
     cst_shadowOffsetY=caml_string_of_jsbytes("shadowOffsetY"),
     cst_shadowOffsetX$0=caml_string_of_jsbytes("shadowOffsetX"),
     cst_shadowOffsetX=caml_string_of_jsbytes("shadowOffsetX"),
     cst_shadowBlur$0=caml_string_of_jsbytes("shadowBlur"),
     cst_shadowBlur=caml_string_of_jsbytes("shadowBlur"),
     cst_lineDashOffset$0=caml_string_of_jsbytes("lineDashOffset"),
     cst_lineDashOffset=caml_string_of_jsbytes("lineDashOffset"),
     cst_miterLimit$0=caml_string_of_jsbytes("miterLimit"),
     cst_miterLimit=caml_string_of_jsbytes("miterLimit"),
     cst_lineJoin$0=caml_string_of_jsbytes("lineJoin"),
     cst_lineJoin=caml_string_of_jsbytes("lineJoin"),
     cst_lineCap$0=caml_string_of_jsbytes("lineCap"),
     cst_lineCap=caml_string_of_jsbytes("lineCap"),
     cst_lineWidth$0=caml_string_of_jsbytes("lineWidth"),
     cst_lineWidth=caml_string_of_jsbytes("lineWidth"),
     cst_fillStyle=caml_string_of_jsbytes("fillStyle"),
     cst_strokeStyle=caml_string_of_jsbytes("strokeStyle"),
     cst_filter$0=caml_string_of_jsbytes("filter"),
     cst_filter=caml_string_of_jsbytes("filter"),
     cst_globalCompositeOperation$0=
      caml_string_of_jsbytes("globalCompositeOperation"),
     cst_globalCompositeOperation=
      caml_string_of_jsbytes("globalCompositeOperation"),
     cst_globalAlpha$0=caml_string_of_jsbytes("globalAlpha"),
     cst_globalAlpha=caml_string_of_jsbytes("globalAlpha"),
     cst_imageSmoothingQuality$0=
      caml_string_of_jsbytes("imageSmoothingQuality"),
     cst_imageSmoothingQuality=caml_string_of_jsbytes("imageSmoothingQuality"),
     cst_imageSmoothingEnabled$0=
      caml_string_of_jsbytes("imageSmoothingEnabled"),
     cst_imageSmoothingEnabled=caml_string_of_jsbytes("imageSmoothingEnabled"),
     cst_canvas=caml_string_of_jsbytes("canvas"),
     cst_desynchronized=caml_string_of_jsbytes("desynchronized"),
     cst_alpha=caml_string_of_jsbytes("alpha"),
     cst_addPath=caml_string_of_jsbytes("addPath"),
     cst_captureStrseam=caml_string_of_jsbytes("captureStrseam"),
     cst_toBlob=caml_string_of_jsbytes("toBlob"),
     cst_toDataURL=caml_string_of_jsbytes("toDataURL"),
     cst_type$5=caml_string_of_jsbytes("type"),
     cst_quality$0=caml_string_of_jsbytes("quality"),
     cst_type$4=caml_string_of_jsbytes("type"),
     cst_quality=caml_string_of_jsbytes("quality"),
     cst_height$3=caml_string_of_jsbytes("height"),
     cst_width$3=caml_string_of_jsbytes("width"),
     cst_height$2=caml_string_of_jsbytes("height"),
     cst_width$2=caml_string_of_jsbytes("width"),
     cst_width$1=caml_string_of_jsbytes("width"),
     cst_height$1=caml_string_of_jsbytes("height"),
     cst_w=caml_string_of_jsbytes("w"),
     cst_z=caml_string_of_jsbytes("z"),
     cst_y$0=caml_string_of_jsbytes("y"),
     cst_x$0=caml_string_of_jsbytes("x"),
     cst_f=caml_string_of_jsbytes("f"),
     cst_e=caml_string_of_jsbytes("e"),
     cst_d=caml_string_of_jsbytes("d"),
     cst_c=caml_string_of_jsbytes("c"),
     cst_b=caml_string_of_jsbytes("b"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_m44=caml_string_of_jsbytes("m44"),
     cst_m43=caml_string_of_jsbytes("m43"),
     cst_m42=caml_string_of_jsbytes("m42"),
     cst_m41=caml_string_of_jsbytes("m41"),
     cst_m34=caml_string_of_jsbytes("m34"),
     cst_m33=caml_string_of_jsbytes("m33"),
     cst_m32=caml_string_of_jsbytes("m32"),
     cst_m31=caml_string_of_jsbytes("m31"),
     cst_m24=caml_string_of_jsbytes("m24"),
     cst_m23=caml_string_of_jsbytes("m23"),
     cst_m22=caml_string_of_jsbytes("m22"),
     cst_m21=caml_string_of_jsbytes("m21"),
     cst_m14=caml_string_of_jsbytes("m14"),
     cst_m13=caml_string_of_jsbytes("m13"),
     cst_m12=caml_string_of_jsbytes("m12"),
     cst_m11=caml_string_of_jsbytes("m11"),
     cst_isIdentity=caml_string_of_jsbytes("isIdentity"),
     cst_is2D=caml_string_of_jsbytes("is2D"),
     cst_DOMMatrixReadOnly=caml_string_of_jsbytes("DOMMatrixReadOnly"),
     cst_DOMPointReadOnly=caml_string_of_jsbytes("DOMPointReadOnly"),
     cst_Path2D=caml_string_of_jsbytes("Path2D"),
     cst_ImageData=caml_string_of_jsbytes("ImageData"),
     cst_WebGLRenderingContext=caml_string_of_jsbytes("WebGLRenderingContext"),
     cst_DEPTH_BUFFER_BIT=caml_string_of_jsbytes("DEPTH_BUFFER_BIT"),
     cst_STENCIL_BUFFER_BIT=caml_string_of_jsbytes("STENCIL_BUFFER_BIT"),
     cst_COLOR_BUFFER_BIT=caml_string_of_jsbytes("COLOR_BUFFER_BIT"),
     cst_POINTS=caml_string_of_jsbytes("POINTS"),
     cst_LINES=caml_string_of_jsbytes("LINES"),
     cst_LINE_LOOP=caml_string_of_jsbytes("LINE_LOOP"),
     cst_LINE_STRIP=caml_string_of_jsbytes("LINE_STRIP"),
     cst_TRIANGLES=caml_string_of_jsbytes("TRIANGLES"),
     cst_TRIANGLE_STRIP=caml_string_of_jsbytes("TRIANGLE_STRIP"),
     cst_TRIANGLE_FAN=caml_string_of_jsbytes("TRIANGLE_FAN"),
     cst_ZERO=caml_string_of_jsbytes("ZERO"),
     cst_ONE=caml_string_of_jsbytes("ONE"),
     cst_SRC_COLOR=caml_string_of_jsbytes("SRC_COLOR"),
     cst_ONE_MINUS_SRC_COLOR=caml_string_of_jsbytes("ONE_MINUS_SRC_COLOR"),
     cst_SRC_ALPHA=caml_string_of_jsbytes("SRC_ALPHA"),
     cst_ONE_MINUS_SRC_ALPHA=caml_string_of_jsbytes("ONE_MINUS_SRC_ALPHA"),
     cst_DST_ALPHA=caml_string_of_jsbytes("DST_ALPHA"),
     cst_ONE_MINUS_DST_ALPHA=caml_string_of_jsbytes("ONE_MINUS_DST_ALPHA"),
     cst_DST_COLOR=caml_string_of_jsbytes("DST_COLOR"),
     cst_ONE_MINUS_DST_COLOR=caml_string_of_jsbytes("ONE_MINUS_DST_COLOR"),
     cst_SRC_ALPHA_SATURATE=caml_string_of_jsbytes("SRC_ALPHA_SATURATE"),
     cst_FUNC_ADD=caml_string_of_jsbytes("FUNC_ADD"),
     cst_BLEND_EQUATION=caml_string_of_jsbytes("BLEND_EQUATION"),
     cst_BLEND_EQUATION_RGB=caml_string_of_jsbytes("BLEND_EQUATION_RGB"),
     cst_BLEND_EQUATION_ALPHA=caml_string_of_jsbytes("BLEND_EQUATION_ALPHA"),
     cst_FUNC_SUBTRACT=caml_string_of_jsbytes("FUNC_SUBTRACT"),
     cst_FUNC_REVERSE_SUBTRACT=caml_string_of_jsbytes("FUNC_REVERSE_SUBTRACT"),
     cst_BLEND_DST_RGB=caml_string_of_jsbytes("BLEND_DST_RGB"),
     cst_BLEND_SRC_RGB=caml_string_of_jsbytes("BLEND_SRC_RGB"),
     cst_BLEND_DST_ALPHA=caml_string_of_jsbytes("BLEND_DST_ALPHA"),
     cst_BLEND_SRC_ALPHA=caml_string_of_jsbytes("BLEND_SRC_ALPHA"),
     cst_CONSTANT_COLOR=caml_string_of_jsbytes("CONSTANT_COLOR"),
     cst_ONE_MINUS_CONSTANT_COLOR=
      caml_string_of_jsbytes("ONE_MINUS_CONSTANT_COLOR"),
     cst_CONSTANT_ALPHA=caml_string_of_jsbytes("CONSTANT_ALPHA"),
     cst_ONE_MINUS_CONSTANT_ALPHA=
      caml_string_of_jsbytes("ONE_MINUS_CONSTANT_ALPHA"),
     cst_BLEND_COLOR=caml_string_of_jsbytes("BLEND_COLOR"),
     cst_ARRAY_BUFFER=caml_string_of_jsbytes("ARRAY_BUFFER"),
     cst_ELEMENT_ARRAY_BUFFER=caml_string_of_jsbytes("ELEMENT_ARRAY_BUFFER"),
     cst_ARRAY_BUFFER_BINDING=caml_string_of_jsbytes("ARRAY_BUFFER_BINDING"),
     cst_ELEMENT_ARRAY_BUFFER_BINDI=
      caml_string_of_jsbytes("ELEMENT_ARRAY_BUFFER_BINDING"),
     cst_STREAM_DRAW=caml_string_of_jsbytes("STREAM_DRAW"),
     cst_STATIC_DRAW=caml_string_of_jsbytes("STATIC_DRAW"),
     cst_DYNAMIC_DRAW=caml_string_of_jsbytes("DYNAMIC_DRAW"),
     cst_BUFFER_SIZE=caml_string_of_jsbytes("BUFFER_SIZE"),
     cst_BUFFER_USAGE=caml_string_of_jsbytes("BUFFER_USAGE"),
     cst_CURRENT_VERTEX_ATTRIB=caml_string_of_jsbytes("CURRENT_VERTEX_ATTRIB"),
     cst_FRONT=caml_string_of_jsbytes("FRONT"),
     cst_BACK=caml_string_of_jsbytes("BACK"),
     cst_FRONT_AND_BACK=caml_string_of_jsbytes("FRONT_AND_BACK"),
     cst_CULL_FACE=caml_string_of_jsbytes("CULL_FACE"),
     cst_BLEND=caml_string_of_jsbytes("BLEND"),
     cst_DITHER=caml_string_of_jsbytes("DITHER"),
     cst_STENCIL_TEST=caml_string_of_jsbytes("STENCIL_TEST"),
     cst_DEPTH_TEST=caml_string_of_jsbytes("DEPTH_TEST"),
     cst_SCISSOR_TEST=caml_string_of_jsbytes("SCISSOR_TEST"),
     cst_POLYGON_OFFSET_FILL=caml_string_of_jsbytes("POLYGON_OFFSET_FILL"),
     cst_SAMPLE_ALPHA_TO_COVERAGE=
      caml_string_of_jsbytes("SAMPLE_ALPHA_TO_COVERAGE"),
     cst_SAMPLE_COVERAGE=caml_string_of_jsbytes("SAMPLE_COVERAGE"),
     cst_NO_ERROR=caml_string_of_jsbytes("NO_ERROR"),
     cst_INVALID_ENUM=caml_string_of_jsbytes("INVALID_ENUM"),
     cst_INVALID_VALUE=caml_string_of_jsbytes("INVALID_VALUE"),
     cst_INVALID_OPERATION=caml_string_of_jsbytes("INVALID_OPERATION"),
     cst_OUT_OF_MEMORY=caml_string_of_jsbytes("OUT_OF_MEMORY"),
     cst_CW=caml_string_of_jsbytes("CW"),
     cst_CCW=caml_string_of_jsbytes("CCW"),
     cst_LINE_WIDTH=caml_string_of_jsbytes("LINE_WIDTH"),
     cst_ALIASED_POINT_SIZE_RANGE=
      caml_string_of_jsbytes("ALIASED_POINT_SIZE_RANGE"),
     cst_ALIASED_LINE_WIDTH_RANGE=
      caml_string_of_jsbytes("ALIASED_LINE_WIDTH_RANGE"),
     cst_CULL_FACE_MODE=caml_string_of_jsbytes("CULL_FACE_MODE"),
     cst_FRONT_FACE=caml_string_of_jsbytes("FRONT_FACE"),
     cst_DEPTH_RANGE=caml_string_of_jsbytes("DEPTH_RANGE"),
     cst_DEPTH_WRITEMASK=caml_string_of_jsbytes("DEPTH_WRITEMASK"),
     cst_DEPTH_CLEAR_VALUE=caml_string_of_jsbytes("DEPTH_CLEAR_VALUE"),
     cst_DEPTH_FUNC=caml_string_of_jsbytes("DEPTH_FUNC"),
     cst_STENCIL_CLEAR_VALUE=caml_string_of_jsbytes("STENCIL_CLEAR_VALUE"),
     cst_STENCIL_FUNC=caml_string_of_jsbytes("STENCIL_FUNC"),
     cst_STENCIL_FAIL=caml_string_of_jsbytes("STENCIL_FAIL"),
     cst_STENCIL_PASS_DEPTH_FAIL=
      caml_string_of_jsbytes("STENCIL_PASS_DEPTH_FAIL"),
     cst_STENCIL_PASS_DEPTH_PASS=
      caml_string_of_jsbytes("STENCIL_PASS_DEPTH_PASS"),
     cst_STENCIL_REF=caml_string_of_jsbytes("STENCIL_REF"),
     cst_STENCIL_VALUE_MASK=caml_string_of_jsbytes("STENCIL_VALUE_MASK"),
     cst_STENCIL_WRITEMASK=caml_string_of_jsbytes("STENCIL_WRITEMASK"),
     cst_STENCIL_BACK_FUNC=caml_string_of_jsbytes("STENCIL_BACK_FUNC"),
     cst_STENCIL_BACK_FAIL=caml_string_of_jsbytes("STENCIL_BACK_FAIL"),
     cst_STENCIL_BACK_PASS_DEPTH_FA=
      caml_string_of_jsbytes("STENCIL_BACK_PASS_DEPTH_FAIL"),
     cst_STENCIL_BACK_PASS_DEPTH_PA=
      caml_string_of_jsbytes("STENCIL_BACK_PASS_DEPTH_PASS"),
     cst_STENCIL_BACK_REF=caml_string_of_jsbytes("STENCIL_BACK_REF"),
     cst_STENCIL_BACK_VALUE_MASK=
      caml_string_of_jsbytes("STENCIL_BACK_VALUE_MASK"),
     cst_STENCIL_BACK_WRITEMASK=
      caml_string_of_jsbytes("STENCIL_BACK_WRITEMASK"),
     cst_VIEWPORT=caml_string_of_jsbytes("VIEWPORT"),
     cst_SCISSOR_BOX=caml_string_of_jsbytes("SCISSOR_BOX"),
     cst_COLOR_CLEAR_VALUE=caml_string_of_jsbytes("COLOR_CLEAR_VALUE"),
     cst_COLOR_WRITEMASK=caml_string_of_jsbytes("COLOR_WRITEMASK"),
     cst_UNPACK_ALIGNMENT=caml_string_of_jsbytes("UNPACK_ALIGNMENT"),
     cst_PACK_ALIGNMENT=caml_string_of_jsbytes("PACK_ALIGNMENT"),
     cst_MAX_TEXTURE_SIZE=caml_string_of_jsbytes("MAX_TEXTURE_SIZE"),
     cst_MAX_VIEWPORT_DIMS=caml_string_of_jsbytes("MAX_VIEWPORT_DIMS"),
     cst_SUBPIXEL_BITS=caml_string_of_jsbytes("SUBPIXEL_BITS"),
     cst_RED_BITS=caml_string_of_jsbytes("RED_BITS"),
     cst_GREEN_BITS=caml_string_of_jsbytes("GREEN_BITS"),
     cst_BLUE_BITS=caml_string_of_jsbytes("BLUE_BITS"),
     cst_ALPHA_BITS=caml_string_of_jsbytes("ALPHA_BITS"),
     cst_DEPTH_BITS=caml_string_of_jsbytes("DEPTH_BITS"),
     cst_STENCIL_BITS=caml_string_of_jsbytes("STENCIL_BITS"),
     cst_POLYGON_OFFSET_UNITS=caml_string_of_jsbytes("POLYGON_OFFSET_UNITS"),
     cst_POLYGON_OFFSET_FACTOR=caml_string_of_jsbytes("POLYGON_OFFSET_FACTOR"),
     cst_TEXTURE_BINDING_2D=caml_string_of_jsbytes("TEXTURE_BINDING_2D"),
     cst_SAMPLE_BUFFERS=caml_string_of_jsbytes("SAMPLE_BUFFERS"),
     cst_SAMPLES=caml_string_of_jsbytes("SAMPLES"),
     cst_SAMPLE_COVERAGE_VALUE=caml_string_of_jsbytes("SAMPLE_COVERAGE_VALUE"),
     cst_SAMPLE_COVERAGE_INVERT=
      caml_string_of_jsbytes("SAMPLE_COVERAGE_INVERT"),
     cst_COMPRESSED_TEXTURE_FORMATS=
      caml_string_of_jsbytes("COMPRESSED_TEXTURE_FORMATS"),
     cst_DONT_CARE=caml_string_of_jsbytes("DONT_CARE"),
     cst_FASTEST=caml_string_of_jsbytes("FASTEST"),
     cst_NICEST=caml_string_of_jsbytes("NICEST"),
     cst_GENERATE_MIPMAP_HINT=caml_string_of_jsbytes("GENERATE_MIPMAP_HINT"),
     cst_BYTE=caml_string_of_jsbytes("BYTE"),
     cst_UNSIGNED_BYTE=caml_string_of_jsbytes("UNSIGNED_BYTE"),
     cst_SHORT=caml_string_of_jsbytes("SHORT"),
     cst_UNSIGNED_SHORT=caml_string_of_jsbytes("UNSIGNED_SHORT"),
     cst_INT=caml_string_of_jsbytes("INT"),
     cst_UNSIGNED_INT=caml_string_of_jsbytes("UNSIGNED_INT"),
     cst_FLOAT=caml_string_of_jsbytes("FLOAT"),
     cst_DEPTH_COMPONENT=caml_string_of_jsbytes("DEPTH_COMPONENT"),
     cst_ALPHA=caml_string_of_jsbytes("ALPHA"),
     cst_RGB=caml_string_of_jsbytes("RGB"),
     cst_RGBA=caml_string_of_jsbytes("RGBA"),
     cst_LUMINANCE=caml_string_of_jsbytes("LUMINANCE"),
     cst_LUMINANCE_ALPHA=caml_string_of_jsbytes("LUMINANCE_ALPHA"),
     cst_UNSIGNED_SHORT_4_4_4_4=
      caml_string_of_jsbytes("UNSIGNED_SHORT_4_4_4_4"),
     cst_UNSIGNED_SHORT_5_5_5_1=
      caml_string_of_jsbytes("UNSIGNED_SHORT_5_5_5_1"),
     cst_UNSIGNED_SHORT_5_6_5=caml_string_of_jsbytes("UNSIGNED_SHORT_5_6_5"),
     cst_FRAGMENT_SHADER=caml_string_of_jsbytes("FRAGMENT_SHADER"),
     cst_VERTEX_SHADER=caml_string_of_jsbytes("VERTEX_SHADER"),
     cst_MAX_VERTEX_ATTRIBS=caml_string_of_jsbytes("MAX_VERTEX_ATTRIBS"),
     cst_MAX_VERTEX_UNIFORM_VECTORS=
      caml_string_of_jsbytes("MAX_VERTEX_UNIFORM_VECTORS"),
     cst_MAX_VARYING_VECTORS=caml_string_of_jsbytes("MAX_VARYING_VECTORS"),
     cst_MAX_COMBINED_TEXTURE_IMAGE=
      caml_string_of_jsbytes("MAX_COMBINED_TEXTURE_IMAGE_UNITS"),
     cst_MAX_VERTEX_TEXTURE_IMAGE_U=
      caml_string_of_jsbytes("MAX_VERTEX_TEXTURE_IMAGE_UNITS"),
     cst_MAX_TEXTURE_IMAGE_UNITS=
      caml_string_of_jsbytes("MAX_TEXTURE_IMAGE_UNITS"),
     cst_MAX_FRAGMENT_UNIFORM_VECTO=
      caml_string_of_jsbytes("MAX_FRAGMENT_UNIFORM_VECTORS"),
     cst_SHADER_TYPE=caml_string_of_jsbytes("SHADER_TYPE"),
     cst_DELETE_STATUS=caml_string_of_jsbytes("DELETE_STATUS"),
     cst_LINK_STATUS=caml_string_of_jsbytes("LINK_STATUS"),
     cst_VALIDATE_STATUS=caml_string_of_jsbytes("VALIDATE_STATUS"),
     cst_ATTACHED_SHADERS=caml_string_of_jsbytes("ATTACHED_SHADERS"),
     cst_ACTIVE_UNIFORMS=caml_string_of_jsbytes("ACTIVE_UNIFORMS"),
     cst_ACTIVE_ATTRIBUTES=caml_string_of_jsbytes("ACTIVE_ATTRIBUTES"),
     cst_SHADING_LANGUAGE_VERSION=
      caml_string_of_jsbytes("SHADING_LANGUAGE_VERSION"),
     cst_CURRENT_PROGRAM=caml_string_of_jsbytes("CURRENT_PROGRAM"),
     cst_NEVER=caml_string_of_jsbytes("NEVER"),
     cst_LESS=caml_string_of_jsbytes("LESS"),
     cst_EQUAL=caml_string_of_jsbytes("EQUAL"),
     cst_LEQUAL=caml_string_of_jsbytes("LEQUAL"),
     cst_GREATER=caml_string_of_jsbytes("GREATER"),
     cst_NOTEQUAL=caml_string_of_jsbytes("NOTEQUAL"),
     cst_GEQUAL=caml_string_of_jsbytes("GEQUAL"),
     cst_ALWAYS=caml_string_of_jsbytes("ALWAYS"),
     cst_KEEP=caml_string_of_jsbytes("KEEP"),
     cst_REPLACE=caml_string_of_jsbytes("REPLACE"),
     cst_INCR=caml_string_of_jsbytes("INCR"),
     cst_DECR=caml_string_of_jsbytes("DECR"),
     cst_INVERT=caml_string_of_jsbytes("INVERT"),
     cst_INCR_WRAP=caml_string_of_jsbytes("INCR_WRAP"),
     cst_DECR_WRAP=caml_string_of_jsbytes("DECR_WRAP"),
     cst_VENDOR=caml_string_of_jsbytes("VENDOR"),
     cst_RENDERER=caml_string_of_jsbytes("RENDERER"),
     cst_VERSION=caml_string_of_jsbytes("VERSION"),
     cst_NEAREST=caml_string_of_jsbytes("NEAREST"),
     cst_LINEAR=caml_string_of_jsbytes("LINEAR"),
     cst_NEAREST_MIPMAP_NEAREST=
      caml_string_of_jsbytes("NEAREST_MIPMAP_NEAREST"),
     cst_LINEAR_MIPMAP_NEAREST=caml_string_of_jsbytes("LINEAR_MIPMAP_NEAREST"),
     cst_NEAREST_MIPMAP_LINEAR=caml_string_of_jsbytes("NEAREST_MIPMAP_LINEAR"),
     cst_LINEAR_MIPMAP_LINEAR=caml_string_of_jsbytes("LINEAR_MIPMAP_LINEAR"),
     cst_TEXTURE_MAG_FILTER=caml_string_of_jsbytes("TEXTURE_MAG_FILTER"),
     cst_TEXTURE_MIN_FILTER=caml_string_of_jsbytes("TEXTURE_MIN_FILTER"),
     cst_TEXTURE_WRAP_S=caml_string_of_jsbytes("TEXTURE_WRAP_S"),
     cst_TEXTURE_WRAP_T=caml_string_of_jsbytes("TEXTURE_WRAP_T"),
     cst_TEXTURE_2D=caml_string_of_jsbytes("TEXTURE_2D"),
     cst_TEXTURE=caml_string_of_jsbytes("TEXTURE"),
     cst_TEXTURE_CUBE_MAP=caml_string_of_jsbytes("TEXTURE_CUBE_MAP"),
     cst_TEXTURE_BINDING_CUBE_MAP=
      caml_string_of_jsbytes("TEXTURE_BINDING_CUBE_MAP"),
     cst_TEXTURE_CUBE_MAP_POSITIVE_=
      caml_string_of_jsbytes("TEXTURE_CUBE_MAP_POSITIVE_X"),
     cst_TEXTURE_CUBE_MAP_NEGATIVE_=
      caml_string_of_jsbytes("TEXTURE_CUBE_MAP_NEGATIVE_X"),
     cst_TEXTURE_CUBE_MAP_POSITIVE_$0=
      caml_string_of_jsbytes("TEXTURE_CUBE_MAP_POSITIVE_Y"),
     cst_TEXTURE_CUBE_MAP_NEGATIVE_$0=
      caml_string_of_jsbytes("TEXTURE_CUBE_MAP_NEGATIVE_Y"),
     cst_TEXTURE_CUBE_MAP_POSITIVE_$1=
      caml_string_of_jsbytes("TEXTURE_CUBE_MAP_POSITIVE_Z"),
     cst_TEXTURE_CUBE_MAP_NEGATIVE_$1=
      caml_string_of_jsbytes("TEXTURE_CUBE_MAP_NEGATIVE_Z"),
     cst_MAX_CUBE_MAP_TEXTURE_SIZE=
      caml_string_of_jsbytes("MAX_CUBE_MAP_TEXTURE_SIZE"),
     cst_TEXTURE0=caml_string_of_jsbytes("TEXTURE0"),
     cst_TEXTURE1=caml_string_of_jsbytes("TEXTURE1"),
     cst_TEXTURE2=caml_string_of_jsbytes("TEXTURE2"),
     cst_TEXTURE3=caml_string_of_jsbytes("TEXTURE3"),
     cst_TEXTURE4=caml_string_of_jsbytes("TEXTURE4"),
     cst_TEXTURE5=caml_string_of_jsbytes("TEXTURE5"),
     cst_TEXTURE6=caml_string_of_jsbytes("TEXTURE6"),
     cst_TEXTURE7=caml_string_of_jsbytes("TEXTURE7"),
     cst_TEXTURE8=caml_string_of_jsbytes("TEXTURE8"),
     cst_TEXTURE9=caml_string_of_jsbytes("TEXTURE9"),
     cst_TEXTURE10=caml_string_of_jsbytes("TEXTURE10"),
     cst_TEXTURE11=caml_string_of_jsbytes("TEXTURE11"),
     cst_TEXTURE12=caml_string_of_jsbytes("TEXTURE12"),
     cst_TEXTURE13=caml_string_of_jsbytes("TEXTURE13"),
     cst_TEXTURE14=caml_string_of_jsbytes("TEXTURE14"),
     cst_TEXTURE15=caml_string_of_jsbytes("TEXTURE15"),
     cst_TEXTURE16=caml_string_of_jsbytes("TEXTURE16"),
     cst_TEXTURE17=caml_string_of_jsbytes("TEXTURE17"),
     cst_TEXTURE18=caml_string_of_jsbytes("TEXTURE18"),
     cst_TEXTURE19=caml_string_of_jsbytes("TEXTURE19"),
     cst_TEXTURE20=caml_string_of_jsbytes("TEXTURE20"),
     cst_TEXTURE21=caml_string_of_jsbytes("TEXTURE21"),
     cst_TEXTURE22=caml_string_of_jsbytes("TEXTURE22"),
     cst_TEXTURE23=caml_string_of_jsbytes("TEXTURE23"),
     cst_TEXTURE24=caml_string_of_jsbytes("TEXTURE24"),
     cst_TEXTURE25=caml_string_of_jsbytes("TEXTURE25"),
     cst_TEXTURE26=caml_string_of_jsbytes("TEXTURE26"),
     cst_TEXTURE27=caml_string_of_jsbytes("TEXTURE27"),
     cst_TEXTURE28=caml_string_of_jsbytes("TEXTURE28"),
     cst_TEXTURE29=caml_string_of_jsbytes("TEXTURE29"),
     cst_TEXTURE30=caml_string_of_jsbytes("TEXTURE30"),
     cst_TEXTURE31=caml_string_of_jsbytes("TEXTURE31"),
     cst_ACTIVE_TEXTURE=caml_string_of_jsbytes("ACTIVE_TEXTURE"),
     cst_REPEAT=caml_string_of_jsbytes("REPEAT"),
     cst_CLAMP_TO_EDGE=caml_string_of_jsbytes("CLAMP_TO_EDGE"),
     cst_MIRRORED_REPEAT=caml_string_of_jsbytes("MIRRORED_REPEAT"),
     cst_FLOAT_VEC2=caml_string_of_jsbytes("FLOAT_VEC2"),
     cst_FLOAT_VEC3=caml_string_of_jsbytes("FLOAT_VEC3"),
     cst_FLOAT_VEC4=caml_string_of_jsbytes("FLOAT_VEC4"),
     cst_INT_VEC2=caml_string_of_jsbytes("INT_VEC2"),
     cst_INT_VEC3=caml_string_of_jsbytes("INT_VEC3"),
     cst_INT_VEC4=caml_string_of_jsbytes("INT_VEC4"),
     cst_BOOL=caml_string_of_jsbytes("BOOL"),
     cst_BOOL_VEC2=caml_string_of_jsbytes("BOOL_VEC2"),
     cst_BOOL_VEC3=caml_string_of_jsbytes("BOOL_VEC3"),
     cst_BOOL_VEC4=caml_string_of_jsbytes("BOOL_VEC4"),
     cst_FLOAT_MAT2=caml_string_of_jsbytes("FLOAT_MAT2"),
     cst_FLOAT_MAT3=caml_string_of_jsbytes("FLOAT_MAT3"),
     cst_FLOAT_MAT4=caml_string_of_jsbytes("FLOAT_MAT4"),
     cst_SAMPLER_2D=caml_string_of_jsbytes("SAMPLER_2D"),
     cst_SAMPLER_CUBE=caml_string_of_jsbytes("SAMPLER_CUBE"),
     cst_VERTEX_ATTRIB_ARRAY_ENABLE=
      caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_ENABLED"),
     cst_VERTEX_ATTRIB_ARRAY_SIZE=
      caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_SIZE"),
     cst_VERTEX_ATTRIB_ARRAY_STRIDE=
      caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_STRIDE"),
     cst_VERTEX_ATTRIB_ARRAY_TYPE=
      caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_TYPE"),
     cst_VERTEX_ATTRIB_ARRAY_NORMAL=
      caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_NORMALIZED"),
     cst_VERTEX_ATTRIB_ARRAY_POINTE=
      caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_POINTER"),
     cst_VERTEX_ATTRIB_ARRAY_BUFFER=
      caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"),
     cst_IMPLEMENTATION_COLOR_READ_=
      caml_string_of_jsbytes("IMPLEMENTATION_COLOR_READ_TYPE"),
     cst_IMPLEMENTATION_COLOR_READ_$0=
      caml_string_of_jsbytes("IMPLEMENTATION_COLOR_READ_FORMAT"),
     cst_COMPILE_STATUS=caml_string_of_jsbytes("COMPILE_STATUS"),
     cst_LOW_FLOAT=caml_string_of_jsbytes("LOW_FLOAT"),
     cst_MEDIUM_FLOAT=caml_string_of_jsbytes("MEDIUM_FLOAT"),
     cst_HIGH_FLOAT=caml_string_of_jsbytes("HIGH_FLOAT"),
     cst_LOW_INT=caml_string_of_jsbytes("LOW_INT"),
     cst_MEDIUM_INT=caml_string_of_jsbytes("MEDIUM_INT"),
     cst_HIGH_INT=caml_string_of_jsbytes("HIGH_INT"),
     cst_FRAMEBUFFER=caml_string_of_jsbytes("FRAMEBUFFER"),
     cst_RENDERBUFFER=caml_string_of_jsbytes("RENDERBUFFER"),
     cst_RGBA4=caml_string_of_jsbytes("RGBA4"),
     cst_RGB5_A1=caml_string_of_jsbytes("RGB5_A1"),
     cst_RGB565=caml_string_of_jsbytes("RGB565"),
     cst_DEPTH_COMPONENT16=caml_string_of_jsbytes("DEPTH_COMPONENT16"),
     cst_STENCIL_INDEX8=caml_string_of_jsbytes("STENCIL_INDEX8"),
     cst_DEPTH_STENCIL=caml_string_of_jsbytes("DEPTH_STENCIL"),
     cst_RENDERBUFFER_WIDTH=caml_string_of_jsbytes("RENDERBUFFER_WIDTH"),
     cst_RENDERBUFFER_HEIGHT=caml_string_of_jsbytes("RENDERBUFFER_HEIGHT"),
     cst_RENDERBUFFER_INTERNAL_FORM=
      caml_string_of_jsbytes("RENDERBUFFER_INTERNAL_FORMAT"),
     cst_RENDERBUFFER_RED_SIZE=caml_string_of_jsbytes("RENDERBUFFER_RED_SIZE"),
     cst_RENDERBUFFER_GREEN_SIZE=
      caml_string_of_jsbytes("RENDERBUFFER_GREEN_SIZE"),
     cst_RENDERBUFFER_BLUE_SIZE=
      caml_string_of_jsbytes("RENDERBUFFER_BLUE_SIZE"),
     cst_RENDERBUFFER_ALPHA_SIZE=
      caml_string_of_jsbytes("RENDERBUFFER_ALPHA_SIZE"),
     cst_RENDERBUFFER_DEPTH_SIZE=
      caml_string_of_jsbytes("RENDERBUFFER_DEPTH_SIZE"),
     cst_RENDERBUFFER_STENCIL_SIZE=
      caml_string_of_jsbytes("RENDERBUFFER_STENCIL_SIZE"),
     cst_FRAMEBUFFER_ATTACHMENT_OBJ=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"),
     cst_FRAMEBUFFER_ATTACHMENT_OBJ$0=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"),
     cst_FRAMEBUFFER_ATTACHMENT_TEX=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"),
     cst_FRAMEBUFFER_ATTACHMENT_TEX$0=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"),
     cst_COLOR_ATTACHMENT0=caml_string_of_jsbytes("COLOR_ATTACHMENT0"),
     cst_DEPTH_ATTACHMENT=caml_string_of_jsbytes("DEPTH_ATTACHMENT"),
     cst_STENCIL_ATTACHMENT=caml_string_of_jsbytes("STENCIL_ATTACHMENT"),
     cst_DEPTH_STENCIL_ATTACHMENT=
      caml_string_of_jsbytes("DEPTH_STENCIL_ATTACHMENT"),
     cst_NONE=caml_string_of_jsbytes("NONE"),
     cst_FRAMEBUFFER_COMPLETE=caml_string_of_jsbytes("FRAMEBUFFER_COMPLETE"),
     cst_FRAMEBUFFER_INCOMPLETE_ATT=
      caml_string_of_jsbytes("FRAMEBUFFER_INCOMPLETE_ATTACHMENT"),
     cst_FRAMEBUFFER_INCOMPLETE_MIS=
      caml_string_of_jsbytes("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"),
     cst_FRAMEBUFFER_INCOMPLETE_DIM=
      caml_string_of_jsbytes("FRAMEBUFFER_INCOMPLETE_DIMENSIONS"),
     cst_FRAMEBUFFER_UNSUPPORTED=
      caml_string_of_jsbytes("FRAMEBUFFER_UNSUPPORTED"),
     cst_FRAMEBUFFER_BINDING=caml_string_of_jsbytes("FRAMEBUFFER_BINDING"),
     cst_RENDERBUFFER_BINDING=caml_string_of_jsbytes("RENDERBUFFER_BINDING"),
     cst_MAX_RENDERBUFFER_SIZE=caml_string_of_jsbytes("MAX_RENDERBUFFER_SIZE"),
     cst_INVALID_FRAMEBUFFER_OPERAT=
      caml_string_of_jsbytes("INVALID_FRAMEBUFFER_OPERATION"),
     cst_UNPACK_FLIP_Y_WEBGL=caml_string_of_jsbytes("UNPACK_FLIP_Y_WEBGL"),
     cst_UNPACK_PREMULTIPLY_ALPHA_W=
      caml_string_of_jsbytes("UNPACK_PREMULTIPLY_ALPHA_WEBGL"),
     cst_CONTEXT_LOST_WEBGL=caml_string_of_jsbytes("CONTEXT_LOST_WEBGL"),
     cst_UNPACK_COLORSPACE_CONVERSI=
      caml_string_of_jsbytes("UNPACK_COLORSPACE_CONVERSION_WEBGL"),
     cst_BROWSER_DEFAULT_WEBGL=caml_string_of_jsbytes("BROWSER_DEFAULT_WEBGL"),
     cst_WebGL2RenderingContext=
      caml_string_of_jsbytes("WebGL2RenderingContext"),
     cst_READ_BUFFER=caml_string_of_jsbytes("READ_BUFFER"),
     cst_UNPACK_ROW_LENGTH=caml_string_of_jsbytes("UNPACK_ROW_LENGTH"),
     cst_UNPACK_SKIP_ROWS=caml_string_of_jsbytes("UNPACK_SKIP_ROWS"),
     cst_UNPACK_SKIP_PIXELS=caml_string_of_jsbytes("UNPACK_SKIP_PIXELS"),
     cst_PACK_ROW_LENGTH=caml_string_of_jsbytes("PACK_ROW_LENGTH"),
     cst_PACK_SKIP_ROWS=caml_string_of_jsbytes("PACK_SKIP_ROWS"),
     cst_PACK_SKIP_PIXELS=caml_string_of_jsbytes("PACK_SKIP_PIXELS"),
     cst_COLOR=caml_string_of_jsbytes("COLOR"),
     cst_DEPTH=caml_string_of_jsbytes("DEPTH"),
     cst_STENCIL=caml_string_of_jsbytes("STENCIL"),
     cst_RED=caml_string_of_jsbytes("RED"),
     cst_RGB8=caml_string_of_jsbytes("RGB8"),
     cst_RGBA8=caml_string_of_jsbytes("RGBA8"),
     cst_RGB10_A2=caml_string_of_jsbytes("RGB10_A2"),
     cst_TEXTURE_BINDING_3D=caml_string_of_jsbytes("TEXTURE_BINDING_3D"),
     cst_UNPACK_SKIP_IMAGES=caml_string_of_jsbytes("UNPACK_SKIP_IMAGES"),
     cst_UNPACK_IMAGE_HEIGHT=caml_string_of_jsbytes("UNPACK_IMAGE_HEIGHT"),
     cst_TEXTURE_3D=caml_string_of_jsbytes("TEXTURE_3D"),
     cst_TEXTURE_WRAP_R=caml_string_of_jsbytes("TEXTURE_WRAP_R"),
     cst_MAX_3D_TEXTURE_SIZE=caml_string_of_jsbytes("MAX_3D_TEXTURE_SIZE"),
     cst_UNSIGNED_INT_2_10_10_10_RE=
      caml_string_of_jsbytes("UNSIGNED_INT_2_10_10_10_REV"),
     cst_MAX_ELEMENTS_VERTICES=caml_string_of_jsbytes("MAX_ELEMENTS_VERTICES"),
     cst_MAX_ELEMENTS_INDICES=caml_string_of_jsbytes("MAX_ELEMENTS_INDICES"),
     cst_TEXTURE_MIN_LOD=caml_string_of_jsbytes("TEXTURE_MIN_LOD"),
     cst_TEXTURE_MAX_LOD=caml_string_of_jsbytes("TEXTURE_MAX_LOD"),
     cst_TEXTURE_BASE_LEVEL=caml_string_of_jsbytes("TEXTURE_BASE_LEVEL"),
     cst_TEXTURE_MAX_LEVEL=caml_string_of_jsbytes("TEXTURE_MAX_LEVEL"),
     cst_MIN=caml_string_of_jsbytes("MIN"),
     cst_MAX=caml_string_of_jsbytes("MAX"),
     cst_DEPTH_COMPONENT24=caml_string_of_jsbytes("DEPTH_COMPONENT24"),
     cst_MAX_TEXTURE_LOD_BIAS=caml_string_of_jsbytes("MAX_TEXTURE_LOD_BIAS"),
     cst_TEXTURE_COMPARE_MODE=caml_string_of_jsbytes("TEXTURE_COMPARE_MODE"),
     cst_TEXTURE_COMPARE_FUNC=caml_string_of_jsbytes("TEXTURE_COMPARE_FUNC"),
     cst_CURRENT_QUERY=caml_string_of_jsbytes("CURRENT_QUERY"),
     cst_QUERY_RESULT=caml_string_of_jsbytes("QUERY_RESULT"),
     cst_QUERY_RESULT_AVAILABLE=
      caml_string_of_jsbytes("QUERY_RESULT_AVAILABLE"),
     cst_STREAM_READ=caml_string_of_jsbytes("STREAM_READ"),
     cst_STREAM_COPY=caml_string_of_jsbytes("STREAM_COPY"),
     cst_STATIC_READ=caml_string_of_jsbytes("STATIC_READ"),
     cst_STATIC_COPY=caml_string_of_jsbytes("STATIC_COPY"),
     cst_DYNAMIC_READ=caml_string_of_jsbytes("DYNAMIC_READ"),
     cst_DYNAMIC_COPY=caml_string_of_jsbytes("DYNAMIC_COPY"),
     cst_MAX_DRAW_BUFFERS=caml_string_of_jsbytes("MAX_DRAW_BUFFERS"),
     cst_DRAW_BUFFER0=caml_string_of_jsbytes("DRAW_BUFFER0"),
     cst_DRAW_BUFFER1=caml_string_of_jsbytes("DRAW_BUFFER1"),
     cst_DRAW_BUFFER2=caml_string_of_jsbytes("DRAW_BUFFER2"),
     cst_DRAW_BUFFER3=caml_string_of_jsbytes("DRAW_BUFFER3"),
     cst_DRAW_BUFFER4=caml_string_of_jsbytes("DRAW_BUFFER4"),
     cst_DRAW_BUFFER5=caml_string_of_jsbytes("DRAW_BUFFER5"),
     cst_DRAW_BUFFER6=caml_string_of_jsbytes("DRAW_BUFFER6"),
     cst_DRAW_BUFFER7=caml_string_of_jsbytes("DRAW_BUFFER7"),
     cst_DRAW_BUFFER8=caml_string_of_jsbytes("DRAW_BUFFER8"),
     cst_DRAW_BUFFER9=caml_string_of_jsbytes("DRAW_BUFFER9"),
     cst_DRAW_BUFFER10=caml_string_of_jsbytes("DRAW_BUFFER10"),
     cst_DRAW_BUFFER11=caml_string_of_jsbytes("DRAW_BUFFER11"),
     cst_DRAW_BUFFER12=caml_string_of_jsbytes("DRAW_BUFFER12"),
     cst_DRAW_BUFFER13=caml_string_of_jsbytes("DRAW_BUFFER13"),
     cst_DRAW_BUFFER14=caml_string_of_jsbytes("DRAW_BUFFER14"),
     cst_DRAW_BUFFER15=caml_string_of_jsbytes("DRAW_BUFFER15"),
     cst_MAX_FRAGMENT_UNIFORM_COMPO=
      caml_string_of_jsbytes("MAX_FRAGMENT_UNIFORM_COMPONENTS"),
     cst_MAX_VERTEX_UNIFORM_COMPONE=
      caml_string_of_jsbytes("MAX_VERTEX_UNIFORM_COMPONENTS"),
     cst_SAMPLER_3D=caml_string_of_jsbytes("SAMPLER_3D"),
     cst_SAMPLER_2D_SHADOW=caml_string_of_jsbytes("SAMPLER_2D_SHADOW"),
     cst_FRAGMENT_SHADER_DERIVATIVE=
      caml_string_of_jsbytes("FRAGMENT_SHADER_DERIVATIVE_HINT"),
     cst_PIXEL_PACK_BUFFER=caml_string_of_jsbytes("PIXEL_PACK_BUFFER"),
     cst_PIXEL_UNPACK_BUFFER=caml_string_of_jsbytes("PIXEL_UNPACK_BUFFER"),
     cst_PIXEL_PACK_BUFFER_BINDING=
      caml_string_of_jsbytes("PIXEL_PACK_BUFFER_BINDING"),
     cst_PIXEL_UNPACK_BUFFER_BINDIN=
      caml_string_of_jsbytes("PIXEL_UNPACK_BUFFER_BINDING"),
     cst_FLOAT_MAT2x3=caml_string_of_jsbytes("FLOAT_MAT2x3"),
     cst_FLOAT_MAT2x4=caml_string_of_jsbytes("FLOAT_MAT2x4"),
     cst_FLOAT_MAT3x2=caml_string_of_jsbytes("FLOAT_MAT3x2"),
     cst_FLOAT_MAT3x4=caml_string_of_jsbytes("FLOAT_MAT3x4"),
     cst_FLOAT_MAT4x2=caml_string_of_jsbytes("FLOAT_MAT4x2"),
     cst_FLOAT_MAT4x3=caml_string_of_jsbytes("FLOAT_MAT4x3"),
     cst_SRGB=caml_string_of_jsbytes("SRGB"),
     cst_SRGB8=caml_string_of_jsbytes("SRGB8"),
     cst_SRGB8_ALPHA8=caml_string_of_jsbytes("SRGB8_ALPHA8"),
     cst_COMPARE_REF_TO_TEXTURE=
      caml_string_of_jsbytes("COMPARE_REF_TO_TEXTURE"),
     cst_RGBA32F=caml_string_of_jsbytes("RGBA32F"),
     cst_RGB32F=caml_string_of_jsbytes("RGB32F"),
     cst_RGBA16F=caml_string_of_jsbytes("RGBA16F"),
     cst_RGB16F=caml_string_of_jsbytes("RGB16F"),
     cst_VERTEX_ATTRIB_ARRAY_INTEGE=
      caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_INTEGER"),
     cst_MAX_ARRAY_TEXTURE_LAYERS=
      caml_string_of_jsbytes("MAX_ARRAY_TEXTURE_LAYERS"),
     cst_MIN_PROGRAM_TEXEL_OFFSET=
      caml_string_of_jsbytes("MIN_PROGRAM_TEXEL_OFFSET"),
     cst_MAX_PROGRAM_TEXEL_OFFSET=
      caml_string_of_jsbytes("MAX_PROGRAM_TEXEL_OFFSET"),
     cst_MAX_VARYING_COMPONENTS=
      caml_string_of_jsbytes("MAX_VARYING_COMPONENTS"),
     cst_TEXTURE_2D_ARRAY=caml_string_of_jsbytes("TEXTURE_2D_ARRAY"),
     cst_TEXTURE_BINDING_2D_ARRAY=
      caml_string_of_jsbytes("TEXTURE_BINDING_2D_ARRAY"),
     cst_R11F_G11F_B10F=caml_string_of_jsbytes("R11F_G11F_B10F"),
     cst_UNSIGNED_INT_10F_11F_11F_R=
      caml_string_of_jsbytes("UNSIGNED_INT_10F_11F_11F_REV"),
     cst_RGB9_E5=caml_string_of_jsbytes("RGB9_E5"),
     cst_UNSIGNED_INT_5_9_9_9_REV=
      caml_string_of_jsbytes("UNSIGNED_INT_5_9_9_9_REV"),
     cst_TRANSFORM_FEEDBACK_BUFFER_=
      caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BUFFER_MODE"),
     cst_MAX_TRANSFORM_FEEDBACK_SEP=
      caml_string_of_jsbytes("MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"),
     cst_TRANSFORM_FEEDBACK_VARYING=
      caml_string_of_jsbytes("TRANSFORM_FEEDBACK_VARYINGS"),
     cst_TRANSFORM_FEEDBACK_BUFFER_$0=
      caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BUFFER_START"),
     cst_TRANSFORM_FEEDBACK_BUFFER_$1=
      caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BUFFER_SIZE"),
     cst_TRANSFORM_FEEDBACK_PRIMITI=
      caml_string_of_jsbytes("TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"),
     cst_RASTERIZER_DISCARD=caml_string_of_jsbytes("RASTERIZER_DISCARD"),
     cst_MAX_TRANSFORM_FEEDBACK_INT=
      caml_string_of_jsbytes("MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"),
     cst_MAX_TRANSFORM_FEEDBACK_SEP$0=
      caml_string_of_jsbytes("MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"),
     cst_INTERLEAVED_ATTRIBS=caml_string_of_jsbytes("INTERLEAVED_ATTRIBS"),
     cst_SEPARATE_ATTRIBS=caml_string_of_jsbytes("SEPARATE_ATTRIBS"),
     cst_TRANSFORM_FEEDBACK_BUFFER=
      caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BUFFER"),
     cst_TRANSFORM_FEEDBACK_BUFFER_$2=
      caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BUFFER_BINDING"),
     cst_RGBA32UI=caml_string_of_jsbytes("RGBA32UI"),
     cst_RGB32UI=caml_string_of_jsbytes("RGB32UI"),
     cst_RGBA16UI=caml_string_of_jsbytes("RGBA16UI"),
     cst_RGB16UI=caml_string_of_jsbytes("RGB16UI"),
     cst_RGBA8UI=caml_string_of_jsbytes("RGBA8UI"),
     cst_RGB8UI=caml_string_of_jsbytes("RGB8UI"),
     cst_RGBA32I=caml_string_of_jsbytes("RGBA32I"),
     cst_RGB32I=caml_string_of_jsbytes("RGB32I"),
     cst_RGBA16I=caml_string_of_jsbytes("RGBA16I"),
     cst_RGB16I=caml_string_of_jsbytes("RGB16I"),
     cst_RGBA8I=caml_string_of_jsbytes("RGBA8I"),
     cst_RGB8I=caml_string_of_jsbytes("RGB8I"),
     cst_RED_INTEGER=caml_string_of_jsbytes("RED_INTEGER"),
     cst_RGB_INTEGER=caml_string_of_jsbytes("RGB_INTEGER"),
     cst_RGBA_INTEGER=caml_string_of_jsbytes("RGBA_INTEGER"),
     cst_SAMPLER_2D_ARRAY=caml_string_of_jsbytes("SAMPLER_2D_ARRAY"),
     cst_SAMPLER_2D_ARRAY_SHADOW=
      caml_string_of_jsbytes("SAMPLER_2D_ARRAY_SHADOW"),
     cst_SAMPLER_CUBE_SHADOW=caml_string_of_jsbytes("SAMPLER_CUBE_SHADOW"),
     cst_UNSIGNED_INT_VEC2=caml_string_of_jsbytes("UNSIGNED_INT_VEC2"),
     cst_UNSIGNED_INT_VEC3=caml_string_of_jsbytes("UNSIGNED_INT_VEC3"),
     cst_UNSIGNED_INT_VEC4=caml_string_of_jsbytes("UNSIGNED_INT_VEC4"),
     cst_INT_SAMPLER_2D=caml_string_of_jsbytes("INT_SAMPLER_2D"),
     cst_INT_SAMPLER_3D=caml_string_of_jsbytes("INT_SAMPLER_3D"),
     cst_INT_SAMPLER_CUBE=caml_string_of_jsbytes("INT_SAMPLER_CUBE"),
     cst_INT_SAMPLER_2D_ARRAY=caml_string_of_jsbytes("INT_SAMPLER_2D_ARRAY"),
     cst_UNSIGNED_INT_SAMPLER_2D=
      caml_string_of_jsbytes("UNSIGNED_INT_SAMPLER_2D"),
     cst_UNSIGNED_INT_SAMPLER_3D=
      caml_string_of_jsbytes("UNSIGNED_INT_SAMPLER_3D"),
     cst_UNSIGNED_INT_SAMPLER_CUBE=
      caml_string_of_jsbytes("UNSIGNED_INT_SAMPLER_CUBE"),
     cst_UNSIGNED_INT_SAMPLER_2D_AR=
      caml_string_of_jsbytes("UNSIGNED_INT_SAMPLER_2D_ARRAY"),
     cst_DEPTH_COMPONENT32F=caml_string_of_jsbytes("DEPTH_COMPONENT32F"),
     cst_DEPTH32F_STENCIL8=caml_string_of_jsbytes("DEPTH32F_STENCIL8"),
     cst_FLOAT_32_UNSIGNED_INT_24_8=
      caml_string_of_jsbytes("FLOAT_32_UNSIGNED_INT_24_8_REV"),
     cst_FRAMEBUFFER_ATTACHMENT_COL=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"),
     cst_FRAMEBUFFER_ATTACHMENT_COM=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"),
     cst_FRAMEBUFFER_ATTACHMENT_RED=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_RED_SIZE"),
     cst_FRAMEBUFFER_ATTACHMENT_GRE=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"),
     cst_FRAMEBUFFER_ATTACHMENT_BLU=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"),
     cst_FRAMEBUFFER_ATTACHMENT_ALP=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"),
     cst_FRAMEBUFFER_ATTACHMENT_DEP=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"),
     cst_FRAMEBUFFER_ATTACHMENT_STE=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"),
     cst_FRAMEBUFFER_DEFAULT=caml_string_of_jsbytes("FRAMEBUFFER_DEFAULT"),
     cst_UNSIGNED_INT_24_8=caml_string_of_jsbytes("UNSIGNED_INT_24_8"),
     cst_DEPTH24_STENCIL8=caml_string_of_jsbytes("DEPTH24_STENCIL8"),
     cst_UNSIGNED_NORMALIZED=caml_string_of_jsbytes("UNSIGNED_NORMALIZED"),
     cst_DRAW_FRAMEBUFFER_BINDING=
      caml_string_of_jsbytes("DRAW_FRAMEBUFFER_BINDING"),
     cst_READ_FRAMEBUFFER=caml_string_of_jsbytes("READ_FRAMEBUFFER"),
     cst_DRAW_FRAMEBUFFER=caml_string_of_jsbytes("DRAW_FRAMEBUFFER"),
     cst_READ_FRAMEBUFFER_BINDING=
      caml_string_of_jsbytes("READ_FRAMEBUFFER_BINDING"),
     cst_RENDERBUFFER_SAMPLES=caml_string_of_jsbytes("RENDERBUFFER_SAMPLES"),
     cst_FRAMEBUFFER_ATTACHMENT_TEX$1=
      caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"),
     cst_MAX_COLOR_ATTACHMENTS=caml_string_of_jsbytes("MAX_COLOR_ATTACHMENTS"),
     cst_COLOR_ATTACHMENT1=caml_string_of_jsbytes("COLOR_ATTACHMENT1"),
     cst_COLOR_ATTACHMENT2=caml_string_of_jsbytes("COLOR_ATTACHMENT2"),
     cst_COLOR_ATTACHMENT3=caml_string_of_jsbytes("COLOR_ATTACHMENT3"),
     cst_COLOR_ATTACHMENT4=caml_string_of_jsbytes("COLOR_ATTACHMENT4"),
     cst_COLOR_ATTACHMENT5=caml_string_of_jsbytes("COLOR_ATTACHMENT5"),
     cst_COLOR_ATTACHMENT6=caml_string_of_jsbytes("COLOR_ATTACHMENT6"),
     cst_COLOR_ATTACHMENT7=caml_string_of_jsbytes("COLOR_ATTACHMENT7"),
     cst_COLOR_ATTACHMENT8=caml_string_of_jsbytes("COLOR_ATTACHMENT8"),
     cst_COLOR_ATTACHMENT9=caml_string_of_jsbytes("COLOR_ATTACHMENT9"),
     cst_COLOR_ATTACHMENT10=caml_string_of_jsbytes("COLOR_ATTACHMENT10"),
     cst_COLOR_ATTACHMENT11=caml_string_of_jsbytes("COLOR_ATTACHMENT11"),
     cst_COLOR_ATTACHMENT12=caml_string_of_jsbytes("COLOR_ATTACHMENT12"),
     cst_COLOR_ATTACHMENT13=caml_string_of_jsbytes("COLOR_ATTACHMENT13"),
     cst_COLOR_ATTACHMENT14=caml_string_of_jsbytes("COLOR_ATTACHMENT14"),
     cst_COLOR_ATTACHMENT15=caml_string_of_jsbytes("COLOR_ATTACHMENT15"),
     cst_FRAMEBUFFER_INCOMPLETE_MUL=
      caml_string_of_jsbytes("FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"),
     cst_MAX_SAMPLES=caml_string_of_jsbytes("MAX_SAMPLES"),
     cst_HALF_FLOAT=caml_string_of_jsbytes("HALF_FLOAT"),
     cst_RG=caml_string_of_jsbytes("RG"),
     cst_RG_INTEGER=caml_string_of_jsbytes("RG_INTEGER"),
     cst_R8=caml_string_of_jsbytes("R8"),
     cst_RG8=caml_string_of_jsbytes("RG8"),
     cst_R16F=caml_string_of_jsbytes("R16F"),
     cst_R32F=caml_string_of_jsbytes("R32F"),
     cst_RG16F=caml_string_of_jsbytes("RG16F"),
     cst_RG32F=caml_string_of_jsbytes("RG32F"),
     cst_R8I=caml_string_of_jsbytes("R8I"),
     cst_R8UI=caml_string_of_jsbytes("R8UI"),
     cst_R16I=caml_string_of_jsbytes("R16I"),
     cst_R16UI=caml_string_of_jsbytes("R16UI"),
     cst_R32I=caml_string_of_jsbytes("R32I"),
     cst_R32UI=caml_string_of_jsbytes("R32UI"),
     cst_RG8I=caml_string_of_jsbytes("RG8I"),
     cst_RG8UI=caml_string_of_jsbytes("RG8UI"),
     cst_RG16I=caml_string_of_jsbytes("RG16I"),
     cst_RG16UI=caml_string_of_jsbytes("RG16UI"),
     cst_RG32I=caml_string_of_jsbytes("RG32I"),
     cst_RG32UI=caml_string_of_jsbytes("RG32UI"),
     cst_VERTEX_ARRAY_BINDING=caml_string_of_jsbytes("VERTEX_ARRAY_BINDING"),
     cst_R8_SNORM=caml_string_of_jsbytes("R8_SNORM"),
     cst_RG8_SNORM=caml_string_of_jsbytes("RG8_SNORM"),
     cst_RGB8_SNORM=caml_string_of_jsbytes("RGB8_SNORM"),
     cst_RGBA8_SNORM=caml_string_of_jsbytes("RGBA8_SNORM"),
     cst_SIGNED_NORMALIZED=caml_string_of_jsbytes("SIGNED_NORMALIZED"),
     cst_COPY_READ_BUFFER=caml_string_of_jsbytes("COPY_READ_BUFFER"),
     cst_COPY_WRITE_BUFFER=caml_string_of_jsbytes("COPY_WRITE_BUFFER"),
     cst_COPY_READ_BUFFER_BINDING=
      caml_string_of_jsbytes("COPY_READ_BUFFER_BINDING"),
     cst_COPY_WRITE_BUFFER_BINDING=
      caml_string_of_jsbytes("COPY_WRITE_BUFFER_BINDING"),
     cst_UNIFORM_BUFFER=caml_string_of_jsbytes("UNIFORM_BUFFER"),
     cst_UNIFORM_BUFFER_BINDING=
      caml_string_of_jsbytes("UNIFORM_BUFFER_BINDING"),
     cst_UNIFORM_BUFFER_START=caml_string_of_jsbytes("UNIFORM_BUFFER_START"),
     cst_UNIFORM_BUFFER_SIZE=caml_string_of_jsbytes("UNIFORM_BUFFER_SIZE"),
     cst_MAX_VERTEX_UNIFORM_BLOCKS=
      caml_string_of_jsbytes("MAX_VERTEX_UNIFORM_BLOCKS"),
     cst_MAX_FRAGMENT_UNIFORM_BLOCK=
      caml_string_of_jsbytes("MAX_FRAGMENT_UNIFORM_BLOCKS"),
     cst_MAX_COMBINED_UNIFORM_BLOCK=
      caml_string_of_jsbytes("MAX_COMBINED_UNIFORM_BLOCKS"),
     cst_MAX_UNIFORM_BUFFER_BINDING=
      caml_string_of_jsbytes("MAX_UNIFORM_BUFFER_BINDINGS"),
     cst_MAX_UNIFORM_BLOCK_SIZE=
      caml_string_of_jsbytes("MAX_UNIFORM_BLOCK_SIZE"),
     cst_MAX_COMBINED_VERTEX_UNIFOR=
      caml_string_of_jsbytes("MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"),
     cst_MAX_COMBINED_FRAGMENT_UNIF=
      caml_string_of_jsbytes("MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"),
     cst_UNIFORM_BUFFER_OFFSET_ALIG=
      caml_string_of_jsbytes("UNIFORM_BUFFER_OFFSET_ALIGNMENT"),
     cst_ACTIVE_UNIFORM_BLOCKS=caml_string_of_jsbytes("ACTIVE_UNIFORM_BLOCKS"),
     cst_UNIFORM_TYPE=caml_string_of_jsbytes("UNIFORM_TYPE"),
     cst_UNIFORM_SIZE=caml_string_of_jsbytes("UNIFORM_SIZE"),
     cst_UNIFORM_BLOCK_INDEX=caml_string_of_jsbytes("UNIFORM_BLOCK_INDEX"),
     cst_UNIFORM_OFFSET=caml_string_of_jsbytes("UNIFORM_OFFSET"),
     cst_UNIFORM_ARRAY_STRIDE=caml_string_of_jsbytes("UNIFORM_ARRAY_STRIDE"),
     cst_UNIFORM_MATRIX_STRIDE=caml_string_of_jsbytes("UNIFORM_MATRIX_STRIDE"),
     cst_UNIFORM_IS_ROW_MAJOR=caml_string_of_jsbytes("UNIFORM_IS_ROW_MAJOR"),
     cst_UNIFORM_BLOCK_BINDING=caml_string_of_jsbytes("UNIFORM_BLOCK_BINDING"),
     cst_UNIFORM_BLOCK_DATA_SIZE=
      caml_string_of_jsbytes("UNIFORM_BLOCK_DATA_SIZE"),
     cst_UNIFORM_BLOCK_ACTIVE_UNIFO=
      caml_string_of_jsbytes("UNIFORM_BLOCK_ACTIVE_UNIFORMS"),
     cst_UNIFORM_BLOCK_ACTIVE_UNIFO$0=
      caml_string_of_jsbytes("UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"),
     cst_UNIFORM_BLOCK_REFERENCED_B=
      caml_string_of_jsbytes("UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"),
     cst_UNIFORM_BLOCK_REFERENCED_B$0=
      caml_string_of_jsbytes("UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"),
     cst_INVALID_INDEX=caml_string_of_jsbytes("INVALID_INDEX"),
     cst_MAX_VERTEX_OUTPUT_COMPONEN=
      caml_string_of_jsbytes("MAX_VERTEX_OUTPUT_COMPONENTS"),
     cst_MAX_FRAGMENT_INPUT_COMPONE=
      caml_string_of_jsbytes("MAX_FRAGMENT_INPUT_COMPONENTS"),
     cst_MAX_SERVER_WAIT_TIMEOUT=
      caml_string_of_jsbytes("MAX_SERVER_WAIT_TIMEOUT"),
     cst_OBJECT_TYPE=caml_string_of_jsbytes("OBJECT_TYPE"),
     cst_SYNC_CONDITION=caml_string_of_jsbytes("SYNC_CONDITION"),
     cst_SYNC_STATUS=caml_string_of_jsbytes("SYNC_STATUS"),
     cst_SYNC_FLAGS=caml_string_of_jsbytes("SYNC_FLAGS"),
     cst_SYNC_FENCE=caml_string_of_jsbytes("SYNC_FENCE"),
     cst_SYNC_GPU_COMMANDS_COMPLETE=
      caml_string_of_jsbytes("SYNC_GPU_COMMANDS_COMPLETE"),
     cst_UNSIGNALED=caml_string_of_jsbytes("UNSIGNALED"),
     cst_SIGNALED=caml_string_of_jsbytes("SIGNALED"),
     cst_ALREADY_SIGNALED=caml_string_of_jsbytes("ALREADY_SIGNALED"),
     cst_TIMEOUT_EXPIRED=caml_string_of_jsbytes("TIMEOUT_EXPIRED"),
     cst_CONDITION_SATISFIED=caml_string_of_jsbytes("CONDITION_SATISFIED"),
     cst_WAIT_FAILED=caml_string_of_jsbytes("WAIT_FAILED"),
     cst_SYNC_FLUSH_COMMANDS_BIT=
      caml_string_of_jsbytes("SYNC_FLUSH_COMMANDS_BIT"),
     cst_VERTEX_ATTRIB_ARRAY_DIVISO=
      caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_DIVISOR"),
     cst_ANY_SAMPLES_PASSED=caml_string_of_jsbytes("ANY_SAMPLES_PASSED"),
     cst_ANY_SAMPLES_PASSED_CONSERV=
      caml_string_of_jsbytes("ANY_SAMPLES_PASSED_CONSERVATIVE"),
     cst_SAMPLER_BINDING=caml_string_of_jsbytes("SAMPLER_BINDING"),
     cst_RGB10_A2UI=caml_string_of_jsbytes("RGB10_A2UI"),
     cst_INT_2_10_10_10_REV=caml_string_of_jsbytes("INT_2_10_10_10_REV"),
     cst_TRANSFORM_FEEDBACK=caml_string_of_jsbytes("TRANSFORM_FEEDBACK"),
     cst_TRANSFORM_FEEDBACK_PAUSED=
      caml_string_of_jsbytes("TRANSFORM_FEEDBACK_PAUSED"),
     cst_TRANSFORM_FEEDBACK_ACTIVE=
      caml_string_of_jsbytes("TRANSFORM_FEEDBACK_ACTIVE"),
     cst_TRANSFORM_FEEDBACK_BINDING=
      caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BINDING"),
     cst_TEXTURE_IMMUTABLE_FORMAT=
      caml_string_of_jsbytes("TEXTURE_IMMUTABLE_FORMAT"),
     cst_MAX_ELEMENT_INDEX=caml_string_of_jsbytes("MAX_ELEMENT_INDEX"),
     cst_TEXTURE_IMMUTABLE_LEVELS=
      caml_string_of_jsbytes("TEXTURE_IMMUTABLE_LEVELS"),
     cst_TIMEOUT_IGNORED=caml_string_of_jsbytes("TIMEOUT_IGNORED"),
     cst_MAX_CLIENT_WAIT_TIMEOUT_WE=
      caml_string_of_jsbytes("MAX_CLIENT_WAIT_TIMEOUT_WEBGL"),
     cst_OfflineAudioContext=caml_string_of_jsbytes("OfflineAudioContext"),
     cst_length$10=caml_string_of_jsbytes("length"),
     cst_outputLatency=caml_string_of_jsbytes("outputLatency"),
     cst_baseLatency=caml_string_of_jsbytes("baseLatency"),
     cst_AudioContext=caml_string_of_jsbytes("AudioContext"),
     cst_latencyHint=caml_string_of_jsbytes("latencyHint"),
     cst_sampleRate$2=caml_string_of_jsbytes("sampleRate"),
     cst_audioWorklet=caml_string_of_jsbytes("audioWorklet"),
     cst_state$2=caml_string_of_jsbytes("state"),
     cst_listener=caml_string_of_jsbytes("listener"),
     cst_currentTime$2=caml_string_of_jsbytes("currentTime"),
     cst_sampleRate$1=caml_string_of_jsbytes("sampleRate"),
     cst_destination$0=caml_string_of_jsbytes("destination"),
     cst_performanceTime=caml_string_of_jsbytes("performanceTime"),
     cst_contextTime=caml_string_of_jsbytes("contextTime"),
     cst_port$2=caml_string_of_jsbytes("port"),
     cst_parameters=caml_string_of_jsbytes("parameters"),
     cst_AudioWorkletNode=caml_string_of_jsbytes("AudioWorkletNode"),
     cst_channelCount$15=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$15=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$15=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_numberOfInputs$1=caml_string_of_jsbytes("numberOfInputs"),
     cst_numberOfOutputs$0=caml_string_of_jsbytes("numberOfOutputs"),
     cst_outputChannelCount=caml_string_of_jsbytes("outputChannelCount"),
     cst_parameterData=caml_string_of_jsbytes("parameterData"),
     cst_processorOptions=caml_string_of_jsbytes("processorOptions"),
     cst_oversample$1=caml_string_of_jsbytes("oversample"),
     cst_oversample$0=caml_string_of_jsbytes("oversample"),
     cst_curve$1=caml_string_of_jsbytes("curve"),
     cst_curve$0=caml_string_of_jsbytes("curve"),
     cst_WaveShaperNode=caml_string_of_jsbytes("WaveShaperNode"),
     cst_channelCount$14=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$14=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$14=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_curve=caml_string_of_jsbytes("curve"),
     cst_oversample=caml_string_of_jsbytes("oversample"),
     cst_pan$0=caml_string_of_jsbytes("pan"),
     cst_StereoPannerNode=caml_string_of_jsbytes("StereoPannerNode"),
     cst_channelCount$13=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$13=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$13=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_pan=caml_string_of_jsbytes("pan"),
     cst_coneOuterGain$0=caml_string_of_jsbytes("coneOuterGain"),
     cst_coneOuterGain=caml_string_of_jsbytes("coneOuterGain"),
     cst_coneOuterAngle$0=caml_string_of_jsbytes("coneOuterAngle"),
     cst_coneOuterAngle=caml_string_of_jsbytes("coneOuterAngle"),
     cst_coneInnerAngle$0=caml_string_of_jsbytes("coneInnerAngle"),
     cst_coneInnerAngle=caml_string_of_jsbytes("coneInnerAngle"),
     cst_maxDistance$1=caml_string_of_jsbytes("maxDistance"),
     cst_maxDistance$0=caml_string_of_jsbytes("maxDistance"),
     cst_refDistance$1=caml_string_of_jsbytes("refDistance"),
     cst_refDistance$0=caml_string_of_jsbytes("refDistance"),
     cst_orientationZ$0=caml_string_of_jsbytes("orientationZ"),
     cst_orientationY$0=caml_string_of_jsbytes("orientationY"),
     cst_orientationX$0=caml_string_of_jsbytes("orientationX"),
     cst_positionZ$0=caml_string_of_jsbytes("positionZ"),
     cst_positionY$0=caml_string_of_jsbytes("positionY"),
     cst_positionX$0=caml_string_of_jsbytes("positionX"),
     cst_distanceModel$1=caml_string_of_jsbytes("distanceModel"),
     cst_distanceModel$0=caml_string_of_jsbytes("distanceModel"),
     cst_panningModel$1=caml_string_of_jsbytes("panningModel"),
     cst_panningModel$0=caml_string_of_jsbytes("panningModel"),
     cst_PannerNode=caml_string_of_jsbytes("PannerNode"),
     cst_channelCount$12=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$12=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$12=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_panningModel=caml_string_of_jsbytes("panningModel"),
     cst_distanceModel=caml_string_of_jsbytes("distanceModel"),
     cst_positionX=caml_string_of_jsbytes("positionX"),
     cst_positionY=caml_string_of_jsbytes("positionY"),
     cst_positionZ=caml_string_of_jsbytes("positionZ"),
     cst_orientationX=caml_string_of_jsbytes("orientationX"),
     cst_orientationY=caml_string_of_jsbytes("orientationY"),
     cst_orientationZ=caml_string_of_jsbytes("orientationZ"),
     cst_refDistance=caml_string_of_jsbytes("refDistance"),
     cst_maxDistance=caml_string_of_jsbytes("maxDistance"),
     cst_rolloff_factor=caml_string_of_jsbytes("rolloff_factor"),
     cst_cone_inner_angle=caml_string_of_jsbytes("cone_inner_angle"),
     cst_cone_outer_angle=caml_string_of_jsbytes("cone_outer_angle"),
     cst_cone_outer_gain=caml_string_of_jsbytes("cone_outer_gain"),
     cst_type$12=caml_string_of_jsbytes("type"),
     cst_type$11=caml_string_of_jsbytes("type"),
     cst_OscillatorNode=caml_string_of_jsbytes("OscillatorNode"),
     cst_channelCount$11=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$11=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$11=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_type$10=caml_string_of_jsbytes("type"),
     cst_frequency$0=caml_string_of_jsbytes("frequency"),
     cst_detune$2=caml_string_of_jsbytes("detune"),
     cst_periodicWave=caml_string_of_jsbytes("periodicWave"),
     cst_PeriodicWave=caml_string_of_jsbytes("PeriodicWave"),
     cst_disableNormalization$0=caml_string_of_jsbytes("disableNormalization"),
     cst_real=caml_string_of_jsbytes("real"),
     cst_imag=caml_string_of_jsbytes("imag"),
     cst_MediaStreamTrackAudioSourc=
      caml_string_of_jsbytes("MediaStreamTrackAudioSourceNode "),
     cst_mediaStreamTrack=caml_string_of_jsbytes("mediaStreamTrack"),
     cst_mediaStream$0=caml_string_of_jsbytes("mediaStream"),
     cst_MediaStreamAudioSourceNode=
      caml_string_of_jsbytes("MediaStreamAudioSourceNode"),
     cst_mediaStream=caml_string_of_jsbytes("mediaStream"),
     cst_stream$1=caml_string_of_jsbytes("stream"),
     cst_MediaStreamAudioDestinatio=
      caml_string_of_jsbytes("MediaStreamAudioDestinationNode"),
     cst_channelCount$10=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$10=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$10=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_mediaElement$0=caml_string_of_jsbytes("mediaElement"),
     cst_MediaElementAudioSourceNod=
      caml_string_of_jsbytes("MediaElementAudioSourceNode "),
     cst_mediaElement=caml_string_of_jsbytes("mediaElement"),
     cst_IIRFilterNode=caml_string_of_jsbytes("IIRFilterNode"),
     cst_channelCount$9=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$9=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$9=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_feedforward=caml_string_of_jsbytes("feedforward"),
     cst_feedback=caml_string_of_jsbytes("feedback"),
     cst_gain$1=caml_string_of_jsbytes("gain"),
     cst_GainNode=caml_string_of_jsbytes("GainNode"),
     cst_channelCount$8=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$8=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$8=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_gain$0=caml_string_of_jsbytes("gain"),
     cst_threshold$0=caml_string_of_jsbytes("threshold"),
     cst_release$0=caml_string_of_jsbytes("release"),
     cst_reduction=caml_string_of_jsbytes("reduction"),
     cst_ratio$0=caml_string_of_jsbytes("ratio"),
     cst_knee$0=caml_string_of_jsbytes("knee"),
     cst_attack$0=caml_string_of_jsbytes("attack"),
     cst_DynamicsCompressorNode=
      caml_string_of_jsbytes("DynamicsCompressorNode"),
     cst_channelCount$7=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$7=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$7=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_attack=caml_string_of_jsbytes("attack"),
     cst_knee=caml_string_of_jsbytes("knee"),
     cst_ratio=caml_string_of_jsbytes("ratio"),
     cst_release=caml_string_of_jsbytes("release"),
     cst_threshold=caml_string_of_jsbytes("threshold"),
     cst_maxChannelCount=caml_string_of_jsbytes("maxChannelCount"),
     cst_delayTime$0=caml_string_of_jsbytes("delayTime"),
     cst_DelayNode=caml_string_of_jsbytes("DelayNode"),
     cst_channelCount$6=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$6=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$6=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_delayTime=caml_string_of_jsbytes("delayTime"),
     cst_maxDelayTime=caml_string_of_jsbytes("maxDelayTime"),
     cst_normalize$0=caml_string_of_jsbytes("normalize"),
     cst_normalize=caml_string_of_jsbytes("normalize"),
     cst_buffer$5=caml_string_of_jsbytes("buffer"),
     cst_buffer$4=caml_string_of_jsbytes("buffer"),
     cst_ConvolverNode=caml_string_of_jsbytes("ConvolverNode"),
     cst_channelCount$5=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$5=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$5=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_buffer$3=caml_string_of_jsbytes("buffer"),
     cst_disableNormalization=caml_string_of_jsbytes("disableNormalization"),
     cst_offset$0=caml_string_of_jsbytes("offset"),
     cst_ConstantSourceNode=caml_string_of_jsbytes("ConstantSourceNode"),
     cst_offset=caml_string_of_jsbytes("offset"),
     cst_ChannelSplitterNode=caml_string_of_jsbytes("ChannelSplitterNode"),
     cst_channelCount$4=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$4=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$4=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_numberOfOutput=caml_string_of_jsbytes("numberOfOutput"),
     cst_ChannelMergerNode=caml_string_of_jsbytes("ChannelMergerNode"),
     cst_channelCount$3=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$3=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$3=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_numberOfInputs$0=caml_string_of_jsbytes("numberOfInputs"),
     cst_loopEnd$0=caml_string_of_jsbytes("loopEnd"),
     cst_loopEnd=caml_string_of_jsbytes("loopEnd"),
     cst_loopStart$0=caml_string_of_jsbytes("loopStart"),
     cst_loopStart=caml_string_of_jsbytes("loopStart"),
     cst_loop$3=caml_string_of_jsbytes("loop"),
     cst_loop$2=caml_string_of_jsbytes("loop"),
     cst_detune$1=caml_string_of_jsbytes("detune"),
     cst_playbackRate$2=caml_string_of_jsbytes("playbackRate"),
     cst_buffer$2=caml_string_of_jsbytes("buffer"),
     cst_buffer$1=caml_string_of_jsbytes("buffer"),
     cst_AudioBufferSourceNode=caml_string_of_jsbytes("AudioBufferSourceNode"),
     cst_buffer$0=caml_string_of_jsbytes("buffer"),
     cst_detune$0=caml_string_of_jsbytes("detune"),
     cst_loop$1=caml_string_of_jsbytes("loop"),
     cst_loop_start=caml_string_of_jsbytes("loop_start"),
     cst_loop_end=caml_string_of_jsbytes("loop_end"),
     cst_playbackRate$1=caml_string_of_jsbytes("playbackRate"),
     cst_type$9=caml_string_of_jsbytes("type"),
     cst_type$8=caml_string_of_jsbytes("type"),
     cst_BiquadFilterNode=caml_string_of_jsbytes("BiquadFilterNode"),
     cst_channelCount$2=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$2=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$2=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_type$7=caml_string_of_jsbytes("type"),
     cst_Q=caml_string_of_jsbytes("Q"),
     cst_detune=caml_string_of_jsbytes("detune"),
     cst_frequency=caml_string_of_jsbytes("frequency"),
     cst_gain=caml_string_of_jsbytes("gain"),
     cst_smoothingTimeConstant$1=
      caml_string_of_jsbytes("smoothingTimeConstant"),
     cst_smoothingTimeConstant$0=
      caml_string_of_jsbytes("smoothingTimeConstant"),
     cst_maxDecibels$1=caml_string_of_jsbytes("maxDecibels"),
     cst_maxDecibels$0=caml_string_of_jsbytes("maxDecibels"),
     cst_minDecibels$1=caml_string_of_jsbytes("minDecibels"),
     cst_minDecibels$0=caml_string_of_jsbytes("minDecibels"),
     cst_frequencyBinCount=caml_string_of_jsbytes("frequencyBinCount"),
     cst_fftSize$1=caml_string_of_jsbytes("fftSize"),
     cst_fftSize$0=caml_string_of_jsbytes("fftSize"),
     cst_AnalyserNode=caml_string_of_jsbytes("AnalyserNode"),
     cst_channelCount$1=caml_string_of_jsbytes("channelCount"),
     cst_channelCountMode$1=caml_string_of_jsbytes("channelCountMode"),
     cst_channelInterpretation$1=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_fftSize=caml_string_of_jsbytes("fftSize"),
     cst_minDecibels=caml_string_of_jsbytes("minDecibels"),
     cst_maxDecibels=caml_string_of_jsbytes("maxDecibels"),
     cst_smoothingTimeConstant=caml_string_of_jsbytes("smoothingTimeConstant"),
     cst_channelInterpretation$0=
      caml_string_of_jsbytes("channelInterpretation"),
     cst_channelInterpretation=caml_string_of_jsbytes("channelInterpretation"),
     cst_channelCountMode$0=caml_string_of_jsbytes("channelCountMode"),
     cst_channelCountMode=caml_string_of_jsbytes("channelCountMode"),
     cst_channelCount$0=caml_string_of_jsbytes("channelCount"),
     cst_channelCount=caml_string_of_jsbytes("channelCount"),
     cst_numberOfOutputs=caml_string_of_jsbytes("numberOfOutputs"),
     cst_numberOfInputs=caml_string_of_jsbytes("numberOfInputs"),
     cst_context=caml_string_of_jsbytes("context"),
     cst_numberOfChannels=caml_string_of_jsbytes("numberOfChannels"),
     cst_length$9=caml_string_of_jsbytes("length"),
     cst_length$8=caml_string_of_jsbytes("length"),
     cst_sampleRate$0=caml_string_of_jsbytes("sampleRate"),
     cst_AudioBuffer=caml_string_of_jsbytes("AudioBuffer"),
     cst_port$1=caml_string_of_jsbytes("port"),
     cst_sampleRate=caml_string_of_jsbytes("sampleRate"),
     cst_currentTime$1=caml_string_of_jsbytes("currentTime"),
     cst_currentFrame=caml_string_of_jsbytes("currentFrame"),
     cst_registerProcessor=caml_string_of_jsbytes("registerProcessor"),
     cst_maxValue$0=caml_string_of_jsbytes("maxValue"),
     cst_minValue$0=caml_string_of_jsbytes("minValue"),
     cst_defaultValue$0=caml_string_of_jsbytes("defaultValue"),
     cst_automationRate$1=caml_string_of_jsbytes("automationRate"),
     cst_automationRate$0=caml_string_of_jsbytes("automationRate"),
     cst_value$3=caml_string_of_jsbytes("value"),
     cst_value$2=caml_string_of_jsbytes("value"),
     cst_name$8=caml_string_of_jsbytes("name"),
     cst_automationRate=caml_string_of_jsbytes("automationRate"),
     cst_minValue=caml_string_of_jsbytes("minValue"),
     cst_maxValue=caml_string_of_jsbytes("maxValue"),
     cst_defaultValue=caml_string_of_jsbytes("defaultValue"),
     cst_subtle=caml_string_of_jsbytes("subtle"),
     cst_iterations=caml_string_of_jsbytes("iterations"),
     cst_salt$0=caml_string_of_jsbytes("salt"),
     cst_hash$6=caml_string_of_jsbytes("hash"),
     cst_name$24=caml_string_of_jsbytes("name"),
     cst_info$0=caml_string_of_jsbytes("info"),
     cst_salt=caml_string_of_jsbytes("salt"),
     cst_hash$5=caml_string_of_jsbytes("hash"),
     cst_name$23=caml_string_of_jsbytes("name"),
     cst_length$13=caml_string_of_jsbytes("length"),
     cst_hash$4=caml_string_of_jsbytes("hash"),
     cst_name$22=caml_string_of_jsbytes("name"),
     cst_tagLength=caml_string_of_jsbytes("tagLength"),
     cst_additionalData=caml_string_of_jsbytes("additionalData"),
     cst_iv$0=caml_string_of_jsbytes("iv"),
     cst_name$21=caml_string_of_jsbytes("name"),
     cst_iv=caml_string_of_jsbytes("iv"),
     cst_name$20=caml_string_of_jsbytes("name"),
     cst_length$12=caml_string_of_jsbytes("length"),
     cst_counter=caml_string_of_jsbytes("counter"),
     cst_name$19=caml_string_of_jsbytes("name"),
     cst_length$11=caml_string_of_jsbytes("length"),
     cst_name$18=caml_string_of_jsbytes("name"),
     cst_public=caml_string_of_jsbytes("public"),
     cst_name$17=caml_string_of_jsbytes("name"),
     cst_hash$3=caml_string_of_jsbytes("hash"),
     cst_name$16=caml_string_of_jsbytes("name"),
     cst_namedCurve$0=caml_string_of_jsbytes("namedCurve"),
     cst_name$15=caml_string_of_jsbytes("name"),
     cst_namedCurve=caml_string_of_jsbytes("namedCurve"),
     cst_name$14=caml_string_of_jsbytes("name"),
     cst_label$1=caml_string_of_jsbytes("label"),
     cst_name$13=caml_string_of_jsbytes("name"),
     cst_saltLength=caml_string_of_jsbytes("saltLength"),
     cst_name$12=caml_string_of_jsbytes("name"),
     cst_hash$2=caml_string_of_jsbytes("hash"),
     cst_name$11=caml_string_of_jsbytes("name"),
     cst_hash$1=caml_string_of_jsbytes("hash"),
     cst_publicExponent=caml_string_of_jsbytes("publicExponent"),
     cst_modulusLength=caml_string_of_jsbytes("modulusLength"),
     cst_name$10=caml_string_of_jsbytes("name"),
     cst_name$9=caml_string_of_jsbytes("name"),
     cst_privateKey=caml_string_of_jsbytes("privateKey"),
     cst_publicKey=caml_string_of_jsbytes("publicKey"),
     cst_usages=caml_string_of_jsbytes("usages"),
     cst_algorithm=caml_string_of_jsbytes("algorithm"),
     cst_extractable=caml_string_of_jsbytes("extractable"),
     cst_type$13=caml_string_of_jsbytes("type"),
     cst_crypto=caml_string_of_jsbytes("crypto"),
     cst_port$3=caml_string_of_jsbytes("port"),
     cst_data$6=caml_string_of_jsbytes("data"),
     cst_requestMIDIAccess=caml_string_of_jsbytes("requestMIDIAccess"),
     cst_sysex=caml_string_of_jsbytes("sysex"),
     cst_software=caml_string_of_jsbytes("software"),
     cst_outputs=caml_string_of_jsbytes("outputs"),
     cst_inputs=caml_string_of_jsbytes("inputs"),
     cst_send=caml_string_of_jsbytes("send"),
     cst_connection=caml_string_of_jsbytes("connection"),
     cst_state$3=caml_string_of_jsbytes("state"),
     cst_type$14=caml_string_of_jsbytes("type'"),
     cst_version=caml_string_of_jsbytes("version"),
     cst_manufacturer=caml_string_of_jsbytes("manufacturer"),
     cst_name$25=caml_string_of_jsbytes("name"),
     cst_id$1=caml_string_of_jsbytes("id"),
     cst_includeUncontrolled=caml_string_of_jsbytes("includeUncontrolled"),
     cst_type$18=caml_string_of_jsbytes("type"),
     cst_ancestorOrigins=caml_string_of_jsbytes("ancestorOrigins"),
     cst_focused=caml_string_of_jsbytes("focused"),
     cst_visibilityState$0=caml_string_of_jsbytes("visibilityState"),
     cst_type$17=caml_string_of_jsbytes("type"),
     cst_id$2=caml_string_of_jsbytes("id"),
     cst_frameType=caml_string_of_jsbytes("frameType"),
     cst_url$3=caml_string_of_jsbytes("url"),
     cst_scope$0=caml_string_of_jsbytes("scope"),
     cst_type$16=caml_string_of_jsbytes("type"),
     cst_updateViaCache$0=caml_string_of_jsbytes("updateViaCache"),
     cst_ready=caml_string_of_jsbytes("ready"),
     cst_controller=caml_string_of_jsbytes("controller"),
     cst_serviceWorker=caml_string_of_jsbytes("serviceWorker"),
     cst_updateViaCache=caml_string_of_jsbytes("updateViaCache"),
     cst_scope=caml_string_of_jsbytes("scope"),
     cst_navigationPreload=caml_string_of_jsbytes("navigationPreload"),
     cst_active$0=caml_string_of_jsbytes("active"),
     cst_waiting=caml_string_of_jsbytes("waiting"),
     cst_installing=caml_string_of_jsbytes("installing"),
     cst_headerValue=caml_string_of_jsbytes("headerValue"),
     cst_enabled$1=caml_string_of_jsbytes("enabled"),
     cst_WorkerGlobalScope=caml_string_of_jsbytes("WorkerGlobalScope"),
     cst_port$4=caml_string_of_jsbytes("port"),
     cst_type$15=caml_string_of_jsbytes("type"),
     cst_credentials$1=caml_string_of_jsbytes("credentials"),
     cst_name$26=caml_string_of_jsbytes("name"),
     cst_Worker=caml_string_of_jsbytes("Worker"),
     cst_SharedWorker=caml_string_of_jsbytes("SharedWorker"),
     cst_clients=caml_string_of_jsbytes("clients"),
     cst_registration=caml_string_of_jsbytes("registration"),
     cst_serviceWorker$0=caml_string_of_jsbytes("serviceWorker"),
     Stdlib_Uchar=global_data.Stdlib__Uchar,
     Stdlib=global_data.Stdlib,
     Stdlib_Array=global_data.Stdlib__Array,
     Stdlib_List=global_data.Stdlib__List,
     Jsoo_runtime=global_data.Jsoo_runtime,
     Stdlib_Result=global_data.Stdlib__Result,
     Assert_failure=global_data.Assert_failure,
     Stdlib_Option=global_data.Stdlib__Option,
     Stdlib_Bigarray=global_data.Stdlib__Bigarray,
     Stdlib_Fun=global_data.Stdlib__Fun,
     jv_global=globalThis,
     _f_=[0,caml_string_of_jsbytes("src/fut.ml"),34,25],
     _y_=[0,0],
     _x_=[0,1],
     _r_=[0,1],
     _q_=[0,1],
     _p_=[0,-1],
     _o_=[0,1],
     _h_=[0,7],
     _i_=[0,8],
     _j_=[0,0],
     _k_=[0,3],
     _l_=[0,1],
     _m_=[0,5],
     _n_=[0,2],
     _g_=[0,1],
     _bw_=[0,0],
     _bv_=[0,0],
     _bt_=[0,[0,4448519,0]],
     _bu_=[0,[0,4448519,0]],
     _by_=[0,0];
    function length(s){return s[cst_length]}
    function arg(opt,i)
     {if(opt)var sth=opt[1],base=sth;else var base=10;return i.toString(base)}
    function get(s,i)
     {if(length(s) <= i)
       {var
         len=length(s),
         _pC_=arg(0,len - 1 | 0),
         _pD_=
          caml_string_of_jsstring
           ("index ".concat(arg(0,i)).concat(" not in bounds [0;").concat
              (_pC_).concat
             ("]"));
        return caml_call1(Stdlib[1],_pD_)}
      var u=s.codePointAt(i),switch$0=0;
      if(55296 <= u && 57343 >= u){var u$0=65533;switch$0 = 1}
      if(! switch$0)var u$0=u;
      return caml_call1(Stdlib_Uchar[9],u$0)}
    function jstr_of_uchar_int(i)
     {return jv_global[cst_String].fromCodePoint(i)}
    function get_jstr(s,i)
     {var _pB_=get(s,i);
      return jstr_of_uchar_int(caml_call1(Stdlib_Uchar[10],_pB_))}
    var empty="",sp=" ",nl="\n";
    function symbol(s0,s1){return s0.concat(s1)}
    function concat(opt,ss)
     {if(opt)var sth=opt[1],sep=sth;else var sep=empty;
      return caml_list_to_js_array(ss).join(sep)}
    function pad_start(opt,len,s){return s.padStart(len," ")}
    function pad_end(opt,len,s){return s.padEnd(len," ")}
    function repeat(n,s){return s.repeat(n)}
    function find_sub(opt,sub,s)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      var i=s.indexOf(sub,start);
      return -1 === i?0:[0,i]}
    function find_last_sub(before,sub,s)
     {if(before)var b=before[1],before$0=b;else var before$0=length(s);
      var pos=before$0 - length(sub) | 0;
      if(0 > pos)return 0;
      var i=s.lastIndexOf(sub,pos);
      return -1 === i?0:[0,i]}
    function slice(opt,stop,s)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(stop)
       var stop$0=stop[1],args=[0,start,stop$0];
      else
       var args=[0,start];
      return caml_js_meth_call(s,cst_slice,args)}
    function sub(opt,len,s)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(len)var len$0=len[1],args=[0,start,len$0];else var args=[0,start];
      return caml_js_meth_call(s,cst_substr,args)}
    function cuts(sep,s){return caml_list_of_js_array(s.split(sep))}
    var iterator=Symbol.iterator;
    function fold_uchars(f,s,acc)
     {var it=s[iterator](),acc$0=acc;
      for(;;)
       {var r=it.next();
        if(r[cst_done] | 0)return acc$0;
        var u=r[cst_value].codePointAt(0),switch$0=0;
        if(55296 <= u && 57343 >= u){var u$0=65533;switch$0 = 1}
        if(! switch$0)var u$0=u;
        var
         acc$1=caml_call2(f,caml_call1(Stdlib_Uchar[9],u$0),acc$0),
         acc$0=acc$1}}
    function fold_jstr_uchars(f,s,acc)
     {function f$0(u,acc)
       {return caml_call2
                (f,jstr_of_uchar_int(caml_call1(Stdlib_Uchar[10],u)),acc)}
      return fold_uchars(f$0,s,acc)}
    function trim(s){return s.trim()}
    function normalized(nf,s)
     {var
       nf$0=
        868484048 <= nf
         ?868484049 <= nf?"NFKD":"NFKC"
         :3894540 <= nf?"NFD":"NFC";
      return s.normalize(nf$0)}
    function lowercased(s){return s.toLowerCase()}
    function uppercased(s){return s.toUpperCase()}
    function is_empty(s){return 0 === length(s)?1:0}
    function starts_with(prefix,s){return s.startsWith(prefix) | 0}
    function includes(affix,s){return s.includes(affix) | 0}
    function ends_with(suffix,s){return s.endsWith(suffix) | 0}
    var equal=caml_equal,compare=runtime.caml_compare;
    function of_uchar(u)
     {return jstr_of_uchar_int(caml_call1(Stdlib_Uchar[10],u))}
    function of_char(c){return jstr_of_uchar_int(c)}
    var number=jv_global[cst_Number];
    function to_int(base,s)
     {if(base)var b=base[1],args=[0,s,b];else var args=[0,s];
      var n=caml_js_meth_call(number,cst_parseInt,args);
      return caml_equal(n,n)?[0,n]:0}
    function to_float(s){return number.parseFloat(s)}
    function of_float(frac,n)
     {if(! frac)return n.toString();
      var frac$0=frac[1];
      return n.toFixed(frac$0)}
    var
     Jstr=
      [0,
       length,
       get,
       get_jstr,
       empty,
       sp,
       nl,
       symbol,
       symbol,
       concat,
       pad_start,
       pad_end,
       repeat,
       find_sub,
       find_last_sub,
       slice,
       sub,
       cuts,
       fold_uchars,
       fold_jstr_uchars,
       trim,
       normalized,
       lowercased,
       uppercased,
       is_empty,
       starts_with,
       includes,
       ends_with,
       equal,
       compare,
       of_uchar,
       of_char,
       to_int,
       arg,
       to_float,
       of_float];
    caml_register_global(2967,Jstr,"Jstr");
    function strict_equal(_pA_,_pz_){return _pA_ === _pz_?1:0}
    var null$0=null,fn=undefined;
    function is_null(v){return v === null$0?1:0}
    function is_undefined(v){return v === fn?1:0}
    function is_none(v){var _py_=is_null(v);return _py_?_py_:is_undefined(v)}
    function is_some(v){return 1 - is_none(v)}
    function to_option(conv,v){return is_none(v)?0:[0,caml_call1(conv,v)]}
    function of_option(none,conv,param)
     {if(! param)return none;var v=param[1];return caml_call1(conv,v)}
    var target=globalThis;
    function set_if_some(o,p,param)
     {if(! param)return 0;var v=param[1];return o[p] = v}
    function find(o,p){var v=o[p];return is_none(v)?0:[0,v]}
    function find_map(f,o,p)
     {var v=o[p];return is_none(v)?0:[0,caml_call1(f,v)]}
    function find_path(o,param)
     {var o$0=o,param$0=param;
      for(;;)
       {if(! param$0)return [0,o$0];
        var ps=param$0[2],p=param$0[1],match=find(o$0,p);
        if(! match)return 0;
        var o$1=match[1],o$0=o$1,param$0=ps}}
    var true$0=true,false$0=false;
    function find$0(o,p){var b=o[p];return is_none(b)?0:[0,b | 0]}
    function get$0(o,p){return o[p] | 0}
    function set(o,p,b){return o[p] = ! ! b}
    function set_if_some$0(o,p,param)
     {if(! param)return 0;var b=param[1];return set(o,p,b)}
    var Bool=[0,find$0,get$0,set,set_if_some$0];
    function find$1(o,p){var i=o[p];return is_none(i)?0:[0,i]}
    function get$1(o,p){return o[p]}
    function set$0(o,p,i){return o[p] = i}
    function set_if_some$1(o,p,param)
     {if(! param)return 0;var i=param[1];return o[p] = i}
    var Int=[0,find$1,get$1,set$0,set_if_some$1];
    function find$2(o,p){var f=o[p];return is_none(f)?0:[0,f]}
    function get$2(o,p){return o[p]}
    function set$1(o,p,b){return o[p] = b}
    function set_if_some$2(o,p,param)
     {if(! param)return 0;var f=param[1];return o[p] = f}
    var Float=[0,find$2,get$2,set$1,set_if_some$2];
    function find$3(o,p){var s=o[p];return is_none(s)?0:[0,s]}
    function get$3(o,p){return o[p]}
    function set$2(o,p,b){return o[p] = b}
    function set_if_some$3(o,p,param)
     {if(! param)return 0;var f=param[1];return o[p] = f}
    function create(n){return new (target[cst_Array])(n)}
    function length$0(a){return a[cst_length$0]}
    var Jarray=[0,create,length$0];
    function to_array(conv,v)
     {var len=caml_call1(Jarray[2],v);
      function _px_(i){return caml_call1(conv,v[i])}
      return caml_call2(Stdlib_Array[1],len,_px_)}
    function of_array(conv,a)
     {var
       len=a.length - 1,
       ja=caml_call1(Jarray[1],len),
       _pv_=len - 1 | 0,
       _pu_=0;
      if(_pv_ >= 0)
       {var i=_pu_;
        for(;;)
         {ja[i] = caml_call1(conv,runtime.caml_check_bound(a,i)[1 + i]);
          var _pw_=i + 1 | 0;
          if(_pv_ !== i){var i=_pw_;continue}
          break}}
      return ja}
    function to_list(conv,v)
     {var len=caml_call1(Jarray[2],v);
      function _pt_(i){return caml_call1(conv,v[i])}
      return caml_call2(Stdlib_List[10],len,_pt_)}
    function of_list(conv,l)
     {var ja=caml_call1(Jarray[1],0),i=0,param=l;
      for(;;)
       {if(! param)return ja;
        var vs=param[2],v=param[1];
        ja[i] = caml_call1(conv,v);
        var i$0=i + 1 | 0,i=i$0,param=vs}}
    function v(name,msg)
     {var e=new (target[cst_Error])(msg);
      if(! name)return e;
      var n=name[1];
      e[cst_name] = n;
      return e}
    function name(e){return e[cst_name$0]}
    function enum$0(e)
     {var
       match=caml_string_of_jsstring(e[cst_name$1]),
       switch$0=caml_string_compare(match,cst_NotAllowedError);
      if(0 <= switch$0)
       {if(0 >= switch$0)return 971339429;
        var switch$1=caml_string_compare(match,cst_SyntaxError);
        if(0 <= switch$1)
         {if(0 >= switch$1)return 148000204;
          if(! caml_string_notequal(match,cst_TimeoutError))return -129520566;
          if(! caml_string_notequal(match,cst_TransactionInactiveError))
           return -28376747;
          if(! caml_string_notequal(match,cst_TypeMismatchError))
           return -823442212;
          if(! caml_string_notequal(match,cst_URLMismatchError))
           return 147573767;
          if(! caml_string_notequal(match,cst_UnknownError))
           return -1064646157;
          if(! caml_string_notequal(match,cst_VersionError))
           return -1025659903;
          if(! caml_string_notequal(match,cst_WrongDocumentError))
           return -937074026}
        else
         {if(! caml_string_notequal(match,cst_NotFoundError))return 829592127;
          if(! caml_string_notequal(match,cst_NotReadableError))
           return -119831547;
          if(! caml_string_notequal(match,cst_NotSupportedError))
           return -935732949;
          if(! caml_string_notequal(match,cst_OperationError))
           return 115193424;
          if(! caml_string_notequal(match,cst_QuotaExceededError))
           return 246360739;
          if(! caml_string_notequal(match,cst_ReadOnlyError))return 842968798;
          if(! caml_string_notequal(match,cst_SecurityError))return 496062953}}
      else
       {var switch$2=caml_string_compare(match,cst_InvalidAccessError);
        if(0 <= switch$2)
         {if(0 >= switch$2)return 753062229;
          if(! caml_string_notequal(match,cst_InvalidCharacterError))
           return 197539530;
          if(! caml_string_notequal(match,cst_InvalidModificationError))
           return 943132429;
          if(! caml_string_notequal(match,cst_InvalidNodeTypeError))
           return -94613768;
          if(! caml_string_notequal(match,cst_InvalidStateError))
           return 986514226;
          if(! caml_string_notequal(match,cst_NamespaceError))
           return 861236164;
          if(! caml_string_notequal(match,cst_NetworkError))return 943709719;
          if(! caml_string_notequal(match,cst_NoModificationAllowedError))
           return 320841004}
        else
         {if(! caml_string_notequal(match,cst_AbortError))return 183065241;
          if(! caml_string_notequal(match,cst_ConstraintError))
           return 539235142;
          if(! caml_string_notequal(match,cst_DataCloneError))
           return 1031143793;
          if(! caml_string_notequal(match,cst_DataError))return 483354835;
          if(! caml_string_notequal(match,cst_EncodingError))return 518067260;
          if(! caml_string_notequal(match,cst_HierarchyRequestError))
           return 227342318;
          if(! caml_string_notequal(match,cst_IndexSizeError))return 89185783}}
      return -912009552}
    function message(e){return e[cst_message]}
    function stack(e){return e[cst_stack]}
    function throw$0(name,msg)
     {var e=v(name,msg);return caml_call1(function(exn){throw exn},e)}
    var _a_=Jsoo_runtime[3][4],symbol$0=Symbol.iterator;
    function iterable(o)
     {var _pr_=o[symbol$0],match=to_option(function(_ps_){return _ps_},_pr_);
      if(! match)return 0;
      var func=match[1];
      return func()}
    function iterator$0(o){return o[symbol$0]()}
    function next(it){return it.next()}
    function result_done(o)
     {var match=to_option(caml_js_to_bool,o[cst_done$0]);
      if(! match)return 0;
      var d=match[1];
      return d}
    function result_value(o)
     {var _pp_=o[cst_value$0];
      return to_option(function(_pq_){return _pq_},_pp_)}
    function get_result_value(o){return o[cst_value$1]}
    function fold(of_jv,f,it,acc)
     {var acc$0=acc;
      for(;;)
       {var r=it.next();
        if(result_done(r))return acc$0;
        var
         acc$1=caml_call2(f,caml_call1(of_jv,get_result_value(r)),acc$0),
         acc$0=acc$1}}
    function fold_bindings(key,value,f,it,acc)
     {var acc$0=acc;
      for(;;)
       {var r=it.next();
        if(result_done(r))return acc$0;
        var
         arr=get_result_value(r),
         _po_=caml_call1(value,arr[1]),
         acc$1=caml_call3(f,caml_call1(key,arr[0]),_po_,acc$0),
         acc$0=acc$1}}
    var promise=target[cst_Promise];
    function create$0(f)
     {function g(res,rej)
       {function _pn_(x){return rej(x)}
        return caml_call2(f,function(x){return res(x)},_pn_)}
      return new promise(caml_js_wrap_callback_strict(2,g))}
    function resolve(v){return promise.resolve(v)}
    function reject(v){return promise.reject(v)}
    function await$0(p,k){p.then(caml_js_wrap_callback_strict(1,k));return 0}
    function bind(p,res){return p.then(caml_js_wrap_callback_strict(1,res))}
    function then(p,res,rej)
     {return p.then
              (caml_js_wrap_callback_strict(1,res),
               caml_js_wrap_callback_strict(1,rej))}
    function all(arr){return promise.all(arr)}
    function find$4(o,p){var v=o[p];return is_none(v)?0:[0,v]}
    function find_map$0(f,o,p)
     {var v=o[p];return is_none(v)?0:[0,caml_call1(f,v)]}
    function obj(props)
     {function _pm_(param)
       {var v=param[2],p=param[1];return [0,caml_string_of_jsstring(p),v]}
      return runtime.caml_js_object(caml_call2(Stdlib_Array[13],_pm_,props))}
    function call(o,m,args)
     {return caml_js_meth_call(o,caml_string_of_jsstring(m),args)}
    function has(p,v){return is_some(v[p])}
    function defined(v){return is_some(v)}
    var
     Id=[0],
     _b_=[0,create$0,resolve,reject,await$0,bind,then,all],
     _c_=
      [0,
       result_done,
       result_value,
       get_result_value,
       iterable,
       iterator$0,
       next,
       fold,
       fold_bindings],
     _d_=[0,v,name,enum$0,message,stack],
     _e_=[0,find$3,get$3,set$2,set_if_some$3],
     Jv=
      [0,
       strict_equal,
       runtime.caml_js_typeof,
       caml_js_instanceof,
       null$0,
       fn,
       is_null,
       is_undefined,
       is_none,
       is_some,
       to_option,
       of_option,
       target,
       find,
       find_map,
       find_path,
       set_if_some,
       true$0,
       false$0,
       Bool,
       Int,
       Float,
       _e_,
       caml_jsstring_of_string,
       caml_string_of_jsstring,
       to_array,
       of_array,
       to_list,
       of_list,
       Jarray,
       _d_,
       _a_,
       throw$0,
       _c_,
       _b_,
       find$4,
       find_map$0,
       obj,
       call,
       has,
       defined,
       Id];
    caml_register_global(2971,Jv,"Jv");
    function promise$0(f){return f[cst_fut]}
    function promise$1(f){return f[cst_fut$0]}
    function create$1(param)
     {function not_set(param){throw [0,Assert_failure,_f_]}
      function is_set(param){return throw$0(0,"The future is already set")}
      var setter=[0,not_set];
      function set_setter(resolve,reject){setter[1] = resolve;return 0}
      var p=caml_call1(_b_[1],set_setter);
      function set(v){caml_call1(setter[1],v);setter[1] = is_set;return 0}
      return [0,{"fut":p},set]}
    function await$1(f,k)
     {var _pl_=promise$0(f);return caml_call2(_b_[4],_pl_,k)}
    function return$0(v){return {"fut":caml_call1(_b_[2],v)}}
    function bind$0(f,fn)
     {function _pj_(v){return promise$0(caml_call1(fn,v))}
      var _pk_=promise$0(f);
      return {"fut":caml_call2(_b_[5],_pk_,_pj_)}}
    function map(fn,f)
     {return bind$0(f,function(v){return return$0(caml_call1(fn,v))})}
    function pair(f0,f1)
     {function _pf_(v0)
       {function _ph_(v1){return caml_call1(_b_[2],[0,v0,v1])}
        var _pi_=promise$0(f1);
        return caml_call1(caml_call1(_b_[5],_pi_),_ph_)}
      var _pg_=promise$0(f0);
      return {"fut":caml_call1(caml_call1(_b_[5],_pg_),_pf_)}}
    function of_list$0(fs)
     {var arr=of_list(promise$1,fs),all=caml_call1(_b_[7],arr);
      function to_list$0(l)
       {var _pd_=to_list(function(_pe_){return _pe_},l);
        return caml_call1(_b_[2],_pd_)}
      return {"fut":caml_call2(_b_[5],all,to_list$0)}}
    function tick(ms)
     {function _pc_(res,rej){target[cst_setTimeout](res,ms);return 0}
      return {"fut":caml_call1(_b_[1],_pc_)}}
    function ok(v){return return$0([0,v])}
    function error(e){return return$0([1,e])}
    function of_promise(ok,error,p)
     {function ok$0(v)
       {var _pb_=[0,caml_call1(ok,v)];return caml_call1(_b_[2],_pb_)}
      function error$0(e)
       {var _pa_=[1,caml_call1(error,e)];return caml_call1(_b_[2],_pa_)}
      return {"fut":caml_call3(_b_[6],p,ok$0,error$0)}}
    function to_promise(ok,error,f)
     {function _o$_(res,rej)
       {return await$1
                (f,
                 function(param)
                  {if(0 === param[0])
                    {var v=param[1];return caml_call1(res,caml_call1(ok,v))}
                   var e=param[1];
                   return caml_call1(rej,caml_call1(error,e))})}
      return caml_call1(_b_[1],_o$_)}
    function of_promise$0(ok,v)
     {return of_promise(ok,function(_o__){return _o__},v)}
    function to_promise$0(ok,v)
     {return to_promise(ok,function(_o9_){return _o9_},v)}
    function let$0(f,fn){return map(fn,f)}
    var Syntax=[0,bind$0,pair,let$0,pair];
    function result_pair(r0,r1)
     {if(0 === r0[0])
       {var _o8_=r0[1];
        if(0 === r1[0]){var v1=r1[1];return [0,[0,_o8_,v1]]}
        var r=r1}
      else
       var r=r0;
      return r}
    function let$1(f,fn)
     {return bind$0
              (f,
               function(e)
                {if(0 !== e[0])return return$0(e);
                 var v=e[1];
                 return caml_call1(fn,v)})}
    function and(f0,f1){return map(result_pair,pair(f0,f1))}
    function let$2(f,fn){return map(caml_call1(Stdlib_Result[8],fn),f)}
    var
     Fut=
      [0,
       create$1,
       await$1,
       return$0,
       map,
       bind$0,
       pair,
       of_list$0,
       tick,
       ok,
       error,
       of_promise$0,
       to_promise$0,
       of_promise,
       to_promise,
       Syntax,
       [0,let$1,and,let$2,and]];
    caml_register_global(2974,Fut,"Fut");
    var Type=[0];
    function init(bubbles,cancelable,composed,param)
     {var o={};
      caml_call3(Bool[4],o,cst_bubbles,bubbles);
      caml_call3(Bool[4],o,cst_cancelable,cancelable);
      caml_call3(Bool[4],o,cst_composed,composed);
      return o}
    var event=target[cst_Event];
    function create$2(opt,t)
     {if(opt)var sth=opt[1],init=sth;else var init={};
      return new event(t,init)}
    function type(e){return caml_call2(_e_[2],e,cst_type)}
    function target$0(e){return e[cst_target]}
    function current_target(e){return e[cst_currentTarget]}
    function composed_path(e)
     {var _o6_=e.composedPath();
      return to_list(function(_o7_){return _o7_},_o6_)}
    function event_phase(e)
     {var match=caml_call2(Int[2],e,cst_eventPhase),switcher=match - 1 | 0;
      if(2 < switcher >>> 0)return 870530776;
      switch(switcher)
       {case 0:return 497141539;
        case 1:return -276077507;
        default:return 608305129}}
    function bubbles(e){return caml_call2(Bool[2],e,cst_bubbles$0)}
    function stop_propagation(e){e.stopPropagation();return 0}
    function stop_immediate_propagation(e)
     {e.stopImmediatePropagation();return 0}
    function cancelable(e){return caml_call2(Bool[2],e,cst_cancelable$0)}
    function prevent_default(e){e.preventDefault();return 0}
    function default_prevented(e)
     {return caml_call2(Bool[2],e,cst_defaultPrevented)}
    function composed(e){return caml_call2(Bool[2],e,cst_composed$0)}
    function is_trusted(e){return caml_call2(Bool[2],e,cst_isTrusted)}
    function timestamp_ms(e){return caml_call2(Float[2],e,cst_timeStamp)}
    function dispatch(e,t){return t.dispatchEvent(e) | 0}
    function listen_opts(capture,once,passive,param)
     {var o={};
      caml_call3(Bool[4],o,cst_capture,capture);
      caml_call3(Bool[4],o,cst_once,once);
      caml_call3(Bool[4],o,cst_passive,passive);
      return o}
    function listen(opt,type,f,t)
     {if(opt)var sth=opt[1],opts=sth;else var opts={};
      var f$0=caml_js_wrap_callback_strict(1,f);
      function unlisten(param){t.removeEventListener(type,f$0,opts);return 0}
      t.addEventListener(type,f$0,opts);
      return unlisten}
    function unlisten(unlisten){return caml_call1(unlisten,0)}
    function next$0(capture,type,t)
     {var
       match=create$1(0),
       set=match[2],
       fut=match[1],
       opts=listen_opts(capture,_g_,0,0);
      listen([0,opts],type,set,t);
      return fut}
    var
     none="none",
     copy="copy",
     copy_link="copyLink",
     copy_move="copyMove",
     link="link",
     link_move="linkMove",
     move="move",
     all$0="all",
     uninitialized="uninitialized",
     Effect=
      [0,
       none,
       copy,
       copy_link,
       copy_move,
       link,
       link_move,
       move,
       all$0,
       uninitialized],
     file="file",
     string="string",
     Kind=[0,file,string];
    function kind(i){return caml_call2(_e_[2],i,cst_kind)}
    function type$0(i){return caml_call2(_e_[2],i,cst_type$0)}
    function get_file(i)
     {var _o4_=i.getAsFile();
      return to_option(function(_o5_){return _o5_},_o4_)}
    function get_jstr$0(i)
     {var
       match=create$1(0),
       set_str=match[2],
       str=match[1],
       set_str$0=caml_js_wrap_callback_strict(1,set_str);
      i.getAsString(set_str$0);
      return str}
    var Item=[0,Kind,kind,type$0,get_file,get_jstr$0];
    function length$1(l){return caml_call2(Int[2],l,cst_length$1)}
    function add_jstr(l,type,str)
     {var _o2_=l.add(str,type);
      return to_option(function(_o3_){return _o3_},_o2_)}
    function add_file(t,file)
     {var _o0_=t.add(file);return to_option(function(_o1_){return _o1_},_o0_)}
    function remove(l,i){l.remove(i);return 0}
    function clear(l){l.clear();return 0}
    function items(l)
     {var acc=[0,0],_oX_=length$1(l) - 1 | 0;
      if(_oX_ >= 0)
       {var i=_oX_;
        for(;;)
         {var _oY_=acc[1];
          acc[1] = [0,l[i],_oY_];
          var _oZ_=i - 1 | 0;
          if(0 !== i){var i=_oZ_;continue}
          break}}
      return acc[1]}
    function drop_effect(d){return caml_call2(_e_[2],d,cst_dropEffect)}
    function set_drop_effect(d,e)
     {return caml_call3(_e_[3],d,cst_dropEffect$0,e)}
    function effect_allowed(d){return caml_call2(_e_[2],d,cst_effectAllowed)}
    function set_effect_allowed(d,e)
     {return caml_call3(_e_[3],d,cst_effectAllowed$0,e)}
    function items$0(d){return d[cst_items]}
    function data(c)
     {return find_map(function(_oW_){return _oW_},c,cst_clipboardData)}
    var Clipboard=[0,data];
    function data$0(i){return caml_call2(_e_[2],i,cst_data)}
    var Composition=[0,data$0];
    function message$0(e){return caml_call2(_e_[2],e,cst_message$0)}
    function filename(e){return caml_call2(_e_[2],e,cst_filename)}
    function lineno(e){return caml_call2(Int[2],e,cst_lineno)}
    function colno(e){return caml_call2(Int[2],e,cst_colno)}
    function error$0(e){return e[cst_error]}
    var Error=[0,message$0,filename,lineno,colno,error$0];
    function wait_until(e,fut)
     {e.waitUntil(to_promise$0(function(_oV_){return _oV_},fut));return 0}
    var Extendable=[0,wait_until];
    function related_target(m)
     {return find_map(function(_oU_){return _oU_},m,cst_relatedTarget)}
    var Focus=[0,related_target];
    function old_url(e){return caml_call2(_e_[2],e,cst_oldURL)}
    function new_url(e){return caml_call2(_e_[2],e,cst_newURL)}
    var Hash_change=[0,old_url,new_url];
    function data$1(i){return caml_call2(_e_[2],i,cst_data$0)}
    function data_transfer(i){return find(i,cst_dataTransfer)}
    function input_type(i){return caml_call2(_e_[2],i,cst_inputType)}
    function is_composing(i){return caml_call2(Bool[2],i,cst_isComposing)}
    var
     Input=[0,data$1,data_transfer,input_type,is_composing],
     Location=[0,0,1,2,3];
    function key(k){return caml_call2(_e_[2],k,cst_key)}
    function code(k){return caml_call2(_e_[2],k,cst_code)}
    function location(k){return caml_call2(Int[2],k,cst_location)}
    function repeat$0(k){return caml_call2(Bool[2],k,cst_repeat)}
    function is_composing$0(k){return caml_call2(Bool[2],k,cst_isComposing$0)}
    function alt_key(k){return caml_call2(Bool[2],k,cst_altKey)}
    function ctrl_key(k){return caml_call2(Bool[2],k,cst_ctrlKey)}
    function shift_key(k){return caml_call2(Bool[2],k,cst_shiftKey)}
    function meta_key(k){return caml_call2(Bool[2],k,cst_metaKey)}
    function get_modifier_state(k,key){return k.getModifierState(key) | 0}
    var
     Keyboard=
      [0,
       Location,
       key,
       code,
       location,
       repeat$0,
       is_composing$0,
       alt_key,
       ctrl_key,
       shift_key,
       meta_key,
       get_modifier_state];
    function related_target$0(m)
     {return find_map(function(_oT_){return _oT_},m,cst_relatedTarget$0)}
    function offset_x(m){return caml_call2(Float[2],m,cst_offsetX)}
    function offset_y(m){return caml_call2(Float[2],m,cst_offsetY)}
    function client_x(m){return caml_call2(Float[2],m,cst_clientX)}
    function client_y(m){return caml_call2(Float[2],m,cst_clientY)}
    function page_x(m){return caml_call2(Float[2],m,cst_pageX)}
    function page_y(m){return caml_call2(Float[2],m,cst_pageY)}
    function screen_x(m){return caml_call2(Float[2],m,cst_screenX)}
    function screen_y(m){return caml_call2(Float[2],m,cst_screenY)}
    function movement_x(m){return caml_call2(Float[2],m,cst_movementX)}
    function movement_y(m){return caml_call2(Float[2],m,cst_movementY)}
    function button(m){return caml_call2(Int[2],m,cst_button)}
    function buttons(m){return caml_call2(Int[2],m,cst_buttons)}
    function alt_key$0(m){return caml_call2(Bool[2],m,cst_altKey$0)}
    function ctrl_key$0(m){return caml_call2(Bool[2],m,cst_ctrlKey$0)}
    function shift_key$0(m){return caml_call2(Bool[2],m,cst_shiftKey$0)}
    function meta_key$0(m){return caml_call2(Bool[2],m,cst_metaKey$0)}
    function get_modifier_state$0(m,key){return m.getModifierState(key) | 0}
    var
     Mouse=
      [0,
       related_target$0,
       offset_x,
       offset_y,
       client_x,
       client_y,
       page_x,
       page_y,
       screen_x,
       screen_y,
       movement_x,
       movement_y,
       button,
       buttons,
       alt_key$0,
       ctrl_key$0,
       shift_key$0,
       meta_key$0,
       get_modifier_state$0];
    function data_transfer$0(d)
     {return find_map(function(_oS_){return _oS_},d,cst_dataTransfer$0)}
    var Drag=[0,data_transfer$0];
    function id(p){return caml_call2(Int[2],p,cst_pointerId)}
    function width(p){return caml_call2(Float[2],p,cst_width)}
    function height(p){return caml_call2(Float[2],p,cst_height)}
    function pressure(p){return caml_call2(Float[2],p,cst_pressure)}
    function tangential_pressure(p)
     {return caml_call2(Float[2],p,cst_tangentialPressure)}
    function tilt_x(p){return caml_call2(Int[2],p,cst_tiltX)}
    function tilt_y(p){return caml_call2(Int[2],p,cst_tiltY)}
    function twist(p){return caml_call2(Int[2],p,cst_twist)}
    function altitude_angle(p)
     {return caml_call2(Float[2],p,cst_altitudeAngle)}
    function azimuth_angle(p){return caml_call2(Float[2],p,cst_azimuthAngle)}
    function type$1(p){return caml_call2(_e_[2],p,cst_pointerType)}
    function is_primary(p){return caml_call2(Bool[2],p,cst_isPrimary)}
    function get_coalesced_events(p)
     {var _oQ_=p.getCoalescedEvents();
      return to_list(function(_oR_){return _oR_},_oQ_)}
    function get_predicted_events(p)
     {var _oO_=p.getPredictedEvents();
      return to_list(function(_oP_){return _oP_},_oO_)}
    var
     Pointer=
      [0,
       id,
       width,
       height,
       pressure,
       tangential_pressure,
       tilt_x,
       tilt_y,
       twist,
       altitude_angle,
       azimuth_angle,
       type$1,
       is_primary,
       get_coalesced_events,
       get_predicted_events],
     Delta_mode=[0,0,1,2];
    function delta_x(w){return caml_call2(Float[2],w,cst_deltaX)}
    function delta_y(w){return caml_call2(Float[2],w,cst_deltaY)}
    function delta_z(w){return caml_call2(Float[2],w,cst_deltaZ)}
    function delta_mode(w){return caml_call2(Int[2],w,cst_deltaMode)}
    var
     Wheel=[0,Delta_mode,delta_x,delta_y,delta_z,delta_mode],
     abort="abort",
     activate="activate",
     auxclick="dblclick",
     beforeinput="beforeinput",
     beforeunload="beforeunload",
     blur="blur",
     canplay="canplay",
     canplaythrough="canplaythrough",
     change="change",
     click="click",
     clipboardchange="clipboardchange",
     close="close",
     compositionend="compositionend",
     compositionstart="compositionstart",
     compositionudpate="compositionupdate",
     controllerchange="controllerchange",
     copy$0="copy",
     cut="cut",
     dblclick="dblclick",
     dom_content_loaded="DOMContentLoaded",
     drag="drag",
     dragend="dragend",
     dragenter="dragenter",
     dragexit="dragexit",
     dragleave="dragleave",
     dragover="dragover",
     dragstart="dragstart",
     drop="drop",
     durationchange="durationchange",
     emptied="emptied",
     ended="ended",
     error$1="error",
     focus="focus",
     focusin="focusin",
     focusout="focusout",
     fullscreenchange="fullscreenchange",
     fullscreenerror="fullscreenerror",
     gotpointercapture="gotpointercapture",
     hashchange="hashchange",
     input="input",
     install="install",
     keydown="keydown",
     keyup="keyup",
     languagechange="languagechange",
     load="load",
     loadeddata="loadeddata",
     loadedmetadata="loadedmetadata",
     loadstart="loadstart",
     lostpointercapture="lostpointercapture",
     mousedown="mousedown",
     mouseenter="mouseenter",
     mouseleave="mouseleave",
     mousemove="mousemove",
     mouseout="mouseout",
     mouseover="mouseover",
     mouseup="mouseup",
     open="open",
     paste="paste",
     pause="pause",
     play="play",
     playing="playing",
     pointercancel="pointercancel",
     pointerdown="pointerdown",
     pointerenter="pointerenter",
     pointerleave="pointerleave",
     pointerlockchange="pointerlockchange",
     pointerlockerror="pointerlockerror",
     pointermove="pointermove",
     pointerout="pointerout",
     pointerover="pointerover",
     pointerrawupdate="pointerrawupdate",
     pointerup="pointerup",
     progress="progress",
     ratechange="ratechange",
     reset="reset",
     resize="resize",
     scroll="scroll",
     seeked="seeked",
     seeking="seeking",
     select="select",
     stalled="stalled",
     statechange="statechange",
     suspend="suspend",
     timeupdate="timeupdate",
     unload="unload",
     updatefound="updatefound",
     visibilitychange="visibilitychange",
     volumechange="volumechange",
     waiting="waiting",
     wheel="wheel",
     array_buffer=target[cst_ArrayBuffer];
    function create$3(n){return new array_buffer(n)}
    function byte_length(a){return caml_call2(Int[2],a,cst_byteLength)}
    function slice$0(opt,stop,a)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(stop)var stop$0=stop[1],stop$1=stop$0;else var stop$1=byte_length(a);
      return a.slice(start,stop$1)}
    function buffer(o){return o[cst_buffer]}
    function byte_offset(o){return caml_call2(Int[2],o,cst_byteOffset)}
    function byte_length$0(o){return caml_call2(Int[2],o,cst_byteLength$0)}
    var dataview=target[cst_DataView];
    function of_buffer(opt,byte_length$0,b)
     {if(opt)var sth=opt[1],byte_offset=sth;else var byte_offset=0;
      if(byte_length$0)
       var l=byte_length$0[1],byte_length$1=l;
      else
       var byte_length$1=byte_length(b);
      return new dataview(b,byte_offset,byte_length$1)}
    function get_int8(b,i){return b.getInt8(i)}
    function get_int16_be(b,i){return b.getInt16(i)}
    function get_int16_le(b,i){return b.getInt16(i,true$0)}
    function get_int32_be(b,i){return b.getInt32(i)}
    function get_int32_le(b,i){return b.getInt32(i,true$0)}
    function get_uint8(b,i){return b.getUint8(i)}
    function get_uint16_be(b,i){return b.getUint16(i)}
    function get_uint16_le(b,i){return b.getUint16(i,true$0)}
    function get_uint32_be(b,i){return b.getUint32(i)}
    function get_uint32_le(b,i){return b.getUint32(i,true$0)}
    function get_float32_be(b,i){return b.getFloat32(i)}
    function get_float32_le(b,i){return b.getFloat32(i,true$0)}
    function get_float64_be(b,i){return b.getFloat64(i)}
    function get_float64_le(b,i){return b.getFloat64(i,true$0)}
    function set_int8(b,i,v){b.setInt8(i,v);return 0}
    function set_int16_be(b,i,v){b.setInt16(i,v);return 0}
    function set_int16_le(b,i,v){b.setInt16(i,v,true$0);return 0}
    function set_int32_be(b,i,v){b.setInt32(i,v);return 0}
    function set_int32_le(b,i,v){b.setInt32(i,v,true$0);return 0}
    function set_uint8(b,i,v){b.setUint8(i,v);return 0}
    function set_uint16_be(b,i,v){b.setUint16(i,v);return 0}
    function set_uint16_le(b,i,v){b.setUint16(i,v,true$0);return 0}
    function set_uint32_be(b,i,v){b.setUint32(i,v);return 0}
    function set_uint32_le(b,i,v){b.setUint32(i,v,true$0);return 0}
    function set_float32_be(b,i,v){b.setFloat32(i,v);return 0}
    function set_float32_le(b,i,v){b.setFloat32(i,v,true$0);return 0}
    function set_float64_be(b,i,v){b.setFloat64(i,v);return 0}
    function set_float64_le(b,i,v){b.setFloat64(i,v,true$0);return 0}
    function type_size_in_bytes(param)
     {switch(param)
       {case 8:return 8;
        case 1:
        case 5:return 2;
        case 0:
        case 3:
        case 4:return 1;
        default:return 4}}
    function cons_of_type(param)
     {switch(param)
       {case 0:return target[cst_Int8Array];
        case 1:return target[cst_Int16Array];
        case 2:return target[cst_Int32Array];
        case 3:return target[cst_Uint8Array];
        case 4:return target[cst_Uint8ClampedArray];
        case 5:return target[cst_Uint16Array];
        case 6:return target[cst_Uint32Array];
        case 7:return target[cst_Float32Array];
        default:return target[cst_Float64Array]}}
    function create$4(t,n){return new (cons_of_type(t))(n)}
    function of_buffer$0(t,opt,length,b)
     {if(opt)var sth=opt[1],byte_offset=sth;else var byte_offset=0;
      if(length)
       var l=length[1],args=[0,b,byte_offset,l];
      else
       var args=[0,b,byte_offset];
      return caml_js_new(cons_of_type(t),args)}
    function length$2(a){return caml_call2(Int[2],a,cst_length$2)}
    function type$2(a)
     {var
       _oN_=a[cst_constructor],
       s=caml_string_of_jsstring(caml_call2(_e_[2],_oN_,cst_name$2));
      if(! caml_string_notequal(s,cst_Float32Array$0))return 7;
      if(! caml_string_notequal(s,cst_Float64Array$0))return 8;
      if(! caml_string_notequal(s,cst_Int16Array$0))return 1;
      if(! caml_string_notequal(s,cst_Int32Array$0))return 2;
      if(! caml_string_notequal(s,cst_Int8Array$0))return 0;
      if(! caml_string_notequal(s,cst_Uint16Array$0))return 5;
      if(! caml_string_notequal(s,cst_Uint32Array$0))return 6;
      if(! caml_string_notequal(s,cst_Uint8Array$0))return 3;
      if(! caml_string_notequal(s,cst_Uint8ClampedArray$0))return 4;
      var t=caml_jsstring_of_string(s);
      return throw$0(0,"Unknown typed array: ".concat(t))}
    function set_tarray(a,dst,b){a.set(b,dst);return 0}
    function fill(opt,stop,v,a)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(stop)var stop$0=stop[1],stop$1=stop$0;else var stop$1=length$2(a);
      a.fill(v,start,stop$1);
      return 0}
    function copy_within(opt,stop,dst,a)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(stop)var stop$0=stop[1],stop$1=stop$0;else var stop$1=length$2(a);
      a.copyWithin(dst,start,stop$1);
      return 0}
    function slice$1(opt,stop,a)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(stop)
       var stop$0=stop[1],stop$1=stop$0;
      else
       var stop$1=byte_length$0(a);
      return a.slice(start,stop$1)}
    function sub$0(opt,stop,a)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(stop)
       var stop$0=stop[1],stop$1=stop$0;
      else
       var stop$1=byte_length$0(a);
      return a.subArray(start,stop$1)}
    function find$5(sat,a)
     {function sat$0(v,i){return ! ! caml_call2(sat,i,v)}
      var _oL_=a.find(caml_js_wrap_callback_strict(2,sat$0));
      return to_option(function(_oM_){return _oM_},_oL_)}
    function find_index(sat,a)
     {function sat$0(v,i){return ! ! caml_call2(sat,i,v)}
      var i=a.findIndex(caml_js_wrap_callback_strict(2,sat$0));
      return -1 === i?0:[0,i]}
    function for_all(sat,a)
     {function sat$0(v,i){return ! ! caml_call2(sat,i,v)}
      return a.every(caml_js_wrap_callback_strict(2,sat$0)) | 0}
    function exists(sat,a)
     {function sat$0(v,i){return ! ! caml_call2(sat,i,v)}
      return a.every(caml_js_wrap_callback_strict(2,sat$0)) | 0}
    function filter(sat,a)
     {function sat$0(v,i){return ! ! caml_call2(sat,i,v)}
      return a.filter(caml_js_wrap_callback_strict(2,sat$0))}
    function iter(f,a)
     {function f$0(v,i){return caml_call2(f,i,v)}
      a.forEach(caml_js_wrap_callback_strict(2,f$0));
      return 0}
    function map$0(f,a){return a.map(caml_js_wrap_callback_strict(1,f))}
    function fold_left(f,acc,a)
     {return a.reduce(caml_js_wrap_callback_strict(2,f),acc)}
    function fold_right(f,a,acc)
     {function f$0(acc,v){return caml_call2(f,v,acc)}
      return a.reduceRight(caml_js_wrap_callback_strict(2,f$0),acc)}
    function reverse(a){return a.reverse()}
    function of_tarray(t,a){return new (cons_of_type(t))(a)}
    function of_int_array(t,a)
     {var _oJ_=of_array(function(_oK_){return _oK_},a);
      return new (cons_of_type(t))(_oJ_)}
    function of_float_array(t,a)
     {var _oH_=of_array(function(_oI_){return _oI_},a);
      return new (cons_of_type(t))(_oH_)}
    function to_int_jstr(opt,b)
     {if(opt)var sth=opt[1],sep=sth;else var sep=sp;return b.join(sep)}
    function to_hex_jstr(opt,a)
     {if(opt)var sth=opt[1],sep=sth;else var sep=empty;
      var
       hex="0123456789abcdef",
       d=of_buffer(0,0,buffer(a)),
       s=[0,empty],
       _oD_=byte_length$0(d) - 1 | 0,
       _oC_=0;
      if(_oD_ >= 0)
       {var i=_oC_;
        for(;;)
         {var
           b=d.getUint8(i),
           sep$0=0 === i?empty:sep,
           _oE_=get_jstr(hex,b & 15),
           _oF_=get_jstr(hex,b >>> 4 | 0);
          s[1] = s[1].concat(sep$0).concat(_oF_).concat(_oE_);
          var _oG_=i + 1 | 0;
          if(_oD_ !== i){var i=_oG_;continue}
          break}}
      return s[1]}
    function uint8_of_buffer(b){return of_buffer$0(3,0,0,b)}
    function of_jstr(s)
     {var enc=new (target[cst_TextEncoder])();return enc.encode(s)}
    function to_jstr(a)
     {var dec=new (target[cst_TextDecoder])("utf-8",{"fatal":true$0});
      try
       {var s=dec.decode(a)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}
      return [0,s]}
    function of_binary_jstr(s)
     {function code(s,i)
       {var c=s.charCodeAt(i);
        if(255 >= c)return c;
        var _oB_=arg(0,c);
        return throw$0
                (0,
                 arg(0,i).concat(": char code ").concat(_oB_).concat
                  ("exceeds 255"))}
      try
       {var
         b=create$3(length(s)),
         d=of_buffer(0,0,b),
         _oy_=length(s) - 1 | 0,
         _ox_=0;
        if(_oy_ >= 0)
         {var i=_ox_;
          for(;;)
           {set_int8(d,i,code(s,i));
            var _oA_=i + 1 | 0;
            if(_oy_ !== i){var i=_oA_;continue}
            break}}
        var _oz_=[0,of_buffer$0(0,0,0,b)];
        return _oz_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}}
    function to_binary_jstr(a)
     {var
       d=of_buffer(0,0,buffer(a)),
       s=[0,empty],
       _ov_=byte_length$0(d) - 1 | 0,
       _ou_=0;
      if(_ov_ >= 0)
       {var i=_ou_;
        for(;;)
         {var b=d.getUint8(i),_ot_=target[cst_String$0].fromCharCode(b);
          s[1] = s[1].concat(_ot_);
          var _ow_=i + 1 | 0;
          if(_ov_ !== i){var i=_ow_;continue}
          break}}
      return s[1]}
    function type_to_bigarray_kind(param)
     {switch(param)
       {case 0:return Stdlib_Bigarray[5];
        case 1:return Stdlib_Bigarray[7];
        case 2:return Stdlib_Bigarray[10];
        case 3:return Stdlib_Bigarray[6];
        case 4:return Stdlib_Bigarray[6];
        case 5:return Stdlib_Bigarray[8];
        case 6:return Stdlib_Bigarray[10];
        case 7:return Stdlib_Bigarray[1];
        default:return Stdlib_Bigarray[2]}}
    function type_of_bigarray_kind(param)
     {switch(param)
       {case 0:return _h_;
        case 1:return _i_;
        case 2:return _j_;
        case 3:return _k_;
        case 4:return _l_;
        case 5:return _m_;
        case 6:return _n_;
        default:return 0}}
    var
     transparent="transparent",
     native$0="native",
     Ending_type=[0,transparent,native$0];
    function init$0(type,endings,param)
     {var o={};
      caml_call3(_e_[4],o,cst_type$1,type);
      caml_call3(_e_[4],o,cst_endings,endings);
      return o}
    var blob=target[cst_Blob];
    function of_jstr$0(opt,s)
     {if(opt)var sth=opt[1],init=sth;else var init=fn;
      var a=caml_call1(Jarray[1],1);
      a[0] = s;
      return new blob(a,init)}
    function of_array_buffer(opt,b)
     {if(opt)var sth=opt[1],init=sth;else var init=fn;
      return new blob(runtime.caml_js_from_array([0,b]),init)}
    function byte_length$1(b){return caml_call2(Int[2],b,cst_size)}
    function type$3(b){return caml_call2(_e_[2],b,cst_type$2)}
    function slice$2(opt,stop,_os_,b)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(_os_)var sth$0=_os_[1],type=sth$0;else var type=empty;
      if(stop)
       var stop$0=stop[1],stop$1=stop$0;
      else
       var stop$1=byte_length$1(b);
      return b.slice(start,stop$1,type)}
    function array_buffer$0(b)
     {var _oq_=b.arrayBuffer();
      return of_promise$0(function(_or_){return _or_},_oq_)}
    function stream(b){return b[cst_stream]}
    function text(b)
     {var _oo_=b.text();return of_promise$0(function(_op_){return _op_},_oo_)}
    function data_uri(b)
     {var
       reader=new (target[cst_FileReader])(),
       match=create$1(0),
       set_fut=match[2],
       fut=match[1];
      function ok(e)
       {return caml_call1(set_fut,[0,caml_call2(_e_[2],reader,cst_result)])}
      function error(e){return caml_call1(set_fut,[1,reader[cst_error$0]])}
      var opts=listen_opts(0,_o_,0,0);
      listen([0,opts],load,ok,reader);
      listen([0,opts],error$1,error,reader);
      reader.readAsDataURL(b);
      return fut}
    function init$1(blob_init,last_modified_ms,param)
     {if(blob_init)var b=blob_init[1],o=b;else var o={};
      caml_call3(Int[4],o,cst_lastModified,last_modified_ms);
      return o}
    var file$0=target[cst_File];
    function of_blob(opt,name,b)
     {if(opt)var sth=opt[1],init=sth;else var init={};
      return new file$0(b,name,init)}
    function name$0(f){return caml_call2(_e_[2],f,cst_name$3)}
    function relative_path(f)
     {var p=find_map(function(_on_){return _on_},f,cst_webkitRelativePath);
      return caml_call2(Stdlib_Option[3],p,empty)}
    function last_modified_ms(f)
     {return caml_call2(Int[2],f,cst_lastModified$0)}
    function data_utf_8_of_jstr(s){return to_binary_jstr(of_jstr(s))}
    function data_utf_8_to_jstr(d)
     {var e=of_binary_jstr(d);
      if(0 !== e[0])return e;
      var t=e[1];
      return to_jstr(t)}
    function data_of_binary_jstr(_om_){return _om_}
    function data_to_binary_jstr(_ol_){return _ol_}
    function encode(bs)
     {try
       {var v=target[cst_btoa](bs)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}
      return [0,v]}
    function decode(s)
     {try
       {var v=target[cst_atob](s)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}
      return [0,v]}
    var
     Base64=
      [0,
       data_utf_8_of_jstr,
       data_utf_8_to_jstr,
       data_of_binary_jstr,
       data_to_binary_jstr,
       encode,
       decode],
     json=target[cst_JSON];
    function encode$0(v){return json.stringify(v)}
    function decode$0(s)
     {try
       {var v=json.parse(s)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}
      return [0,v]}
    var
     encode$1=target[cst_encodeURI],
     decode$1=target[cst_decodeURI],
     url=target[cst_URL];
    function v$0(base,s)
     {if(! base)return new url(s);var b=base[1];return new url(s,b)}
    function with_uri(scheme,host,port,path,query,fragment,u)
     {var u$0=new url(u);
      function pct_enc(v){return encode$1(v)}
      try
       {set_if_some
         (u$0,cst_protocol,caml_call2(Stdlib_Option[7],pct_enc,scheme));
        set_if_some
         (u$0,cst_hostname,caml_call2(Stdlib_Option[7],pct_enc,host));
        if(port)
         {var
           p=port[1],
           _oi_=function(eta){return arg(0,eta)},
           _oj_=caml_call2(Stdlib_Option[7],_oi_,p);
          caml_call3(_e_[4],u$0,cst_port,_oj_)}
        set_if_some
         (u$0,cst_pathname,caml_call2(Stdlib_Option[7],pct_enc,path));
        set_if_some(u$0,cst_search,caml_call2(Stdlib_Option[7],pct_enc,query));
        set_if_some
         (u$0,cst_hash,caml_call2(Stdlib_Option[7],pct_enc,fragment));
        var _ok_=[0,u$0];
        return _ok_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}}
    function pct_dec(v){return decode$1(v)}
    function scheme(u)
     {var p=pct_dec(u[cst_protocol$0]);
      return 0 === length(p)?p:slice(0,_p_,p)}
    function host(u){return pct_dec(u[cst_hostname$0])}
    function port(u)
     {var p=caml_call2(_e_[2],u,cst_port$0);return is_empty(p)?0:to_int(0,p)}
    function query(u)
     {var q=pct_dec(u[cst_search$0]);return is_empty(q)?q:slice(_q_,0,q)}
    function path(u){return pct_dec(u[cst_pathname$0])}
    function fragment(u)
     {var f=decode$1(u[cst_hash$0]);return is_empty(f)?f:slice(_r_,0,f)}
    var usp=target[cst_URLSearchParams];
    function is_empty$0(p)
     {var _og_=p.entries(),_oh_=caml_call1(_c_[6],_og_);
      return caml_call1(_c_[1],_oh_)}
    function mem(k,p){return p.has(k) | 0}
    function find$6(k,p)
     {var _oe_=p.get(k);return to_option(function(_of_){return _of_},_oe_)}
    function find_all(k,p){return caml_list_of_js_array(p.getAll(k))}
    function fold$0(f,p,acc)
     {function key(_od_){return _od_}
      function value(_oc_){return _oc_}
      var _ob_=p.entries();
      return caml_call5(_c_[8],key,value,f,_ob_,acc)}
    function of_jstr$1(s){return new usp(s)}
    function to_jstr$0(p){return p.toString()}
    function of_assoc(l)
     {var p=of_jstr$1(empty);
      function _oa_(param){var v=param[2],k=param[1];p.append(k,v);return 0}
      caml_call2(Stdlib_List[17],_oa_,l);
      return p}
    function to_assoc(p)
     {var
       _n__=0,
       _n$_=fold$0(function(k,v,acc){return [0,[0,k,v],acc]},p,_n__);
      return caml_call1(Stdlib_List[9],_n$_)}
    function of_obj(o){return new usp(o)}
    function code$0(f,s)
     {try
       {var v=f(s)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}
      return [0,v]}
    var
     encode_component=target[cst_encodeURIComponent],
     _s_=target[cst_decodeURIComponent];
    function encode$2(s){return code$0(encode$1,s)}
    function decode$2(s){return code$0(decode$1,s)}
    function encode_component$0(s){return code$0(encode_component,s)}
    function decode_component(s){return code$0(_s_,s)}
    function to_jstr$1(u){return u.toString()}
    function of_jstr$2(base,s)
     {try
       {var v=v$0(base,s)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}
      return [0,v]}
    function v$1(n,v){return [0,n,v]}
    var void$0=[0,empty,empty];
    function is_void(param)
     {var v=param[2],n=param[1],_n9_=is_empty(n);return _n9_?is_empty(v):_n9_}
    function if$0(b,at){return b?at:void$0}
    function if_some(param)
     {if(! param)return void$0;var at=param[1];return at}
    function true$1(n){return [0,n,empty]}
    function int$0(n,i){return [0,n,arg(0,i)]}
    function float$0(n,f){return [0,n,of_float(0,f)]}
    function to_pair(_n8_){return _n8_}
    function add_if(b,at,l){return b?[0,at,l]:l}
    function add_if_some(name,o,l)
     {if(! o)return l;var a=o[1];return [0,[0,name,a],l]}
    var
     accesskey="accesskey",
     action="action",
     autocomplete="autocomplete",
     autofocus="autofocus",
     charset="charset",
     checked="checked",
     class$0="class",
     cols="cols",
     content="content",
     contenteditable="contenteditable",
     defer="defer",
     dir="dir",
     disabled="disabled",
     draggable="draggable",
     for$0="for",
     height$0="height",
     hidden="hidden",
     href="href",
     id$0="id",
     lang="lang",
     list="list",
     media="media",
     method="method",
     name$1="name",
     placeholder="placeholder",
     rel="rel",
     required="required",
     rows="rows",
     selected="selected",
     spellcheck="spellcheck",
     src="src",
     style="style",
     tabindex="tabindex",
     title="title",
     type$4="type",
     value="value",
     width$0="width",
     wrap="wrap",
     Name=
      [0,
       accesskey,
       action,
       autocomplete,
       autofocus,
       charset,
       checked,
       class$0,
       cols,
       content,
       contenteditable,
       defer,
       dir,
       disabled,
       draggable,
       for$0,
       height$0,
       hidden,
       href,
       id$0,
       lang,
       list,
       media,
       method,
       name$1,
       placeholder,
       rel,
       required,
       rows,
       selected,
       spellcheck,
       src,
       style,
       tabindex,
       title,
       type$4,
       value,
       width$0,
       wrap];
    function accesskey$0(s){return [0,Name[1],s]}
    function action$0(s){return [0,Name[2],s]}
    function autocomplete$0(s){return [0,Name[3],s]}
    var autofocus$0=true$1(Name[4]),_t_=Name[5];
    function charset$0(_n7_){return [0,_t_,_n7_]}
    var checked$0=true$1(Name[6]);
    function class$1(s){return [0,Name[7],s]}
    function cols$0(i){return int$0(Name[8],i)}
    function content$0(s){return [0,Name[9],s]}
    function contenteditable$0(s){return true$1(Name[10])}
    var defer$0=true$1(Name[11]);
    function dir$0(s){return [0,Name[12],s]}
    var disabled$0=true$1(Name[13]);
    function draggable$0(s){return true$1(Name[14])}
    function for$1(s){return [0,Name[15],s]}
    function height$1(i){return int$0(Name[16],i)}
    var hidden$0=true$1(Name[17]);
    function href$0(s){return [0,Name[18],s]}
    function id$1(s){return [0,Name[19],s]}
    function lang$0(s){return [0,Name[20],s]}
    function list$0(s){return [0,Name[21],s]}
    function media$0(s){return [0,Name[22],s]}
    function method$0(s){return [0,Name[23],s]}
    function name$2(s){return [0,Name[24],s]}
    function placeholder$0(s){return [0,Name[25],s]}
    function rel$0(s){return [0,Name[26],s]}
    var required$0=true$1(Name[27]);
    function rows$0(i){return int$0(Name[28],i)}
    var selected$0=true$1(Name[29]),_u_=Name[30];
    function spellcheck$0(_n6_){return [0,_u_,_n6_]}
    function src$0(s){return [0,Name[31],s]}
    function style$0(s){return [0,Name[32],s]}
    function tabindex$0(i){return int$0(Name[33],i)}
    function title$0(s){return [0,Name[34],s]}
    function type$5(s){return [0,Name[35],s]}
    function value$0(s){return [0,Name[36],s]}
    function width$1(i){return int$0(Name[37],i)}
    function wrap$0(s){return [0,Name[36],s]}
    var global_document=target[cst_document];
    function document(e){return e[cst_ownerDocument]}
    var
     _v_=
      is_none(global_document)?fn:global_document[cst_documentElement$0];
    function el_list_of_node_list(nl)
     {var acc=[0,0],len=caml_call2(Int[2],nl,cst_length$3),_n3_=len - 1 | 0;
      if(_n3_ >= 0)
       {var i=_n3_;
        for(;;)
         {var _n4_=acc[1];
          acc[1] = [0,nl[i],_n4_];
          var _n5_=i - 1 | 0;
          if(0 !== i){var i=_n5_;continue}
          break}}
      return acc[1]}
    function _w_(e,n){e.appendChild(n);return 0}
    function v$2(opt,_n0_,name,cs)
     {if(opt)var sth=opt[1],d=sth;else var d=global_document;
      if(_n0_)var sth$0=_n0_[1],at$0=sth$0;else var at$0=0;
      var e=d.createElement(name),ss=0,param=at$0;
      for(;;)
       {if(param)
         {var at=param[2],match=param[1],v=match[2],a=match[1];
          if(is_empty(a)){var param=at;continue}
          if(caml_equal(a,Name[32]))
           {var ss$0=[0,v,ss],ss=ss$0,param=at;continue}
          if(! caml_equal(a,Name[7]))
           {e.setAttribute(a,v);var param=at;continue}
          if(1 - is_empty(v))e[cst_classList].add(v);
          var param=at;
          continue}
        if(0 !== ss)
         {var a$0=Name[32],v$0=concat([0,";"],caml_call1(Stdlib_List[9],ss));
          e.setAttribute(a$0,v$0)}
        var _n1_=function(_n2_){return _w_(e,_n2_)};
        caml_call2(Stdlib_List[17],_n1_,cs);
        return e}}
    function txt(opt,s)
     {if(opt)var sth=opt[1],d=sth;else var d=global_document;
      return d.createTextNode(s)}
    function txt$0(opt,s)
     {if(opt)var sth=opt[1],d=sth;else var d=global_document;
      return d.createTextNode(caml_jsstring_of_string(s))}
    function sp$0(opt,param){return txt(0," ")}
    function nbsp(opt,param){return txt(0,caml_jsstring_of_string(cst))}
    function is_txt(e){return 3 === caml_call2(Int[2],e,cst_nodeType)?1:0}
    function is_el(e){return 1 === caml_call2(Int[2],e,cst_nodeType$0)?1:0}
    function tag_name(e)
     {return caml_call2(_e_[2],e,cst_nodeName).toLowerCase()}
    function has_tag_name(n,e){return caml_equal(n,tag_name(e))}
    function txt_text(txt)
     {var match=is_txt(txt);
      return match?caml_call2(_e_[2],txt,cst_nodeValue):empty}
    function find_by_class(opt,c)
     {if(opt)var sth=opt[1],root=sth;else var root=_v_;
      return el_list_of_node_list(root.getElementsByClassName(c))}
    function find_by_tag_name(opt,n)
     {if(opt)var sth=opt[1],root=sth;else var root=_v_;
      return el_list_of_node_list(root.getElementsByTagName(n))}
    function find_first_by_selector(opt,sel)
     {if(opt)var sth=opt[1],root=sth;else var root=_v_;
      var _nY_=root.querySelector(sel);
      return to_option(function(_nZ_){return _nZ_},_nY_)}
    function fold_find_by_selector(opt,f,sel,acc)
     {if(opt)var sth=opt[1],root=sth;else var root=_v_;
      var
       nl=root.querySelectorAll(sel),
       acc$0=[0,acc],
       _nV_=caml_call2(Int[2],nl,cst_length$4) - 1 | 0,
       _nU_=0;
      if(_nV_ >= 0)
       {var i=_nU_;
        for(;;)
         {var _nW_=acc$0[1];
          acc$0[1] = caml_call2(f,nl[i],_nW_);
          var _nX_=i + 1 | 0;
          if(_nV_ !== i){var i=_nX_;continue}
          break}}
      return acc$0[1]}
    function parent(e)
     {var match=find(e,cst_parentNode);
      if(match){var e$0=match[1];if(is_el(e$0))return [0,e$0]}
      return 0}
    function children(opt,e)
     {if(opt)var sth=opt[1],only_els=sth;else var only_els=0;
      return only_els
              ?el_list_of_node_list(e[cst_children])
              :el_list_of_node_list(e[cst_childNodes])}
    function set_children(e,l)
     {for(;;)
       {if(is_null(e[cst_firstChild]))
         {var _nS_=function(_nT_){return _w_(e,_nT_)};
          return caml_call2(Stdlib_List[17],_nS_,l)}
        e.removeChild(e[cst_firstChild$0])}}
    function prepend_children(e,l)
     {caml_js_meth_call(e,cst_prepend,caml_call1(Stdlib_Array[10],l));
      return 0}
    function append_children(e,l)
     {caml_js_meth_call(e,cst_append,caml_call1(Stdlib_Array[10],l));return 0}
    function previous_sibling(e){return find(e,cst_previousElementSibling)}
    function next_sibling(e){return find(e,cst_nextElementSibling)}
    function insert_siblings(loc,e,l)
     {if(-126259180 === loc)
       caml_js_meth_call(e,cst_replaceWith,caml_call1(Stdlib_Array[10],l));
      else
       if(818927100 <= loc)
        caml_js_meth_call(e,cst_after,caml_call1(Stdlib_Array[10],l));
       else
        caml_js_meth_call(e,cst_before,caml_call1(Stdlib_Array[10],l));
      return 0}
    function remove$0(e){e.remove(e);return 0}
    function at(a,e)
     {var _nQ_=e.getAttribute(a);
      return to_option(function(_nR_){return _nR_},_nQ_)}
    function set_at(a,v,e)
     {if(is_empty(a))return 0;
      if(v){var v$0=v[1];e.setAttribute(a,v$0);return 0}
      e.removeAttribute(a);
      return 0}
    function jv_to_bool(b){return is_undefined(b)?0:b | 0}
    function jv_to_int(i){return is_undefined(i)?0:i}
    function jv_to_float(f){return is_undefined(f)?0.:f}
    function jv_to_jstr(s){return is_undefined(s)?empty:s}
    function bool(n){return [0,n,jv_to_bool,caml_js_from_bool]}
    function int$1(n){return [0,n,jv_to_int,function(_nP_){return _nP_}]}
    function float$1(n){return [0,n,jv_to_float,function(_nO_){return _nO_}]}
    function jstr(n){return [0,n,jv_to_jstr,function(_nN_){return _nN_}]}
    var
     checked$1=bool("checked"),
     height$2=int$1("height"),
     id$2=jstr("id"),
     name$3=jstr("name"),
     title$1=jstr("title"),
     value$1=jstr("value"),
     width$2=int$1("width");
    function prop(p,e){var _nM_=e[p[1]];return caml_call1(p[2],_nM_)}
    function set_prop(p,v,e)
     {var _nL_=caml_call1(p[3],v);e[p[1]] = _nL_;return 0}
    function class$2(c,e){return e[cst_classList$0].contains(c) | 0}
    function set_class(c,b,e)
     {return b?(e[cst_classList$1].add(c),0):(e[cst_classList$2].remove(c),0)}
    var
     background_color="background-color",
     bottom="bottom",
     color="color",
     cursor="cursor",
     display="display",
     height$3="height",
     left="left",
     position="position",
     right="right",
     top="top",
     visibility="visibility",
     width$3="width",
     z_index="z-index",
     Style=
      [0,
       background_color,
       bottom,
       color,
       cursor,
       display,
       height$3,
       left,
       position,
       right,
       top,
       visibility,
       width$3,
       z_index];
    function computed_style(opt,p,e)
     {if(opt)var sth=opt[1],w=sth;else var w=target[cst_window];
      var style=w.getComputedStyle(e),v=style[p];
      return is_none(v)?empty:v}
    function inline_style(p,e)
     {var style=e[cst_style];
      if(is_none(style))return empty;
      var v=style[p];
      return is_none(v)?empty:v}
    function set_inline_style(opt,p,v,e)
     {if(opt)var sth=opt[1],important=sth;else var important=0;
      var priority=important?"important":empty,style=e[cst_style$0];
      return is_none(style)?0:(style.setProperty(p,v,priority),0)}
    function remove_inline_style(p,e)
     {var style=e[cst_style$1];
      return is_none(style)?0:(style.removeProperty(p),0)}
    function inner_x(e){return caml_call2(Float[2],e,cst_clientLeft)}
    function inner_y(e){return caml_call2(Float[2],e,cst_clientTop)}
    function inner_w(e){return caml_call2(Float[2],e,cst_clientWidth)}
    function inner_h(e){return caml_call2(Float[2],e,cst_clientHeight)}
    function bound_x(e)
     {var _nK_=e.getBoundingClientRect();
      return caml_call2(Float[2],_nK_,cst_x)}
    function bound_y(e)
     {var _nJ_=e.getBoundingClientRect();
      return caml_call2(Float[2],_nJ_,cst_y)}
    function bound_w(e)
     {var _nI_=e.getBoundingClientRect();
      return caml_call2(Float[2],_nI_,cst_width$0)}
    function bound_h(e)
     {var _nH_=e.getBoundingClientRect();
      return caml_call2(Float[2],_nH_,cst_height$0)}
    function scroll_x(e){return caml_call2(Float[2],e,cst_scrollLeft)}
    function scroll_y(e){return caml_call2(Float[2],e,cst_scrollTop)}
    function scroll_w(e){return caml_call2(Float[2],e,cst_scrollWidth)}
    function scroll_h(e){return caml_call2(Float[2],e,cst_scrollHeight)}
    function scroll_into_view(opt,e)
     {if(opt)var sth=opt[1],align_v=sth;else var align_v=389604418;
      var align=389604418 <= align_v?0:1;
      e.scrollIntoView(! ! align);
      return 0}
    function has_focus(e)
     {var
       _nF_=document(e)[cst_activeElement],
       match=to_option(function(_nG_){return _nG_},_nF_);
      if(! match)return 0;
      var e$0=match[1];
      return e === e$0?1:0}
    function set_has_focus(b,e){if(b)e.focus();else e.blur();return 0}
    function is_locking_pointer(e)
     {var
       _nD_=document(e)[cst_pointerLockElement],
       match=to_option(function(_nE_){return _nE_},_nD_);
      if(! match)return 0;
      var e$0=match[1];
      return e === e$0?1:0}
    function request_pointer_lock(e)
     {var
       match=create$1(0),
       set=match[2],
       fut=match[1],
       d=document(e),
       opts=listen_opts(0,_x_,0,0),
       unlisten$0=[0,function(param){return 0}];
      function locked(ev)
       {caml_call1(set,_y_);return caml_call1(unlisten$0[1],0)}
      function error(ev)
       {var err=caml_call2(_d_[1],0,"Could not lock pointer");
        caml_call1(set,[1,err]);
        return caml_call1(unlisten$0[1],0)}
      var
       k=listen([0,opts],pointerlockchange,locked,d),
       k$0=listen([0,opts],pointerlockerror,error,d);
      unlisten$0[1] = function(param){unlisten(k);return unlisten(k$0)};
      e.requestPointerLock();
      return fut}
    function click$0(e){e.click();return 0}
    function select_text(e){e.select();return 0}
    var auto="auto",hide="hide",show="show",Navigation_ui=[0,auto,hide,show];
    function fullscreen_opts(navigation_ui,param)
     {var o={};caml_call3(_e_[4],o,cst_navigationUI,navigation_ui);return o}
    function request_fullscreen(opt,e)
     {if(opt)var sth=opt[1],opts=sth;else var opts={};
      var _nB_=e.requestFullscreen(opts);
      return of_promise$0(function(_nC_){return 0},_nB_)}
    function files(e)
     {var match=find(e,cst_files);
      if(! match)return 0;
      var files=match[1];
      return to_list(function(_nA_){return _nA_},files)}
    var
     Input$0=[0,files],
     a="a",
     abbr="abbr",
     address="address",
     area="area",
     article="article",
     aside="aside",
     audio="audio",
     b="b",
     base="base",
     bdi="bdi",
     bdo="bdo",
     blockquote="blockquote",
     body="body",
     br="br",
     button$0="button",
     canvas="canvas",
     caption="caption",
     cite="cite",
     code$1="code",
     col="col",
     colgroup="colgroup",
     command="command",
     datalist="datalist",
     dd="dd",
     del="del",
     details="details",
     dfn="dfn",
     div="div",
     dl="dl",
     dt="dt",
     em="em",
     embed="embed",
     fieldset="fieldset",
     figcaption="figcaption",
     figure="figure",
     footer="footer",
     form="form",
     h1="h1",
     h2="h2",
     h3="h3",
     h4="h4",
     h5="h5",
     h6="h6",
     head="head",
     header="header",
     hgroup="hgroup",
     hr="hr",
     html="html",
     i="i",
     iframe="iframe",
     img="img",
     input$0="input",
     ins="ins",
     kbd="kbd",
     keygen="keygen",
     label="label",
     legend="legend",
     li="li",
     link$0="link",
     map$1="map",
     mark="mark",
     menu="menu",
     meta="meta",
     meter="meter",
     nav="nav",
     noscript="noscript",
     object="object",
     ol="ol",
     optgroup="optgroup",
     option="option",
     output="output",
     p="p",
     param="param",
     pre="pre",
     progress$0="progress",
     q="q",
     rp="rp",
     rt="rt",
     ruby="ruby",
     s="s",
     samp="samp",
     script="script",
     section="section",
     select$0="select",
     small="small",
     source="source",
     span="span",
     strong="strong",
     style$1="style",
     sub$1="sub",
     summary="summary",
     sup="sup",
     table="table",
     tbody="tbody",
     td="td",
     textarea="textarea",
     tfoot="tfoot",
     th="th",
     thead="thead",
     time="time",
     title$2="title",
     tr="tr",
     track="track",
     u="u",
     ul="ul",
     var$0="var",
     video="video",
     wbr="wbr",
     Name$0=
      [0,
       a,
       abbr,
       address,
       area,
       article,
       aside,
       audio,
       b,
       base,
       bdi,
       bdo,
       blockquote,
       body,
       br,
       button$0,
       canvas,
       caption,
       cite,
       code$1,
       col,
       colgroup,
       command,
       datalist,
       dd,
       del,
       details,
       dfn,
       div,
       dl,
       dt,
       em,
       embed,
       fieldset,
       figcaption,
       figure,
       footer,
       form,
       h1,
       h2,
       h3,
       h4,
       h5,
       h6,
       head,
       header,
       hgroup,
       hr,
       html,
       i,
       iframe,
       img,
       input$0,
       ins,
       kbd,
       keygen,
       label,
       legend,
       li,
       link$0,
       map$1,
       mark,
       menu,
       meta,
       meter,
       nav,
       noscript,
       object,
       ol,
       optgroup,
       option,
       output,
       p,
       param,
       pre,
       progress$0,
       q,
       rp,
       rt,
       ruby,
       s,
       samp,
       script,
       section,
       select$0,
       small,
       source,
       span,
       strong,
       style$1,
       sub$1,
       summary,
       sup,
       table,
       tbody,
       td,
       textarea,
       tfoot,
       th,
       thead,
       time,
       title$2,
       tr,
       track,
       u,
       ul,
       var$0,
       video,
       wbr];
    function cons(name,d,at,cs){return v$2(d,at,name,cs)}
    function void_cons(name,d,at,param){return v$2(d,at,name,0)}
    var _z_=Name$0[1];
    function a$0(_nx_,_ny_,_nz_){return cons(_z_,_nx_,_ny_,_nz_)}
    var _A_=Name$0[2];
    function abbr$0(_nu_,_nv_,_nw_){return cons(_A_,_nu_,_nv_,_nw_)}
    var _B_=Name$0[3];
    function address$0(_nr_,_ns_,_nt_){return cons(_B_,_nr_,_ns_,_nt_)}
    var _C_=Name$0[4];
    function area$0(_no_,_np_,_nq_){return void_cons(_C_,_no_,_np_,_nq_)}
    var _D_=Name$0[5];
    function article$0(_nl_,_nm_,_nn_){return cons(_D_,_nl_,_nm_,_nn_)}
    var _E_=Name$0[6];
    function aside$0(_ni_,_nj_,_nk_){return cons(_E_,_ni_,_nj_,_nk_)}
    var _F_=Name$0[7];
    function audio$0(_nf_,_ng_,_nh_){return cons(_F_,_nf_,_ng_,_nh_)}
    var _G_=Name$0[8];
    function b$0(_nc_,_nd_,_ne_){return cons(_G_,_nc_,_nd_,_ne_)}
    var _H_=Name$0[9];
    function base$0(_m$_,_na_,_nb_){return void_cons(_H_,_m$_,_na_,_nb_)}
    var _I_=Name$0[10];
    function bdi$0(_m8_,_m9_,_m__){return cons(_I_,_m8_,_m9_,_m__)}
    var _J_=Name$0[11];
    function bdo$0(_m5_,_m6_,_m7_){return cons(_J_,_m5_,_m6_,_m7_)}
    var _K_=Name$0[12];
    function blockquote$0(_m2_,_m3_,_m4_){return cons(_K_,_m2_,_m3_,_m4_)}
    var _L_=Name$0[13];
    function body$0(_mZ_,_m0_,_m1_){return cons(_L_,_mZ_,_m0_,_m1_)}
    var _M_=Name$0[14];
    function br$0(_mW_,_mX_,_mY_){return void_cons(_M_,_mW_,_mX_,_mY_)}
    var _N_=Name$0[15];
    function button$1(_mT_,_mU_,_mV_){return cons(_N_,_mT_,_mU_,_mV_)}
    var _O_=Name$0[16];
    function canvas$0(_mQ_,_mR_,_mS_){return cons(_O_,_mQ_,_mR_,_mS_)}
    var _P_=Name$0[17];
    function caption$0(_mN_,_mO_,_mP_){return cons(_P_,_mN_,_mO_,_mP_)}
    var _Q_=Name$0[18];
    function cite$0(_mK_,_mL_,_mM_){return cons(_Q_,_mK_,_mL_,_mM_)}
    var _R_=Name$0[19];
    function code$2(_mH_,_mI_,_mJ_){return cons(_R_,_mH_,_mI_,_mJ_)}
    var _S_=Name$0[20];
    function col$0(_mE_,_mF_,_mG_){return void_cons(_S_,_mE_,_mF_,_mG_)}
    var _T_=Name$0[21];
    function colgroup$0(_mB_,_mC_,_mD_){return cons(_T_,_mB_,_mC_,_mD_)}
    var _U_=Name$0[22];
    function command$0(_my_,_mz_,_mA_){return cons(_U_,_my_,_mz_,_mA_)}
    var _V_=Name$0[23];
    function datalist$0(_mv_,_mw_,_mx_){return cons(_V_,_mv_,_mw_,_mx_)}
    var _W_=Name$0[24];
    function dd$0(_ms_,_mt_,_mu_){return cons(_W_,_ms_,_mt_,_mu_)}
    var _X_=Name$0[25];
    function del$0(_mp_,_mq_,_mr_){return cons(_X_,_mp_,_mq_,_mr_)}
    var _Y_=Name$0[26];
    function details$0(_mm_,_mn_,_mo_){return cons(_Y_,_mm_,_mn_,_mo_)}
    var _Z_=Name$0[27];
    function dfn$0(_mj_,_mk_,_ml_){return cons(_Z_,_mj_,_mk_,_ml_)}
    var ___=Name$0[28];
    function div$0(_mg_,_mh_,_mi_){return cons(___,_mg_,_mh_,_mi_)}
    var _$_=Name$0[29];
    function dl$0(_md_,_me_,_mf_){return cons(_$_,_md_,_me_,_mf_)}
    var _aa_=Name$0[30];
    function dt$0(_ma_,_mb_,_mc_){return cons(_aa_,_ma_,_mb_,_mc_)}
    var _ab_=Name$0[31];
    function em$0(_l9_,_l__,_l$_){return cons(_ab_,_l9_,_l__,_l$_)}
    var _ac_=Name$0[32];
    function embed$0(_l6_,_l7_,_l8_){return void_cons(_ac_,_l6_,_l7_,_l8_)}
    var _ad_=Name$0[33];
    function fieldset$0(_l3_,_l4_,_l5_){return cons(_ad_,_l3_,_l4_,_l5_)}
    var _ae_=Name$0[34];
    function figcaption$0(_l0_,_l1_,_l2_){return cons(_ae_,_l0_,_l1_,_l2_)}
    var _af_=Name$0[35];
    function figure$0(_lX_,_lY_,_lZ_){return cons(_af_,_lX_,_lY_,_lZ_)}
    var _ag_=Name$0[36];
    function footer$0(_lU_,_lV_,_lW_){return cons(_ag_,_lU_,_lV_,_lW_)}
    var _ah_=Name$0[37];
    function form$0(_lR_,_lS_,_lT_){return cons(_ah_,_lR_,_lS_,_lT_)}
    var _ai_=Name$0[38];
    function h1$0(_lO_,_lP_,_lQ_){return cons(_ai_,_lO_,_lP_,_lQ_)}
    var _aj_=Name$0[39];
    function h2$0(_lL_,_lM_,_lN_){return cons(_aj_,_lL_,_lM_,_lN_)}
    var _ak_=Name$0[40];
    function h3$0(_lI_,_lJ_,_lK_){return cons(_ak_,_lI_,_lJ_,_lK_)}
    var _al_=Name$0[41];
    function h4$0(_lF_,_lG_,_lH_){return cons(_al_,_lF_,_lG_,_lH_)}
    var _am_=Name$0[42];
    function h5$0(_lC_,_lD_,_lE_){return cons(_am_,_lC_,_lD_,_lE_)}
    var _an_=Name$0[43];
    function h6$0(_lz_,_lA_,_lB_){return cons(_an_,_lz_,_lA_,_lB_)}
    var _ao_=Name$0[44];
    function head$0(_lw_,_lx_,_ly_){return cons(_ao_,_lw_,_lx_,_ly_)}
    var _ap_=Name$0[45];
    function header$0(_lt_,_lu_,_lv_){return cons(_ap_,_lt_,_lu_,_lv_)}
    var _aq_=Name$0[46];
    function hgroup$0(_lq_,_lr_,_ls_){return cons(_aq_,_lq_,_lr_,_ls_)}
    var _ar_=Name$0[47];
    function hr$0(_ln_,_lo_,_lp_){return void_cons(_ar_,_ln_,_lo_,_lp_)}
    var _as_=Name$0[48];
    function html$0(_lk_,_ll_,_lm_){return cons(_as_,_lk_,_ll_,_lm_)}
    var _at_=Name$0[49];
    function i$0(_lh_,_li_,_lj_){return cons(_at_,_lh_,_li_,_lj_)}
    var _au_=Name$0[50];
    function iframe$0(_le_,_lf_,_lg_){return cons(_au_,_le_,_lf_,_lg_)}
    var _av_=Name$0[51];
    function img$0(_lb_,_lc_,_ld_){return void_cons(_av_,_lb_,_lc_,_ld_)}
    var _aw_=Name$0[52];
    function input$1(_k__,_k$_,_la_){return void_cons(_aw_,_k__,_k$_,_la_)}
    var _ax_=Name$0[53];
    function ins$0(_k7_,_k8_,_k9_){return cons(_ax_,_k7_,_k8_,_k9_)}
    var _ay_=Name$0[54];
    function kbd$0(_k4_,_k5_,_k6_){return cons(_ay_,_k4_,_k5_,_k6_)}
    var _az_=Name$0[55];
    function keygen$0(_k1_,_k2_,_k3_){return cons(_az_,_k1_,_k2_,_k3_)}
    var _aA_=Name$0[56];
    function label$0(_kY_,_kZ_,_k0_){return cons(_aA_,_kY_,_kZ_,_k0_)}
    var _aB_=Name$0[57];
    function legend$0(_kV_,_kW_,_kX_){return cons(_aB_,_kV_,_kW_,_kX_)}
    var _aC_=Name$0[58];
    function li$0(_kS_,_kT_,_kU_){return cons(_aC_,_kS_,_kT_,_kU_)}
    var _aD_=Name$0[59];
    function link$1(_kP_,_kQ_,_kR_){return void_cons(_aD_,_kP_,_kQ_,_kR_)}
    var _aE_=Name$0[60];
    function map$2(_kM_,_kN_,_kO_){return cons(_aE_,_kM_,_kN_,_kO_)}
    var _aF_=Name$0[61];
    function mark$0(_kJ_,_kK_,_kL_){return cons(_aF_,_kJ_,_kK_,_kL_)}
    var _aG_=Name$0[62];
    function menu$0(_kG_,_kH_,_kI_){return cons(_aG_,_kG_,_kH_,_kI_)}
    var _aH_=Name$0[63];
    function meta$0(_kD_,_kE_,_kF_){return void_cons(_aH_,_kD_,_kE_,_kF_)}
    var _aI_=Name$0[64];
    function meter$0(_kA_,_kB_,_kC_){return cons(_aI_,_kA_,_kB_,_kC_)}
    var _aJ_=Name$0[65];
    function nav$0(_kx_,_ky_,_kz_){return cons(_aJ_,_kx_,_ky_,_kz_)}
    var _aK_=Name$0[66];
    function noscript$0(_ku_,_kv_,_kw_){return cons(_aK_,_ku_,_kv_,_kw_)}
    var _aL_=Name$0[67];
    function object$0(_kr_,_ks_,_kt_){return cons(_aL_,_kr_,_ks_,_kt_)}
    var _aM_=Name$0[68];
    function ol$0(_ko_,_kp_,_kq_){return cons(_aM_,_ko_,_kp_,_kq_)}
    var _aN_=Name$0[69];
    function optgroup$0(_kl_,_km_,_kn_){return cons(_aN_,_kl_,_km_,_kn_)}
    var _aO_=Name$0[70];
    function option$0(_ki_,_kj_,_kk_){return cons(_aO_,_ki_,_kj_,_kk_)}
    var _aP_=Name$0[71];
    function output$0(_kf_,_kg_,_kh_){return cons(_aP_,_kf_,_kg_,_kh_)}
    var _aQ_=Name$0[72];
    function p$0(_kc_,_kd_,_ke_){return cons(_aQ_,_kc_,_kd_,_ke_)}
    var _aR_=Name$0[73];
    function param$0(_j$_,_ka_,_kb_){return void_cons(_aR_,_j$_,_ka_,_kb_)}
    var _aS_=Name$0[74];
    function pre$0(_j8_,_j9_,_j__){return cons(_aS_,_j8_,_j9_,_j__)}
    var _aT_=Name$0[75];
    function progress$1(_j5_,_j6_,_j7_){return cons(_aT_,_j5_,_j6_,_j7_)}
    var _aU_=Name$0[76];
    function q$0(_j2_,_j3_,_j4_){return cons(_aU_,_j2_,_j3_,_j4_)}
    var _aV_=Name$0[77];
    function rp$0(_jZ_,_j0_,_j1_){return cons(_aV_,_jZ_,_j0_,_j1_)}
    var _aW_=Name$0[78];
    function rt$0(_jW_,_jX_,_jY_){return cons(_aW_,_jW_,_jX_,_jY_)}
    var _aX_=Name$0[79];
    function ruby$0(_jT_,_jU_,_jV_){return cons(_aX_,_jT_,_jU_,_jV_)}
    var _aY_=Name$0[80];
    function s$0(_jQ_,_jR_,_jS_){return cons(_aY_,_jQ_,_jR_,_jS_)}
    var _aZ_=Name$0[81];
    function samp$0(_jN_,_jO_,_jP_){return cons(_aZ_,_jN_,_jO_,_jP_)}
    var _a0_=Name$0[82];
    function script$0(_jK_,_jL_,_jM_){return cons(_a0_,_jK_,_jL_,_jM_)}
    var _a1_=Name$0[83];
    function section$0(_jH_,_jI_,_jJ_){return cons(_a1_,_jH_,_jI_,_jJ_)}
    var _a2_=Name$0[84];
    function select$1(_jE_,_jF_,_jG_){return cons(_a2_,_jE_,_jF_,_jG_)}
    var _a3_=Name$0[85];
    function small$0(_jB_,_jC_,_jD_){return cons(_a3_,_jB_,_jC_,_jD_)}
    var _a4_=Name$0[86];
    function source$0(_jy_,_jz_,_jA_){return void_cons(_a4_,_jy_,_jz_,_jA_)}
    var _a5_=Name$0[87];
    function span$0(_jv_,_jw_,_jx_){return cons(_a5_,_jv_,_jw_,_jx_)}
    var _a6_=Name$0[88];
    function strong$0(_js_,_jt_,_ju_){return cons(_a6_,_js_,_jt_,_ju_)}
    var _a7_=Name$0[89];
    function style$2(_jp_,_jq_,_jr_){return cons(_a7_,_jp_,_jq_,_jr_)}
    var _a8_=Name$0[90];
    function sub$2(_jm_,_jn_,_jo_){return cons(_a8_,_jm_,_jn_,_jo_)}
    var _a9_=Name$0[91];
    function summary$0(_jj_,_jk_,_jl_){return cons(_a9_,_jj_,_jk_,_jl_)}
    var _a__=Name$0[92];
    function sup$0(_jg_,_jh_,_ji_){return cons(_a__,_jg_,_jh_,_ji_)}
    var _a$_=Name$0[93];
    function table$0(_jd_,_je_,_jf_){return cons(_a$_,_jd_,_je_,_jf_)}
    var _ba_=Name$0[94];
    function tbody$0(_ja_,_jb_,_jc_){return cons(_ba_,_ja_,_jb_,_jc_)}
    var _bb_=Name$0[95];
    function td$0(_i9_,_i__,_i$_){return cons(_bb_,_i9_,_i__,_i$_)}
    var _bc_=Name$0[96];
    function textarea$0(_i6_,_i7_,_i8_){return cons(_bc_,_i6_,_i7_,_i8_)}
    var _bd_=Name$0[97];
    function tfoot$0(_i3_,_i4_,_i5_){return cons(_bd_,_i3_,_i4_,_i5_)}
    var _be_=Name$0[98];
    function th$0(_i0_,_i1_,_i2_){return cons(_be_,_i0_,_i1_,_i2_)}
    var _bf_=Name$0[99];
    function thead$0(_iX_,_iY_,_iZ_){return cons(_bf_,_iX_,_iY_,_iZ_)}
    var _bg_=Name$0[100];
    function time$0(_iU_,_iV_,_iW_){return cons(_bg_,_iU_,_iV_,_iW_)}
    var _bh_=Name$0[101];
    function title$3(_iR_,_iS_,_iT_){return cons(_bh_,_iR_,_iS_,_iT_)}
    var _bi_=Name$0[102];
    function tr$0(_iO_,_iP_,_iQ_){return cons(_bi_,_iO_,_iP_,_iQ_)}
    var _bj_=Name$0[103];
    function track$0(_iL_,_iM_,_iN_){return void_cons(_bj_,_iL_,_iM_,_iN_)}
    var _bk_=Name$0[104];
    function u$0(_iI_,_iJ_,_iK_){return cons(_bk_,_iI_,_iJ_,_iK_)}
    var _bl_=Name$0[105];
    function ul$0(_iF_,_iG_,_iH_){return cons(_bl_,_iF_,_iG_,_iH_)}
    var _bm_=Name$0[106];
    function var$1(_iC_,_iD_,_iE_){return cons(_bm_,_iC_,_iD_,_iE_)}
    var _bn_=Name$0[107];
    function video$0(_iz_,_iA_,_iB_){return cons(_bn_,_iz_,_iA_,_iB_)}
    var _bo_=Name$0[108];
    function wbr$0(_iw_,_ix_,_iy_){return void_cons(_bo_,_iw_,_ix_,_iy_)}
    function as_target(d){return d}
    function root(d){return d[cst_documentElement]}
    function body$1(d)
     {var b=d[cst_body];
      return is_some(b)
              ?b
              :throw$0
                (0,
                 "Document body is null. Try to defer your script execution.")}
    function head$1(d){return d[cst_head]}
    function active_el(d)
     {var _iu_=d[cst_activeElement$0];
      return to_option(function(_iv_){return _iv_},_iu_)}
    function find_el_by_id(d,id)
     {var _is_=d.getElementById(id);
      return to_option(function(_it_){return _it_},_is_)}
    function find_els_by_name(d,n)
     {return el_list_of_node_list(d.getElementsByName(n))}
    function referrer(d){return caml_call2(_e_[2],d,cst_referrer)}
    function title$4(d){return caml_call2(_e_[2],d,cst_title)}
    function set_title(d,t){return caml_call3(_e_[3],d,cst_title$0,t)}
    var
     hidden$1="hidden",
     visible="visible",
     Visibility_state=[0,hidden$1,visible];
    function visibility_state(d)
     {return caml_call2(_e_[2],d,cst_visibilityState)}
    function pointer_lock_element(d)
     {var _iq_=d[cst_pointerLockElement$0];
      return to_option(function(_ir_){return _ir_},_iq_)}
    function exit_pointer_lock(d)
     {var fut=next$0(0,pointerlockchange,d);d.exitPointerLock();return fut}
    function fullscreen_available(d)
     {return caml_call2(Bool[2],d,cst_fullscreenEnabled)}
    function fullscreen_element(d)
     {var _io_=d[cst_fullscreenElement];
      return to_option(function(_ip_){return _ip_},_io_)}
    function exit_fullscreen(d)
     {var _im_=d.exitFullscreen();
      return of_promise$0(function(_in_){return 0},_im_)}
    function aborted(s){return caml_call2(Bool[2],s,cst_aborted)}
    var abort$0="abort",Signal=[0,aborted,abort$0];
    function controller(param){return new (target[cst_AbortController])()}
    function signal(c){return c[cst_signal]}
    function abort$1(c){c.abort();return 0}
    var Abort=[0,Signal,controller,signal,abort$1];
    function call$0(c,meth,args){caml_js_meth_call(c,meth,args);return 0}
    var c=[0,target[cst_console]];
    function get$4(param){return c[1]}
    function set$3(n){c[1] = n;return 0}
    function clear$0(param){return call$0(c[1],cst_clear,[0])}
    function msg(v){return [0,v,0]}
    function str(v)
     {return is_null(v)?"null":is_undefined(v)?"undefined":v.toString()}
    function msg_to_jv_array(msg)
     {var a=caml_call1(Jarray[1],0),i=0,param=msg;
      for(;;)
       {if(! param)return runtime.caml_js_to_array(a);
        var vs=param[2],v=param[1];
        a[i] = v;
        var i$0=i + 1 | 0,i=i$0,param=vs}}
    function log(msg)
     {var _il_=msg_to_jv_array(msg);return call$0(c[1],cst_log,_il_)}
    function trace(msg)
     {var _ik_=msg_to_jv_array(msg);return call$0(c[1],cst_trace,_ik_)}
    function error$2(msg)
     {var _ij_=msg_to_jv_array(msg);return call$0(c[1],cst_error$1,_ij_)}
    function warn(msg)
     {var _ii_=msg_to_jv_array(msg);return call$0(c[1],cst_warn,_ii_)}
    function info(msg)
     {var _ih_=msg_to_jv_array(msg);return call$0(c[1],cst_info,_ih_)}
    function debug(msg)
     {var _ig_=msg_to_jv_array(msg);return call$0(c[1],cst_debug,_ig_)}
    function assert(b,msg)
     {var _if_=msg_to_jv_array([0,! ! b,msg]);
      return call$0(c[1],cst_assert,_if_)}
    function dir$1(o){return call$0(c[1],cst_dir,[0,o])}
    function table$1(cols,v)
     {if(cols)
       var l=cols[1],msg=[0,v,caml_list_to_js_array(l)];
      else
       var msg=[0,v];
      return call$0(c[1],cst_table,msg)}
    function group_end(param){return call$0(c[1],cst_groupEnd,[0])}
    function group(opt,msg)
     {if(opt)var sth=opt[1],closed=sth;else var closed=0;
      if(closed)
       {var _id_=msg_to_jv_array(msg);
        return call$0(c[1],cst_groupCollapsed,_id_)}
      var _ie_=msg_to_jv_array(msg);
      return call$0(c[1],cst_group,_ie_)}
    function count(label){return call$0(c[1],cst_count,[0,label])}
    function count_reset(label){return call$0(c[1],cst_countReset,[0,label])}
    function time$1(label){return call$0(c[1],cst_time,[0,label])}
    function time_log(label,msg)
     {var _ic_=msg_to_jv_array([0,label,msg]);
      return call$0(c[1],cst_timeLog,_ic_)}
    function time_end(label){return call$0(c[1],cst_timeEnd,[0,label])}
    function profile(label){return call$0(c[1],cst_profile,[0,label])}
    function profile_end(label){return call$0(c[1],cst_profileEnd,[0,label])}
    function time_stamp(label){return call$0(c[1],cst_timeStamp$0,[0,label])}
    function log_result(opt,_ib_,r)
     {if(opt)var sth=opt[1],ok=sth;else var ok=function(v){return [0,v,0]};
      if(_ib_)
       var sth$0=_ib_[1],err=sth$0;
      else
       var err=function(e){return [0,str(e),0]};
      if(0 === r[0])
       {var v=r[1];log(caml_call1(ok,v))}
      else
       {var e=r[1];error$2(caml_call1(err,e))}
      return r}
    function log_if_error(opt,_ia_,use,param)
     {if(opt)var sth=opt[1],l=sth;else var l=error$2;
      if(_ia_)
       var sth$0=_ia_[1],error_msg=sth$0;
      else
       var error_msg=function(e){return [0,str(e),0]};
      if(0 === param[0]){var v=param[1];return v}
      var e=param[1];
      caml_call1(l,caml_call1(error_msg,e));
      return use}
    function log_if_error$0(l,error_msg,use,r)
     {return [0,log_if_error(l,error_msg,use,r)]}
    function as_target$0(w){return w}
    function closed(w){return caml_call2(Bool[2],w,cst_closed)}
    function scroll_x$0(w){return caml_call2(Float[2],w,cst_scrollX)}
    function scroll_y$0(w){return caml_call2(Float[2],w,cst_scrollY)}
    function device_pixel_ratio(w)
     {return caml_call2(Float[2],w,cst_devicePixelRatio)}
    function matches_media(w,s)
     {var o=w.matchMedia(s);return caml_call2(Bool[2],o,cst_matches)}
    function prefers_dark_color_scheme(w)
     {return matches_media(w,"(prefers-color-scheme: dark)")}
    function open$0(opt,_h9_,w,u)
     {if(opt)var sth=opt[1],features=sth;else var features=empty;
      if(_h9_)var sth$0=_h9_[1],name=sth$0;else var name=empty;
      var _h__=w.open(u,name,features);
      return to_option(function(_h$_){return _h$_},_h__)}
    function close$0(w){w.close();return 0}
    function print(w){w.print();return 0}
    function reload(w){w[cst_location$0].reload();return 0}
    function location$0(w){return new url(w[cst_location$1])}
    function set_location(w,u){return w[cst_location$2] = u}
    var auto$0="auto",manual="manual",Scroll_restoration=[0,auto$0,manual];
    function length$3(h){return caml_call2(Int[2],h,cst_length$5)}
    function scroll_restoration(h)
     {return caml_call2(_e_[2],h,cst_scrollRestoration)}
    function set_scroll_restoration(h,r)
     {return caml_call3(_e_[3],h,cst_scrollRestoration$0,r)}
    function back(h){h.back();return 0}
    function forward(h){h.forward();return 0}
    function go(h,d){h.go(d);return 0}
    function state(h){return h[cst_state]}
    function push_state(opt,_h8_,_h7_,h)
     {if(opt)var sth=opt[1],state=sth;else var state=null$0;
      if(_h8_)var sth$0=_h8_[1],title=sth$0;else var title=empty;
      if(_h7_)var sth$1=_h7_[1],uri=sth$1;else var uri=null$0;
      h.pushState(state,title,uri);
      return 0}
    function replace_state(opt,_h6_,_h5_,h)
     {if(opt)var sth=opt[1],state=sth;else var state=null$0;
      if(_h6_)var sth$0=_h6_[1],title=sth$0;else var title=empty;
      if(_h5_)var sth$1=_h5_[1],uri=sth$1;else var uri=null$0;
      h.replaceState(state,title,uri);
      return 0}
    function state$0(e){return e[cst_state$0]}
    var
     Popstate=[0,state$0],
     popstate="popstate",
     Ev=[0,Popstate,popstate],
     History=
      [0,
       Scroll_restoration,
       length$3,
       scroll_restoration,
       set_scroll_restoration,
       back,
       forward,
       go,
       state,
       push_state,
       replace_state,
       Ev];
    function history(w){return w[cst_history]}
    var
     Window=
      [0,
       as_target$0,
       closed,
       scroll_x$0,
       scroll_y$0,
       device_pixel_ratio,
       matches_media,
       prefers_dark_color_scheme,
       open$0,
       close$0,
       print,
       reload,
       location$0,
       set_location,
       History,
       history];
    function languages(n)
     {var match=find(n,cst_languages);
      if(match){var a=match[1];return caml_list_of_js_array(a)}
      var match$0=caml_call2(_e_[1],n,cst_language);
      if(! match$0)return 0;
      var v=match$0[1];
      return [0,v,0]}
    function max_touch_points(n)
     {var t=n[cst_maxTouchPoints];return is_none(t)?0:t}
    function online(n){return caml_call2(Bool[2],n,cst_onLine)}
    var
     Navigator=[0,languages,max_touch_points,online],
     frame="frame",
     navigation="navigation",
     resource="resource",
     mark$1="mark",
     measure="measure",
     paint="paint",
     longtask="longtask",
     Type$0=[0,frame,navigation,resource,mark$1,measure,paint,longtask];
    function name$4(e){return caml_call2(_e_[2],e,cst_name$4)}
    function type$6(e){return caml_call2(_e_[2],e,cst_entryType)}
    function start_time(e){return caml_call2(Float[2],e,cst_startTime)}
    function end_time(e){return caml_call2(Float[2],e,cst_endTime)}
    function duration(e){return caml_call2(Float[2],e,cst_duration)}
    function to_json(e){return e.toJSON()}
    function as_entry(_h4_){return _h4_}
    function initiator_type(e){return caml_call2(_e_[2],e,cst_initiatorType)}
    function next_hop_protocol(e)
     {return caml_call2(_e_[2],e,cst_nextHopProtocol)}
    function worker_start(e){return caml_call2(Float[2],e,cst_workerStart)}
    function redirect_start(e)
     {return caml_call2(Float[2],e,cst_redirectStart)}
    function redirect_end(e){return caml_call2(Float[2],e,cst_redirectEnd)}
    function fetch_start(e){return caml_call2(Float[2],e,cst_fetchStart)}
    function domain_lookup_start(e)
     {return caml_call2(Float[2],e,cst_domainLookupStart)}
    function domain_lookup_end(e)
     {return caml_call2(Float[2],e,cst_domainLookupEnd)}
    function connect_start(e){return caml_call2(Float[2],e,cst_connectStart)}
    function connect_end(e){return caml_call2(Float[2],e,cst_connectEnd)}
    function secure_connection_start(e)
     {return caml_call2(Float[2],e,cst_secureConnectionStart)}
    function request_start(e){return caml_call2(Float[2],e,cst_requestStart)}
    function response_start(e)
     {return caml_call2(Float[2],e,cst_responseStart)}
    function response_end(e){return caml_call2(Float[2],e,cst_responseEnd)}
    function transfer_size(e){return caml_call2(Int[2],e,cst_transferSize)}
    function encoded_body_size(e)
     {return caml_call2(Int[2],e,cst_encodedBodySize)}
    function decoded_body_size(e)
     {return caml_call2(Int[2],e,cst_decodedBodySize)}
    var
     Resource_timing=
      [0,
       as_entry,
       initiator_type,
       next_hop_protocol,
       worker_start,
       redirect_start,
       redirect_end,
       fetch_start,
       domain_lookup_start,
       domain_lookup_end,
       connect_start,
       connect_end,
       secure_connection_start,
       request_start,
       response_start,
       response_end,
       transfer_size,
       encoded_body_size,
       decoded_body_size],
     navigate="navigate",
     reload$0="reload",
     back_forward="back_forward",
     prerender="prerender",
     Type$1=[0,navigate,reload$0,back_forward,prerender];
    function as_resource_timing(_h3_){return _h3_}
    function as_entry$0(_h2_){return _h2_}
    function unload_event_start(e)
     {return caml_call2(Float[2],e,cst_unloadEventStart)}
    function unload_event_end(e)
     {return caml_call2(Float[2],e,cst_unloadEventEnd)}
    function dom_interactive(e)
     {return caml_call2(Float[2],e,cst_domInteractive)}
    function dom_content_loaded_event_start(e)
     {return caml_call2(Float[2],e,cst_domContentLoadedEventStart)}
    function dom_content_loaded_event_end(e)
     {return caml_call2(Float[2],e,cst_domContentLoadedEventEnd)}
    function dom_complete(e){return caml_call2(Float[2],e,cst_domComplete)}
    function load_event_start(e)
     {return caml_call2(Float[2],e,cst_loadEventStart)}
    function load_event_end(e){return caml_call2(Float[2],e,cst_loadEventEnd)}
    function type$7(e){return caml_call2(_e_[2],e,cst_type$3)}
    function redirect_count(e){return caml_call2(Int[2],e,cst_redirectCount)}
    function as_resource_timing$0(_h1_){return _h1_}
    function as_navigation_timing(_h0_){return _h0_}
    function time_origin_ms(p){return caml_call2(Float[2],p,cst_timeOrigin)}
    function clear_marks(p,n)
     {if(n)var n$0=n[1],args=[0,n$0];else var args=[0];
      caml_js_meth_call(p,cst_clearMarks,args);
      return 0}
    function clear_measures(p,n)
     {if(n)var n$0=n[1],args=[0,n$0];else var args=[0];
      caml_js_meth_call(p,cst_clearMeasures,args);
      return 0}
    function clear_resource_timings(p){p.clearResourceTimings();return 0}
    function get_entries(type,name,p)
     {if(name)
       {var _hR_=name[1];
        if(type)
         {var t=type[1],_hS_=p.getEntriesByName(_hR_,t);
          return to_list(function(_hZ_){return _hZ_},_hS_)}
        var _hT_=p.getEntriesByName(_hR_);
        return to_list(function(_hY_){return _hY_},_hT_)}
      if(type)
       {var t$0=type[1],_hU_=p.getEntriesByType(t$0);
        return to_list(function(_hX_){return _hX_},_hU_)}
      var _hV_=p.getEntries();
      return to_list(function(_hW_){return _hW_},_hV_)}
    function mark$2(p,n){p.mark(n);return 0}
    function measure$0(start,stop,p,n)
     {if(start)
       {var _hQ_=start[1];
        if(stop){var e=stop[1];p.measure(_hQ_,e);return 0}
        p.measure(_hQ_);
        return 0}
      if(stop){var e$0=stop[1];p.measure(fn,e$0);return 0}
      p.measure();
      return 0}
    function now_ms(p){return p.now()}
    function to_json$0(p){return p.toJSON()}
    var
     console=target[cst_console$0],
     navigator=target[cst_navigator],
     performance=target[cst_performance],
     window=target[cst_window$0],
     is_secure_context=caml_call2(Bool[2],target,cst_isSecureContext);
    function set_timeout(ms,f)
     {return target.setTimeout(caml_js_wrap_callback_strict(1,f),ms)}
    function set_interval(ms,f)
     {return target.setInterval(caml_js_wrap_callback_strict(1,f),ms)}
    function stop_timer(tid){target.clearTimeout(tid);return 0}
    function request_animation_frame(f)
     {return target.requestAnimationFrame(caml_js_wrap_callback_strict(1,f))}
    function cancel_animation_frame(fid)
     {target.cancelAnimationFrame(fid);return 0}
    var
     _bp_=
      [0,
       console,
       global_document,
       navigator,
       performance,
       window,
       target,
       is_secure_context,
       set_timeout,
       set_interval,
       stop_timer,
       request_animation_frame,
       cancel_animation_frame],
     _bq_=
      [0,
       v$2,
       txt,
       txt$0,
       sp$0,
       nbsp,
       is_txt,
       is_el,
       tag_name,
       has_tag_name,
       txt_text,
       document,
       find_by_class,
       find_by_tag_name,
       find_first_by_selector,
       fold_find_by_selector,
       parent,
       children,
       set_children,
       prepend_children,
       append_children,
       previous_sibling,
       next_sibling,
       insert_siblings,
       remove$0,
       at,
       set_at,
       [0,
        bool,
        int$1,
        float$1,
        jstr,
        checked$1,
        height$2,
        id$2,
        name$3,
        title$1,
        value$1,
        width$2],
       prop,
       set_prop,
       class$2,
       set_class,
       Style,
       computed_style,
       inline_style,
       set_inline_style,
       remove_inline_style,
       inner_x,
       inner_y,
       inner_w,
       inner_h,
       bound_x,
       bound_y,
       bound_w,
       bound_h,
       scroll_x,
       scroll_y,
       scroll_w,
       scroll_h,
       scroll_into_view,
       has_focus,
       set_has_focus,
       is_locking_pointer,
       request_pointer_lock,
       Navigation_ui,
       fullscreen_opts,
       request_fullscreen,
       click$0,
       select_text,
       Input$0,
       Name$0,
       a$0,
       abbr$0,
       address$0,
       area$0,
       article$0,
       aside$0,
       audio$0,
       b$0,
       base$0,
       bdi$0,
       bdo$0,
       blockquote$0,
       body$0,
       br$0,
       button$1,
       canvas$0,
       caption$0,
       cite$0,
       code$2,
       col$0,
       colgroup$0,
       command$0,
       datalist$0,
       dd$0,
       del$0,
       details$0,
       dfn$0,
       div$0,
       dl$0,
       dt$0,
       em$0,
       embed$0,
       fieldset$0,
       figcaption$0,
       figure$0,
       footer$0,
       form$0,
       h1$0,
       h2$0,
       h3$0,
       h4$0,
       h5$0,
       h6$0,
       head$0,
       header$0,
       hgroup$0,
       hr$0,
       html$0,
       i$0,
       iframe$0,
       img$0,
       input$1,
       ins$0,
       kbd$0,
       keygen$0,
       label$0,
       legend$0,
       li$0,
       link$1,
       map$2,
       mark$0,
       menu$0,
       meta$0,
       meter$0,
       nav$0,
       noscript$0,
       object$0,
       ol$0,
       optgroup$0,
       option$0,
       output$0,
       p$0,
       param$0,
       pre$0,
       progress$1,
       q$0,
       rp$0,
       rt$0,
       ruby$0,
       s$0,
       samp$0,
       script$0,
       section$0,
       select$1,
       small$0,
       source$0,
       span$0,
       strong$0,
       style$2,
       sub$2,
       summary$0,
       sup$0,
       table$0,
       tbody$0,
       td$0,
       textarea$0,
       tfoot$0,
       th$0,
       thead$0,
       time$0,
       title$3,
       tr$0,
       track$0,
       u$0,
       ul$0,
       var$1,
       video$0,
       wbr$0],
     _br_=
      [0,
       v$0,
       scheme,
       host,
       port,
       path,
       query,
       fragment,
       with_uri,
       [0,
        is_empty$0,
        mem,
        find$6,
        find_all,
        fold$0,
        of_obj,
        of_jstr$1,
        to_jstr$0,
        of_assoc,
        to_assoc],
       encode$2,
       decode$2,
       encode_component$0,
       decode_component,
       of_jstr$2,
       to_jstr$1],
     _bs_=[0,init$1,of_blob,name$0,relative_path,last_modified_ms],
     Brr=
      [0,
       [0,
        [0,create$3,byte_length,slice$0],
        [0,
         of_buffer,
         buffer,
         byte_offset,
         byte_length$0,
         get_int8,
         get_int16_be,
         get_int16_le,
         get_int32_be,
         get_int32_le,
         get_uint8,
         get_uint16_be,
         get_uint16_le,
         get_uint32_be,
         get_uint32_le,
         get_float32_be,
         get_float32_le,
         get_float64_be,
         get_float64_le,
         set_int8,
         set_int16_be,
         set_int16_le,
         set_int32_be,
         set_int32_le,
         set_uint8,
         set_uint16_be,
         set_uint16_le,
         set_uint32_be,
         set_uint32_le,
         set_float32_be,
         set_float32_le,
         set_float64_be,
         set_float64_le],
        type_size_in_bytes,
        create$4,
        of_buffer$0,
        buffer,
        byte_offset,
        byte_length$0,
        length$2,
        type$2,
        set_tarray,
        fill,
        copy_within,
        slice$1,
        sub$0,
        find$5,
        find_index,
        for_all,
        exists,
        filter,
        iter,
        map$0,
        fold_left,
        fold_right,
        reverse,
        of_tarray,
        uint8_of_buffer,
        of_int_array,
        of_float_array,
        of_jstr,
        to_jstr,
        of_binary_jstr,
        to_binary_jstr,
        to_int_jstr,
        to_hex_jstr,
        type_to_bigarray_kind,
        type_of_bigarray_kind],
       [0,
        Ending_type,
        init$0,
        of_jstr$0,
        of_array_buffer,
        byte_length$1,
        type$3,
        slice$2,
        array_buffer$0,
        stream,
        text,
        data_uri],
       _bs_,
       Base64,
       [0,encode$0,decode$0],
       _br_,
       [0,
        Type,
        init,
        create$2,
        type,
        target$0,
        current_target,
        composed_path,
        event_phase,
        bubbles,
        stop_propagation,
        stop_immediate_propagation,
        cancelable,
        prevent_default,
        default_prevented,
        composed,
        is_trusted,
        timestamp_ms,
        dispatch,
        listen_opts,
        listen,
        unlisten,
        next$0,
        [0,
         Effect,
         Item,
         [0,length$1,add_jstr,add_file,remove,clear,caml_js_get,items],
         drop_effect,
         set_drop_effect,
         effect_allowed,
         set_effect_allowed,
         items$0],
        Clipboard,
        Composition,
        Error,
        Extendable,
        Focus,
        Hash_change,
        Input,
        Keyboard,
        Mouse,
        Drag,
        Pointer,
        Wheel,
        abort,
        activate,
        auxclick,
        beforeinput,
        beforeunload,
        blur,
        canplay,
        canplaythrough,
        change,
        click,
        clipboardchange,
        close,
        compositionend,
        compositionstart,
        compositionudpate,
        controllerchange,
        copy$0,
        cut,
        dblclick,
        dom_content_loaded,
        drag,
        dragend,
        dragenter,
        dragexit,
        dragleave,
        dragover,
        dragstart,
        drop,
        durationchange,
        emptied,
        ended,
        error$1,
        focus,
        focusin,
        focusout,
        fullscreenchange,
        fullscreenerror,
        gotpointercapture,
        hashchange,
        input,
        install,
        keydown,
        keyup,
        languagechange,
        load,
        loadeddata,
        loadedmetadata,
        loadstart,
        lostpointercapture,
        mousedown,
        mouseenter,
        mouseleave,
        mousemove,
        mouseout,
        mouseover,
        mouseup,
        open,
        paste,
        pause,
        play,
        playing,
        pointercancel,
        pointerdown,
        pointerenter,
        pointerleave,
        pointerlockchange,
        pointerlockerror,
        pointermove,
        pointerout,
        pointerover,
        pointerrawupdate,
        pointerup,
        progress,
        ratechange,
        reset,
        resize,
        scroll,
        seeked,
        seeking,
        select,
        statechange,
        stalled,
        suspend,
        timeupdate,
        unload,
        updatefound,
        visibilitychange,
        volumechange,
        waiting,
        wheel],
       [0,
        v$1,
        void$0,
        is_void,
        true$1,
        int$0,
        float$0,
        if$0,
        if_some,
        to_pair,
        add_if,
        add_if_some,
        Name,
        accesskey$0,
        action$0,
        autocomplete$0,
        autofocus$0,
        charset$0,
        checked$0,
        class$1,
        cols$0,
        content$0,
        contenteditable$0,
        defer$0,
        dir$0,
        disabled$0,
        draggable$0,
        for$1,
        height$1,
        hidden$0,
        href$0,
        id$1,
        lang$0,
        list$0,
        media$0,
        method$0,
        name$2,
        placeholder$0,
        rel$0,
        required$0,
        rows$0,
        selected$0,
        spellcheck$0,
        src$0,
        style$0,
        tabindex$0,
        title$0,
        type$5,
        value$0,
        wrap$0,
        width$1],
       _bq_,
       [0,
        as_target,
        find_el_by_id,
        find_els_by_name,
        root,
        body$1,
        head$1,
        active_el,
        referrer,
        title$4,
        set_title,
        Visibility_state,
        visibility_state,
        pointer_lock_element,
        exit_pointer_lock,
        fullscreen_available,
        fullscreen_element,
        exit_fullscreen],
       Abort,
       [0,
        get$4,
        set$3,
        clear$0,
        msg,
        str,
        log_result,
        log_if_error,
        log_if_error$0,
        log,
        trace,
        error$2,
        warn,
        info,
        debug,
        assert,
        dir$1,
        table$1,
        group,
        group_end,
        count,
        count_reset,
        time$1,
        time_log,
        time_end,
        profile,
        profile_end,
        time_stamp],
       Window,
       Navigator,
       [0,
        [0,
         Type$0,
         name$4,
         type$6,
         start_time,
         end_time,
         duration,
         to_json,
         Resource_timing,
         [0,
          Type$1,
          as_entry$0,
          as_resource_timing,
          unload_event_start,
          unload_event_end,
          dom_interactive,
          dom_content_loaded_event_start,
          dom_content_loaded_event_end,
          dom_complete,
          load_event_start,
          load_event_end,
          type$7,
          redirect_count],
         as_resource_timing$0,
         as_navigation_timing],
        time_origin_ms,
        clear_marks,
        clear_measures,
        clear_resource_timings,
        get_entries,
        mark$2,
        measure$0,
        now_ms,
        to_json$0],
       _bp_];
    caml_register_global(2977,Brr,"Brr");
    var
     unspecified="unspecified",
     inline="inline",
     attachment="attachement",
     Presentation_style=[0,unspecified,inline,attachment];
    function opts(presentation_style,param)
     {var o={};
      caml_call3(_e_[4],o,cst_presentationStyle,presentation_style);
      return o}
    var item=target[cst_ClipboardItem];
    function create$5(opts,vs)
     {var o={};
      function add_v(param){var b=param[2],t=param[1];return o[t] = b}
      caml_call2(Stdlib_List[17],add_v,vs);
      return new item(o)}
    function presentation_style(i)
     {return caml_call2(_e_[2],i,cst_presentationStyle$0)}
    function last_modified_ms$0(i)
     {return caml_call2(Int[2],i,cst_lastModified$1)}
    function delayed(i){return caml_call2(Bool[2],i,cst_delayed)}
    function types(i){return caml_list_of_js_array(i[cst_types])}
    function get_type(i,t)
     {var _hO_=i.getType(i,t);
      return of_promise$0(function(_hP_){return _hP_},_hO_)}
    function of_navigator(n){return n[cst_clipboard]}
    function as_target$1(_hN_){return _hN_}
    function read(c)
     {function _hK_(_hM_){return _hM_}
      function ok(_hL_){return to_list(_hK_,_hL_)}
      return of_promise$0(ok,c.read())}
    function read_text(c)
     {var _hI_=c.readText();
      return of_promise$0(function(_hJ_){return _hJ_},_hI_)}
    function write(c,data)
     {var _hF_=c.write(of_list(function(_hH_){return _hH_},data));
      return of_promise$0(function(_hG_){return 0},_hF_)}
    function write_text(c,data)
     {var _hD_=c.writeText(data);
      return of_promise$0(function(_hE_){return 0},_hD_)}
    function of_el(e)
     {return caml_call2(_bq_[9],_bq_[60][37],e)
              ?e
              :throw$0
                (0,
                 "Expected form element but found: ".concat
                  (caml_call1(_bq_[8],e)))}
    function to_el(e){return e}
    function name$5(f){return caml_call2(_e_[2],f,cst_name$5)}
    function method$1(f){return caml_call2(_e_[2],f,cst_method)}
    function target$1(f){return caml_call2(_e_[2],f,cst_target$0)}
    function action$1(f){return caml_call2(_e_[2],f,cst_action)}
    function enctype(f){return caml_call2(_e_[2],f,cst_enctype)}
    function accept_charset(f){return caml_call2(_e_[2],f,cst_acceptCharset)}
    function autocomplete$1(f){return caml_call2(_e_[2],f,cst_autocomplete)}
    function no_validate(f){return caml_call2(Bool[2],f,cst_noValidate)}
    function check_validity(f){return f.checkValidity() | 0}
    function report_validity(f){return f.reportValidity() | 0}
    function request_submit(f,el)
     {if(el)var e=el[1],args=[0,e];else var args=[0];
      caml_js_meth_call(f,cst_requestSubmit,args);
      return 0}
    function reset$0(f){f.reset();return 0}
    function submit(f){f.submit();return 0}
    var formdata=target[cst_FormData];
    function create$6(param){return new formdata()}
    function of_form(f){return new formdata(f)}
    function is_empty$1(d)
     {var _hB_=d.entries(),_hC_=caml_call1(_c_[6],_hB_);
      return caml_call1(_c_[1],_hC_)}
    function mem$0(d,k){return d.has(k) | 0}
    function has_file_entry(d)
     {var it=d.entries();
      for(;;)
       {var r=caml_call1(_c_[6],it);
        if(caml_call1(_c_[1],r))return 0;
        var v=caml_call1(_c_[3],r)[1];
        if(v instanceof target[cst_File$0])return 1}}
    function value$2(v)
     {var match=v instanceof target[cst_File$1]?1:0;
      return match?[0,781515420,v]:[0,-976970511,v]}
    function find$7(d,k){return to_option(value$2,d.get(k))}
    function find_all$0(d,k){return to_list(value$2,d.getAll(k))}
    function fold$1(f,d,acc)
     {function key(_hA_){return _hA_}
      var _hz_=d.entries();
      return caml_call5(_c_[8],key,value$2,f,_hz_,acc)}
    function set$4(d,k,v){d.set(k,v);return 0}
    function set_blob(fn$0,d,k,b)
     {if(fn$0)var f=fn$0[1],fn$1=f;else var fn$1=fn;d.set(k,b,fn$1);return 0}
    function append(d,k,v){d.append(k,v);return 0}
    function append_blob(fn$0,d,k,b)
     {if(fn$0)var f=fn$0[1],fn$1=f;else var fn$1=fn;
      d.append(k,b,fn$1);
      return 0}
    function delete$0(d,k){d.delete(k);return 0}
    function of_assoc$0(l)
     {var d=create$6(0);
      function _hy_(param)
       {var v=param[2],k=param[1];
        if(781515420 <= v[1])
         var f=v[2],fn$0=caml_call1(_bs_[3],f),v$0=f;
        else
         var v$1=v[2],fn$0=fn,v$0=v$1;
        d.append(k,v$0,fn$0);
        return 0}
      caml_call2(Stdlib_List[17],_hy_,l);
      return d}
    function to_assoc$0(p)
     {var
       _hw_=0,
       _hx_=fold$1(function(k,v,acc){return [0,[0,k,v],acc]},p,_hw_);
      return caml_call1(Stdlib_List[9],_hx_)}
    function of_uri_params(p)
     {function add(k,v,d){append(d,k,v);return d}
      var _hv_=create$6(0);
      return caml_call3(_br_[9][5],add,p,_hv_)}
    function to_uri_params(p)
     {var usp=target[cst_URLSearchParams$0];return new usp(p)}
    function form_data(e){return e[cst_formData]}
    var Data=[0,form_data],formdata$0="formdata";
    function submitter(e)
     {var _ht_=e[cst_submitter];
      return to_option(function(_hu_){return _hu_},_ht_)}
    var
     Submit=[0,submitter],
     submit$0="submit",
     Ev$0=[0,Data,formdata$0,Submit,submit$0];
    function of_jstr$3(_hs_){return _hs_}
    function of_uri_params$0(_hr_){return _hr_}
    function of_form_data(_hq_){return _hq_}
    function of_blob$0(_hp_){return _hp_}
    function of_array_buffer$0(_ho_){return _ho_}
    function body_used(r){return caml_call2(Bool[2],r,cst_bodyUsed)}
    function body$2(r)
     {var _hm_=r[cst_body$0];
      return to_option(function(_hn_){return _hn_},_hm_)}
    function array_buffer$1(r)
     {var _hk_=r.arrayBuffer();
      return of_promise$0(function(_hl_){return _hl_},_hk_)}
    function blob$0(r)
     {var _hi_=r.blob();return of_promise$0(function(_hj_){return _hj_},_hi_)}
    function form_data$0(r)
     {var _hg_=r.formData();
      return of_promise$0(function(_hh_){return _hh_},_hg_)}
    function json$0(r)
     {var _he_=r.json();return of_promise$0(function(_hf_){return _hf_},_he_)}
    function text$0(r)
     {var _hc_=r.text();return of_promise$0(function(_hd_){return _hd_},_hc_)}
    var
     Body=
      [0,
       of_jstr$3,
       of_uri_params$0,
       of_form_data,
       of_blob$0,
       of_array_buffer$0,
       body_used,
       body$2,
       array_buffer$1,
       blob$0,
       form_data$0,
       json$0,
       text$0],
     headers=target[cst_Headers];
    function mem$1(h,hs){return hs.has(h) | 0}
    function find$8(h,hs)
     {var _ha_=hs.get(h);return to_option(function(_hb_){return _hb_},_ha_)}
    function fold$2(f,p,acc)
     {function key(_g$_){return _g$_}
      function value(_g__){return _g__}
      var _g9_=p.entries();
      return caml_call5(_c_[8],key,value,f,_g9_,acc)}
    function of_obj$0(o){return new headers(o)}
    function of_assoc$1(init,l)
     {if(init)var h=init[1],args=[0,h];else var args=[0];
      var hs=caml_js_new(headers,args);
      function _g8_(param){var v=param[2],k=param[1];hs.append(k,v);return 0}
      caml_call2(Stdlib_List[17],_g8_,l);
      return hs}
    function to_assoc$1(p)
     {var
       _g6_=0,
       _g7_=fold$2(function(k,v,acc){return [0,[0,k,v],acc]},p,_g6_);
      return caml_call1(Stdlib_List[9],_g7_)}
    var
     default$0="default",
     force_cache="force-cache",
     no_cache="no-cache",
     no_store="no-store",
     only_if_cached="only-if-cached",
     reload$1="reload",
     Cache=[0,default$0,force_cache,no_cache,no_store,only_if_cached,reload$1],
     include="include",
     omit="omit",
     same_origin="same-origin",
     Credentials=[0,include,omit,same_origin],
     audio$1="audio",
     audioworklet="audioworklet",
     document$0="document",
     embed$1="embed",
     font="font",
     frame$0="frame",
     iframe$1="iframe",
     image="image",
     manifest="manifest",
     object$1="object'",
     paintworklet="paintworklet",
     report="report",
     script$1="script",
     sharedworker="sharedworker",
     style$3="style",
     track$1="track",
     video$1="video",
     worker="worker",
     xslt="xslt",
     Destination=
      [0,
       audio$1,
       audioworklet,
       document$0,
       embed$1,
       font,
       frame$0,
       iframe$1,
       image,
       manifest,
       object$1,
       paintworklet,
       report,
       script$1,
       sharedworker,
       style$3,
       track$1,
       video$1,
       worker,
       xslt],
     cors="cors",
     navigate$0="navigate",
     no_cors="no-cors",
     same_origin$0="same-origin",
     Mode=[0,cors,navigate$0,no_cors,same_origin$0],
     error$3="error",
     follow="follow",
     manual$0="manual",
     Redirect=[0,error$3,follow,manual$0];
    function init$2
     (body,
      cache,
      credentials,
      headers,
      integrity,
      keepalive,
      method,
      mode,
      redirect,
      referrer,
      referrer_policy,
      signal,
      param)
     {var o={};
      o[cst_body$1] = of_option(fn,function(_g5_){return _g5_},body);
      caml_call3(_e_[4],o,cst_cache,cache);
      caml_call3(_e_[4],o,cst_credentials,credentials);
      function _g2_(_g4_){return _g4_}
      set_if_some(o,cst_headers,caml_call2(Stdlib_Option[7],_g2_,headers));
      caml_call3(_e_[4],o,cst_integrity,integrity);
      caml_call3(Bool[4],o,cst_keepalive,keepalive);
      caml_call3(_e_[4],o,cst_method$0,method);
      caml_call3(_e_[4],o,cst_mode,mode);
      caml_call3(_e_[4],o,cst_redirect,redirect);
      caml_call3(_e_[4],o,cst_referrer$0,referrer);
      caml_call3(_e_[4],o,cst_referrerPolicy,referrer_policy);
      o[cst_signal$0] = of_option(fn,function(_g3_){return _g3_},signal);
      return o}
    var request=target[cst_Request];
    function v$3(opt,url)
     {if(opt)var sth=opt[1],init=sth;else var init={};
      return new request(url,init)}
    function of_request(init,r)
     {if(! init)return r.clone();
      var init$0=init[1];
      return new request(r,init$0)}
    function cache(r){return caml_call2(_e_[2],r,cst_cache$0)}
    function credentials(r){return caml_call2(_e_[2],r,cst_credentials$0)}
    function destination(r){return caml_call2(_e_[2],r,cst_destination)}
    function headers$0(r){return r[cst_headers$0]}
    function integrity(r){return caml_call2(_e_[2],r,cst_integrity$0)}
    function is_history_navigation(r)
     {return caml_call2(Bool[2],r,cst_isHistoryNavigation)}
    function is_reload_navigation(r)
     {return caml_call2(Bool[2],r,cst_isReloadNavigation)}
    function keepalive(r){return caml_call2(Bool[2],r,cst_keepalive$0)}
    function method$2(r){return caml_call2(_e_[2],r,cst_method$1)}
    function mode(r){return caml_call2(_e_[2],r,cst_mode$0)}
    function redirect(r){return caml_call2(_e_[2],r,cst_redirect$0)}
    function referrer$0(r){return caml_call2(_e_[2],r,cst_referrer$1)}
    function referrer_policy(r)
     {return caml_call2(_e_[2],r,cst_referrerPolicy$0)}
    function signal$0(r)
     {var _g0_=r[cst_signal$1];
      return to_option(function(_g1_){return _g1_},_g0_)}
    function url$0(r){return caml_call2(_e_[2],r,cst_url)}
    var
     basic="basic",
     cors$0="cors",
     default$1="default",
     error$4="error",
     opaque="opaque",
     opaqueredirect="opaqueredirect",
     Type$2=[0,basic,cors$0,default$1,error$4,opaque,opaqueredirect];
    function init$3(headers,status,status_text,param)
     {var o={};
      function _gY_(_gZ_){return _gZ_}
      set_if_some(o,cst_headers$1,caml_call2(Stdlib_Option[7],_gY_,headers));
      caml_call3(Int[4],o,cst_status,status);
      caml_call3(_e_[4],o,cst_statusText,status_text);
      return o}
    var response=target[cst_Response];
    function v$4(opt,body,param)
     {if(opt)var sth=opt[1],init=sth;else var init={};
      var body$0=of_option(null$0,function(_gX_){return _gX_},body);
      return new response(body$0,init)}
    function of_response(r){return r.clone()}
    function error$5(param){return response.error()}
    function redirect$0(status,url)
     {if(status)
       var status$0=status[1],args=[0,url,status$0];
      else
       var args=[0,url];
      return caml_js_meth_call(response,cst_redirect$1,args)}
    function headers$1(r){return r[cst_headers$2]}
    function ok$0(r){return caml_call2(Bool[2],r,cst_ok)}
    function redirected(r){return caml_call2(Bool[2],r,cst_redirected)}
    function status(r){return caml_call2(Int[2],r,cst_status$0)}
    function status_text(r){return caml_call2(_e_[2],r,cst_statusText$0)}
    function url$1(r){return caml_call2(_e_[2],r,cst_url$0)}
    function query_opts
     (ignore_search,ignore_method,ignore_vary,cache_name,param)
     {var o={};
      caml_call3(Bool[4],o,cst_ignoreSearch,ignore_search);
      caml_call3(Bool[4],o,cst_ignoreMethod,ignore_method);
      caml_call3(Bool[4],o,cst_ignoreVary,ignore_vary);
      caml_call3(_e_[4],o,cst_cacheName,cache_name);
      return o}
    function match(opt,c,req)
     {if(opt)var sth=opt[1],query_opts=sth;else var query_opts=fn;
      function _gU_(_gW_){return _gW_}
      function ok(_gV_){return to_option(_gU_,_gV_)}
      return of_promise$0(ok,c.match(req,query_opts))}
    function match_all(opt,c,req)
     {if(opt)var sth=opt[1],query_opts=sth;else var query_opts=fn;
      function _gR_(_gT_){return _gT_}
      function ok(_gS_){return to_list(_gR_,_gS_)}
      return of_promise$0(ok,c.matchAll(req,query_opts))}
    function add(c,req)
     {var _gP_=c.add(req);return of_promise$0(function(_gQ_){return 0},_gP_)}
    function add_all(c,reqs)
     {var _gM_=c.addAll(of_list(function(_gO_){return _gO_},reqs));
      return of_promise$0(function(_gN_){return 0},_gM_)}
    function put(c,req,resp)
     {var _gK_=c.put(req,resp);
      return of_promise$0(function(_gL_){return 0},_gK_)}
    function delete$1(opt,c,req)
     {if(opt)var sth=opt[1],query_opts=sth;else var query_opts=fn;
      return of_promise$0(caml_js_to_bool,c.delete(req,query_opts))}
    function keys(opt,_gF_,c)
     {if(opt)var sth=opt[1],query_opts=sth;else var query_opts=fn;
      if(_gF_)var sth$0=_gF_[1],req=sth$0;else var req=fn;
      var _gG_=c.keys(req,query_opts);
      function _gH_(_gJ_){return _gJ_}
      return of_promise$0(function(_gI_){return to_list(_gH_,_gI_)},_gG_)}
    function match$0(opt,s,req)
     {if(opt)var sth=opt[1],query_opts=sth;else var query_opts=fn;
      function _gC_(_gE_){return _gE_}
      function ok(_gD_){return to_option(_gC_,_gD_)}
      return of_promise$0(ok,s.match(req,query_opts))}
    function has$0(s,n){return of_promise$0(caml_js_to_bool,s.has(n))}
    function open$1(s,n)
     {var _gA_=s.open(n);
      return of_promise$0(function(_gB_){return _gB_},_gA_)}
    function delete$2(s,n){return of_promise$0(caml_js_to_bool,s.delete(n))}
    function keys$0(s){return of_promise$0(caml_list_of_js_array,s.keys())}
    var
     Storage=[0,match$0,has$0,open$1,delete$2,keys$0],
     Cache$0=
      [0,query_opts,match,match_all,add,add_all,put,delete$1,keys,Storage],
     fetch="fetch";
    function as_extendable(_gz_){return _gz_}
    function request$0(e){return e[cst_request]}
    function preload_response(e)
     {function _gw_(_gy_){return _gy_}
      function ok(_gx_){return to_option(_gw_,_gx_)}
      return of_promise$0(ok,e[cst_preloadReponse])}
    function client_id(e){return caml_call2(_e_[2],e,cst_clientId)}
    function resulting_client_id(e)
     {return caml_call2(_e_[2],e,cst_resultingClientId)}
    function replaces_client_id(e)
     {return caml_call2(_e_[2],e,cst_replacesClientId)}
    function handled(e)
     {var _gu_=e[cst_handled];
      return of_promise$0(function(_gv_){return 0},_gu_)}
    function respond_with(e,fut)
     {e.respondWith(to_promise$0(function(_gt_){return _gt_},fut));return 0}
    var
     Ev$1=
      [0,
       fetch,
       as_extendable,
       request$0,
       preload_response,
       client_id,
       resulting_client_id,
       replaces_client_id,
       handled,
       respond_with],
     fetch$0=target[cst_fetch];
    function url$2(opt,url)
     {if(opt)var sth=opt[1],init=sth;else var init={};
      var _gr_=fetch$0(url,init);
      return of_promise$0(function(_gs_){return _gs_},_gr_)}
    function request$1(r)
     {var _gp_=fetch$0(r);
      return of_promise$0(function(_gq_){return _gq_},_gp_)}
    var
     caches=target[cst_caches],
     permission_denied=1,
     position_unavailable=2,
     timeout=3;
    function code$3(e){return caml_call2(Int[2],e,cst_code$0)}
    function message$1(e){return caml_call2(_e_[2],e,cst_message$1)}
    var
     Error$0=
      [0,permission_denied,position_unavailable,timeout,code$3,message$1];
    function coords(p){return p[cst_coords]}
    function latitude(p)
     {var _go_=coords(p);return caml_call2(Float[2],_go_,cst_latitude)}
    function longitude(p)
     {var _gn_=coords(p);return caml_call2(Float[2],_gn_,cst_longitude)}
    function altitude(p)
     {var _gm_=coords(p);return caml_call2(Float[1],_gm_,cst_altitude)}
    function accuracy(p)
     {var _gl_=coords(p);return caml_call2(Float[2],_gl_,cst_accuracy)}
    function altitude_accuracy(p)
     {var _gk_=coords(p);
      return caml_call2(Float[1],_gk_,cst_altitudeAccuracy)}
    function heading(p)
     {var _gj_=coords(p);return caml_call2(Float[1],_gj_,cst_heading)}
    function speed(p)
     {var _gi_=coords(p);return caml_call2(Float[1],_gi_,cst_speed)}
    function timestamp_ms$0(p){return caml_call2(Float[2],p,cst_timestamp)}
    function of_navigator$0(n){return n[cst_geolocation]}
    function opts$0(high_accuracy,timeout_ms,maximum_age_ms,param)
     {var o={};
      caml_call3(Bool[4],o,cst_enableHighAccuracy,high_accuracy);
      caml_call3(Int[4],o,cst_timeout,timeout_ms);
      caml_call3(Int[4],o,cst_maximumAge,maximum_age_ms);
      return o}
    function get$5(opts,l)
     {var match=create$1(0),set_fut=match[2],fut=match[1];
      function pos(p){return caml_call1(set_fut,[0,p])}
      function error(e){return caml_call1(set_fut,[1,e])}
      var opts$0=of_option(fn,function(_gh_){return _gh_},opts);
      l.getCurrentPosition(pos,error,opts$0);
      return fut}
    function watch(opts,l,f)
     {function pos(p){return caml_call1(f,[0,p])}
      function error(e){return caml_call1(f,[1,e])}
      var opts$0=of_option(fn,function(_gg_){return _gg_},opts);
      return l.watchPosition(pos,error,opts$0)}
    function unwatch(l,id){l.clearWatch(id);return 0}
    function v$5(exact,ideal,param)
     {var o={};
      caml_call3(Bool[4],o,cst_exact,exact);
      caml_call3(Bool[4],o,cst_ideal,ideal);
      return o}
    var Constraint=[0,v$5],Bool$0=[0,Constraint];
    function v$6(min,max,param)
     {var o={};
      caml_call3(Int[4],o,cst_min,min);
      caml_call3(Int[4],o,cst_max,max);
      return o}
    function min(r){return caml_call2(Int[1],r,cst_min$0)}
    function max(r){return caml_call2(Int[1],r,cst_max$0)}
    var Range=[0,v$6,min,max];
    function v$7(min,max,exact,ideal,param)
     {var o={};
      caml_call3(Int[4],o,cst_min$1,min);
      caml_call3(Int[4],o,cst_max$1,max);
      caml_call3(Int[4],o,cst_exact$0,exact);
      caml_call3(Int[4],o,cst_ideal$0,ideal);
      return o}
    var Constraint$0=[0,v$7],Int$0=[0,Range,Constraint$0];
    function v$8(min,max,param)
     {var o={};
      caml_call3(Float[4],o,cst_min$2,min);
      caml_call3(Float[4],o,cst_max$2,max);
      return o}
    function min$0(r){return caml_call2(Float[1],r,cst_min$3)}
    function max$0(r){return caml_call2(Float[1],r,cst_max$3)}
    var Range$0=[0,v$8,min$0,max$0];
    function v$9(min,max,exact,ideal,param)
     {var o={};
      caml_call3(Float[4],o,cst_min$4,min);
      caml_call3(Float[4],o,cst_max$4,max);
      caml_call3(Float[4],o,cst_exact$1,exact);
      caml_call3(Float[4],o,cst_ideal$1,ideal);
      return o}
    var Constraint$1=[0,v$9],Float$0=[0,Range$0,Constraint$1];
    function v$10(exact,ideal,param)
     {var o={};
      set_if_some
       (o,
        cst_exact$2,
        caml_call2(Stdlib_Option[7],caml_list_to_js_array,exact));
      set_if_some
       (o,
        cst_ideal$2,
        caml_call2(Stdlib_Option[7],caml_list_to_js_array,ideal));
      return o}
    var Constraint$2=[0,v$10],Jstr$0=[0,Constraint$2];
    function v$11(name,param,_gf_,_ge_)
     {var
       constr_of_jv=_ge_[2],
       constr_to_jv=_ge_[1],
       cap_of_jv=_gf_[2],
       cap_to_jv=_gf_[1],
       value_of_jv=param[2],
       value_to_jv=param[1];
      return [0,
              name,
              value_to_jv,
              value_of_jv,
              cap_to_jv,
              cap_of_jv,
              constr_to_jv,
              constr_of_jv]}
    function name$6(p){return p[1]}
    function value_to_jv(p){return p[2]}
    function value_of_jv(p){return p[3]}
    function cap_to_jv(p){return p[4]}
    function cap_of_jv(p){return p[5]}
    function constr_to_jv(p){return p[6]}
    function constr_of_jv(p){return p[7]}
    function bool$0(name)
     {var
       value_conv=[0,caml_js_from_bool,caml_js_to_bool],
       _f8_=caml_js_to_bool;
      function _f9_(_gd_){return to_list(_f8_,_gd_)}
      var
       _f__=caml_js_from_bool,
       cap_conv=[0,function(_gc_){return of_list(_f__,_gc_)},_f9_];
      function _f$_(_gb_){return _gb_}
      var constr_conv=[0,function(_ga_){return _ga_},_f$_];
      return v$11(name,value_conv,cap_conv,constr_conv)}
    function int$2(name)
     {function _fZ_(_f7_){return _f7_}
      var value_conv=[0,function(_f6_){return _f6_},_fZ_];
      function _f0_(_f5_){return _f5_}
      var cap_conv=[0,function(_f4_){return _f4_},_f0_];
      function _f1_(_f3_){return _f3_}
      var constr_conv=[0,function(_f2_){return _f2_},_f1_];
      return v$11(name,value_conv,cap_conv,constr_conv)}
    function float$2(name)
     {function _fQ_(_fY_){return _fY_}
      var value_conv=[0,function(_fX_){return _fX_},_fQ_];
      function _fR_(_fW_){return _fW_}
      var cap_conv=[0,function(_fV_){return _fV_},_fR_];
      function _fS_(_fU_){return _fU_}
      var constr_conv=[0,function(_fT_){return _fT_},_fS_];
      return v$11(name,value_conv,cap_conv,constr_conv)}
    function jstr$0(name)
     {function _fK_(_fP_){return _fP_}
      var value_conv=[0,function(_fO_){return _fO_},_fK_];
      function _fL_(_fN_){return _fN_}
      var constr_conv=[0,function(_fM_){return _fM_},_fL_];
      return v$11(name,value_conv,value_conv,constr_conv)}
    function jstr_enum(name)
     {function _fE_(_fJ_){return _fJ_}
      var
       value_conv=[0,function(_fI_){return _fI_},_fE_],
       cap_conv=[0,caml_list_to_js_array,caml_list_of_js_array];
      function _fF_(_fH_){return _fH_}
      var constr_conv=[0,function(_fG_){return _fG_},_fF_];
      return v$11(name,value_conv,cap_conv,constr_conv)}
    function mem$2(p,cs){var mem=cs[p[1]];return is_none(mem)?0:mem | 0}
    function names(cs)
     {return caml_list_of_js_array(target[cst_Object].keys(cs))}
    var Supported_constraints=[0,mem$2,names];
    function empty$0(param){return {}}
    function find$9(p,c){return find_map$0(p[7],c,p[1])}
    function set$5(p,v,c){var _fD_=caml_call1(p[6],v);return c[p[1]] = _fD_}
    function delete$3(p,c){return delete c[p[1]]}
    var Constraints=[0,empty$0,find$9,set$5,delete$3];
    function find$10(p,s){return find_map$0(p[5],s,p[1])}
    function set$6(p,v,s){var _fC_=caml_call1(p[4],v);return s[p[1]] = _fC_}
    function delete$4(p,s){return delete s[p[1]]}
    var Capabilities=[0,find$10,set$6,delete$4];
    function get$6(p,s){var _fB_=s[p[1]];return caml_call1(p[3],_fB_)}
    function find$11(p,s){return find_map$0(p[3],s,p[1])}
    var
     Settings=[0,get$6,find$11],
     aspect_ratio=float$2("aspectRatio"),
     auto_gain_control=bool$0("autoGainControl"),
     channel_count=int$2("channelCount"),
     cursor$0=jstr_enum("cursor"),
     device_id=jstr$0("deviceId"),
     display_surface=jstr_enum("displaySurface"),
     echo_cancellation=bool$0("echoCancellation"),
     facing_mode=jstr_enum("facingMode"),
     frame_rate=float$2("frameRate"),
     group_id=jstr$0("groupId"),
     height$4=int$2("height"),
     latency=float$2("latency"),
     logical_surface=bool$0("logicalSurface"),
     noise_suppresion=bool$0("noiseSuppresion"),
     resize_mode=jstr_enum("resizeMode"),
     sample_rate=int$2("sampleRate"),
     sample_size=int$2("sampleSize"),
     width$4=int$2("width"),
     Prop=
      [0,
       aspect_ratio,
       auto_gain_control,
       channel_count,
       cursor$0,
       device_id,
       display_surface,
       echo_cancellation,
       facing_mode,
       frame_rate,
       group_id,
       height$4,
       latency,
       logical_surface,
       noise_suppresion,
       resize_mode,
       sample_rate,
       sample_size,
       width$4],
     live="live",
     ended$0="ended",
     State=[0,live,ended$0],
     audio$2="audio",
     video$2="video",
     Kind$0=[0,audio$2,video$2];
    function id$3(t){return caml_call2(_e_[2],t,cst_id)}
    function isolated(t){return caml_call2(Bool[2],t,cst_isolated)}
    function kind$0(t){return caml_call2(_e_[2],t,cst_kind$0)}
    function label$1(t){return caml_call2(_e_[2],t,cst_label)}
    function muted(t){return caml_call2(Bool[2],t,cst_muted)}
    function ready_state(t){return caml_call2(_e_[2],t,cst_readyState)}
    function enabled(t){return caml_call2(Bool[2],t,cst_enabled)}
    function set_enabled(t,b){return caml_call3(Bool[3],t,cst_enabled$0,b)}
    function get_capabilities(t){return t.getCapabilities()}
    function get_constraints(t){return t.getConstraints()}
    function apply_constraints(t,c)
     {if(c)var c$0=c[1],a=[0,c$0];else var a=[0];
      var _fA_=caml_js_meth_call(t,cst_applyConstraints,a);
      return of_promise$0(caml_call1(Stdlib_Fun[1],0),_fA_)}
    function get_settings(t){return t.getSettings()}
    function stop(t){t.stop();return 0}
    function clone(t){return t.clone()}
    var
     ended$1="ended",
     isolationchange="isolationchange",
     mute="mute",
     unmute="unmute";
    function track$2(p){return p[cst_track]}
    function v$12(opt,_fy_,param)
     {if(opt)var sth=opt[1],audio=sth;else var audio=17505;
      if(_fy_)var sth$0=_fy_[1],video=sth$0;else var video=17505;
      var o={};
      function set_track(o,n,param)
       {if(typeof param === "number")return caml_call3(Bool[3],o,n,0);
        var _fz_=param[2];
        if(! _fz_)return caml_call3(Bool[3],o,n,1);
        var c=_fz_[1];
        return o[n] = c}
      set_track(o,cst_audio,audio);
      set_track(o,cst_video,video);
      return o}
    function av(param){return v$12(_bu_,_bt_,0)}
    var Constraints$0=[0,v$12,av],stream$0=target[cst_MediaStream];
    function create$7(param){return new stream$0()}
    function of_stream(s){return new stream$0(s)}
    function of_tracks(ts)
     {return new stream$0(of_list(function(_fx_){return _fx_},ts))}
    function id$4(s){return caml_call2(_e_[2],s,cst_id$0)}
    function active(s){return caml_call2(Bool[2],s,cst_active)}
    function get_audio_tracks(s)
     {var _fv_=s.getAudioTracks();
      return to_list(function(_fw_){return _fw_},_fv_)}
    function get_video_tracks(s)
     {var _ft_=s.getVideoTracks();
      return to_list(function(_fu_){return _fu_},_ft_)}
    function get_tracks(s)
     {var _fr_=s.getTracks();return to_list(function(_fs_){return _fs_},_fr_)}
    function get_track_by_id(s,id)
     {var _fp_=s.getTrackById(id);
      return to_option(function(_fq_){return _fq_},_fp_)}
    function add_track(s,t){s.addTrack(t);return 0}
    function remove_track(s,t){s.removeTrack(t);return 0}
    function clone$0(s){return s.clone()}
    var
     addtrack="addtrack",
     removetrack="removetrack",
     Ev$2=[0,addtrack,removetrack],
     cbr="cbr",
     vbr="vbr",
     Bitrate_mode=[0,cbr,vbr],
     inactive="inactive",
     recording="recording",
     paused="paused",
     Recording_state=[0,inactive,recording,paused];
    function init$4(type,audio_bps,video_bps,bps,audio_bitrate_mode,param)
     {var o={};
      caml_call3(_e_[4],o,cst_mimeType,type);
      caml_call3(Int[4],o,cst_audioBitsPerSecond,audio_bps);
      caml_call3(Int[4],o,cst_videoBitsPerSecond,video_bps);
      caml_call3(Int[4],o,cst_bitsPerSecond,bps);
      caml_call3(_e_[4],o,cst_audioBitrateMode,audio_bitrate_mode);
      return o}
    var recorder=target[cst_MediaRecorder];
    function is_type_supported(t){return recorder.isTypeSupported(t) | 0}
    function create$8(opt,s)
     {if(opt)var sth=opt[1],init=sth;else var init={};
      return new recorder(s,init)}
    function stream$1(r){return r[cst_stream$0]}
    function type$8(r){return caml_call2(_e_[2],r,cst_mimeType$0)}
    function state$1(r){return caml_call2(_e_[2],r,cst_state$1)}
    function video_bps(r)
     {return caml_call2(Int[2],r,cst_videoBitsPerSecond$0)}
    function audio_bps(r)
     {return caml_call2(Int[2],r,cst_audioBitsPerSecond$0)}
    function audio_bitrate_mode(r)
     {return caml_call2(_e_[2],r,cst_audioBitrateMode$0)}
    function start(r,ts)
     {if(ts)var ms=ts[1],args=[0,ms];else var args=[0];
      try
       {caml_js_meth_call(r,cst_start,args);return _bv_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}}
    function stop$0(r){r.stop();return 0}
    function pause$0(r){r.pause();return 0}
    function resume(r){r.resume();return 0}
    function request_data(r){r.requestData();return 0}
    function data$2(e){return e[cst_data$1]}
    function timecode(e){return caml_call2(Float[2],e,cst_timecode)}
    var Blob=[0,data$2,timecode];
    function error$6(e){return e[cst_error$2]}
    var
     Error$1=[0,error$6],
     start$0="start",
     stop$1="stop",
     dataavailable="dataavailable",
     pause$1="pause",
     resume$0="resume",
     error$7="error",
     Ev$3=
      [0,Blob,Error$1,start$0,stop$1,dataavailable,pause$1,resume$0,error$7],
     audioinput="audioinput",
     audiooutput="audiooutput",
     videoinput="videoinput",
     Kind$1=[0,audioinput,audiooutput,videoinput];
    function device_id$0(d){return caml_call2(_e_[2],d,cst_deviceId)}
    function kind$1(d){return caml_call2(_e_[2],d,cst_kind$1)}
    function label$2(d){return caml_call2(_e_[2],d,cst_label$0)}
    function group_id$0(d){return caml_call2(_e_[2],d,cst_groupId)}
    function to_json$1(d){return d.toJSON()}
    var
     Info=[0,device_id$0,kind$1,label$2,group_id$0,to_json$1],
     Device=[0,Kind$1,Info];
    function of_navigator$1(n){return n[cst_mediaDevices]}
    function enumerate(m)
     {function _fm_(_fo_){return _fo_}
      function ok(_fn_){return to_list(_fm_,_fn_)}
      return of_promise$0(ok,m.enumerateDevices())}
    function get_supported_constraints(m){return m.getSupportedConstraints()}
    function get_user_media(m,c)
     {function ok(_fl_){return _fl_}return of_promise$0(ok,m.getUserMedia(c))}
    function get_display_media(m,c)
     {function ok(_fk_){return _fk_}
      return of_promise$0(ok,m.getDisplayMedia(c))}
    var
     devicechange="devicechange",
     Ev$4=[0,devicechange],
     Devices=
      [0,
       of_navigator$1,
       enumerate,
       get_supported_constraints,
       get_user_media,
       get_display_media,
       Ev$4],
     aborted$0=1,
     network=2,
     decode$3=3,
     src_not_supported=4;
    function code$4(e){return caml_call2(Int[2],e,cst_code$1)}
    function message$2(e){return caml_call2(_e_[2],e,cst_message$2)}
    var
     Error$2=[0,aborted$0,network,decode$3,src_not_supported,code$4,message$2],
     maybe="maybe",
     probably="probably",
     Can_play=[0,maybe,probably],
     Have=[0,0,1,2,3,4],
     Network=[0,0,1,2,3],
     anonymous="anonymous",
     use_credentials="use-credentials",
     Cors=[0,anonymous,use_credentials];
    function of_media_stream(_fj_){return _fj_}
    function of_blob$1(_fi_){return _fi_}
    function of_media_source(_fh_){return _fh_}
    var
     Provider=[0,of_media_stream,of_blob$1,of_media_source],
     List=[0],
     Audio_track=[0,List],
     List$0=[0],
     Video_track=[0,List$0],
     Kind$2=[0],
     List$1=[0],
     Text_track=[0,Kind$2,List$1];
    function length$4(r){return caml_call2(Int[2],r,cst_length$6)}
    function start$1(r,i){return r.start(i)}
    function end(r,i){return r.end(i)}
    var Time_ranges=[0,length$4,start$1,end];
    function of_el$0(e)
     {return caml_call2(_bq_[9],_bq_[60][107],e)
              ?e
              :caml_call2(_bq_[9],_bq_[60][7],e)
                ?e
                :throw$0
                  (0,
                   "Expected audio or video element but found: ".concat
                    (caml_call1(_bq_[8],e)))}
    function to_el$0(_fg_){return _fg_}
    function error$8(m)
     {var _fe_=m[cst_error$3];
      return to_option(function(_ff_){return _ff_},_fe_)}
    function src$1(m){return caml_call2(_e_[2],m,cst_src)}
    function set_src(m,s){return caml_call3(_e_[3],m,cst_src$0,s)}
    function src_object(m)
     {var _fc_=m[cst_srcObject];
      return to_option(function(_fd_){return _fd_},_fc_)}
    function set_src_object(m,o)
     {return m[cst_srcObject$0]
             =
             of_option(null$0,function(_fb_){return _fb_},o)}
    function current_src(m){return caml_call2(_e_[2],m,cst_currentSrc)}
    function cross_origin(m){return caml_call2(_e_[2],m,cst_crossOrigin)}
    function set_cross_origin(m,c)
     {return caml_call3(_e_[3],m,cst_crossOrigin$0,c)}
    function network_state(m){return caml_call2(Int[2],m,cst_networkState)}
    function preload(m){return caml_call2(_e_[2],m,cst_preload)}
    function set_preload(m,p){return caml_call3(_e_[3],m,cst_preload$0,p)}
    function buffered(m){return m[cst_buffered]}
    function load$0(m){m.load();return 0}
    function can_play_type(m,t){return m.canPlayType(t)}
    function ready_state$0(m){return caml_call2(Int[2],m,cst_readyState$0)}
    function seeking$0(m){return caml_call2(Bool[2],m,cst_seeking)}
    function current_time_s(m){return caml_call2(Float[2],m,cst_currentTime)}
    function set_current_time_s(m,t)
     {return caml_call3(Float[3],m,cst_currentTime$0,t)}
    function fast_seek_s(m,t){m.fastSeek(t);return 0}
    function duration_s(m){return caml_call2(Float[2],m,cst_duration$0)}
    function paused$0(m){return caml_call2(Bool[2],m,cst_paused)}
    function default_playback_rate(m)
     {return caml_call2(Float[2],m,cst_defaultPlaybackRate)}
    function set_default_playback_rate(m,r)
     {return caml_call3(Float[3],m,cst_defaultPlaybackRate$0,r)}
    function playback_rate(m){return caml_call2(Float[2],m,cst_playbackRate)}
    function set_playback_rate(m,r)
     {return caml_call3(Float[3],m,cst_playbackRate$0,r)}
    function played(m){return m[cst_played]}
    function seekable(m){return m[cst_seekable]}
    function ended$2(m){return caml_call2(Bool[2],m,cst_ended)}
    function autoplay(m){return caml_call2(Bool[2],m,cst_autoplay)}
    function set_auto_play(m,b){return caml_call3(Bool[3],m,cst_autoplay$0,b)}
    function loop(m){return caml_call2(Bool[2],m,cst_loop)}
    function set_loop(m,b){return caml_call3(Bool[3],m,cst_loop$0,b)}
    function play$0(m)
     {var _e$_=m.play();return of_promise$0(function(_fa_){return 0},_e$_)}
    function pause$2(m){m.pause();return 0}
    function controls(m){return caml_call2(Bool[2],m,cst_controls)}
    function set_controls(m,b){return caml_call3(Bool[3],m,cst_controls$0,b)}
    function volume(m){return caml_call2(Float[2],m,cst_volume)}
    function set_volume(m,f){return caml_call3(Float[3],m,cst_volume$0,f)}
    function muted$0(m){return caml_call2(Bool[2],m,cst_muted$0)}
    function set_muted(m,b){return caml_call3(Bool[3],m,cst_muted$1,b)}
    function default_muted(m){return caml_call2(Bool[2],m,cst_defaultMuted)}
    function set_default_muted(m,b)
     {return caml_call3(Bool[3],m,cst_defaultMuted$0,b)}
    function audio_track_list(m){return m[cst_audioTracks]}
    function video_track_list(m){return m[cst_videoTracks]}
    function text_track_list(m){return m[cst_textTracks]}
    function capture_stream(m){return m.captureStream()}
    var
     El=
      [0,
       Error$2,
       Can_play,
       Have,
       Network,
       Cors,
       Provider,
       Audio_track,
       Video_track,
       Text_track,
       Time_ranges,
       of_el$0,
       to_el$0,
       error$8,
       src$1,
       set_src,
       src_object,
       set_src_object,
       current_src,
       cross_origin,
       set_cross_origin,
       network_state,
       preload,
       set_preload,
       buffered,
       load$0,
       can_play_type,
       ready_state$0,
       seeking$0,
       current_time_s,
       set_current_time_s,
       fast_seek_s,
       duration_s,
       paused$0,
       default_playback_rate,
       set_default_playback_rate,
       playback_rate,
       set_playback_rate,
       played,
       seekable,
       ended$2,
       autoplay,
       set_auto_play,
       loop,
       set_loop,
       play$0,
       pause$2,
       controls,
       set_controls,
       volume,
       set_volume,
       muted$0,
       set_muted,
       default_muted,
       set_default_muted,
       audio_track_list,
       video_track_list,
       text_track_list,
       capture_stream];
    function transfer(_e__){return _e__}
    function opts$1(target_origin,transfer,param)
     {var o={};
      caml_call3(_e_[4],o,cst_targetOrigin,target_origin);
      set_if_some
       (o,
        cst_transfer,
        caml_call2(Stdlib_Option[7],caml_list_to_js_array,transfer));
      return o}
    function start$2(p){p.start();return 0}
    function close$1(p){p.close();return 0}
    function post(opt,p,v)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      p.postMessage(v,opts);
      return 0}
    var Port=[0,start$2,close$1,post],channel=target[cst_MessageChannel];
    function create$9(param){return new channel()}
    function port1(c){return c[cst_port1]}
    function port2(c){return c[cst_port2]}
    var broadcast=target[cst_BroadcastChannel];
    function create$10(n){return new broadcast(n)}
    function name$7(b){return caml_call2(_e_[2],b,cst_name$6)}
    function close$2(b){b.close();return 0}
    function post$0(b,v){b.postMessage(v);return 0}
    function window_post(opt,w,v)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      w.postMessage(v,opts);
      return 0}
    var message$3="message",messageerror="messageerror";
    function as_extendable$0(_e9_){return _e9_}
    function data$3(e){return e[cst_data$2]}
    function origin(e){return caml_call2(_e_[2],e,cst_origin)}
    function last_event_id(e){return caml_call2(_e_[2],e,cst_lastEventId)}
    function source$1(e)
     {var _e7_=e[cst_source];
      return to_option(function(_e8_){return _e8_},_e7_)}
    function ports(e)
     {var _e5_=e[cst_ports];return to_list(function(_e6_){return _e6_},_e5_)}
    var
     default$2="default",
     denied="denied",
     granted="granted",
     Permission=[0,default$2,denied,granted],
     notification=target[cst_Notification];
    function permission(param)
     {return caml_call2(_e_[2],notification,cst_permission)}
    function request_permission(param)
     {var _e3_=notification.requestPermission();
      return of_promise$0(function(_e4_){return _e4_},_e3_)}
    var auto$1="auto",ltr="ltr",rtl="rtl",Direction=[0,auto$1,ltr,rtl];
    function max$1(param)
     {return caml_call2(Int[2],notification,cst_maxActions)}
    function v$13(icon,action,title,param)
     {var o={};
      caml_call3(_e_[3],o,cst_action$0,action);
      caml_call3(_e_[3],o,cst_title$1,title);
      caml_call3(_e_[4],o,cst_icon,icon);
      return o}
    function action$2(a){return caml_call2(_e_[2],a,cst_action$1)}
    function title$5(a){return caml_call2(_e_[2],a,cst_title$2)}
    function icon(a){return caml_call2(_e_[1],a,cst_icon$0)}
    var Action=[0,max$1,v$13,action$2,title$5,icon];
    function opts$2
     (dir,
      lang,
      body,
      tag,
      image,
      icon,
      badge,
      timestamp_ms,
      renotify,
      silent,
      require_interaction,
      data,
      opt,
      param)
     {if(opt)var sth=opt[1],actions=sth;else var actions=0;
      var o={};
      caml_call3(_e_[4],o,cst_dir$0,dir);
      caml_call3(_e_[4],o,cst_lang,lang);
      caml_call3(_e_[4],o,cst_body$2,body);
      caml_call3(_e_[4],o,cst_image,image);
      caml_call3(_e_[4],o,cst_icon$1,icon);
      caml_call3(_e_[4],o,cst_badge,badge);
      caml_call3(Int[4],o,cst_timestamp$0,timestamp_ms);
      caml_call3(Bool[4],o,cst_renotify,renotify);
      caml_call3(Bool[4],o,cst_silent,silent);
      caml_call3(Bool[4],o,cst_requireInteraction,require_interaction);
      function _e0_(_e2_){return _e2_}
      set_if_some(o,cst_data$3,caml_call2(Stdlib_Option[7],_e0_,data));
      o[cst_actions] = of_list(function(_e1_){return _e1_},actions);
      return o}
    function create$11(opt,title)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new notification(title,opts)}
    function close$3(n){n.close();return 0}
    function actions(n)
     {var _eY_=n[cst_actions$0];
      return to_list(function(_eZ_){return _eZ_},_eY_)}
    function badge(n){return caml_call2(_e_[2],n,cst_badge$0)}
    function body$3(n){return caml_call2(_e_[2],n,cst_body$3)}
    function data$4(n){return n[cst_data$4]}
    function dir$2(n){return caml_call2(_e_[2],n,cst_dir$1)}
    function lang$1(n){return caml_call2(_e_[2],n,cst_lang$0)}
    function tag(n){return caml_call2(_e_[2],n,cst_tag)}
    function icon$0(n){return caml_call2(_e_[2],n,cst_icon$2)}
    function image$0(n){return caml_call2(_e_[2],n,cst_image$0)}
    function renotify(n){return caml_call2(Bool[2],n,cst_renotify$0)}
    function require_interaction(n)
     {return caml_call2(Bool[2],n,cst_requireInteraction$0)}
    function silent(n){return caml_call2(Bool[2],n,cst_silent$0)}
    function timestamp_ms$1(n){return caml_call2(Int[2],n,cst_timestamp$1)}
    function title$6(n){return caml_call2(_e_[2],n,cst_title$3)}
    var
     notificationclick="notificationclick",
     notificationclose="notificationclose";
    function as_extendable$1(_eX_){return _eX_}
    function notification$0(e){return e[cst_notification]}
    function action$3(e){return caml_call2(_e_[2],e,cst_action$2)}
    function local(w){return w[cst_localStorage]}
    function session(w){return w[cst_sessionStorage]}
    function length$5(s){return caml_call2(Int[2],s,cst_length$7)}
    function key$0(s,i)
     {var _eV_=s.key(i);return to_option(function(_eW_){return _eW_},_eV_)}
    function get_item(s,k)
     {var _eT_=s.getItem(k);
      return to_option(function(_eU_){return _eU_},_eT_)}
    function set_item(s,k,v)
     {try
       {s.setItem(k,v);return _bw_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}}
    function remove_item(s,k){s.removeItem(k);return 0}
    function clear$1(s){s.clear();return 0}
    var storage="storage";
    function key$1(e){return caml_call2(_e_[1],e,cst_key$0)}
    function old_value(e){return caml_call2(_e_[1],e,cst_oldValue)}
    function new_value(e){return caml_call2(_e_[1],e,cst_newValue)}
    function url$3(e){return caml_call2(_e_[2],e,cst_url$1)}
    function storage_area(e){return find(e,cst_storageArea)}
    var
     blob$1="blob",
     arraybuffer="arraybuffer",
     Binary_type=[0,blob$1,arraybuffer],
     Ready_state=[0,0,1,2,3],
     websocket=target[cst_WebSocket];
    function create$12(protocols,url)
     {if(protocols)
       var ps=protocols[1],protocols$0=caml_list_to_js_array(ps);
      else
       var protocols$0=fn;
      return new websocket(url,protocols$0)}
    function binary_type(s){return caml_call2(_e_[2],s,cst_binaryType)}
    function set_binary_type(s,t)
     {return caml_call3(_e_[3],s,cst_binaryType$0,t)}
    function close$4(code,r,s)
     {if(code)var c=code[1],code$0=c;else var code$0=fn;
      if(r)var s$0=r[1],reason=s$0;else var reason=fn;
      s.close(code$0,reason);
      return 0}
    function url$4(s){return caml_call2(_e_[2],s,cst_url$2)}
    function ready_state$1(s){return caml_call2(Int[2],s,cst_readyState$1)}
    function buffered_amount(s)
     {return caml_call2(Int[2],s,cst_bufferedAmount)}
    function extensions(s){return caml_call2(_e_[2],s,cst_extensions)}
    function protocol(s){return caml_call2(_e_[2],s,cst_protocol$1)}
    function send_string(s,d){s.send(d);return 0}
    function send_blob(s,d){s.send(d);return 0}
    function send_tarray(s,d){s.send(d);return 0}
    function send_array_buffer(s,d){s.send(d);return 0}
    function was_clean(e){return caml_call2(Bool[2],e,cst_wasClean)}
    function code$5(e){return caml_call2(Int[2],e,cst_code$2)}
    function reason(e){return caml_call2(_e_[2],e,cst_reason)}
    var
     Close=[0,was_clean,code$5,reason],
     close$5="close",
     Ev$5=[0,Close,close$5],
     Brr_io=
      [0,
       [0,
        [0,
         Presentation_style,
         opts,
         create$5,
         presentation_style,
         last_modified_ms$0,
         delayed,
         types,
         get_type],
        of_navigator,
        as_target$1,
        read,
        read_text,
        write,
        write_text],
       [0,
        of_el,
        to_el,
        name$5,
        method$1,
        target$1,
        action$1,
        enctype,
        accept_charset,
        autocomplete$1,
        no_validate,
        check_validity,
        report_validity,
        request_submit,
        reset$0,
        submit,
        [0,
         create$6,
         of_form,
         is_empty$1,
         has_file_entry,
         mem$0,
         find$7,
         find_all$0,
         fold$1,
         set$4,
         set_blob,
         append,
         append_blob,
         delete$0,
         of_assoc$0,
         to_assoc$0,
         of_uri_params,
         to_uri_params],
        Ev$0],
       [0,
        Body,
        [0,mem$1,find$8,fold$2,of_obj$0,of_assoc$1,to_assoc$1],
        [0,
         Cache,
         Credentials,
         Destination,
         Mode,
         Redirect,
         init$2,
         v$3,
         of_request,
         cache,
         credentials,
         destination,
         headers$0,
         integrity,
         is_history_navigation,
         is_reload_navigation,
         keepalive,
         method$2,
         mode,
         redirect,
         referrer$0,
         referrer_policy,
         signal$0,
         url$0],
        [0,
         Type$2,
         init$3,
         v$4,
         of_response,
         error$5,
         redirect$0,
         headers$1,
         ok$0,
         redirected,
         status,
         status_text,
         url$1],
        Cache$0,
        Ev$1,
        url$2,
        request$1,
        caches],
       [0,
        Error$0,
        [0,
         latitude,
         longitude,
         accuracy,
         altitude,
         altitude_accuracy,
         heading,
         speed,
         timestamp_ms$0],
        opts$0,
        of_navigator$0,
        get$5,
        watch,
        unwatch],
       [0,
        [0,
         Bool$0,
         Int$0,
         Float$0,
         Jstr$0,
         bool$0,
         int$2,
         float$2,
         jstr$0,
         jstr_enum,
         v$11,
         name$6,
         value_of_jv,
         value_to_jv,
         cap_of_jv,
         cap_to_jv,
         constr_of_jv,
         constr_to_jv],
        Supported_constraints,
        Constraints,
        Capabilities,
        Settings,
        [0,
         State,
         Kind$0,
         Prop,
         id$3,
         isolated,
         kind$0,
         label$1,
         muted,
         ready_state,
         enabled,
         set_enabled,
         get_capabilities,
         get_constraints,
         apply_constraints,
         get_settings,
         stop,
         clone,
         [0,track$2,ended$1,isolationchange,mute,unmute]],
        [0,
         Constraints$0,
         create$7,
         of_stream,
         of_tracks,
         id$4,
         active,
         get_audio_tracks,
         get_video_tracks,
         get_tracks,
         get_track_by_id,
         add_track,
         remove_track,
         clone$0,
         Ev$2],
        [0,
         Bitrate_mode,
         Recording_state,
         is_type_supported,
         init$4,
         create$8,
         stream$1,
         type$8,
         state$1,
         video_bps,
         audio_bps,
         audio_bitrate_mode,
         start,
         stop$0,
         pause$0,
         resume,
         request_data,
         Ev$3],
        Device,
        Devices,
        El],
       [0,
        transfer,
        opts$1,
        Port,
        [0,create$9,port1,port2],
        [0,create$10,name$7,close$2,post$0],
        window_post,
        [0,
         as_extendable$0,
         data$3,
         origin,
         last_event_id,
         source$1,
         ports,
         message$3,
         messageerror]],
       [0,
        Permission,
        permission,
        request_permission,
        Direction,
        Action,
        opts$2,
        create$11,
        close$3,
        actions,
        badge,
        body$3,
        data$4,
        dir$2,
        lang$1,
        tag,
        icon$0,
        image$0,
        renotify,
        require_interaction,
        silent,
        timestamp_ms$1,
        title$6,
        [0,
         as_extendable$1,
         notification$0,
         action$3,
         notificationclick,
         notificationclose]],
       [0,
        local,
        session,
        length$5,
        key$0,
        get_item,
        set_item,
        remove_item,
        clear$1,
        [0,key$1,old_value,new_value,url$3,storage_area,storage]],
       [0,
        Binary_type,
        Ready_state,
        create$12,
        binary_type,
        set_binary_type,
        close$4,
        url$4,
        ready_state$1,
        buffered_amount,
        extensions,
        protocol,
        send_string,
        send_blob,
        send_array_buffer,
        send_tarray,
        Ev$5]];
    caml_register_global(2979,Brr_io,"Brr_io");
    function is_2d(m){return caml_call2(Bool[2],m,cst_is2D)}
    function is_identity(m){return caml_call2(Bool[2],m,cst_isIdentity)}
    function inverse(m){return m.inverse()}
    function multiply(m$0,m){return m$0.multiply(m)}
    function m11(m){return caml_call2(Float[2],m,cst_m11)}
    function m12(m){return caml_call2(Float[2],m,cst_m12)}
    function m13(m){return caml_call2(Float[2],m,cst_m13)}
    function m14(m){return caml_call2(Float[2],m,cst_m14)}
    function m21(m){return caml_call2(Float[2],m,cst_m21)}
    function m22(m){return caml_call2(Float[2],m,cst_m22)}
    function m23(m){return caml_call2(Float[2],m,cst_m23)}
    function m24(m){return caml_call2(Float[2],m,cst_m24)}
    function m31(m){return caml_call2(Float[2],m,cst_m31)}
    function m32(m){return caml_call2(Float[2],m,cst_m32)}
    function m33(m){return caml_call2(Float[2],m,cst_m33)}
    function m34(m){return caml_call2(Float[2],m,cst_m34)}
    function m41(m){return caml_call2(Float[2],m,cst_m41)}
    function m42(m){return caml_call2(Float[2],m,cst_m42)}
    function m43(m){return caml_call2(Float[2],m,cst_m43)}
    function m44(m){return caml_call2(Float[2],m,cst_m44)}
    function a$1(m){return caml_call2(Float[2],m,cst_a)}
    function b$1(m){return caml_call2(Float[2],m,cst_b)}
    function c$0(m){return caml_call2(Float[2],m,cst_c)}
    function d(m){return caml_call2(Float[2],m,cst_d)}
    function e(m){return caml_call2(Float[2],m,cst_e)}
    function f(m){return caml_call2(Float[2],m,cst_f)}
    var dommatrixro=target[cst_DOMMatrixReadOnly];
    function to_float32_array(m){return m.toFloat32Array()}
    function of_float32_array(a){return dommatrixro.fromFloat32Array(a)}
    function to_float64_array(m){return m.toFloat64Array()}
    function of_float64_array(a){return dommatrixro.fromFloat64Array(a)}
    var v4=target[cst_DOMPointReadOnly];
    function v$14(x,y,z,w){return new v4(x,y,z,w)}
    function tr$1(m,v){return v.matrixTransform(m)}
    function to_json$2(v){return v.toJSON()}
    function x(v){return caml_call2(Float[2],v,cst_x$0)}
    function y(v){return caml_call2(Float[2],v,cst_y$0)}
    function z(v){return caml_call2(Float[2],v,cst_z)}
    function w(v){return caml_call2(Float[2],v,cst_w)}
    function create$13(d,at,opt,_eS_,cs)
     {if(opt)var sth=opt[1],w=sth;else var w=0;
      if(_eS_)var sth$0=_eS_[1],h=sth$0;else var h=0;
      var c=caml_call3(_bq_[76],d,at,cs);
      caml_call3(Int[3],c,cst_width$1,w);
      caml_call3(Int[3],c,cst_height$1,h);
      return c}
    function of_el$1(e)
     {return caml_call2(_bq_[9],_bq_[60][16],e)
              ?e
              :throw$0
                (0,
                 "Expected canvas element but found: ".concat
                  (caml_call1(_bq_[8],e)))}
    function to_el$1(_eR_){return _eR_}
    function w$0(c){return caml_call2(Int[2],c,cst_width$2)}
    function h(c){return caml_call2(Int[2],c,cst_height$2)}
    function set_w(c,w){return caml_call3(Int[3],c,cst_width$3,w)}
    function set_h(c,h){return caml_call3(Int[3],c,cst_height$3,h)}
    function set_size_to_layout_size(opt,c)
     {if(opt)var sth=opt[1],hidpi=sth;else var hidpi=1;
      var
       dpr=hidpi?caml_call1(Window[5],_bp_[5]):1.,
       cw=Math.ceil(dpr * caml_call1(_bq_[39],c)) | 0,
       ch=Math.ceil(dpr * caml_call1(_bq_[40],c)) | 0,
       _eP_=w$0(c) !== cw?1:0,
       _eQ_=_eP_ || (h(c) !== ch?1:0);
      return _eQ_?(set_w(c,cw),set_h(c,ch)):_eQ_}
    function image_encode(opt,quality,param)
     {if(opt)var sth=opt[1],type=sth;else var type="image/png";
      var o={};
      caml_call3(_e_[3],o,cst_type$4,type);
      caml_call3(Float[4],o,cst_quality,quality);
      return o}
    function enc(encode,c,meth,arg)
     {if(encode)
       var e=encode[1],encode$0=e;
      else
       var encode$0=image_encode(0,0,0);
      var t=encode$0[cst_type$5],q=find(encode$0,cst_quality$0);
      if(arg)
       {var a=arg[1];
        if(q)var q$0=q[1],_eO_=[0,a,t,q$0];else var _eO_=[0,a,t];
        var args=_eO_}
      else
       if(q)var q$1=q[1],args=[0,t,q$1];else var args=[0,t];
      return caml_js_meth_call(c,meth,args)}
    function to_data_url(encode,c)
     {try
       {var v=enc(0,c,cst_toDataURL,0)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}
      return [0,v]}
    function to_blob(encode,c)
     {var match=create$1(0),set=match[2],fut=match[1];
      function cb(blob)
       {return caml_call1(set,[0,to_option(function(_eN_){return _eN_},blob)])}
      try
       {enc(0,c,cst_toBlob,[0,caml_js_wrap_callback_strict(1,cb)]);return fut}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        caml_call1(set,[1,e]);
        return fut}}
    function capture_stream$0(hz,c)
     {if(hz)var hz$0=hz[1],args=[0,hz$0];else var args=[0];
      return caml_js_meth_call(c,cst_captureStrseam,args)}
    var
     nonzero="nonzero",
     evenodd="evenodd",
     Fill_rule=[0,nonzero,evenodd],
     low="low",
     medium="medium",
     high="high",
     Image_smoothing_quality=[0,low,medium,high],
     butt="butt",
     round="round",
     square="square",
     Line_cap=[0,butt,round,square],
     round$0="round",
     bevel="bevel",
     miter="miter",
     Line_join=[0,round$0,bevel,miter],
     start$3="start",
     end$0="end",
     left$0="left",
     right$0="right",
     center="center",
     Text_align=[0,start$3,end$0,left$0,right$0,center],
     top$0="top",
     hanging="hanging",
     middle="middle",
     alphabetic="alphabetic",
     ideographic="ideographic",
     bottom$0="bottom",
     Text_baseline=[0,top$0,hanging,middle,alphabetic,ideographic,bottom$0],
     ltr$0="ltr",
     rtl$0="rtl",
     inherit="inherit",
     Text_direction=[0,ltr$0,rtl$0,inherit],
     normal="normal",
     multiply$0="multiply",
     screen="screen",
     overlay="overlay",
     darken="darken",
     lighten="lighten",
     color_dodge="color-dodge",
     color_burn="color-burn",
     hard_light="hard-light",
     soft_light="soft-light",
     difference="difference",
     exclusion="exclusion",
     hue="hue",
     saturation="saturation",
     color$0="color",
     luminosity="luminosity",
     clear$2="clear",
     copy$1="copy",
     source_over="source-over",
     destination_over="destination-over",
     source_in="source-in",
     destination_in="destination-in",
     source_out="source-out",
     destination_out="destination-out",
     source_atop="source-atop",
     destination_atop="destination-atop",
     xor="xor",
     lighter="lighter",
     plus_darker="plus-darker",
     plus_lighter="plus-lighter",
     Composite_op=
      [0,
       normal,
       multiply$0,
       screen,
       overlay,
       darken,
       lighten,
       color_dodge,
       color_burn,
       hard_light,
       soft_light,
       difference,
       exclusion,
       hue,
       saturation,
       color$0,
       luminosity,
       clear$2,
       copy$1,
       source_over,
       destination_over,
       source_in,
       destination_in,
       source_out,
       destination_out,
       source_atop,
       destination_atop,
       xor,
       lighter,
       plus_darker,
       plus_lighter],
     xy="repeat",
     x$0="repeat-x",
     y$0="repeat-y",
     no="no-repeat",
     Repeat=[0,xy,x$0,y$0,no],
     path$0=target[cst_Path2D];
    function create$14(param){return new path$0()}
    function of_svg(svg){return new path$0(svg)}
    function of_path(p){return new path$0(p)}
    function add$0(tr,p$0,p)
     {if(tr)var t=tr[1],_eM_=[0,p,t];else var _eM_=[0,p];
      caml_js_meth_call(p$0,cst_addPath,_eM_);
      return 0}
    function close$6(p){p.closePath();return 0}
    function move_to(p,x,y){p.moveTo(x,y);return 0}
    function line_to(p,x,y){p.lineTo(x,y);return 0}
    function qcurve_to(p,cx,cy,x,y){p.quadraticCurveTo(cx,cy,x,y);return 0}
    function ccurve_to(p,cx$0,cy$0,cx,cy,x,y)
     {p.bezierCurveTo(cx$0,cy$0,cx,cy,x,y);return 0}
    function arc_to(p,cx$0,cy$0,cx,cy,r){p.arcTo(cx$0,cy$0,cx,cy,r);return 0}
    function arc(opt,p,cx,cy,r,start,stop)
     {if(opt)var sth=opt[1],anticlockwise=sth;else var anticlockwise=0;
      p.arc(cx,cy,r,start,stop,! ! anticlockwise);
      return 0}
    function rect(p,x,y,w,h){p.rect(x,y,w,h);return 0}
    function ellipse(opt,p,cx,cy,rx,ry,rot,start,stop)
     {if(opt)var sth=opt[1],anticlockwise=sth;else var anticlockwise=0;
      p.ellipse(cx,cy,rx,ry,rot,start,stop,! ! anticlockwise);
      return 0}
    function image_src_of_el(_eL_){return _eL_}
    function image_src_of_jv(_eK_){return _eK_}
    function attrs_alpha(o){return caml_call2(Bool[2],o,cst_alpha)}
    function attrs_desynchronized(o)
     {return caml_call2(Bool[2],o,cst_desynchronized)}
    function create$15(opt,cnv)
     {if(opt)var sth=opt[1],attrs=sth;else var attrs=fn;
      return cnv.getContext("2d",attrs)}
    function canvas$1(c)
     {return find_map(function(_eJ_){return _eJ_},c,cst_canvas)}
    function attrs(c){return c.getContextAttributes()}
    function save(c){c.save();return 0}
    function restore(c){c.restore();return 0}
    function image_smoothing_enabled(c)
     {return caml_call2(Bool[2],c,cst_imageSmoothingEnabled)}
    function set_image_smoothing_enabled(c,b)
     {return caml_call3(Bool[3],c,cst_imageSmoothingEnabled$0,b)}
    function image_smoothing_quality(c)
     {return caml_call2(_e_[2],c,cst_imageSmoothingQuality)}
    function set_image_smoothing_quality(c,v)
     {return caml_call3(_e_[3],c,cst_imageSmoothingQuality$0,v)}
    function global_alpha(c){return caml_call2(Float[2],c,cst_globalAlpha)}
    function set_global_alpha(c,a)
     {return caml_call3(Float[3],c,cst_globalAlpha$0,a)}
    function global_composite_op(c)
     {return caml_call2(_e_[2],c,cst_globalCompositeOperation)}
    function set_global_composite_op(c,o)
     {return caml_call3(_e_[3],c,cst_globalCompositeOperation$0,o)}
    function filter$0(c){return caml_call2(_e_[2],c,cst_filter)}
    function set_filter(c,f){return caml_call3(_e_[3],c,cst_filter$0,f)}
    function get_transform(c){return c.getTransform()}
    function set_transform(c,m){c.setTransform(m);return 0}
    function set_transform$0(ctx,a,b,c,d,e,f)
     {ctx.setTransform(a,b,c,d,e,f);return 0}
    function reset_transform(c){c.resetTransform();return 0}
    function transform(c,m)
     {var _eE_=f(m),_eF_=e(m),_eG_=d(m),_eH_=c$0(m),_eI_=b$1(m);
      c.transform(a$1(m),_eI_,_eH_,_eG_,_eF_,_eE_);
      return 0}
    function transform$0(ctx,a,b,c,d,e,f){ctx.transform(a,b,c,d,e,f);return 0}
    function translate(c,x,y){c.translate(x,y);return 0}
    function rotate(c,r){c.rotate(r);return 0}
    function scale(c,sx,sy){c.scale(sx,sy);return 0}
    function set_stroke_style(c,s){return c[cst_strokeStyle] = s}
    function set_fill_style(c,s){return c[cst_fillStyle] = s}
    function color$1(_eD_){return _eD_}
    function gradient_style(_eC_){return _eC_}
    function make_stops(g,stops)
     {function _eB_(param)
       {var c=param[2],off=param[1];g.addColorStop(off,c);return 0}
      return caml_call2(Stdlib_List[17],_eB_,stops)}
    function linear_gradient(c,x0,y0,x1,y1,stops)
     {var g=c.createLinearGradient(x0,y0,x1,y1);make_stops(g,stops);return g}
    function radial_gradient(c,x0,y0,r0,x1,y1,r1,stops)
     {var g=c.createRadialGradient(x0,y0,r0,x1,y1,r1);
      make_stops(g,stops);
      return g}
    function pattern(c,img,r,tr)
     {var p=c.createPattern(img,r);
      if(! tr)return p;
      var t=tr[1];
      p.setTransform(t);
      return p}
    function pattern_style(_eA_){return _eA_}
    function line_width(c){return caml_call2(Float[2],c,cst_lineWidth)}
    function set_line_width(c,w)
     {return caml_call3(Float[3],c,cst_lineWidth$0,w)}
    function line_cap(c){return caml_call2(_e_[2],c,cst_lineCap)}
    function set_line_cap(c,cap)
     {return caml_call3(_e_[3],c,cst_lineCap$0,cap)}
    function line_join(c){return caml_call2(_e_[2],c,cst_lineJoin)}
    function set_line_join(c,join)
     {return caml_call3(_e_[3],c,cst_lineJoin$0,join)}
    function miter_limit(c){return caml_call2(Float[2],c,cst_miterLimit)}
    function set_miter_limit(c,l)
     {return caml_call3(Float[3],c,cst_miterLimit$0,l)}
    function line_dash(c)
     {var _ey_=c.getLineDash();
      return to_list(function(_ez_){return _ez_},_ey_)}
    function set_line_dash(c,ds)
     {c.setLineDash(of_list(function(_ex_){return _ex_},ds));return 0}
    function line_dash_offset(c)
     {return caml_call2(Float[2],c,cst_lineDashOffset)}
    function set_line_dash_offset(c,o)
     {return caml_call3(Float[3],c,cst_lineDashOffset$0,o)}
    function shadow_blur(c){return caml_call2(Float[2],c,cst_shadowBlur)}
    function set_shadow_blur(c,b)
     {return caml_call3(Float[3],c,cst_shadowBlur$0,b)}
    function shadow_offset_x(c)
     {return caml_call2(Float[2],c,cst_shadowOffsetX)}
    function set_shadow_offset_x(c,o)
     {return caml_call3(Float[3],c,cst_shadowOffsetX$0,o)}
    function shadow_offset_y(c)
     {return caml_call2(Float[2],c,cst_shadowOffsetY)}
    function set_shadow_offset_y(c,o)
     {return caml_call3(Float[3],c,cst_shadowOffsetY$0,o)}
    function shadow_color(c){return caml_call2(_e_[2],c,cst_shadowColor)}
    function set_shadow_color(c,col)
     {return caml_call3(_e_[3],c,cst_shadowColor$0,col)}
    function font$0(c){return caml_call2(_e_[2],c,cst_font)}
    function set_font(c,f){return caml_call3(_e_[3],c,cst_font$0,f)}
    function text_align(c){return caml_call2(_e_[2],c,cst_textAlign)}
    function set_text_align(c,a)
     {return caml_call3(_e_[3],c,cst_textAlign$0,a)}
    function text_baseline(c){return caml_call2(_e_[2],c,cst_textBaseline)}
    function set_text_baseline(c,b)
     {return caml_call3(_e_[3],c,cst_textBaseline$0,b)}
    function text_direction(c){return caml_call2(_e_[2],c,cst_direction)}
    function set_text_direction(c,d)
     {return caml_call3(_e_[3],c,cst_direction$0,d)}
    function clear_rect(c,x,y,w,h){c.clearRect(x,y,w,h);return 0}
    function fill_rect(c,x,y,w,h){c.fillRect(x,y,w,h);return 0}
    function stroke_rect(c,x,y,w,h){c.strokeRect(x,y,w,h);return 0}
    function fill$0(opt,c,p)
     {if(opt)var sth=opt[1],fill_rule=sth;else var fill_rule=Fill_rule[1];
      c.fill(p,fill_rule);
      return 0}
    function stroke(c,p){c.stroke(p);return 0}
    function clip(opt,c,p)
     {if(opt)var sth=opt[1],fill_rule=sth;else var fill_rule=Fill_rule[1];
      c.clip(p,fill_rule);
      return 0}
    function draw_focus_if_needed(c,p,e){c.drawFocusIfNeeded(p,e);return 0}
    function scroll_path_into_view(c,p){c.scrollPathIntoView(p);return 0}
    function is_point_in_fill(opt,c,p,x,y)
     {if(opt)var sth=opt[1],fill_rule=sth;else var fill_rule=Fill_rule[1];
      return c.isPointInPath(p,x,y,fill_rule) | 0}
    function is_point_in_stroke(c,p,x,y){return c.isPointInStroke(p,x,y) | 0}
    function call_text(c,meth,max_width,txt,x,y)
     {if(max_width)
       var m=max_width[1],args=[0,txt,x,y,m];
      else
       var args=[0,txt,x,y];
      caml_js_meth_call(c,meth,args);
      return 0}
    function fill_text(max_width,c,txt,x,y)
     {return call_text(c,cst_fillText,max_width,txt,x,y)}
    function stroke_text(max_width,c,txt,x,y)
     {return call_text(c,cst_strokeText,max_width,txt,x,y)}
    function width$5(m){return caml_call2(Float[2],m,cst_width$4)}
    function actual_bounding_box_left(m)
     {return caml_call2(Float[2],m,cst_actualBoundingBoxLeft)}
    function actual_bounding_box_right(m)
     {return caml_call2(Float[2],m,cst_actualBoundingBoxRight)}
    function font_bounding_box_ascent(m)
     {return caml_call2(Float[2],m,cst_fontBoundingBoxAscent)}
    function font_bounding_box_descent(m)
     {return caml_call2(Float[2],m,cst_fontBoundingBoxDescent)}
    function actual_bounding_box_ascent(m)
     {return caml_call2(Float[2],m,cst_actualBoundingBoxAscent)}
    function actual_bounding_box_descent(m)
     {return caml_call2(Float[2],m,cst_actualBoundingBoxDescent)}
    function em_height_ascent(m)
     {return caml_call2(Float[2],m,cst_emHeightAscent)}
    function em_height_descent(m)
     {return caml_call2(Float[2],m,cst_emHeightDescent)}
    function hanging_baseline(m)
     {return caml_call2(Float[2],m,cst_hangingBaseline)}
    function alphabetic_baseline(m)
     {return caml_call2(Float[2],m,cst_alphabeticBaseline)}
    function ideographic_baseline(m)
     {return caml_call2(Float[2],m,cst_ideographicBaseline)}
    var
     Text_metrics=
      [0,
       width$5,
       actual_bounding_box_left,
       actual_bounding_box_right,
       font_bounding_box_ascent,
       font_bounding_box_descent,
       actual_bounding_box_ascent,
       actual_bounding_box_descent,
       em_height_ascent,
       em_height_descent,
       hanging_baseline,
       alphabetic_baseline,
       ideographic_baseline];
    function measure_text(c,txt){return c.measureText(txt)}
    function draw_image(c,i,x,y){c.drawImage(i,x,y);return 0}
    function draw_image_in_rect(c,i,x,y,w,h){c.drawImage(i,x,y,w,h);return 0}
    function draw_sub_image_in_rect(c,i,sx,sy,sw,sh,x,y,w,h)
     {c.drawImage(i,sx,sy,sw,sh,x,y,w,h);return 0}
    var image_data=target[cst_ImageData];
    function create$16(data,w,h,param)
     {if(data)var data$0=data[1],args=[0,data$0,w,h];else var args=[0,w,h];
      return caml_js_new(image_data,args)}
    function w$1(d){return caml_call2(Int[2],d,cst_width$5)}
    function h$0(d){return caml_call2(Int[2],d,cst_height$4)}
    function data$5(d){return d[cst_data$5]}
    function create_image_data(c,w,h){return c.createImageData(w,h)}
    function get_image_data(c,x,y,w,h){return c.getImageData(x,y,w,h)}
    function put_image_data(c,d,x,y){c.putImageData(d,x,y);return 0}
    function put_sub_image_data(c,d,sx,sy,sw,sh,x,y)
     {c.putImageData(d,x,y,sx,sy,sw,sh);return 0}
    var
     default$3="default",
     high_performance="high-performance",
     low_power="low-power",
     Power_preference=[0,default$3,high_performance,low_power];
    function v$15
     (alpha,
      depth,
      stencil,
      antialias,
      premultiplied_alpha,
      preserve_drawing_buffer,
      power_preference,
      fail_if_major_performance_cave,
      desynchronized,
      param)
     {var o={};
      caml_call3(Bool[4],o,cst_alpha$0,alpha);
      caml_call3(Bool[4],o,cst_depth,depth);
      caml_call3(Bool[4],o,cst_stencil,stencil);
      caml_call3(Bool[4],o,cst_antialias,antialias);
      caml_call3(Bool[4],o,cst_premultipliedApha,premultiplied_alpha);
      caml_call3(Bool[4],o,cst_preserveDrawingBuffer,preserve_drawing_buffer);
      caml_call3(_e_[4],o,cst_powerPreference,power_preference);
      caml_call3
       (Bool[4],
        o,
        cst_failIfMajorPerformanceCave,
        fail_if_major_performance_cave);
      caml_call3(Bool[4],o,cst_desynchronized$0,desynchronized);
      return o}
    function alpha(a){return caml_call2(Bool[2],a,cst_alpha$1)}
    function depth(a){return caml_call2(Bool[2],a,cst_depth$0)}
    function stencil(a){return caml_call2(Bool[2],a,cst_stencil$0)}
    function antialias(a){return caml_call2(Bool[2],a,cst_antialias$0)}
    function premultiplied_alpha(a)
     {return caml_call2(Bool[2],a,cst_premultipliedApha$0)}
    function preserve_drawing_buffer(a)
     {return caml_call2(Bool[2],a,cst_preserveDrawingBuffer$0)}
    function power_preference(a)
     {return caml_call2(_e_[2],a,cst_powerPreference$0)}
    function desynchronized(a)
     {return caml_call2(Bool[2],a,cst_desynchronized$1)}
    function create$17(opt,_et_,cnv)
     {if(opt)var sth=opt[1],attrs=sth;else var attrs=fn;
      if(_et_)var sth$0=_et_[1],v1=sth$0;else var v1=0;
      var
       _eu_=v1?cst_webgl:cst_webgl2,
       webgl=caml_jsstring_of_string(_eu_),
       _ev_=cnv.getContext(webgl,attrs);
      return to_option(function(_ew_){return _ew_},_ev_)}
    function canvas$2(c)
     {return find_map(function(_es_){return _es_},c,cst_canvas$0)}
    function attrs$0(c){return c.getContextAttributes()}
    function drawing_buffer_width(c)
     {return caml_call2(Int[2],c,cst_drawingBufferWidth)}
    function drawing_buffer_height(c)
     {return caml_call2(Int[2],c,cst_drawingBufferHeight)}
    function is_context_lost(c)
     {return caml_call2(Bool[2],c,cst_isContextLost)}
    function get_supported_extensions(c)
     {return caml_list_of_js_array(c.getSupportedExtensions())}
    function get_extension(c,ext){return c.getExtension(ext)}
    function size(i){return caml_call2(Int[2],i,cst_size$0)}
    function type$9(i){return caml_call2(Int[2],i,cst_type$6)}
    function name$8(i){return caml_call2(_e_[2],i,cst_name$7)}
    var Active_info=[0,size,type$9,name$8];
    function range_min(f){return caml_call2(Int[2],f,cst_rangeMin)}
    function range_max(f){return caml_call2(Int[2],f,cst_rangeMax)}
    function precision(f){return caml_call2(Int[2],f,cst_precision)}
    var Shader_precision_format=[0,range_min,range_max,precision];
    function of_image_data(_er_){return _er_}
    function of_img_el(_eq_){return _eq_}
    function of_canvas_el(_ep_){return _ep_}
    function of_video_el(_eo_){return _eo_}
    function of_offscreen_canvas(_en_){return _en_}
    var
     Tex_image_source=
      [0,of_image_data,of_img_el,of_canvas_el,of_video_el,of_offscreen_canvas];
    function active_texture(c,texture){c.activeTexture(texture);return 0}
    function attach_shader(c,program,shader)
     {c.attachShader(program,shader);return 0}
    function begin_query(c,target,query){c.beginQuery(target,query);return 0}
    function begin_transform_feedback(c,primitiveMode)
     {c.beginTransformFeedback(primitiveMode);return 0}
    function bind_attrib_location(c,program,index,name)
     {c.bindAttribLocation(program,index,name);return 0}
    function bind_buffer(c,target,buffer)
     {c.bindBuffer
       (target,of_option(null$0,function(_em_){return _em_},buffer));
      return 0}
    function bind_buffer_base(c,target,index,buffer)
     {c.bindBufferBase(target,index,buffer);return 0}
    function bind_buffer_range(c,target,index,buffer,offset,size)
     {c.bindBufferRange(target,index,buffer,offset,size);return 0}
    function bind_framebuffer(c,target,framebuffer)
     {c.bindFramebuffer
       (target,of_option(null$0,function(_el_){return _el_},framebuffer));
      return 0}
    function bind_renderbuffer(c,target,renderbuffer)
     {c.bindRenderbuffer
       (target,of_option(null$0,function(_ek_){return _ek_},renderbuffer));
      return 0}
    function bind_sampler(c,unit,sampler)
     {c.bindSampler
       (unit,of_option(null$0,function(_ej_){return _ej_},sampler));
      return 0}
    function bind_texture(c,target,texture)
     {c.bindTexture
       (target,of_option(null$0,function(_ei_){return _ei_},texture));
      return 0}
    function bind_transform_feedback(c,target,tf)
     {c.bindTransformFeedback
       (target,of_option(null$0,function(_eh_){return _eh_},tf));
      return 0}
    function bind_vertex_array(c,array)
     {c.bindVertexArray(of_option(null$0,function(_eg_){return _eg_},array));
      return 0}
    function blend_color(c,red,green,blue,alpha)
     {c.blendColor(red,green,blue,alpha);return 0}
    function blend_equation(c,mode){c.blendEquation(mode);return 0}
    function blend_equation_separate(c,modeRGB,modeAlpha)
     {c.blendEquationSeparate(modeRGB,modeAlpha);return 0}
    function blend_func(c,sfactor,dfactor)
     {c.blendFunc(sfactor,dfactor);return 0}
    function blend_func_separate(c,srcRGB,dstRGB,srcAlpha,dstAlpha)
     {c.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);return 0}
    function blit_framebuffer
     (c,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter)
     {c.blitFramebuffer
       (srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
      return 0}
    function buffer_data(c,target,srcData,usage)
     {c.bufferData(target,srcData,usage);return 0}
    function buffer_data_size(c,target,size,usage)
     {c.bufferData(target,size,usage);return 0}
    function buffer_sub_data(c,target,dstByteOffset,srcData)
     {c.bufferSubData(target,dstByteOffset,srcData);return 0}
    function check_framebuffer_status(c,target)
     {return c.checkFramebufferStatus(target)}
    function clear$3(c,mask){c.clear(mask);return 0}
    function clear_bufferfi(c,buffer,drawbuffer,depth,stencil)
     {c.clearBufferfi(buffer,drawbuffer,depth,stencil);return 0}
    function clear_bufferfv(c,buffer,drawbuffer,values)
     {c.clearBufferfv(buffer,drawbuffer,values);return 0}
    function clear_bufferiv(c,buffer,drawbuffer,values)
     {c.clearBufferiv(buffer,drawbuffer,values);return 0}
    function clear_bufferuiv(c,buffer,drawbuffer,values)
     {c.clearBufferuiv(buffer,drawbuffer,values);return 0}
    function clear_color(c,red,green,blue,alpha)
     {c.clearColor(red,green,blue,alpha);return 0}
    function clear_depth(c,depth){c.clearDepth(depth);return 0}
    function clear_stencil(c,s){c.clearStencil(s);return 0}
    function client_wait_sync(c,sync,flags,timeout)
     {return c.clientWaitSync(sync,flags,timeout)}
    function color_mask(c,red,green,blue,alpha)
     {c.colorMask(! ! red,! ! green,! ! blue,! ! alpha);return 0}
    function compile_shader(c,shader){c.compileShader(shader);return 0}
    function compressed_tex_image2d
     (c,target,level,internalformat,width,height,border,srcData)
     {c.compressedTexImage2D
       (target,level,internalformat,width,height,border,srcData);
      return 0}
    function compressed_tex_image2d_size
     (c,target,level,internalformat,width,height,border,imageSize,offset)
     {c.compressedTexImage2D
       (target,level,internalformat,width,height,border,imageSize,offset);
      return 0}
    function compressed_tex_image3d
     (c,target,level,internalformat,width,height,depth,border,srcData)
     {c.compressedTexImage3D
       (target,level,internalformat,width,height,depth,border,srcData);
      return 0}
    function compressed_tex_image3d_size
     (c,
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      imageSize,
      offset)
     {c.compressedTexImage3D
       (target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        imageSize,
        offset);
      return 0}
    function compressed_tex_sub_image2d
     (c,target,level,xoffset,yoffset,width,height,format,srcData)
     {c.compressedTexSubImage2D
       (target,level,xoffset,yoffset,width,height,format,srcData);
      return 0}
    function compressed_tex_sub_image2d_siz
     (c,target,level,xoffset,yoffset,width,height,format,imageSize,offset)
     {c.compressedTexSubImage2D
       (target,level,xoffset,yoffset,width,height,format,imageSize,offset);
      return 0}
    function compressed_tex_sub_image3d
     (c,
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      srcData)
     {c.compressedTexSubImage3D
       (target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        srcData);
      return 0}
    function compressed_tex_sub_image3d_siz
     (c,
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      imageSize,
      offset)
     {c.compressedTexSubImage3D
       (target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        imageSize,
        offset);
      return 0}
    function copy_buffer_sub_data
     (c,readTarget,writeTarget,readOffset,writeOffset,size)
     {c.copyBufferSubData(readTarget,writeTarget,readOffset,writeOffset,size);
      return 0}
    function copy_tex_image2d
     (c,target,level,internalformat,x,y,width,height,border)
     {c.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
      return 0}
    function copy_tex_sub_image2d
     (c,target,level,xoffset,yoffset,x,y,width,height)
     {c.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
      return 0}
    function copy_tex_sub_image3d
     (c,target,level,xoffset,yoffset,zoffset,x,y,width,height)
     {c.copyTexSubImage3D
       (target,level,xoffset,yoffset,zoffset,x,y,width,height);
      return 0}
    function create_buffer(c){return c.createBuffer()}
    function create_framebuffer(c){return c.createFramebuffer()}
    function create_program(c){return c.createProgram()}
    function create_query(c){return c.createQuery()}
    function create_renderbuffer(c){return c.createRenderbuffer()}
    function create_sampler(c){return c.createSampler()}
    function create_shader(c,type){return c.createShader(type)}
    function create_texture(c){return c.createTexture()}
    function create_transform_feedback(c){return c.createTransformFeedback()}
    function create_vertex_array(c){return c.createVertexArray()}
    function cull_face(c,mode){c.cullFace(mode);return 0}
    function delete_buffer(c,buffer){c.deleteBuffer(buffer);return 0}
    function delete_framebuffer(c,framebuffer)
     {c.deleteFramebuffer(framebuffer);return 0}
    function delete_program(c,program){c.deleteProgram(program);return 0}
    function delete_query(c,query){c.deleteQuery(query);return 0}
    function delete_renderbuffer(c,renderbuffer)
     {c.deleteRenderbuffer(renderbuffer);return 0}
    function delete_sampler(c,sampler){c.deleteSampler(sampler);return 0}
    function delete_shader(c,shader){c.deleteShader(shader);return 0}
    function delete_sync(c,sync){c.deleteSync(sync);return 0}
    function delete_texture(c,texture){c.deleteTexture(texture);return 0}
    function delete_transform_feedback(c,tf)
     {c.deleteTransformFeedback(tf);return 0}
    function delete_vertex_array(c,vertexArray)
     {c.deleteVertexArray(vertexArray);return 0}
    function depth_func(c,func){c.depthFunc(func);return 0}
    function depth_mask(c,flag){c.depthMask(! ! flag);return 0}
    function detach_shader(c,program,shader)
     {c.detachShader(program,shader);return 0}
    function disable(c,cap){c.disable(cap);return 0}
    function disable_vertex_attrib_array(c,index)
     {c.disableVertexAttribArray(index);return 0}
    function draw_arrays(c,mode,first,count)
     {c.drawArrays(mode,first,count);return 0}
    function draw_arrays_instanced(c,mode,first,count,instanceCount)
     {c.drawArraysInstanced(mode,first,count,instanceCount);return 0}
    function draw_buffers(c,buffers)
     {c.drawBuffers(of_list(function(_ef_){return _ef_},buffers));return 0}
    function draw_elements(c,mode,count,type,offset)
     {c.drawElements(mode,count,type,offset);return 0}
    function draw_elements_instanced(c,mode,count,type,offset,instanceCount)
     {c.drawElementsInstanced(mode,count,type,offset,instanceCount);return 0}
    function draw_range_elements(c,mode,start,end,count,type,offset)
     {c.drawRangeElements(mode,start,end,count,type,offset);return 0}
    function enable(c,cap){c.enable(cap);return 0}
    function enable_vertex_attrib_array(c,index)
     {c.enableVertexAttribArray(index);return 0}
    function end_query(c,target){c.endQuery(target);return 0}
    function end_transform_feedback(c){c.endTransformFeedback();return 0}
    function fence_sync(c,condition,flags)
     {return c.fenceSync(condition,flags)}
    function finish(c){c.finish();return 0}
    function flush(c){c.flush();return 0}
    function framebuffer_renderbuffer
     (c,target,attachment,renderbuffertarget,renderbuffer)
     {c.framebufferRenderbuffer
       (target,attachment,renderbuffertarget,renderbuffer);
      return 0}
    function framebuffer_texture2d
     (c,target,attachment,textarget,texture,level)
     {c.framebufferTexture2D(target,attachment,textarget,texture,level);
      return 0}
    function framebuffer_texture_layer
     (c,target,attachment,texture,level,layer)
     {c.framebufferTextureLayer(target,attachment,texture,level,layer);
      return 0}
    function front_face(c,mode){c.frontFace(mode);return 0}
    function generate_mipmap(c,target){c.generateMipmap(target);return 0}
    function get_active_attrib(c,program,index)
     {return c.getActiveAttrib(program,index)}
    function get_active_uniform(c,program,index)
     {return c.getActiveUniform(program,index)}
    function get_active_uniform_block_name(c,program,uniformBlockIndex)
     {return c.getActiveUniformBlockName(program,uniformBlockIndex)}
    function get_active_uniform_block_param(c,program,uniformBlockIndex,pname)
     {return c.getActiveUniformBlockParameter(program,uniformBlockIndex,pname)}
    function get_active_uniforms(c,program,uniformIndices,pname)
     {return c.getActiveUniforms
              (program,
               of_list(function(_ee_){return _ee_},uniformIndices),
               pname)}
    function get_attached_shaders(c,program)
     {return caml_list_of_js_array(c.getAttachedShaders(program))}
    function get_attrib_location(c,program,name)
     {return c.getAttribLocation(program,name)}
    function get_buffer_parameter(c,target,pname)
     {return c.getBufferParameter(target,pname)}
    function get_buffer_sub_data(c,target,srcByteOffset,dstBuffer)
     {c.getBufferSubData(target,srcByteOffset,dstBuffer);return 0}
    function get_error(c){return c.getError()}
    function get_frag_data_location(c,program,name)
     {return c.getFragDataLocation(program,name)}
    function get_framebuffer_attachment_par(c,target,attachment,pname)
     {return c.getFramebufferAttachmentParameter(target,attachment,pname)}
    function get_indexed_parameter(c,target,index)
     {return c.getIndexedParameter(target,index)}
    function get_internalformat_parameter(c,target,internalformat,pname)
     {return c.getInternalformatParameter(target,internalformat,pname)}
    function get_parameter(c,pname){return c.getParameter(pname)}
    function get_program_info_log(c,program)
     {return c.getProgramInfoLog(program)}
    function get_program_parameter(c,program,pname)
     {return c.getProgramParameter(program,pname)}
    function get_query(c,target,pname){return c.getQuery(target,pname)}
    function get_query_parameter(c,query,pname)
     {return c.getQueryParameter(query,pname)}
    function get_renderbuffer_parameter(c,target,pname)
     {return c.getRenderbufferParameter(target,pname)}
    function get_sampler_parameter(c,sampler,pname)
     {return c.getSamplerParameter(sampler,pname)}
    function get_shader_info_log(c,shader){return c.getShaderInfoLog(shader)}
    function get_shader_parameter(c,shader,pname)
     {return c.getShaderParameter(shader,pname)}
    function get_shader_precision_format(c,shadertype,precisiontype)
     {return c.getShaderPrecisionFormat(shadertype,precisiontype)}
    function get_shader_source(c,shader){return c.getShaderSource(shader)}
    function get_sync_parameter(c,sync,pname)
     {return c.getSyncParameter(sync,pname)}
    function get_tex_parameter(c,target,pname)
     {return c.getTexParameter(target,pname)}
    function get_transform_feedback_varying(c,program,index)
     {return c.getTransformFeedbackVarying(program,index)}
    function get_uniform(c,program,location)
     {return c.getUniform(program,location)}
    function get_uniform_block_index(c,program,uniformBlockName)
     {return c.getUniformBlockIndex(program,uniformBlockName)}
    function get_uniform_indices(c,program,uniformNames)
     {var
       _ec_=
        c.getUniformIndices(program,caml_list_to_js_array(uniformNames));
      return to_list(function(_ed_){return _ed_},_ec_)}
    function get_uniform_location(c,program,name)
     {return c.getUniformLocation(program,name)}
    function get_vertex_attrib(c,index,pname)
     {return c.getVertexAttrib(index,pname)}
    function get_vertex_attrib_offset(c,index,pname)
     {return c.getVertexAttribOffset(index,pname)}
    function hint(c,target,mode){c.hint(target,mode);return 0}
    function invalidate_framebuffer(c,target,attachments)
     {c.invalidateFramebuffer
       (target,of_list(function(_eb_){return _eb_},attachments));
      return 0}
    function invalidate_sub_framebuffer(c,target,attachments,x,y,width,height)
     {c.invalidateSubFramebuffer
       (target,
        of_list(function(_ea_){return _ea_},attachments),
        x,
        y,
        width,
        height);
      return 0}
    function is_buffer(c,buffer){return c.isBuffer(buffer) | 0}
    function is_enabled(c,cap){return c.isEnabled(cap) | 0}
    function is_framebuffer(c,framebuffer)
     {return c.isFramebuffer(framebuffer) | 0}
    function is_program(c,program){return c.isProgram(program) | 0}
    function is_query(c,query){return c.isQuery(query) | 0}
    function is_renderbuffer(c,renderbuffer)
     {return c.isRenderbuffer(renderbuffer) | 0}
    function is_sampler(c,sampler){return c.isSampler(sampler) | 0}
    function is_shader(c,shader){return c.isShader(shader) | 0}
    function is_texture(c,texture){return c.isTexture(texture) | 0}
    function is_transform_feedback(c,tf){return c.isTransformFeedback(tf) | 0}
    function is_vertex_array(c,vertexArray)
     {return c.isVertexArray(vertexArray) | 0}
    function line_width$0(c,width){c.lineWidth(width);return 0}
    function link_program(c,program){c.linkProgram(program);return 0}
    function pause_transform_feedback(c){c.pauseTransformFeedback();return 0}
    function pixel_storei(c,pname,param){c.pixelStorei(pname,param);return 0}
    function polygon_offset(c,factor,units)
     {c.polygonOffset(factor,units);return 0}
    function read_buffer(c,src){c.readBuffer(src);return 0}
    function read_pixels_to_pixel_pack(c,x,y,width,height,format,type,offset)
     {c.readPixels(x,y,width,height,format,type,offset);return 0}
    function read_pixels(c,x,y,width,height,format,type,dstData)
     {c.readPixels(x,y,width,height,format,type,dstData);return 0}
    function renderbuffer_storage(c,target,internalformat,width,height)
     {c.renderbufferStorage(target,internalformat,width,height);return 0}
    function renderbuffer_storage_multisamp
     (c,target,samples,internalformat,width,height)
     {c.renderbufferStorageMultisample
       (target,samples,internalformat,width,height);
      return 0}
    function resume_transform_feedback(c)
     {c.resumeTransformFeedback();return 0}
    function sample_coverage(c,value,invert)
     {c.sampleCoverage(value,! ! invert);return 0}
    function sampler_parameterf(c,sampler,pname,param)
     {c.samplerParameterf(sampler,pname,param);return 0}
    function sampler_parameteri(c,sampler,pname,param)
     {c.samplerParameteri(sampler,pname,param);return 0}
    function scissor(c,x,y,width,height){c.scissor(x,y,width,height);return 0}
    function shader_source(c,shader,source)
     {c.shaderSource(shader,source);return 0}
    function stencil_func(c,func,ref,mask)
     {c.stencilFunc(func,ref,mask);return 0}
    function stencil_func_separate(c,face,func,ref,mask)
     {c.stencilFuncSeparate(face,func,ref,mask);return 0}
    function stencil_mask(c,mask){c.stencilMask(mask);return 0}
    function stencil_mask_separate(c,face,mask)
     {c.stencilMaskSeparate(face,mask);return 0}
    function stencil_op(c,fail,zfail,zpass)
     {c.stencilOp(fail,zfail,zpass);return 0}
    function stencil_op_separate(c,face,fail,zfail,zpass)
     {c.stencilOpSeparate(face,fail,zfail,zpass);return 0}
    function tex_image2d
     (c,
      target,
      level,
      internalformat,
      width,
      height,
      border,
      format,
      type,
      srcData,
      srcOffset)
     {c.texImage2D
       (target,
        level,
        internalformat,
        width,
        height,
        border,
        format,
        type,
        srcData,
        srcOffset);
      return 0}
    function tex_image2d_of_source
     (c,target,level,internalformat,width,height,border,format,type,source)
     {c.texImage2D
       (target,level,internalformat,width,height,border,format,type,source);
      return 0}
    function tex_image2d_of_pixel_unpack
     (c,target,level,internalformat,width,height,border,format,type,pboOffset)
     {c.texImage2D
       (target,level,internalformat,width,height,border,format,type,pboOffset);
      return 0}
    function tex_image3d
     (c,
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      format,
      type,
      srcData,
      srcOffset)
     {c.texImage3D
       (target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        format,
        type,
        srcData,
        srcOffset);
      return 0}
    function tex_image3d_of_source
     (c,
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      format,
      type,
      source)
     {c.texImage3D
       (target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        format,
        type,
        source);
      return 0}
    function tex_image3d_of_pixel_unpack
     (c,
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      format,
      type,
      pboOffset)
     {c.texImage3D
       (target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        format,
        type,
        pboOffset);
      return 0}
    function tex_parameterf(c,target,pname,param)
     {c.texParameterf(target,pname,param);return 0}
    function tex_parameteri(c,target,pname,param)
     {c.texParameteri(target,pname,param);return 0}
    function tex_storage2d(c,target,levels,internalformat,width,height)
     {c.texStorage2D(target,levels,internalformat,width,height);return 0}
    function tex_storage3d(c,target,levels,internalformat,width,height,depth)
     {c.texStorage3D(target,levels,internalformat,width,height,depth);
      return 0}
    function tex_sub_image2d
     (c,
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      type,
      srcData,
      srcOffset)
     {c.texSubImage2D
       (target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        type,
        srcData,
        srcOffset);
      return 0}
    function tex_sub_image2d_of_source
     (c,target,level,xoffset,yoffset,width,height,format,type,source)
     {c.texSubImage2D
       (target,level,xoffset,yoffset,width,height,format,type,source);
      return 0}
    function tex_sub_image2d_of_pixel_unpac
     (c,target,level,xoffset,yoffset,width,height,format,type,pboOffset)
     {c.texSubImage2D
       (target,level,xoffset,yoffset,width,height,format,type,pboOffset);
      return 0}
    function tex_sub_image3d
     (c,
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      type,
      srcData)
     {c.texSubImage3D
       (target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        type,
        srcData);
      return 0}
    function tex_sub_image3d_of_source
     (c,
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      type,
      source)
     {c.texSubImage3D
       (target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        type,
        source);
      return 0}
    function tex_sub_image3d_of_pixel_unpac
     (c,
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      type,
      pboOffset)
     {c.texSubImage3D
       (target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        type,
        pboOffset);
      return 0}
    function transform_feedback_varyings(c,program,varyings,bufferMode)
     {c.transformFeedbackVaryings
       (program,caml_list_to_js_array(varyings),bufferMode);
      return 0}
    function uniform1f(c,location,x){c.uniform1f(location,x);return 0}
    function uniform1fv(c,location,data){c.uniform1fv(location,data);return 0}
    function uniform1i(c,location,x){c.uniform1i(location,x);return 0}
    function uniform1iv(c,location,data){c.uniform1iv(location,data);return 0}
    function uniform1ui(c,location,v0){c.uniform1ui(location,v0);return 0}
    function uniform1uiv(c,location,data)
     {c.uniform1uiv(location,data);return 0}
    function uniform2f(c,location,x,y){c.uniform2f(location,x,y);return 0}
    function uniform2fv(c,location,data){c.uniform2fv(location,data);return 0}
    function uniform2i(c,location,x,y){c.uniform2i(location,x,y);return 0}
    function uniform2iv(c,location,data){c.uniform2iv(location,data);return 0}
    function uniform2ui(c,location,v0,v1)
     {c.uniform2ui(location,v0,v1);return 0}
    function uniform2uiv(c,location,data)
     {c.uniform2uiv(location,data);return 0}
    function uniform3f(c,location,x,y,z){c.uniform3f(location,x,y,z);return 0}
    function uniform3fv(c,location,data){c.uniform3fv(location,data);return 0}
    function uniform3i(c,location,x,y,z){c.uniform3i(location,x,y,z);return 0}
    function uniform3iv(c,location,data){c.uniform3iv(location,data);return 0}
    function uniform3ui(c,location,v0,v1,v2)
     {c.uniform3ui(location,v0,v1,v2);return 0}
    function uniform3uiv(c,location,data)
     {c.uniform3uiv(location,data);return 0}
    function uniform4f(c,location,x,y,z,w)
     {c.uniform4f(location,x,y,z,w);return 0}
    function uniform4fv(c,location,data){c.uniform4fv(location,data);return 0}
    function uniform4i(c,location,x,y,z,w)
     {c.uniform4i(location,x,y,z,w);return 0}
    function uniform4iv(c,location,data){c.uniform4iv(location,data);return 0}
    function uniform4ui(c,location,v0,v1,v2,v3)
     {c.uniform4ui(location,v0,v1,v2,v3);return 0}
    function uniform4uiv(c,location,data)
     {c.uniform4uiv(location,data);return 0}
    function uniform_block_binding
     (c,program,uniformBlockIndex,uniformBlockBinding)
     {c.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
      return 0}
    function uniform_matrix2fv(c,location,transpose,data)
     {c.uniformMatrix2fv(location,! ! transpose,data);return 0}
    function uniform_matrix2x3fv(c,location,transpose,data)
     {c.uniformMatrix2x3fv(location,! ! transpose,data);return 0}
    function uniform_matrix2x4fv(c,location,transpose,data)
     {c.uniformMatrix2x4fv(location,! ! transpose,data);return 0}
    function uniform_matrix3fv(c,location,transpose,data)
     {c.uniformMatrix3fv(location,! ! transpose,data);return 0}
    function uniform_matrix3x2fv(c,location,transpose,data)
     {c.uniformMatrix3x2fv(location,! ! transpose,data);return 0}
    function uniform_matrix3x4fv(c,location,transpose,data)
     {c.uniformMatrix3x4fv(location,! ! transpose,data);return 0}
    function uniform_matrix4fv(c,location,transpose,data)
     {c.uniformMatrix4fv(location,! ! transpose,data);return 0}
    function uniform_matrix4x2fv(c,location,transpose,data)
     {c.uniformMatrix4x2fv(location,! ! transpose,data);return 0}
    function uniform_matrix4x3fv(c,location,transpose,data)
     {c.uniformMatrix4x3fv(location,! ! transpose,data);return 0}
    function use_program(c,program){c.useProgram(program);return 0}
    function validate_program(c,program){c.validateProgram(program);return 0}
    function vertex_attrib1f(c,index,x){c.vertexAttrib1f(index,x);return 0}
    function vertex_attrib1fv(c,index,values)
     {c.vertexAttrib1fv(index,values);return 0}
    function vertex_attrib2f(c,index,x,y)
     {c.vertexAttrib2f(index,x,y);return 0}
    function vertex_attrib2fv(c,index,values)
     {c.vertexAttrib2fv(index,values);return 0}
    function vertex_attrib3f(c,index,x,y,z)
     {c.vertexAttrib3f(index,x,y,z);return 0}
    function vertex_attrib3fv(c,index,values)
     {c.vertexAttrib3fv(index,values);return 0}
    function vertex_attrib4f(c,index,x,y,z,w)
     {c.vertexAttrib4f(index,x,y,z,w);return 0}
    function vertex_attrib4fv(c,index,values)
     {c.vertexAttrib4fv(index,values);return 0}
    function vertex_attrib_divisor(c,index,divisor)
     {c.vertexAttribDivisor(index,divisor);return 0}
    function vertex_attrib_i4i(c,index,x,y,z,w)
     {c.vertexAttribI4i(index,x,y,z,w);return 0}
    function vertex_attrib_i4iv(c,index,values)
     {c.vertexAttribI4iv(index,values);return 0}
    function vertex_attrib_i4ui(c,index,x,y,z,w)
     {c.vertexAttribI4ui(index,x,y,z,w);return 0}
    function vertex_attrib_i4uiv(c,index,values)
     {c.vertexAttribI4uiv(index,values);return 0}
    function vertex_attrib_ipointer(c,index,size,type,stride,offset)
     {c.vertexAttribIPointer(index,size,type,stride,offset);return 0}
    function vertex_attrib_pointer(c,index,size,type,normalized,stride,offset)
     {c.vertexAttribPointer(index,size,type,! ! normalized,stride,offset);
      return 0}
    function viewport(c,x,y,width,height)
     {c.viewport(x,y,width,height);return 0}
    function wait_sync(c,sync,flags,timeout)
     {c.waitSync(sync,flags,timeout);return 0}
    var
     gl1ctx=target[cst_WebGLRenderingContext],
     depth_buffer_bit=caml_call2(Int[2],gl1ctx,cst_DEPTH_BUFFER_BIT),
     stencil_buffer_bit=caml_call2(Int[2],gl1ctx,cst_STENCIL_BUFFER_BIT),
     color_buffer_bit=caml_call2(Int[2],gl1ctx,cst_COLOR_BUFFER_BIT),
     points=caml_call2(Int[2],gl1ctx,cst_POINTS),
     lines=caml_call2(Int[2],gl1ctx,cst_LINES),
     line_loop=caml_call2(Int[2],gl1ctx,cst_LINE_LOOP),
     line_strip=caml_call2(Int[2],gl1ctx,cst_LINE_STRIP),
     triangles=caml_call2(Int[2],gl1ctx,cst_TRIANGLES),
     triangle_strip=caml_call2(Int[2],gl1ctx,cst_TRIANGLE_STRIP),
     triangle_fan=caml_call2(Int[2],gl1ctx,cst_TRIANGLE_FAN),
     zero=caml_call2(Int[2],gl1ctx,cst_ZERO),
     one=caml_call2(Int[2],gl1ctx,cst_ONE),
     src_color=caml_call2(Int[2],gl1ctx,cst_SRC_COLOR),
     one_minus_src_color=caml_call2(Int[2],gl1ctx,cst_ONE_MINUS_SRC_COLOR),
     src_alpha=caml_call2(Int[2],gl1ctx,cst_SRC_ALPHA),
     one_minus_src_alpha=caml_call2(Int[2],gl1ctx,cst_ONE_MINUS_SRC_ALPHA),
     dst_alpha=caml_call2(Int[2],gl1ctx,cst_DST_ALPHA),
     one_minus_dst_alpha=caml_call2(Int[2],gl1ctx,cst_ONE_MINUS_DST_ALPHA),
     dst_color=caml_call2(Int[2],gl1ctx,cst_DST_COLOR),
     one_minus_dst_color=caml_call2(Int[2],gl1ctx,cst_ONE_MINUS_DST_COLOR),
     src_alpha_saturate=caml_call2(Int[2],gl1ctx,cst_SRC_ALPHA_SATURATE),
     func_add=caml_call2(Int[2],gl1ctx,cst_FUNC_ADD),
     blend_equation$0=caml_call2(Int[2],gl1ctx,cst_BLEND_EQUATION),
     blend_equation_rgb=caml_call2(Int[2],gl1ctx,cst_BLEND_EQUATION_RGB),
     blend_equation_alpha=caml_call2(Int[2],gl1ctx,cst_BLEND_EQUATION_ALPHA),
     func_subtract=caml_call2(Int[2],gl1ctx,cst_FUNC_SUBTRACT),
     func_reverse_subtract=caml_call2(Int[2],gl1ctx,cst_FUNC_REVERSE_SUBTRACT),
     blend_dst_rgb=caml_call2(Int[2],gl1ctx,cst_BLEND_DST_RGB),
     blend_src_rgb=caml_call2(Int[2],gl1ctx,cst_BLEND_SRC_RGB),
     blend_dst_alpha=caml_call2(Int[2],gl1ctx,cst_BLEND_DST_ALPHA),
     blend_src_alpha=caml_call2(Int[2],gl1ctx,cst_BLEND_SRC_ALPHA),
     constant_color=caml_call2(Int[2],gl1ctx,cst_CONSTANT_COLOR),
     one_minus_constant_color=
      caml_call2(Int[2],gl1ctx,cst_ONE_MINUS_CONSTANT_COLOR),
     constant_alpha=caml_call2(Int[2],gl1ctx,cst_CONSTANT_ALPHA),
     one_minus_constant_alpha=
      caml_call2(Int[2],gl1ctx,cst_ONE_MINUS_CONSTANT_ALPHA),
     blend_color$0=caml_call2(Int[2],gl1ctx,cst_BLEND_COLOR),
     array_buffer$2=caml_call2(Int[2],gl1ctx,cst_ARRAY_BUFFER),
     element_array_buffer=caml_call2(Int[2],gl1ctx,cst_ELEMENT_ARRAY_BUFFER),
     array_buffer_binding=caml_call2(Int[2],gl1ctx,cst_ARRAY_BUFFER_BINDING),
     element_array_buffer_binding=
      caml_call2(Int[2],gl1ctx,cst_ELEMENT_ARRAY_BUFFER_BINDI),
     stream_draw=caml_call2(Int[2],gl1ctx,cst_STREAM_DRAW),
     static_draw=caml_call2(Int[2],gl1ctx,cst_STATIC_DRAW),
     dynamic_draw=caml_call2(Int[2],gl1ctx,cst_DYNAMIC_DRAW),
     buffer_size=caml_call2(Int[2],gl1ctx,cst_BUFFER_SIZE),
     buffer_usage=caml_call2(Int[2],gl1ctx,cst_BUFFER_USAGE),
     current_vertex_attrib=caml_call2(Int[2],gl1ctx,cst_CURRENT_VERTEX_ATTRIB),
     front=caml_call2(Int[2],gl1ctx,cst_FRONT),
     back$0=caml_call2(Int[2],gl1ctx,cst_BACK),
     front_and_back=caml_call2(Int[2],gl1ctx,cst_FRONT_AND_BACK),
     cull_face$0=caml_call2(Int[2],gl1ctx,cst_CULL_FACE),
     blend=caml_call2(Int[2],gl1ctx,cst_BLEND),
     dither=caml_call2(Int[2],gl1ctx,cst_DITHER),
     stencil_test=caml_call2(Int[2],gl1ctx,cst_STENCIL_TEST),
     depth_test=caml_call2(Int[2],gl1ctx,cst_DEPTH_TEST),
     scissor_test=caml_call2(Int[2],gl1ctx,cst_SCISSOR_TEST),
     polygon_offset_fill=caml_call2(Int[2],gl1ctx,cst_POLYGON_OFFSET_FILL),
     sample_alpha_to_coverage=
      caml_call2(Int[2],gl1ctx,cst_SAMPLE_ALPHA_TO_COVERAGE),
     sample_coverage$0=caml_call2(Int[2],gl1ctx,cst_SAMPLE_COVERAGE),
     no_error=caml_call2(Int[2],gl1ctx,cst_NO_ERROR),
     invalid_enum=caml_call2(Int[2],gl1ctx,cst_INVALID_ENUM),
     invalid_value=caml_call2(Int[2],gl1ctx,cst_INVALID_VALUE),
     invalid_operation=caml_call2(Int[2],gl1ctx,cst_INVALID_OPERATION),
     out_of_memory=caml_call2(Int[2],gl1ctx,cst_OUT_OF_MEMORY),
     cw=caml_call2(Int[2],gl1ctx,cst_CW),
     ccw=caml_call2(Int[2],gl1ctx,cst_CCW),
     line_width$1=caml_call2(Int[2],gl1ctx,cst_LINE_WIDTH),
     aliased_point_size_range=
      caml_call2(Int[2],gl1ctx,cst_ALIASED_POINT_SIZE_RANGE),
     aliased_line_width_range=
      caml_call2(Int[2],gl1ctx,cst_ALIASED_LINE_WIDTH_RANGE),
     cull_face_mode=caml_call2(Int[2],gl1ctx,cst_CULL_FACE_MODE),
     front_face$0=caml_call2(Int[2],gl1ctx,cst_FRONT_FACE),
     depth_range=caml_call2(Int[2],gl1ctx,cst_DEPTH_RANGE),
     depth_writemask=caml_call2(Int[2],gl1ctx,cst_DEPTH_WRITEMASK),
     depth_clear_value=caml_call2(Int[2],gl1ctx,cst_DEPTH_CLEAR_VALUE),
     depth_func$0=caml_call2(Int[2],gl1ctx,cst_DEPTH_FUNC),
     stencil_clear_value=caml_call2(Int[2],gl1ctx,cst_STENCIL_CLEAR_VALUE),
     stencil_func$0=caml_call2(Int[2],gl1ctx,cst_STENCIL_FUNC),
     stencil_fail=caml_call2(Int[2],gl1ctx,cst_STENCIL_FAIL),
     stencil_pass_depth_fail=
      caml_call2(Int[2],gl1ctx,cst_STENCIL_PASS_DEPTH_FAIL),
     stencil_pass_depth_pass=
      caml_call2(Int[2],gl1ctx,cst_STENCIL_PASS_DEPTH_PASS),
     stencil_ref=caml_call2(Int[2],gl1ctx,cst_STENCIL_REF),
     stencil_value_mask=caml_call2(Int[2],gl1ctx,cst_STENCIL_VALUE_MASK),
     stencil_writemask=caml_call2(Int[2],gl1ctx,cst_STENCIL_WRITEMASK),
     stencil_back_func=caml_call2(Int[2],gl1ctx,cst_STENCIL_BACK_FUNC),
     stencil_back_fail=caml_call2(Int[2],gl1ctx,cst_STENCIL_BACK_FAIL),
     stencil_back_pass_depth_fail=
      caml_call2(Int[2],gl1ctx,cst_STENCIL_BACK_PASS_DEPTH_FA),
     stencil_back_pass_depth_pass=
      caml_call2(Int[2],gl1ctx,cst_STENCIL_BACK_PASS_DEPTH_PA),
     stencil_back_ref=caml_call2(Int[2],gl1ctx,cst_STENCIL_BACK_REF),
     stencil_back_value_mask=
      caml_call2(Int[2],gl1ctx,cst_STENCIL_BACK_VALUE_MASK),
     stencil_back_writemask=
      caml_call2(Int[2],gl1ctx,cst_STENCIL_BACK_WRITEMASK),
     viewport$0=caml_call2(Int[2],gl1ctx,cst_VIEWPORT),
     scissor_box=caml_call2(Int[2],gl1ctx,cst_SCISSOR_BOX),
     color_clear_value=caml_call2(Int[2],gl1ctx,cst_COLOR_CLEAR_VALUE),
     color_writemask=caml_call2(Int[2],gl1ctx,cst_COLOR_WRITEMASK),
     unpack_alignment=caml_call2(Int[2],gl1ctx,cst_UNPACK_ALIGNMENT),
     pack_alignment=caml_call2(Int[2],gl1ctx,cst_PACK_ALIGNMENT),
     max_texture_size=caml_call2(Int[2],gl1ctx,cst_MAX_TEXTURE_SIZE),
     max_viewport_dims=caml_call2(Int[2],gl1ctx,cst_MAX_VIEWPORT_DIMS),
     subpixel_bits=caml_call2(Int[2],gl1ctx,cst_SUBPIXEL_BITS),
     red_bits=caml_call2(Int[2],gl1ctx,cst_RED_BITS),
     green_bits=caml_call2(Int[2],gl1ctx,cst_GREEN_BITS),
     blue_bits=caml_call2(Int[2],gl1ctx,cst_BLUE_BITS),
     alpha_bits=caml_call2(Int[2],gl1ctx,cst_ALPHA_BITS),
     depth_bits=caml_call2(Int[2],gl1ctx,cst_DEPTH_BITS),
     stencil_bits=caml_call2(Int[2],gl1ctx,cst_STENCIL_BITS),
     polygon_offset_units=caml_call2(Int[2],gl1ctx,cst_POLYGON_OFFSET_UNITS),
     polygon_offset_factor=caml_call2(Int[2],gl1ctx,cst_POLYGON_OFFSET_FACTOR),
     texture_binding_2d=caml_call2(Int[2],gl1ctx,cst_TEXTURE_BINDING_2D),
     sample_buffers=caml_call2(Int[2],gl1ctx,cst_SAMPLE_BUFFERS),
     samples=caml_call2(Int[2],gl1ctx,cst_SAMPLES),
     sample_coverage_value=caml_call2(Int[2],gl1ctx,cst_SAMPLE_COVERAGE_VALUE),
     sample_coverage_invert=
      caml_call2(Int[2],gl1ctx,cst_SAMPLE_COVERAGE_INVERT),
     compressed_texture_formats=
      caml_call2(Int[2],gl1ctx,cst_COMPRESSED_TEXTURE_FORMATS),
     dont_care=caml_call2(Int[2],gl1ctx,cst_DONT_CARE),
     fastest=caml_call2(Int[2],gl1ctx,cst_FASTEST),
     nicest=caml_call2(Int[2],gl1ctx,cst_NICEST),
     generate_mipmap_hint=caml_call2(Int[2],gl1ctx,cst_GENERATE_MIPMAP_HINT),
     byte$0=caml_call2(Int[2],gl1ctx,cst_BYTE),
     unsigned_byte=caml_call2(Int[2],gl1ctx,cst_UNSIGNED_BYTE),
     short$0=caml_call2(Int[2],gl1ctx,cst_SHORT),
     unsigned_short=caml_call2(Int[2],gl1ctx,cst_UNSIGNED_SHORT),
     int$3=caml_call2(Int[2],gl1ctx,cst_INT),
     unsigned_int=caml_call2(Int[2],gl1ctx,cst_UNSIGNED_INT),
     float$3=caml_call2(Int[2],gl1ctx,cst_FLOAT),
     depth_component=caml_call2(Int[2],gl1ctx,cst_DEPTH_COMPONENT),
     alpha$0=caml_call2(Int[2],gl1ctx,cst_ALPHA),
     rgb=caml_call2(Int[2],gl1ctx,cst_RGB),
     rgba=caml_call2(Int[2],gl1ctx,cst_RGBA),
     luminance=caml_call2(Int[2],gl1ctx,cst_LUMINANCE),
     luminance_alpha=caml_call2(Int[2],gl1ctx,cst_LUMINANCE_ALPHA),
     unsigned_short_4_4_4_4=
      caml_call2(Int[2],gl1ctx,cst_UNSIGNED_SHORT_4_4_4_4),
     unsigned_short_5_5_5_1=
      caml_call2(Int[2],gl1ctx,cst_UNSIGNED_SHORT_5_5_5_1),
     unsigned_short_5_6_5=caml_call2(Int[2],gl1ctx,cst_UNSIGNED_SHORT_5_6_5),
     fragment_shader=caml_call2(Int[2],gl1ctx,cst_FRAGMENT_SHADER),
     vertex_shader=caml_call2(Int[2],gl1ctx,cst_VERTEX_SHADER),
     max_vertex_attribs=caml_call2(Int[2],gl1ctx,cst_MAX_VERTEX_ATTRIBS),
     max_vertex_uniform_vectors=
      caml_call2(Int[2],gl1ctx,cst_MAX_VERTEX_UNIFORM_VECTORS),
     max_varying_vectors=caml_call2(Int[2],gl1ctx,cst_MAX_VARYING_VECTORS),
     max_combined_texture_image_uni=
      caml_call2(Int[2],gl1ctx,cst_MAX_COMBINED_TEXTURE_IMAGE),
     max_vertex_texture_image_units=
      caml_call2(Int[2],gl1ctx,cst_MAX_VERTEX_TEXTURE_IMAGE_U),
     max_texture_image_units=
      caml_call2(Int[2],gl1ctx,cst_MAX_TEXTURE_IMAGE_UNITS),
     max_fragment_uniform_vectors=
      caml_call2(Int[2],gl1ctx,cst_MAX_FRAGMENT_UNIFORM_VECTO),
     shader_type=caml_call2(Int[2],gl1ctx,cst_SHADER_TYPE),
     delete_status=caml_call2(Int[2],gl1ctx,cst_DELETE_STATUS),
     link_status=caml_call2(Int[2],gl1ctx,cst_LINK_STATUS),
     validate_status=caml_call2(Int[2],gl1ctx,cst_VALIDATE_STATUS),
     attached_shaders=caml_call2(Int[2],gl1ctx,cst_ATTACHED_SHADERS),
     active_uniforms=caml_call2(Int[2],gl1ctx,cst_ACTIVE_UNIFORMS),
     active_attributes=caml_call2(Int[2],gl1ctx,cst_ACTIVE_ATTRIBUTES),
     shading_language_version=
      caml_call2(Int[2],gl1ctx,cst_SHADING_LANGUAGE_VERSION),
     current_program=caml_call2(Int[2],gl1ctx,cst_CURRENT_PROGRAM),
     never=caml_call2(Int[2],gl1ctx,cst_NEVER),
     less=caml_call2(Int[2],gl1ctx,cst_LESS),
     equal$0=caml_call2(Int[2],gl1ctx,cst_EQUAL),
     lequal=caml_call2(Int[2],gl1ctx,cst_LEQUAL),
     greater=caml_call2(Int[2],gl1ctx,cst_GREATER),
     notequal=caml_call2(Int[2],gl1ctx,cst_NOTEQUAL),
     gequal=caml_call2(Int[2],gl1ctx,cst_GEQUAL),
     always=caml_call2(Int[2],gl1ctx,cst_ALWAYS),
     keep=caml_call2(Int[2],gl1ctx,cst_KEEP),
     replace=caml_call2(Int[2],gl1ctx,cst_REPLACE),
     incr=caml_call2(Int[2],gl1ctx,cst_INCR),
     decr=caml_call2(Int[2],gl1ctx,cst_DECR),
     invert=caml_call2(Int[2],gl1ctx,cst_INVERT),
     incr_wrap=caml_call2(Int[2],gl1ctx,cst_INCR_WRAP),
     decr_wrap=caml_call2(Int[2],gl1ctx,cst_DECR_WRAP),
     vendor=caml_call2(Int[2],gl1ctx,cst_VENDOR),
     renderer=caml_call2(Int[2],gl1ctx,cst_RENDERER),
     version=caml_call2(Int[2],gl1ctx,cst_VERSION),
     nearest=caml_call2(Int[2],gl1ctx,cst_NEAREST),
     linear=caml_call2(Int[2],gl1ctx,cst_LINEAR),
     nearest_mipmap_nearest=
      caml_call2(Int[2],gl1ctx,cst_NEAREST_MIPMAP_NEAREST),
     linear_mipmap_nearest=caml_call2(Int[2],gl1ctx,cst_LINEAR_MIPMAP_NEAREST),
     nearest_mipmap_linear=caml_call2(Int[2],gl1ctx,cst_NEAREST_MIPMAP_LINEAR),
     linear_mipmap_linear=caml_call2(Int[2],gl1ctx,cst_LINEAR_MIPMAP_LINEAR),
     texture_mag_filter=caml_call2(Int[2],gl1ctx,cst_TEXTURE_MAG_FILTER),
     texture_min_filter=caml_call2(Int[2],gl1ctx,cst_TEXTURE_MIN_FILTER),
     texture_wrap_s=caml_call2(Int[2],gl1ctx,cst_TEXTURE_WRAP_S),
     texture_wrap_t=caml_call2(Int[2],gl1ctx,cst_TEXTURE_WRAP_T),
     texture_2d=caml_call2(Int[2],gl1ctx,cst_TEXTURE_2D),
     texture=caml_call2(Int[2],gl1ctx,cst_TEXTURE),
     texture_cube_map=caml_call2(Int[2],gl1ctx,cst_TEXTURE_CUBE_MAP),
     texture_binding_cube_map=
      caml_call2(Int[2],gl1ctx,cst_TEXTURE_BINDING_CUBE_MAP),
     texture_cube_map_positive_x=
      caml_call2(Int[2],gl1ctx,cst_TEXTURE_CUBE_MAP_POSITIVE_),
     texture_cube_map_negative_x=
      caml_call2(Int[2],gl1ctx,cst_TEXTURE_CUBE_MAP_NEGATIVE_),
     texture_cube_map_positive_y=
      caml_call2(Int[2],gl1ctx,cst_TEXTURE_CUBE_MAP_POSITIVE_$0),
     texture_cube_map_negative_y=
      caml_call2(Int[2],gl1ctx,cst_TEXTURE_CUBE_MAP_NEGATIVE_$0),
     texture_cube_map_positive_z=
      caml_call2(Int[2],gl1ctx,cst_TEXTURE_CUBE_MAP_POSITIVE_$1),
     texture_cube_map_negative_z=
      caml_call2(Int[2],gl1ctx,cst_TEXTURE_CUBE_MAP_NEGATIVE_$1),
     max_cube_map_texture_size=
      caml_call2(Int[2],gl1ctx,cst_MAX_CUBE_MAP_TEXTURE_SIZE),
     texture0=caml_call2(Int[2],gl1ctx,cst_TEXTURE0),
     texture1=caml_call2(Int[2],gl1ctx,cst_TEXTURE1),
     texture2=caml_call2(Int[2],gl1ctx,cst_TEXTURE2),
     texture3=caml_call2(Int[2],gl1ctx,cst_TEXTURE3),
     texture4=caml_call2(Int[2],gl1ctx,cst_TEXTURE4),
     texture5=caml_call2(Int[2],gl1ctx,cst_TEXTURE5),
     texture6=caml_call2(Int[2],gl1ctx,cst_TEXTURE6),
     texture7=caml_call2(Int[2],gl1ctx,cst_TEXTURE7),
     texture8=caml_call2(Int[2],gl1ctx,cst_TEXTURE8),
     texture9=caml_call2(Int[2],gl1ctx,cst_TEXTURE9),
     texture10=caml_call2(Int[2],gl1ctx,cst_TEXTURE10),
     texture11=caml_call2(Int[2],gl1ctx,cst_TEXTURE11),
     texture12=caml_call2(Int[2],gl1ctx,cst_TEXTURE12),
     texture13=caml_call2(Int[2],gl1ctx,cst_TEXTURE13),
     texture14=caml_call2(Int[2],gl1ctx,cst_TEXTURE14),
     texture15=caml_call2(Int[2],gl1ctx,cst_TEXTURE15),
     texture16=caml_call2(Int[2],gl1ctx,cst_TEXTURE16),
     texture17=caml_call2(Int[2],gl1ctx,cst_TEXTURE17),
     texture18=caml_call2(Int[2],gl1ctx,cst_TEXTURE18),
     texture19=caml_call2(Int[2],gl1ctx,cst_TEXTURE19),
     texture20=caml_call2(Int[2],gl1ctx,cst_TEXTURE20),
     texture21=caml_call2(Int[2],gl1ctx,cst_TEXTURE21),
     texture22=caml_call2(Int[2],gl1ctx,cst_TEXTURE22),
     texture23=caml_call2(Int[2],gl1ctx,cst_TEXTURE23),
     texture24=caml_call2(Int[2],gl1ctx,cst_TEXTURE24),
     texture25=caml_call2(Int[2],gl1ctx,cst_TEXTURE25),
     texture26=caml_call2(Int[2],gl1ctx,cst_TEXTURE26),
     texture27=caml_call2(Int[2],gl1ctx,cst_TEXTURE27),
     texture28=caml_call2(Int[2],gl1ctx,cst_TEXTURE28),
     texture29=caml_call2(Int[2],gl1ctx,cst_TEXTURE29),
     texture30=caml_call2(Int[2],gl1ctx,cst_TEXTURE30),
     texture31=caml_call2(Int[2],gl1ctx,cst_TEXTURE31),
     active_texture$0=caml_call2(Int[2],gl1ctx,cst_ACTIVE_TEXTURE),
     repeat$1=caml_call2(Int[2],gl1ctx,cst_REPEAT),
     clamp_to_edge=caml_call2(Int[2],gl1ctx,cst_CLAMP_TO_EDGE),
     mirrored_repeat=caml_call2(Int[2],gl1ctx,cst_MIRRORED_REPEAT),
     float_vec2=caml_call2(Int[2],gl1ctx,cst_FLOAT_VEC2),
     float_vec3=caml_call2(Int[2],gl1ctx,cst_FLOAT_VEC3),
     float_vec4=caml_call2(Int[2],gl1ctx,cst_FLOAT_VEC4),
     int_vec2=caml_call2(Int[2],gl1ctx,cst_INT_VEC2),
     int_vec3=caml_call2(Int[2],gl1ctx,cst_INT_VEC3),
     int_vec4=caml_call2(Int[2],gl1ctx,cst_INT_VEC4),
     bool$1=caml_call2(Int[2],gl1ctx,cst_BOOL),
     bool_vec2=caml_call2(Int[2],gl1ctx,cst_BOOL_VEC2),
     bool_vec3=caml_call2(Int[2],gl1ctx,cst_BOOL_VEC3),
     bool_vec4=caml_call2(Int[2],gl1ctx,cst_BOOL_VEC4),
     float_mat2=caml_call2(Int[2],gl1ctx,cst_FLOAT_MAT2),
     float_mat3=caml_call2(Int[2],gl1ctx,cst_FLOAT_MAT3),
     float_mat4=caml_call2(Int[2],gl1ctx,cst_FLOAT_MAT4),
     sampler_2d=caml_call2(Int[2],gl1ctx,cst_SAMPLER_2D),
     sampler_cube=caml_call2(Int[2],gl1ctx,cst_SAMPLER_CUBE),
     vertex_attrib_array_enabled=
      caml_call2(Int[2],gl1ctx,cst_VERTEX_ATTRIB_ARRAY_ENABLE),
     vertex_attrib_array_size=
      caml_call2(Int[2],gl1ctx,cst_VERTEX_ATTRIB_ARRAY_SIZE),
     vertex_attrib_array_stride=
      caml_call2(Int[2],gl1ctx,cst_VERTEX_ATTRIB_ARRAY_STRIDE),
     vertex_attrib_array_type=
      caml_call2(Int[2],gl1ctx,cst_VERTEX_ATTRIB_ARRAY_TYPE),
     vertex_attrib_array_normalized=
      caml_call2(Int[2],gl1ctx,cst_VERTEX_ATTRIB_ARRAY_NORMAL),
     vertex_attrib_array_pointer=
      caml_call2(Int[2],gl1ctx,cst_VERTEX_ATTRIB_ARRAY_POINTE),
     vertex_attrib_array_buffer_bin=
      caml_call2(Int[2],gl1ctx,cst_VERTEX_ATTRIB_ARRAY_BUFFER),
     implementation_color_read_type=
      caml_call2(Int[2],gl1ctx,cst_IMPLEMENTATION_COLOR_READ_),
     implementation_color_read_form=
      caml_call2(Int[2],gl1ctx,cst_IMPLEMENTATION_COLOR_READ_$0),
     compile_status=caml_call2(Int[2],gl1ctx,cst_COMPILE_STATUS),
     low_float=caml_call2(Int[2],gl1ctx,cst_LOW_FLOAT),
     medium_float=caml_call2(Int[2],gl1ctx,cst_MEDIUM_FLOAT),
     high_float=caml_call2(Int[2],gl1ctx,cst_HIGH_FLOAT),
     low_int=caml_call2(Int[2],gl1ctx,cst_LOW_INT),
     medium_int=caml_call2(Int[2],gl1ctx,cst_MEDIUM_INT),
     high_int=caml_call2(Int[2],gl1ctx,cst_HIGH_INT),
     framebuffer=caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER),
     renderbuffer=caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER),
     rgba4=caml_call2(Int[2],gl1ctx,cst_RGBA4),
     rgb5_a1=caml_call2(Int[2],gl1ctx,cst_RGB5_A1),
     rgb565=caml_call2(Int[2],gl1ctx,cst_RGB565),
     depth_component16=caml_call2(Int[2],gl1ctx,cst_DEPTH_COMPONENT16),
     stencil_index8=caml_call2(Int[2],gl1ctx,cst_STENCIL_INDEX8),
     depth_stencil=caml_call2(Int[2],gl1ctx,cst_DEPTH_STENCIL),
     renderbuffer_width=caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER_WIDTH),
     renderbuffer_height=caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER_HEIGHT),
     renderbuffer_internal_format=
      caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER_INTERNAL_FORM),
     renderbuffer_red_size=caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER_RED_SIZE),
     renderbuffer_green_size=
      caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER_GREEN_SIZE),
     renderbuffer_blue_size=
      caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER_BLUE_SIZE),
     renderbuffer_alpha_size=
      caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER_ALPHA_SIZE),
     renderbuffer_depth_size=
      caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER_DEPTH_SIZE),
     renderbuffer_stencil_size=
      caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER_STENCIL_SIZE),
     framebuffer_attachment_object_=
      caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER_ATTACHMENT_OBJ),
     framebuffer_attachment_object_$0=
      caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER_ATTACHMENT_OBJ$0),
     framebuffer_attachment_texture=
      caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER_ATTACHMENT_TEX),
     framebuffer_attachment_texture$0=
      caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER_ATTACHMENT_TEX$0),
     color_attachment0=caml_call2(Int[2],gl1ctx,cst_COLOR_ATTACHMENT0),
     depth_attachment=caml_call2(Int[2],gl1ctx,cst_DEPTH_ATTACHMENT),
     stencil_attachment=caml_call2(Int[2],gl1ctx,cst_STENCIL_ATTACHMENT),
     depth_stencil_attachment=
      caml_call2(Int[2],gl1ctx,cst_DEPTH_STENCIL_ATTACHMENT),
     none$0=caml_call2(Int[2],gl1ctx,cst_NONE),
     framebuffer_complete=caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER_COMPLETE),
     framebuffer_incomplete_attachm=
      caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER_INCOMPLETE_ATT),
     framebuffer_incomplete_missing=
      caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER_INCOMPLETE_MIS),
     framebuffer_incomplete_dimensi=
      caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER_INCOMPLETE_DIM),
     framebuffer_unsupported=
      caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER_UNSUPPORTED),
     framebuffer_binding=caml_call2(Int[2],gl1ctx,cst_FRAMEBUFFER_BINDING),
     renderbuffer_binding=caml_call2(Int[2],gl1ctx,cst_RENDERBUFFER_BINDING),
     max_renderbuffer_size=caml_call2(Int[2],gl1ctx,cst_MAX_RENDERBUFFER_SIZE),
     invalid_framebuffer_operation=
      caml_call2(Int[2],gl1ctx,cst_INVALID_FRAMEBUFFER_OPERAT),
     unpack_flip_y_webgl=caml_call2(Int[2],gl1ctx,cst_UNPACK_FLIP_Y_WEBGL),
     unpack_premultiply_alpha_webgl=
      caml_call2(Int[2],gl1ctx,cst_UNPACK_PREMULTIPLY_ALPHA_W),
     context_lost_webgl=caml_call2(Int[2],gl1ctx,cst_CONTEXT_LOST_WEBGL),
     unpack_colorspace_conversion_w=
      caml_call2(Int[2],gl1ctx,cst_UNPACK_COLORSPACE_CONVERSI),
     browser_default_webgl=caml_call2(Int[2],gl1ctx,cst_BROWSER_DEFAULT_WEBGL),
     gl2ctx=target[cst_WebGL2RenderingContext],
     _bx_=is_none(gl2ctx)?function(param,_d$_){return 0}:Int[2],
     read_buffer$0=caml_call2(_bx_,gl2ctx,cst_READ_BUFFER),
     unpack_row_length=caml_call2(_bx_,gl2ctx,cst_UNPACK_ROW_LENGTH),
     unpack_skip_rows=caml_call2(_bx_,gl2ctx,cst_UNPACK_SKIP_ROWS),
     unpack_skip_pixels=caml_call2(_bx_,gl2ctx,cst_UNPACK_SKIP_PIXELS),
     pack_row_length=caml_call2(_bx_,gl2ctx,cst_PACK_ROW_LENGTH),
     pack_skip_rows=caml_call2(_bx_,gl2ctx,cst_PACK_SKIP_ROWS),
     pack_skip_pixels=caml_call2(_bx_,gl2ctx,cst_PACK_SKIP_PIXELS),
     color$2=caml_call2(_bx_,gl2ctx,cst_COLOR),
     depth$0=caml_call2(_bx_,gl2ctx,cst_DEPTH),
     stencil$0=caml_call2(_bx_,gl2ctx,cst_STENCIL),
     red=caml_call2(_bx_,gl2ctx,cst_RED),
     rgb8=caml_call2(_bx_,gl2ctx,cst_RGB8),
     rgba8=caml_call2(_bx_,gl2ctx,cst_RGBA8),
     rgb10_a2=caml_call2(_bx_,gl2ctx,cst_RGB10_A2),
     texture_binding_3d=caml_call2(_bx_,gl2ctx,cst_TEXTURE_BINDING_3D),
     unpack_skip_images=caml_call2(_bx_,gl2ctx,cst_UNPACK_SKIP_IMAGES),
     unpack_image_height=caml_call2(_bx_,gl2ctx,cst_UNPACK_IMAGE_HEIGHT),
     texture_3d=caml_call2(_bx_,gl2ctx,cst_TEXTURE_3D),
     texture_wrap_r=caml_call2(_bx_,gl2ctx,cst_TEXTURE_WRAP_R),
     max_3d_texture_size=caml_call2(_bx_,gl2ctx,cst_MAX_3D_TEXTURE_SIZE),
     unsigned_int_2_10_10_10_rev=
      caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_2_10_10_10_RE),
     max_elements_vertices=caml_call2(_bx_,gl2ctx,cst_MAX_ELEMENTS_VERTICES),
     max_elements_indices=caml_call2(_bx_,gl2ctx,cst_MAX_ELEMENTS_INDICES),
     texture_min_lod=caml_call2(_bx_,gl2ctx,cst_TEXTURE_MIN_LOD),
     texture_max_lod=caml_call2(_bx_,gl2ctx,cst_TEXTURE_MAX_LOD),
     texture_base_level=caml_call2(_bx_,gl2ctx,cst_TEXTURE_BASE_LEVEL),
     texture_max_level=caml_call2(_bx_,gl2ctx,cst_TEXTURE_MAX_LEVEL),
     min$1=caml_call2(_bx_,gl2ctx,cst_MIN),
     max$2=caml_call2(_bx_,gl2ctx,cst_MAX),
     depth_component24=caml_call2(_bx_,gl2ctx,cst_DEPTH_COMPONENT24),
     max_texture_lod_bias=caml_call2(_bx_,gl2ctx,cst_MAX_TEXTURE_LOD_BIAS),
     texture_compare_mode=caml_call2(_bx_,gl2ctx,cst_TEXTURE_COMPARE_MODE),
     texture_compare_func=caml_call2(_bx_,gl2ctx,cst_TEXTURE_COMPARE_FUNC),
     current_query=caml_call2(_bx_,gl2ctx,cst_CURRENT_QUERY),
     query_result=caml_call2(_bx_,gl2ctx,cst_QUERY_RESULT),
     query_result_available=caml_call2(_bx_,gl2ctx,cst_QUERY_RESULT_AVAILABLE),
     stream_read=caml_call2(_bx_,gl2ctx,cst_STREAM_READ),
     stream_copy=caml_call2(_bx_,gl2ctx,cst_STREAM_COPY),
     static_read=caml_call2(_bx_,gl2ctx,cst_STATIC_READ),
     static_copy=caml_call2(_bx_,gl2ctx,cst_STATIC_COPY),
     dynamic_read=caml_call2(_bx_,gl2ctx,cst_DYNAMIC_READ),
     dynamic_copy=caml_call2(_bx_,gl2ctx,cst_DYNAMIC_COPY),
     max_draw_buffers=caml_call2(_bx_,gl2ctx,cst_MAX_DRAW_BUFFERS),
     draw_buffer0=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER0),
     draw_buffer1=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER1),
     draw_buffer2=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER2),
     draw_buffer3=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER3),
     draw_buffer4=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER4),
     draw_buffer5=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER5),
     draw_buffer6=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER6),
     draw_buffer7=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER7),
     draw_buffer8=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER8),
     draw_buffer9=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER9),
     draw_buffer10=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER10),
     draw_buffer11=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER11),
     draw_buffer12=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER12),
     draw_buffer13=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER13),
     draw_buffer14=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER14),
     draw_buffer15=caml_call2(_bx_,gl2ctx,cst_DRAW_BUFFER15),
     max_fragment_uniform_component=
      caml_call2(_bx_,gl2ctx,cst_MAX_FRAGMENT_UNIFORM_COMPO),
     max_vertex_uniform_components=
      caml_call2(_bx_,gl2ctx,cst_MAX_VERTEX_UNIFORM_COMPONE),
     sampler_3d=caml_call2(_bx_,gl2ctx,cst_SAMPLER_3D),
     sampler_2d_shadow=caml_call2(_bx_,gl2ctx,cst_SAMPLER_2D_SHADOW),
     fragment_shader_derivative_hin=
      caml_call2(_bx_,gl2ctx,cst_FRAGMENT_SHADER_DERIVATIVE),
     pixel_pack_buffer=caml_call2(_bx_,gl2ctx,cst_PIXEL_PACK_BUFFER),
     pixel_unpack_buffer=caml_call2(_bx_,gl2ctx,cst_PIXEL_UNPACK_BUFFER),
     pixel_pack_buffer_binding=
      caml_call2(_bx_,gl2ctx,cst_PIXEL_PACK_BUFFER_BINDING),
     pixel_unpack_buffer_binding=
      caml_call2(_bx_,gl2ctx,cst_PIXEL_UNPACK_BUFFER_BINDIN),
     float_mat2x3=caml_call2(_bx_,gl2ctx,cst_FLOAT_MAT2x3),
     float_mat2x4=caml_call2(_bx_,gl2ctx,cst_FLOAT_MAT2x4),
     float_mat3x2=caml_call2(_bx_,gl2ctx,cst_FLOAT_MAT3x2),
     float_mat3x4=caml_call2(_bx_,gl2ctx,cst_FLOAT_MAT3x4),
     float_mat4x2=caml_call2(_bx_,gl2ctx,cst_FLOAT_MAT4x2),
     float_mat4x3=caml_call2(_bx_,gl2ctx,cst_FLOAT_MAT4x3),
     srgb=caml_call2(_bx_,gl2ctx,cst_SRGB),
     srgb8=caml_call2(_bx_,gl2ctx,cst_SRGB8),
     srgb8_alpha8=caml_call2(_bx_,gl2ctx,cst_SRGB8_ALPHA8),
     compare_ref_to_texture=caml_call2(_bx_,gl2ctx,cst_COMPARE_REF_TO_TEXTURE),
     rgba32f=caml_call2(_bx_,gl2ctx,cst_RGBA32F),
     rgb32f=caml_call2(_bx_,gl2ctx,cst_RGB32F),
     rgba16f=caml_call2(_bx_,gl2ctx,cst_RGBA16F),
     rgb16f=caml_call2(_bx_,gl2ctx,cst_RGB16F),
     vertex_attrib_array_integer=
      caml_call2(_bx_,gl2ctx,cst_VERTEX_ATTRIB_ARRAY_INTEGE),
     max_array_texture_layers=
      caml_call2(_bx_,gl2ctx,cst_MAX_ARRAY_TEXTURE_LAYERS),
     min_program_texel_offset=
      caml_call2(_bx_,gl2ctx,cst_MIN_PROGRAM_TEXEL_OFFSET),
     max_program_texel_offset=
      caml_call2(_bx_,gl2ctx,cst_MAX_PROGRAM_TEXEL_OFFSET),
     max_varying_components=caml_call2(_bx_,gl2ctx,cst_MAX_VARYING_COMPONENTS),
     texture_2d_array=caml_call2(_bx_,gl2ctx,cst_TEXTURE_2D_ARRAY),
     texture_binding_2d_array=
      caml_call2(_bx_,gl2ctx,cst_TEXTURE_BINDING_2D_ARRAY),
     r11f_g11f_b10f=caml_call2(_bx_,gl2ctx,cst_R11F_G11F_B10F),
     unsigned_int_10f_11f_11f_rev=
      caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_10F_11F_11F_R),
     rgb9_e5=caml_call2(_bx_,gl2ctx,cst_RGB9_E5),
     unsigned_int_5_9_9_9_rev=
      caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_5_9_9_9_REV),
     transform_feedback_buffer_mode=
      caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK_BUFFER_),
     max_transform_feedback_separat=
      caml_call2(_bx_,gl2ctx,cst_MAX_TRANSFORM_FEEDBACK_SEP),
     transform_feedback_varyings$0=
      caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK_VARYING),
     transform_feedback_buffer_star=
      caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK_BUFFER_$0),
     transform_feedback_buffer_size=
      caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK_BUFFER_$1),
     transform_feedback_primitives_=
      caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK_PRIMITI),
     rasterizer_discard=caml_call2(_bx_,gl2ctx,cst_RASTERIZER_DISCARD),
     max_transform_feedback_interle=
      caml_call2(_bx_,gl2ctx,cst_MAX_TRANSFORM_FEEDBACK_INT),
     max_transform_feedback_separat$0=
      caml_call2(_bx_,gl2ctx,cst_MAX_TRANSFORM_FEEDBACK_SEP$0),
     interleaved_attribs=caml_call2(_bx_,gl2ctx,cst_INTERLEAVED_ATTRIBS),
     separate_attribs=caml_call2(_bx_,gl2ctx,cst_SEPARATE_ATTRIBS),
     transform_feedback_buffer=
      caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK_BUFFER),
     transform_feedback_buffer_bind=
      caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK_BUFFER_$2),
     rgba32ui=caml_call2(_bx_,gl2ctx,cst_RGBA32UI),
     rgb32ui=caml_call2(_bx_,gl2ctx,cst_RGB32UI),
     rgba16ui=caml_call2(_bx_,gl2ctx,cst_RGBA16UI),
     rgb16ui=caml_call2(_bx_,gl2ctx,cst_RGB16UI),
     rgba8ui=caml_call2(_bx_,gl2ctx,cst_RGBA8UI),
     rgb8ui=caml_call2(_bx_,gl2ctx,cst_RGB8UI),
     rgba32i=caml_call2(_bx_,gl2ctx,cst_RGBA32I),
     rgb32i=caml_call2(_bx_,gl2ctx,cst_RGB32I),
     rgba16i=caml_call2(_bx_,gl2ctx,cst_RGBA16I),
     rgb16i=caml_call2(_bx_,gl2ctx,cst_RGB16I),
     rgba8i=caml_call2(_bx_,gl2ctx,cst_RGBA8I),
     rgb8i=caml_call2(_bx_,gl2ctx,cst_RGB8I),
     red_integer=caml_call2(_bx_,gl2ctx,cst_RED_INTEGER),
     rgb_integer=caml_call2(_bx_,gl2ctx,cst_RGB_INTEGER),
     rgba_integer=caml_call2(_bx_,gl2ctx,cst_RGBA_INTEGER),
     sampler_2d_array=caml_call2(_bx_,gl2ctx,cst_SAMPLER_2D_ARRAY),
     sampler_2d_array_shadow=
      caml_call2(_bx_,gl2ctx,cst_SAMPLER_2D_ARRAY_SHADOW),
     sampler_cube_shadow=caml_call2(_bx_,gl2ctx,cst_SAMPLER_CUBE_SHADOW),
     unsigned_int_vec2=caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_VEC2),
     unsigned_int_vec3=caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_VEC3),
     unsigned_int_vec4=caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_VEC4),
     int_sampler_2d=caml_call2(_bx_,gl2ctx,cst_INT_SAMPLER_2D),
     int_sampler_3d=caml_call2(_bx_,gl2ctx,cst_INT_SAMPLER_3D),
     int_sampler_cube=caml_call2(_bx_,gl2ctx,cst_INT_SAMPLER_CUBE),
     int_sampler_2d_array=caml_call2(_bx_,gl2ctx,cst_INT_SAMPLER_2D_ARRAY),
     unsigned_int_sampler_2d=
      caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_SAMPLER_2D),
     unsigned_int_sampler_3d=
      caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_SAMPLER_3D),
     unsigned_int_sampler_cube=
      caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_SAMPLER_CUBE),
     unsigned_int_sampler_2d_array=
      caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_SAMPLER_2D_AR),
     depth_component32f=caml_call2(_bx_,gl2ctx,cst_DEPTH_COMPONENT32F),
     depth32f_stencil8=caml_call2(_bx_,gl2ctx,cst_DEPTH32F_STENCIL8),
     float_32_unsigned_int_24_8_rev=
      caml_call2(_bx_,gl2ctx,cst_FLOAT_32_UNSIGNED_INT_24_8),
     framebuffer_attachment_color_e=
      caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_ATTACHMENT_COL),
     framebuffer_attachment_compone=
      caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_ATTACHMENT_COM),
     framebuffer_attachment_red_siz=
      caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_ATTACHMENT_RED),
     framebuffer_attachment_green_s=
      caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_ATTACHMENT_GRE),
     framebuffer_attachment_blue_si=
      caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_ATTACHMENT_BLU),
     framebuffer_attachment_alpha_s=
      caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_ATTACHMENT_ALP),
     framebuffer_attachment_depth_s=
      caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_ATTACHMENT_DEP),
     framebuffer_attachment_stencil=
      caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_ATTACHMENT_STE),
     framebuffer_default=caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_DEFAULT),
     unsigned_int_24_8=caml_call2(_bx_,gl2ctx,cst_UNSIGNED_INT_24_8),
     depth24_stencil8=caml_call2(_bx_,gl2ctx,cst_DEPTH24_STENCIL8),
     unsigned_normalized=caml_call2(_bx_,gl2ctx,cst_UNSIGNED_NORMALIZED),
     draw_framebuffer_binding=
      caml_call2(_bx_,gl2ctx,cst_DRAW_FRAMEBUFFER_BINDING),
     read_framebuffer=caml_call2(_bx_,gl2ctx,cst_READ_FRAMEBUFFER),
     draw_framebuffer=caml_call2(_bx_,gl2ctx,cst_DRAW_FRAMEBUFFER),
     read_framebuffer_binding=
      caml_call2(_bx_,gl2ctx,cst_READ_FRAMEBUFFER_BINDING),
     renderbuffer_samples=caml_call2(_bx_,gl2ctx,cst_RENDERBUFFER_SAMPLES),
     framebuffer_attachment_texture$1=
      caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_ATTACHMENT_TEX$1),
     max_color_attachments=caml_call2(_bx_,gl2ctx,cst_MAX_COLOR_ATTACHMENTS),
     color_attachment1=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT1),
     color_attachment2=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT2),
     color_attachment3=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT3),
     color_attachment4=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT4),
     color_attachment5=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT5),
     color_attachment6=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT6),
     color_attachment7=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT7),
     color_attachment8=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT8),
     color_attachment9=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT9),
     color_attachment10=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT10),
     color_attachment11=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT11),
     color_attachment12=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT12),
     color_attachment13=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT13),
     color_attachment14=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT14),
     color_attachment15=caml_call2(_bx_,gl2ctx,cst_COLOR_ATTACHMENT15),
     framebuffer_incomplete_multisa=
      caml_call2(_bx_,gl2ctx,cst_FRAMEBUFFER_INCOMPLETE_MUL),
     max_samples=caml_call2(_bx_,gl2ctx,cst_MAX_SAMPLES),
     half_float=caml_call2(_bx_,gl2ctx,cst_HALF_FLOAT),
     rg=caml_call2(_bx_,gl2ctx,cst_RG),
     rg_integer=caml_call2(_bx_,gl2ctx,cst_RG_INTEGER),
     r8=caml_call2(_bx_,gl2ctx,cst_R8),
     rg8=caml_call2(_bx_,gl2ctx,cst_RG8),
     r16f=caml_call2(_bx_,gl2ctx,cst_R16F),
     r32f=caml_call2(_bx_,gl2ctx,cst_R32F),
     rg16f=caml_call2(_bx_,gl2ctx,cst_RG16F),
     rg32f=caml_call2(_bx_,gl2ctx,cst_RG32F),
     r8i=caml_call2(_bx_,gl2ctx,cst_R8I),
     r8ui=caml_call2(_bx_,gl2ctx,cst_R8UI),
     r16i=caml_call2(_bx_,gl2ctx,cst_R16I),
     r16ui=caml_call2(_bx_,gl2ctx,cst_R16UI),
     r32i=caml_call2(_bx_,gl2ctx,cst_R32I),
     r32ui=caml_call2(_bx_,gl2ctx,cst_R32UI),
     rg8i=caml_call2(_bx_,gl2ctx,cst_RG8I),
     rg8ui=caml_call2(_bx_,gl2ctx,cst_RG8UI),
     rg16i=caml_call2(_bx_,gl2ctx,cst_RG16I),
     rg16ui=caml_call2(_bx_,gl2ctx,cst_RG16UI),
     rg32i=caml_call2(_bx_,gl2ctx,cst_RG32I),
     rg32ui=caml_call2(_bx_,gl2ctx,cst_RG32UI),
     vertex_array_binding=caml_call2(_bx_,gl2ctx,cst_VERTEX_ARRAY_BINDING),
     r8_snorm=caml_call2(_bx_,gl2ctx,cst_R8_SNORM),
     rg8_snorm=caml_call2(_bx_,gl2ctx,cst_RG8_SNORM),
     rgb8_snorm=caml_call2(_bx_,gl2ctx,cst_RGB8_SNORM),
     rgba8_snorm=caml_call2(_bx_,gl2ctx,cst_RGBA8_SNORM),
     signed_normalized=caml_call2(_bx_,gl2ctx,cst_SIGNED_NORMALIZED),
     copy_read_buffer=caml_call2(_bx_,gl2ctx,cst_COPY_READ_BUFFER),
     copy_write_buffer=caml_call2(_bx_,gl2ctx,cst_COPY_WRITE_BUFFER),
     copy_read_buffer_binding=
      caml_call2(_bx_,gl2ctx,cst_COPY_READ_BUFFER_BINDING),
     copy_write_buffer_binding=
      caml_call2(_bx_,gl2ctx,cst_COPY_WRITE_BUFFER_BINDING),
     uniform_buffer=caml_call2(_bx_,gl2ctx,cst_UNIFORM_BUFFER),
     uniform_buffer_binding=caml_call2(_bx_,gl2ctx,cst_UNIFORM_BUFFER_BINDING),
     uniform_buffer_start=caml_call2(_bx_,gl2ctx,cst_UNIFORM_BUFFER_START),
     uniform_buffer_size=caml_call2(_bx_,gl2ctx,cst_UNIFORM_BUFFER_SIZE),
     max_vertex_uniform_blocks=
      caml_call2(_bx_,gl2ctx,cst_MAX_VERTEX_UNIFORM_BLOCKS),
     max_fragment_uniform_blocks=
      caml_call2(_bx_,gl2ctx,cst_MAX_FRAGMENT_UNIFORM_BLOCK),
     max_combined_uniform_blocks=
      caml_call2(_bx_,gl2ctx,cst_MAX_COMBINED_UNIFORM_BLOCK),
     max_uniform_buffer_bindings=
      caml_call2(_bx_,gl2ctx,cst_MAX_UNIFORM_BUFFER_BINDING),
     max_uniform_block_size=caml_call2(_bx_,gl2ctx,cst_MAX_UNIFORM_BLOCK_SIZE),
     max_combined_vertex_uniform_co=
      caml_call2(_bx_,gl2ctx,cst_MAX_COMBINED_VERTEX_UNIFOR),
     max_combined_fragment_uniform_=
      caml_call2(_bx_,gl2ctx,cst_MAX_COMBINED_FRAGMENT_UNIF),
     uniform_buffer_offset_alignmen=
      caml_call2(_bx_,gl2ctx,cst_UNIFORM_BUFFER_OFFSET_ALIG),
     active_uniform_blocks=caml_call2(_bx_,gl2ctx,cst_ACTIVE_UNIFORM_BLOCKS),
     uniform_type=caml_call2(_bx_,gl2ctx,cst_UNIFORM_TYPE),
     uniform_size=caml_call2(_bx_,gl2ctx,cst_UNIFORM_SIZE),
     uniform_block_index=caml_call2(_bx_,gl2ctx,cst_UNIFORM_BLOCK_INDEX),
     uniform_offset=caml_call2(_bx_,gl2ctx,cst_UNIFORM_OFFSET),
     uniform_array_stride=caml_call2(_bx_,gl2ctx,cst_UNIFORM_ARRAY_STRIDE),
     uniform_matrix_stride=caml_call2(_bx_,gl2ctx,cst_UNIFORM_MATRIX_STRIDE),
     uniform_is_row_major=caml_call2(_bx_,gl2ctx,cst_UNIFORM_IS_ROW_MAJOR),
     uniform_block_binding$0=caml_call2(_bx_,gl2ctx,cst_UNIFORM_BLOCK_BINDING),
     uniform_block_data_size=
      caml_call2(_bx_,gl2ctx,cst_UNIFORM_BLOCK_DATA_SIZE),
     uniform_block_active_uniforms=
      caml_call2(_bx_,gl2ctx,cst_UNIFORM_BLOCK_ACTIVE_UNIFO),
     uniform_block_active_uniform_i=
      caml_call2(_bx_,gl2ctx,cst_UNIFORM_BLOCK_ACTIVE_UNIFO$0),
     uniform_block_referenced_by_ve=
      caml_call2(_bx_,gl2ctx,cst_UNIFORM_BLOCK_REFERENCED_B),
     uniform_block_referenced_by_fr=
      caml_call2(_bx_,gl2ctx,cst_UNIFORM_BLOCK_REFERENCED_B$0),
     invalid_index=caml_call2(_bx_,gl2ctx,cst_INVALID_INDEX),
     max_vertex_output_components=
      caml_call2(_bx_,gl2ctx,cst_MAX_VERTEX_OUTPUT_COMPONEN),
     max_fragment_input_components=
      caml_call2(_bx_,gl2ctx,cst_MAX_FRAGMENT_INPUT_COMPONE),
     max_server_wait_timeout=
      caml_call2(_bx_,gl2ctx,cst_MAX_SERVER_WAIT_TIMEOUT),
     object_type=caml_call2(_bx_,gl2ctx,cst_OBJECT_TYPE),
     sync_condition=caml_call2(_bx_,gl2ctx,cst_SYNC_CONDITION),
     sync_status=caml_call2(_bx_,gl2ctx,cst_SYNC_STATUS),
     sync_flags=caml_call2(_bx_,gl2ctx,cst_SYNC_FLAGS),
     sync_fence=caml_call2(_bx_,gl2ctx,cst_SYNC_FENCE),
     sync_gpu_commands_complete=
      caml_call2(_bx_,gl2ctx,cst_SYNC_GPU_COMMANDS_COMPLETE),
     unsignaled=caml_call2(_bx_,gl2ctx,cst_UNSIGNALED),
     signaled=caml_call2(_bx_,gl2ctx,cst_SIGNALED),
     already_signaled=caml_call2(_bx_,gl2ctx,cst_ALREADY_SIGNALED),
     timeout_expired=caml_call2(_bx_,gl2ctx,cst_TIMEOUT_EXPIRED),
     condition_satisfied=caml_call2(_bx_,gl2ctx,cst_CONDITION_SATISFIED),
     wait_failed=caml_call2(_bx_,gl2ctx,cst_WAIT_FAILED),
     sync_flush_commands_bit=
      caml_call2(_bx_,gl2ctx,cst_SYNC_FLUSH_COMMANDS_BIT),
     vertex_attrib_array_divisor=
      caml_call2(_bx_,gl2ctx,cst_VERTEX_ATTRIB_ARRAY_DIVISO),
     any_samples_passed=caml_call2(_bx_,gl2ctx,cst_ANY_SAMPLES_PASSED),
     any_samples_passed_conservativ=
      caml_call2(_bx_,gl2ctx,cst_ANY_SAMPLES_PASSED_CONSERV),
     sampler_binding=caml_call2(_bx_,gl2ctx,cst_SAMPLER_BINDING),
     rgb10_a2ui=caml_call2(_bx_,gl2ctx,cst_RGB10_A2UI),
     int_2_10_10_10_rev=caml_call2(_bx_,gl2ctx,cst_INT_2_10_10_10_REV),
     transform_feedback=caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK),
     transform_feedback_paused=
      caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK_PAUSED),
     transform_feedback_active=
      caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK_ACTIVE),
     transform_feedback_binding=
      caml_call2(_bx_,gl2ctx,cst_TRANSFORM_FEEDBACK_BINDING),
     texture_immutable_format=
      caml_call2(_bx_,gl2ctx,cst_TEXTURE_IMMUTABLE_FORMAT),
     max_element_index=caml_call2(_bx_,gl2ctx,cst_MAX_ELEMENT_INDEX),
     texture_immutable_levels=
      caml_call2(_bx_,gl2ctx,cst_TEXTURE_IMMUTABLE_LEVELS),
     timeout_ignored=caml_call2(_bx_,gl2ctx,cst_TIMEOUT_IGNORED),
     max_client_wait_timeout_webgl=
      caml_call2(_bx_,gl2ctx,cst_MAX_CLIENT_WAIT_TIMEOUT_WE),
     Brr_canvas=
      [0,
       [0,
        is_2d,
        is_identity,
        inverse,
        multiply,
        m11,
        m12,
        m13,
        m14,
        m21,
        m22,
        m23,
        m24,
        m31,
        m32,
        m33,
        m34,
        m41,
        m42,
        m43,
        m44,
        a$1,
        b$1,
        c$0,
        d,
        e,
        f,
        to_float32_array,
        of_float32_array,
        to_float64_array,
        of_float64_array],
       [0,v$14,tr$1,to_json$2,x,y,z,w],
       [0,
        create$13,
        of_el$1,
        to_el$1,
        w$0,
        h,
        set_w,
        set_h,
        set_size_to_layout_size,
        image_encode,
        to_data_url,
        to_blob,
        capture_stream$0],
       [0,
        Fill_rule,
        Image_smoothing_quality,
        Line_cap,
        Line_join,
        Text_align,
        Text_baseline,
        Text_direction,
        Composite_op,
        Repeat,
        [0,
         create$14,
         of_svg,
         of_path,
         add$0,
         close$6,
         move_to,
         line_to,
         qcurve_to,
         ccurve_to,
         arc_to,
         arc,
         rect,
         ellipse],
        image_src_of_el,
        image_src_of_jv,
        attrs_alpha,
        attrs_desynchronized,
        create$15,
        create$15,
        canvas$1,
        attrs,
        save,
        restore,
        image_smoothing_enabled,
        set_image_smoothing_enabled,
        image_smoothing_quality,
        set_image_smoothing_quality,
        global_alpha,
        set_global_alpha,
        global_composite_op,
        set_global_composite_op,
        filter$0,
        set_filter,
        get_transform,
        set_transform,
        set_transform$0,
        reset_transform,
        transform,
        transform$0,
        translate,
        rotate,
        scale,
        set_stroke_style,
        set_fill_style,
        color$1,
        gradient_style,
        linear_gradient,
        radial_gradient,
        pattern_style,
        pattern,
        line_width,
        set_line_width,
        line_cap,
        set_line_cap,
        line_join,
        set_line_join,
        miter_limit,
        set_miter_limit,
        line_dash,
        set_line_dash,
        line_dash_offset,
        set_line_dash_offset,
        shadow_blur,
        set_shadow_blur,
        shadow_offset_x,
        set_shadow_offset_x,
        shadow_offset_y,
        set_shadow_offset_y,
        shadow_color,
        set_shadow_color,
        font$0,
        set_font,
        text_align,
        set_text_align,
        text_baseline,
        set_text_baseline,
        text_direction,
        set_text_direction,
        clear_rect,
        fill_rect,
        stroke_rect,
        fill$0,
        stroke,
        clip,
        draw_focus_if_needed,
        scroll_path_into_view,
        is_point_in_fill,
        is_point_in_stroke,
        fill_text,
        stroke_text,
        Text_metrics,
        measure_text,
        draw_image,
        draw_image_in_rect,
        draw_sub_image_in_rect,
        [0,create$16,w$1,h$0,data$5],
        create_image_data,
        get_image_data,
        put_image_data,
        put_sub_image_data],
       [0,
        [0,
         Power_preference,
         v$15,
         alpha,
         depth,
         stencil,
         antialias,
         premultiplied_alpha,
         preserve_drawing_buffer,
         power_preference,
         desynchronized],
        create$17,
        create$17,
        canvas$2,
        drawing_buffer_width,
        drawing_buffer_height,
        attrs$0,
        is_context_lost,
        get_supported_extensions,
        get_extension,
        Active_info,
        Shader_precision_format,
        Tex_image_source,
        active_texture,
        attach_shader,
        begin_query,
        begin_transform_feedback,
        bind_attrib_location,
        bind_buffer,
        bind_buffer_base,
        bind_buffer_range,
        bind_framebuffer,
        bind_renderbuffer,
        bind_sampler,
        bind_texture,
        bind_transform_feedback,
        bind_vertex_array,
        blend_color,
        blend_equation,
        blend_equation_separate,
        blend_func,
        blend_func_separate,
        blit_framebuffer,
        buffer_data,
        buffer_data_size,
        buffer_sub_data,
        check_framebuffer_status,
        clear$3,
        clear_bufferfi,
        clear_bufferfv,
        clear_bufferiv,
        clear_bufferuiv,
        clear_color,
        clear_depth,
        clear_stencil,
        client_wait_sync,
        color_mask,
        compile_shader,
        compressed_tex_image2d,
        compressed_tex_image2d_size,
        compressed_tex_image3d,
        compressed_tex_image3d_size,
        compressed_tex_sub_image2d,
        compressed_tex_sub_image2d_siz,
        compressed_tex_sub_image3d,
        compressed_tex_sub_image3d_siz,
        copy_buffer_sub_data,
        copy_tex_image2d,
        copy_tex_sub_image2d,
        copy_tex_sub_image3d,
        create_buffer,
        create_framebuffer,
        create_program,
        create_query,
        create_renderbuffer,
        create_sampler,
        create_shader,
        create_texture,
        create_transform_feedback,
        create_vertex_array,
        cull_face,
        delete_buffer,
        delete_framebuffer,
        delete_program,
        delete_query,
        delete_renderbuffer,
        delete_sampler,
        delete_shader,
        delete_sync,
        delete_texture,
        delete_transform_feedback,
        delete_vertex_array,
        depth_func,
        depth_mask,
        detach_shader,
        disable,
        disable_vertex_attrib_array,
        draw_arrays,
        draw_arrays_instanced,
        draw_buffers,
        draw_elements,
        draw_elements_instanced,
        draw_range_elements,
        enable,
        enable_vertex_attrib_array,
        end_query,
        end_transform_feedback,
        fence_sync,
        finish,
        flush,
        framebuffer_renderbuffer,
        framebuffer_texture2d,
        framebuffer_texture_layer,
        front_face,
        generate_mipmap,
        get_active_attrib,
        get_active_uniform,
        get_active_uniform_block_name,
        get_active_uniform_block_param,
        get_active_uniforms,
        get_attached_shaders,
        get_attrib_location,
        get_buffer_parameter,
        get_buffer_sub_data,
        get_error,
        get_frag_data_location,
        get_framebuffer_attachment_par,
        get_indexed_parameter,
        get_internalformat_parameter,
        get_parameter,
        get_program_info_log,
        get_program_parameter,
        get_query,
        get_query_parameter,
        get_renderbuffer_parameter,
        get_sampler_parameter,
        get_shader_info_log,
        get_shader_parameter,
        get_shader_precision_format,
        get_shader_source,
        get_sync_parameter,
        get_tex_parameter,
        get_transform_feedback_varying,
        get_uniform,
        get_uniform_block_index,
        get_uniform_indices,
        get_uniform_location,
        get_vertex_attrib,
        get_vertex_attrib_offset,
        hint,
        invalidate_framebuffer,
        invalidate_sub_framebuffer,
        is_buffer,
        is_enabled,
        is_framebuffer,
        is_program,
        is_query,
        is_renderbuffer,
        is_sampler,
        is_shader,
        is_texture,
        is_transform_feedback,
        is_vertex_array,
        line_width$0,
        link_program,
        pause_transform_feedback,
        pixel_storei,
        polygon_offset,
        read_buffer,
        read_pixels_to_pixel_pack,
        read_pixels,
        renderbuffer_storage,
        renderbuffer_storage_multisamp,
        resume_transform_feedback,
        sample_coverage,
        sampler_parameterf,
        sampler_parameteri,
        scissor,
        shader_source,
        stencil_func,
        stencil_func_separate,
        stencil_mask,
        stencil_mask_separate,
        stencil_op,
        stencil_op_separate,
        tex_image2d,
        tex_image2d_of_source,
        tex_image2d_of_pixel_unpack,
        tex_image3d,
        tex_image3d_of_source,
        tex_image3d_of_pixel_unpack,
        tex_parameterf,
        tex_parameteri,
        tex_storage2d,
        tex_storage3d,
        tex_sub_image2d,
        tex_sub_image2d_of_source,
        tex_sub_image2d_of_pixel_unpac,
        tex_sub_image3d,
        tex_sub_image3d_of_source,
        tex_sub_image3d_of_pixel_unpac,
        transform_feedback_varyings,
        uniform1f,
        uniform1fv,
        uniform1i,
        uniform1iv,
        uniform1ui,
        uniform1uiv,
        uniform2f,
        uniform2fv,
        uniform2i,
        uniform2iv,
        uniform2ui,
        uniform2uiv,
        uniform3f,
        uniform3fv,
        uniform3i,
        uniform3iv,
        uniform3ui,
        uniform3uiv,
        uniform4f,
        uniform4fv,
        uniform4i,
        uniform4iv,
        uniform4ui,
        uniform4uiv,
        uniform_block_binding,
        uniform_matrix2fv,
        uniform_matrix2x3fv,
        uniform_matrix2x4fv,
        uniform_matrix3fv,
        uniform_matrix3x2fv,
        uniform_matrix3x4fv,
        uniform_matrix4fv,
        uniform_matrix4x2fv,
        uniform_matrix4x3fv,
        use_program,
        validate_program,
        vertex_attrib1f,
        vertex_attrib1fv,
        vertex_attrib2f,
        vertex_attrib2fv,
        vertex_attrib3f,
        vertex_attrib3fv,
        vertex_attrib4f,
        vertex_attrib4fv,
        vertex_attrib_divisor,
        vertex_attrib_i4i,
        vertex_attrib_i4iv,
        vertex_attrib_i4ui,
        vertex_attrib_i4uiv,
        vertex_attrib_ipointer,
        vertex_attrib_pointer,
        viewport,
        wait_sync,
        active_attributes,
        active_texture$0,
        active_uniform_blocks,
        active_uniforms,
        aliased_line_width_range,
        aliased_point_size_range,
        alpha$0,
        alpha_bits,
        already_signaled,
        always,
        any_samples_passed,
        any_samples_passed_conservativ,
        array_buffer$2,
        array_buffer_binding,
        attached_shaders,
        back$0,
        blend,
        blend_color$0,
        blend_dst_alpha,
        blend_dst_rgb,
        blend_equation$0,
        blend_equation_alpha,
        blend_equation_rgb,
        blend_src_alpha,
        blend_src_rgb,
        blue_bits,
        bool$1,
        bool_vec2,
        bool_vec3,
        bool_vec4,
        browser_default_webgl,
        buffer_size,
        buffer_usage,
        byte$0,
        ccw,
        clamp_to_edge,
        color$2,
        color_attachment0,
        color_attachment1,
        color_attachment10,
        color_attachment11,
        color_attachment12,
        color_attachment13,
        color_attachment14,
        color_attachment15,
        color_attachment2,
        color_attachment3,
        color_attachment4,
        color_attachment5,
        color_attachment6,
        color_attachment7,
        color_attachment8,
        color_attachment9,
        color_buffer_bit,
        color_clear_value,
        color_writemask,
        compare_ref_to_texture,
        compile_status,
        compressed_texture_formats,
        condition_satisfied,
        constant_alpha,
        constant_color,
        context_lost_webgl,
        copy_read_buffer,
        copy_read_buffer_binding,
        copy_write_buffer,
        copy_write_buffer_binding,
        cull_face$0,
        cull_face_mode,
        current_program,
        current_query,
        current_vertex_attrib,
        cw,
        decr,
        decr_wrap,
        delete_status,
        depth$0,
        depth24_stencil8,
        depth32f_stencil8,
        depth_attachment,
        depth_bits,
        depth_buffer_bit,
        depth_clear_value,
        depth_component,
        depth_component16,
        depth_component24,
        depth_component32f,
        depth_func$0,
        depth_range,
        depth_stencil,
        depth_stencil_attachment,
        depth_test,
        depth_writemask,
        dither,
        dont_care,
        draw_buffer0,
        draw_buffer1,
        draw_buffer10,
        draw_buffer11,
        draw_buffer12,
        draw_buffer13,
        draw_buffer14,
        draw_buffer15,
        draw_buffer2,
        draw_buffer3,
        draw_buffer4,
        draw_buffer5,
        draw_buffer6,
        draw_buffer7,
        draw_buffer8,
        draw_buffer9,
        draw_framebuffer,
        draw_framebuffer_binding,
        dst_alpha,
        dst_color,
        dynamic_copy,
        dynamic_draw,
        dynamic_read,
        element_array_buffer,
        element_array_buffer_binding,
        equal$0,
        fastest,
        float$3,
        float_32_unsigned_int_24_8_rev,
        float_mat2,
        float_mat2x3,
        float_mat2x4,
        float_mat3,
        float_mat3x2,
        float_mat3x4,
        float_mat4,
        float_mat4x2,
        float_mat4x3,
        float_vec2,
        float_vec3,
        float_vec4,
        fragment_shader,
        fragment_shader_derivative_hin,
        framebuffer,
        framebuffer_attachment_alpha_s,
        framebuffer_attachment_blue_si,
        framebuffer_attachment_color_e,
        framebuffer_attachment_compone,
        framebuffer_attachment_depth_s,
        framebuffer_attachment_green_s,
        framebuffer_attachment_object_$0,
        framebuffer_attachment_object_,
        framebuffer_attachment_red_siz,
        framebuffer_attachment_stencil,
        framebuffer_attachment_texture$0,
        framebuffer_attachment_texture$1,
        framebuffer_attachment_texture,
        framebuffer_binding,
        framebuffer_complete,
        framebuffer_default,
        framebuffer_incomplete_attachm,
        framebuffer_incomplete_dimensi,
        framebuffer_incomplete_missing,
        framebuffer_incomplete_multisa,
        framebuffer_unsupported,
        front,
        front_and_back,
        front_face$0,
        func_add,
        func_reverse_subtract,
        func_subtract,
        generate_mipmap_hint,
        gequal,
        greater,
        green_bits,
        half_float,
        high_float,
        high_int,
        implementation_color_read_form,
        implementation_color_read_type,
        incr,
        incr_wrap,
        int$3,
        int_2_10_10_10_rev,
        int_sampler_2d,
        int_sampler_2d_array,
        int_sampler_3d,
        int_sampler_cube,
        int_vec2,
        int_vec3,
        int_vec4,
        interleaved_attribs,
        invalid_enum,
        invalid_framebuffer_operation,
        invalid_index,
        invalid_operation,
        invalid_value,
        invert,
        keep,
        lequal,
        less,
        line_loop,
        line_strip,
        line_width$1,
        linear,
        linear_mipmap_linear,
        linear_mipmap_nearest,
        lines,
        link_status,
        low_float,
        low_int,
        luminance,
        luminance_alpha,
        max$2,
        max_3d_texture_size,
        max_array_texture_layers,
        max_client_wait_timeout_webgl,
        max_color_attachments,
        max_combined_fragment_uniform_,
        max_combined_texture_image_uni,
        max_combined_uniform_blocks,
        max_combined_vertex_uniform_co,
        max_cube_map_texture_size,
        max_draw_buffers,
        max_element_index,
        max_elements_indices,
        max_elements_vertices,
        max_fragment_input_components,
        max_fragment_uniform_blocks,
        max_fragment_uniform_component,
        max_fragment_uniform_vectors,
        max_program_texel_offset,
        max_renderbuffer_size,
        max_samples,
        max_server_wait_timeout,
        max_texture_image_units,
        max_texture_lod_bias,
        max_texture_size,
        max_transform_feedback_interle,
        max_transform_feedback_separat$0,
        max_transform_feedback_separat,
        max_uniform_block_size,
        max_uniform_buffer_bindings,
        max_varying_components,
        max_varying_vectors,
        max_vertex_attribs,
        max_vertex_output_components,
        max_vertex_texture_image_units,
        max_vertex_uniform_blocks,
        max_vertex_uniform_components,
        max_vertex_uniform_vectors,
        max_viewport_dims,
        medium_float,
        medium_int,
        min$1,
        min_program_texel_offset,
        mirrored_repeat,
        nearest,
        nearest_mipmap_linear,
        nearest_mipmap_nearest,
        never,
        nicest,
        no_error,
        none$0,
        notequal,
        object_type,
        one,
        one_minus_constant_alpha,
        one_minus_constant_color,
        one_minus_dst_alpha,
        one_minus_dst_color,
        one_minus_src_alpha,
        one_minus_src_color,
        out_of_memory,
        pack_alignment,
        pack_row_length,
        pack_skip_pixels,
        pack_skip_rows,
        pixel_pack_buffer,
        pixel_pack_buffer_binding,
        pixel_unpack_buffer,
        pixel_unpack_buffer_binding,
        points,
        polygon_offset_factor,
        polygon_offset_fill,
        polygon_offset_units,
        query_result,
        query_result_available,
        r11f_g11f_b10f,
        r16f,
        r16i,
        r16ui,
        r32f,
        r32i,
        r32ui,
        r8,
        r8_snorm,
        r8i,
        r8ui,
        rasterizer_discard,
        read_buffer$0,
        read_framebuffer,
        read_framebuffer_binding,
        red,
        red_bits,
        red_integer,
        renderbuffer,
        renderbuffer_alpha_size,
        renderbuffer_binding,
        renderbuffer_blue_size,
        renderbuffer_depth_size,
        renderbuffer_green_size,
        renderbuffer_height,
        renderbuffer_internal_format,
        renderbuffer_red_size,
        renderbuffer_samples,
        renderbuffer_stencil_size,
        renderbuffer_width,
        renderer,
        repeat$1,
        replace,
        rg,
        rg16f,
        rg16i,
        rg16ui,
        rg32f,
        rg32i,
        rg32ui,
        rg8,
        rg8_snorm,
        rg8i,
        rg8ui,
        rg_integer,
        rgb,
        rgb10_a2,
        rgb10_a2ui,
        rgb16f,
        rgb16i,
        rgb16ui,
        rgb32f,
        rgb32i,
        rgb32ui,
        rgb565,
        rgb5_a1,
        rgb8,
        rgb8_snorm,
        rgb8i,
        rgb8ui,
        rgb9_e5,
        rgb_integer,
        rgba,
        rgba16f,
        rgba16i,
        rgba16ui,
        rgba32f,
        rgba32i,
        rgba32ui,
        rgba4,
        rgba8,
        rgba8_snorm,
        rgba8i,
        rgba8ui,
        rgba_integer,
        sample_alpha_to_coverage,
        sample_buffers,
        sample_coverage$0,
        sample_coverage_invert,
        sample_coverage_value,
        sampler_2d,
        sampler_2d_array,
        sampler_2d_array_shadow,
        sampler_2d_shadow,
        sampler_3d,
        sampler_binding,
        sampler_cube,
        sampler_cube_shadow,
        samples,
        scissor_box,
        scissor_test,
        separate_attribs,
        shader_type,
        shading_language_version,
        short$0,
        signaled,
        signed_normalized,
        src_alpha,
        src_alpha_saturate,
        src_color,
        srgb,
        srgb8,
        srgb8_alpha8,
        static_copy,
        static_draw,
        static_read,
        stencil$0,
        stencil_attachment,
        stencil_back_fail,
        stencil_back_func,
        stencil_back_pass_depth_fail,
        stencil_back_pass_depth_pass,
        stencil_back_ref,
        stencil_back_value_mask,
        stencil_back_writemask,
        stencil_bits,
        stencil_buffer_bit,
        stencil_clear_value,
        stencil_fail,
        stencil_func$0,
        stencil_index8,
        stencil_pass_depth_fail,
        stencil_pass_depth_pass,
        stencil_ref,
        stencil_test,
        stencil_value_mask,
        stencil_writemask,
        stream_copy,
        stream_draw,
        stream_read,
        subpixel_bits,
        sync_condition,
        sync_fence,
        sync_flags,
        sync_flush_commands_bit,
        sync_gpu_commands_complete,
        sync_status,
        texture,
        texture0,
        texture1,
        texture10,
        texture11,
        texture12,
        texture13,
        texture14,
        texture15,
        texture16,
        texture17,
        texture18,
        texture19,
        texture2,
        texture20,
        texture21,
        texture22,
        texture23,
        texture24,
        texture25,
        texture26,
        texture27,
        texture28,
        texture29,
        texture3,
        texture30,
        texture31,
        texture4,
        texture5,
        texture6,
        texture7,
        texture8,
        texture9,
        texture_2d,
        texture_2d_array,
        texture_3d,
        texture_base_level,
        texture_binding_2d,
        texture_binding_2d_array,
        texture_binding_3d,
        texture_binding_cube_map,
        texture_compare_func,
        texture_compare_mode,
        texture_cube_map,
        texture_cube_map_negative_x,
        texture_cube_map_negative_y,
        texture_cube_map_negative_z,
        texture_cube_map_positive_x,
        texture_cube_map_positive_y,
        texture_cube_map_positive_z,
        texture_immutable_format,
        texture_immutable_levels,
        texture_mag_filter,
        texture_max_level,
        texture_max_lod,
        texture_min_filter,
        texture_min_lod,
        texture_wrap_r,
        texture_wrap_s,
        texture_wrap_t,
        timeout_expired,
        timeout_ignored,
        transform_feedback,
        transform_feedback_active,
        transform_feedback_binding,
        transform_feedback_buffer,
        transform_feedback_buffer_bind,
        transform_feedback_buffer_mode,
        transform_feedback_buffer_size,
        transform_feedback_buffer_star,
        transform_feedback_paused,
        transform_feedback_primitives_,
        transform_feedback_varyings$0,
        triangle_fan,
        triangle_strip,
        triangles,
        uniform_array_stride,
        uniform_block_active_uniform_i,
        uniform_block_active_uniforms,
        uniform_block_binding$0,
        uniform_block_data_size,
        uniform_block_index,
        uniform_block_referenced_by_fr,
        uniform_block_referenced_by_ve,
        uniform_buffer,
        uniform_buffer_binding,
        uniform_buffer_offset_alignmen,
        uniform_buffer_size,
        uniform_buffer_start,
        uniform_is_row_major,
        uniform_matrix_stride,
        uniform_offset,
        uniform_size,
        uniform_type,
        unpack_alignment,
        unpack_colorspace_conversion_w,
        unpack_flip_y_webgl,
        unpack_image_height,
        unpack_premultiply_alpha_webgl,
        unpack_row_length,
        unpack_skip_images,
        unpack_skip_pixels,
        unpack_skip_rows,
        unsignaled,
        unsigned_byte,
        unsigned_int,
        unsigned_int_10f_11f_11f_rev,
        unsigned_int_24_8,
        unsigned_int_2_10_10_10_rev,
        unsigned_int_5_9_9_9_rev,
        unsigned_int_sampler_2d,
        unsigned_int_sampler_2d_array,
        unsigned_int_sampler_3d,
        unsigned_int_sampler_cube,
        unsigned_int_vec2,
        unsigned_int_vec3,
        unsigned_int_vec4,
        unsigned_normalized,
        unsigned_short,
        unsigned_short_4_4_4_4,
        unsigned_short_5_5_5_1,
        unsigned_short_5_6_5,
        validate_status,
        vendor,
        version,
        vertex_array_binding,
        vertex_attrib_array_buffer_bin,
        vertex_attrib_array_divisor,
        vertex_attrib_array_enabled,
        vertex_attrib_array_integer,
        vertex_attrib_array_normalized,
        vertex_attrib_array_pointer,
        vertex_attrib_array_size,
        vertex_attrib_array_stride,
        vertex_attrib_array_type,
        vertex_shader,
        viewport$0,
        wait_failed,
        zero]];
    caml_register_global(2980,Brr_canvas,"Brr_canvas");
    var a_rate="a-rate",k_rate="k-rate",Automation_rate=[0,a_rate,k_rate];
    function descriptor(automation_rate,min_value,max_value,default_value,n)
     {var o={};
      o[cst_name$8] = n;
      caml_call3(_e_[4],o,cst_automationRate,automation_rate);
      caml_call3(Float[4],o,cst_minValue,min_value);
      caml_call3(Float[4],o,cst_maxValue,max_value);
      caml_call3(Float[4],o,cst_defaultValue,max_value);
      return o}
    function value$3(p){return caml_call2(Float[2],p,cst_value$2)}
    function set_value(p,v){return caml_call3(Float[3],p,cst_value$3,v)}
    function automation_rate(p)
     {return caml_call2(_e_[2],p,cst_automationRate$0)}
    function set_automation_rate(p,v)
     {return caml_call3(_e_[3],p,cst_automationRate$1,v)}
    function default_value(p)
     {return caml_call2(Float[2],p,cst_defaultValue$0)}
    function min_value(p){return caml_call2(Float[2],p,cst_minValue$0)}
    function max_value(p){return caml_call2(Float[2],p,cst_maxValue$0)}
    function set_value_at_time(p,v,t){p.setValueAtTime(v,t);return 0}
    function linear_ramp_to_value_at_time(p,v,t)
     {p.linearRampToValueAtTime(v,t);return 0}
    function exponential_ramp_to_value_at_t(p,v,t)
     {p.exponentialRampToValueAtTime(v,t);return 0}
    function set_target_at_time(p,v,t,r){p.setTargetAtTime(v,t,r);return 0}
    function set_value_curve_at_time(p,vs,t,d)
     {p.setValueCurveAtTime(vs,t,d);return 0}
    function cancel_scheduled_values(p,t){p.cancelScheduledValues(t);return 0}
    function cancel_and_hold_at_time(p,t){p.cancelAndHoldAtTime(t);return 0}
    var
     Param=
      [0,
       Automation_rate,
       descriptor,
       value$3,
       set_value,
       automation_rate,
       set_automation_rate,
       default_value,
       min_value,
       max_value,
       set_value_at_time,
       linear_ramp_to_value_at_time,
       exponential_ramp_to_value_at_t,
       set_target_at_time,
       set_value_curve_at_time,
       cancel_scheduled_values,
       cancel_and_hold_at_time];
    function position_x(l){return l.positionX()}
    function position_y(l){return l.positionY()}
    function position_z(l){return l.positionZ()}
    function forward_x(l){return l.forwardX()}
    function forward_y(l){return l.forwardY()}
    function forward_z(l){return l.forwardZ()}
    function up_x(l){return l.upX()}
    function up_y(l){return l.upY()}
    function up_z(l){return l.upZ()}
    var
     Listener=
      [0,
       position_x,
       position_y,
       position_z,
       forward_x,
       forward_y,
       forward_z,
       up_x,
       up_y,
       up_z];
    function add_module(w,url)
     {var _d9_=w.addModule(url);
      return of_promise$0(function(_d__){return 0},_d9_)}
    function register_processor(n,c)
     {target[cst_registerProcessor](n,c);return 0}
    function current_frame(param)
     {return caml_call2(Int[2],target,cst_currentFrame)}
    function current_time(param)
     {return caml_call2(Float[2],target,cst_currentTime$1)}
    function sample_rate$0(param)
     {return caml_call2(Float[2],target,cst_sampleRate)}
    var G=[0,register_processor,current_frame,current_time,sample_rate$0];
    function port$0(p){return p[cst_port$1]}
    var Processor=[0,port$0],Worklet=[0,add_module,G,Processor];
    function opts$3(cc,l,r,param)
     {return {"numberOfChannels":cc,"length":l,"sampleRate":r}}
    function create$18(opts){return new (target[cst_AudioBuffer])(opts)}
    function sample_rate$1(b){return caml_call2(Float[2],b,cst_sampleRate$0)}
    function length$6(b){return caml_call2(Int[2],b,cst_length$8)}
    function duration_s$0(b){return caml_call2(Float[2],b,cst_length$9)}
    function channel_count$0(b)
     {return caml_call2(Int[2],b,cst_numberOfChannels)}
    function get_channel_data(b,channel){return b.getChannelData(channel)}
    function copy_from_channel(opt,b,c,dst)
     {if(opt)var sth=opt[1],dst_start=sth;else var dst_start=0;
      b.copyFromChannel(dst,c,dst_start);
      return 0}
    function copy_to_channel(opt,b,src,c)
     {if(opt)var sth=opt[1],dst_start=sth;else var dst_start=0;
      b.copyToChannel(src,c,dst_start);
      return 0}
    var
     Buffer=
      [0,
       opts$3,
       create$18,
       sample_rate$1,
       length$6,
       duration_s$0,
       channel_count$0,
       get_channel_data,
       copy_from_channel,
       copy_to_channel],
     max$3="max",
     clamped_max="clamped-max",
     explicit="explicit",
     Channel_count_mode=[0,max$3,clamped_max,explicit],
     speakers="speakers",
     discrete="discrete",
     Channel_interpretation=[0,speakers,discrete];
    function context(n){return n[cst_context]}
    function input_count(n){return caml_call2(Int[2],n,cst_numberOfInputs)}
    function output_count(n){return caml_call2(Int[2],n,cst_numberOfOutputs)}
    function channel_count$1(n){return caml_call2(Int[2],n,cst_channelCount)}
    function set_channel_count(n,c)
     {return caml_call3(Int[3],n,cst_channelCount$0,c)}
    function channel_count_mode(n)
     {return caml_call2(_e_[2],n,cst_channelCountMode)}
    function set_channel_count_mode(n,m)
     {return caml_call3(_e_[3],n,cst_channelCountMode$0,m)}
    function channel_interpretation(n)
     {return caml_call2(_e_[2],n,cst_channelInterpretation)}
    function set_channel_interpretation(n,i)
     {return caml_call3(_e_[3],n,cst_channelInterpretation$0,i)}
    function connect_node(opt,_d8_,n,dst)
     {if(opt)var sth=opt[1],output=sth;else var output=0;
      if(_d8_)var sth$0=_d8_[1],input=sth$0;else var input=0;
      n.connect(dst,output,input);
      return 0}
    function connect_param(opt,n,dst)
     {if(opt)var sth=opt[1],output=sth;else var output=0;
      n.connect(dst,output);
      return 0}
    function disconnect(n){n.disconnect();return 0}
    function disconnect_node(output,input,n,dst)
     {var
       output$0=of_option(fn,function(_d7_){return _d7_},output),
       input$0=of_option(fn,function(_d6_){return _d6_},input);
      n.disconnect(dst,output$0,input$0);
      return 0}
    function disconnect_param(output,n,dst)
     {var output$0=of_option(fn,function(_d5_){return _d5_},output);
      n.disconnect(dst,output$0);
      return 0}
    function opts$4
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      fft_size,
      max_decibels,
      min_decibels,
      smoothing_time_constant,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$1,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$1,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$1,channel_interpretation);
      caml_call3(Int[4],o,cst_fftSize,fft_size);
      caml_call3(Float[4],o,cst_minDecibels,min_decibels);
      caml_call3(Float[4],o,cst_maxDecibels,max_decibels);
      caml_call3(Float[4],o,cst_smoothingTimeConstant,smoothing_time_constant);
      return o}
    function create$19(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_AnalyserNode])(c,opts)}
    function get_float_frequency_data(n,a)
     {n.getFloatFrequencyData(a);return 0}
    function get_byte_frequency_data(n,a){n.getByteFrequencyData(a);return 0}
    function get_float_time_domain_data(n,a)
     {n.getFloatTimeDomainData(a);return 0}
    function get_byte_time_domain_data(n,a)
     {n.getByteTimeDomainData(a);return 0}
    function fft_size(n){return caml_call2(Int[2],n,cst_fftSize$0)}
    function set_fft_size(n,v){return caml_call3(Int[3],n,cst_fftSize$1,v)}
    function frequency_bin_count(n)
     {return caml_call2(Int[2],n,cst_frequencyBinCount)}
    function min_decibels(n){return caml_call2(Float[2],n,cst_minDecibels$0)}
    function set_min_decibels(n,v)
     {return caml_call3(Float[3],n,cst_minDecibels$1,v)}
    function max_decibels(n){return caml_call2(Float[2],n,cst_maxDecibels$0)}
    function set_max_decibels(n,v)
     {return caml_call3(Float[3],n,cst_maxDecibels$1,v)}
    function smoothing_time_constant(n)
     {return caml_call2(Float[2],n,cst_smoothingTimeConstant$0)}
    function set_smoothing_time_constant(n,v)
     {return caml_call3(Float[3],n,cst_smoothingTimeConstant$1,v)}
    var
     Analyser=
      [0,
       opts$4,
       create$19,
       get_float_frequency_data,
       get_byte_frequency_data,
       get_float_time_domain_data,
       get_byte_time_domain_data,
       fft_size,
       set_fft_size,
       frequency_bin_count,
       min_decibels,
       set_min_decibels,
       max_decibels,
       set_max_decibels,
       smoothing_time_constant,
       set_smoothing_time_constant],
     lowpass="lowpass",
     highpass="highpass",
     bandpass="bandpass",
     lowshelf="lowshelf",
     highshelf="highshelf",
     peaking="peaking",
     notch="notch",
     allpass="allpass",
     Type$3=
      [0,lowpass,highpass,bandpass,lowshelf,highshelf,peaking,notch,allpass];
    function opts$5
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      type,
      q,
      detune,
      frequency,
      gain,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$2,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$2,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$2,channel_interpretation);
      caml_call3(_e_[4],o,cst_type$7,type);
      caml_call3(Float[4],o,cst_Q,q);
      caml_call3(Float[4],o,cst_detune,detune);
      caml_call3(Float[4],o,cst_frequency,frequency);
      caml_call3(Float[4],o,cst_gain,gain);
      return o}
    function create$20(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_BiquadFilterNode])(c,opts)}
    function type$10(n){return caml_call2(_e_[2],n,cst_type$8)}
    function set_type(n,v){return caml_call3(_e_[3],n,cst_type$9,v)}
    function detune(n){return n.detune()}
    function frequency(n){return n.frequency()}
    function q$1(n){return n.Q()}
    function gain(n){return n.gain()}
    function get_frequency_response(n,f,m,p)
     {n.getFrequencyResponse(f,m,p);return 0}
    var
     Biquad_filter=
      [0,
       Type$3,
       opts$5,
       create$20,
       type$10,
       set_type,
       detune,
       frequency,
       q$1,
       gain,
       get_frequency_response];
    function opts$6
     (buffer,detune,loop,loop_start,loop_end,playback_rate,param)
     {var o={};
      set_if_some(o,cst_buffer$0,buffer);
      caml_call3(Float[4],o,cst_detune$0,detune);
      caml_call3(Bool[4],o,cst_loop$1,loop);
      caml_call3(Float[4],o,cst_loop_start,loop_start);
      caml_call3(Float[4],o,cst_loop_end,loop_end);
      caml_call3(Float[4],o,cst_playbackRate$1,playback_rate);
      return o}
    function create$21(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_AudioBufferSourceNode])(c,opts)}
    function buffer$0(n)
     {return find_map(function(_d4_){return _d4_},n,cst_buffer$1)}
    function set_buffer(n,v)
     {return n[cst_buffer$2] = of_option(null$0,function(_d3_){return _d3_},v)}
    function playback_rate$0(n){return n[cst_playbackRate$2]}
    function detune$0(n){return n[cst_detune$1]}
    function loop$0(n){return caml_call2(Bool[2],n,cst_loop$2)}
    function set_loop$0(n,b){return caml_call3(Bool[3],n,cst_loop$3,b)}
    function loop_start(n){return caml_call2(Float[2],n,cst_loopStart)}
    function set_loop_start(n,v)
     {return caml_call3(Float[3],n,cst_loopStart$0,v)}
    function loop_end(n){return caml_call2(Float[2],n,cst_loopEnd)}
    function set_loop_end(n,v){return caml_call3(Float[3],n,cst_loopEnd$0,v)}
    function start$4(t,o,d,n)
     {var
       t$0=of_option(fn,function(_d2_){return _d2_},t),
       o$0=of_option(fn,function(_d1_){return _d1_},o),
       d$0=of_option(fn,function(_d0_){return _d0_},d);
      n.start(t$0,o$0,d$0);
      return 0}
    function stop$2(t,n)
     {var t$0=of_option(fn,function(_dZ_){return _dZ_},t);
      n.stop(t$0);
      return 0}
    var
     Buffer_source=
      [0,
       opts$6,
       create$21,
       buffer$0,
       set_buffer,
       playback_rate$0,
       detune$0,
       loop$0,
       set_loop$0,
       loop_start,
       set_loop_start,
       loop_end,
       set_loop_end,
       start$4,
       stop$2];
    function opts$7
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      input_count,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$3,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$3,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$3,channel_interpretation);
      caml_call3(Int[4],o,cst_numberOfInputs$0,input_count);
      return o}
    function create$22(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_ChannelMergerNode])(c,opts)}
    var Channel_merger=[0,opts$7,create$22];
    function opts$8
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      output_count,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$4,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$4,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$4,channel_interpretation);
      caml_call3(Int[4],o,cst_numberOfOutput,output_count);
      return o}
    function create$23(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_ChannelSplitterNode])(c,opts)}
    var Channel_splitter=[0,opts$8,create$23];
    function opts$9(offset,param)
     {var o={};caml_call3(Float[4],o,cst_offset,offset);return o}
    function create$24(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_ConstantSourceNode])(c,opts)}
    function offset(n){return n[cst_offset$0]}
    function start$5(t,n)
     {var t$0=of_option(fn,function(_dY_){return _dY_},t);
      n.start(t$0);
      return 0}
    function stop$3(t,n)
     {var t$0=of_option(fn,function(_dX_){return _dX_},t);
      n.stop(t$0);
      return 0}
    var Constant_source=[0,opts$9,create$24,offset,start$5,stop$3];
    function opts$10
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      buffer,
      disable_normalization,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$5,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$5,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$5,channel_interpretation);
      set_if_some(o,cst_buffer$3,buffer);
      caml_call3(Bool[4],o,cst_disableNormalization,disable_normalization);
      return o}
    function create$25(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_ConvolverNode])(c,opts)}
    function buffer$1(n)
     {return find_map(function(_dW_){return _dW_},n,cst_buffer$4)}
    function set_buffer$0(n,v)
     {return n[cst_buffer$5] = of_option(null$0,function(_dV_){return _dV_},v)}
    function normalize(n){return caml_call2(Bool[2],n,cst_normalize)}
    function set_normalize(n,b)
     {return caml_call3(Bool[3],n,cst_normalize$0,b)}
    var
     Convolver=
      [0,opts$10,create$25,buffer$1,set_buffer$0,normalize,set_normalize];
    function opts$11
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      delay_time,
      max_delay_time,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$6,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$6,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$6,channel_interpretation);
      caml_call3(Float[4],o,cst_delayTime,delay_time);
      caml_call3(Float[4],o,cst_maxDelayTime,max_delay_time);
      return o}
    function create$26(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_DelayNode])(c,opts)}
    function delay_time(n){return n[cst_delayTime$0]}
    var Delay=[0,opts$11,create$26,delay_time];
    function max_channel_count(n)
     {return caml_call2(Int[2],n,cst_maxChannelCount)}
    var Destination$0=[0,max_channel_count];
    function opts$12
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      attack,
      knee,
      ratio,
      release,
      threshold,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$7,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$7,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$7,channel_interpretation);
      caml_call3(Float[4],o,cst_attack,attack);
      caml_call3(Float[4],o,cst_knee,knee);
      caml_call3(Float[4],o,cst_ratio,ratio);
      caml_call3(Float[4],o,cst_release,release);
      caml_call3(Float[4],o,cst_threshold,threshold);
      return o}
    function create$27(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_DynamicsCompressorNode])(c,opts)}
    function attack(n){return n[cst_attack$0]}
    function knee(n){return n[cst_knee$0]}
    function ratio(n){return n[cst_ratio$0]}
    function reduction(n){return caml_call2(Float[2],n,cst_reduction)}
    function release(n){return n[cst_release$0]}
    function threshold(n){return n[cst_threshold$0]}
    var
     Dynamics_compressor=
      [0,opts$12,create$27,attack,knee,ratio,reduction,release,threshold];
    function opts$13
     (channel_count,channel_count_mode,channel_interpretation,gain,param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$8,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$8,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$8,channel_interpretation);
      caml_call3(Float[4],o,cst_gain$0,gain);
      return o}
    function create$28(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_GainNode])(c,opts)}
    function gain$0(n){return n[cst_gain$1]}
    var Gain=[0,opts$13,create$28,gain$0];
    function opts$14
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      feedforward,
      feedback,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$9,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$9,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$9,channel_interpretation);
      o[cst_feedforward] = feedforward;
      o[cst_feedback] = feedback;
      return o}
    function create$29(c,opts){return new (target[cst_IIRFilterNode])(c,opts)}
    function get_frequency_response$0(n,f,m,p)
     {n.getFrequencyResponse(f,m,p);return 0}
    var Iir_filter=[0,opts$14,create$29,get_frequency_response$0];
    function opts$15(el,param){var o={};o[cst_mediaElement] = el;return o}
    function create$30(c,opts)
     {return new (target[cst_MediaElementAudioSourceNod])(c,opts)}
    function media_element(n){return n[cst_mediaElement$0]}
    var Media_element_source=[0,opts$15,create$30,media_element];
    function opts$16
     (channel_count,channel_count_mode,channel_interpretation,param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$10,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$10,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$10,channel_interpretation);
      return o}
    function create$31(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_MediaStreamAudioDestinatio])(c,opts)}
    function stream$2(n){return n[cst_stream$1]}
    var Media_stream_destination=[0,opts$16,create$31,stream$2];
    function opts$17(stream,param)
     {var o={};o[cst_mediaStream] = stream;return o}
    function create$32(c,opts)
     {return new (target[cst_MediaStreamAudioSourceNode])(c,opts)}
    function media_stream(n){return n[cst_mediaStream$0]}
    var Media_stream_source=[0,opts$17,create$32,media_stream];
    function opts$18(stream,param)
     {var o={};o[cst_mediaStreamTrack] = stream;return o}
    function create$33(c,opts)
     {return new (target[cst_MediaStreamTrackAudioSourc])(c,opts)}
    var Media_stream_track_source=[0,opts$18,create$33];
    function opts$19(disable_normalization,real,imag,param)
     {var o={};
      caml_call3(Bool[4],o,cst_disableNormalization$0,disable_normalization);
      o[cst_real] = of_option(fn,function(_dU_){return _dU_},real);
      o[cst_imag] = of_option(fn,function(_dT_){return _dT_},imag);
      return o}
    function create$34(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_PeriodicWave])(c,opts)}
    var
     Periodic_wave=[0,opts$19,create$34],
     sine="sine",
     square$0="square",
     sawtooth="sawtooth",
     triangle="triangle",
     custom="custom",
     Type$4=[0,sine,square$0,sawtooth,triangle,custom];
    function opts$20
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      type,
      frequency,
      detune,
      periodic_wave,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$11,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$11,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$11,channel_interpretation);
      caml_call3(_e_[4],o,cst_type$10,type);
      caml_call3(Float[4],o,cst_frequency$0,frequency);
      caml_call3(Float[4],o,cst_detune$2,detune);
      set_if_some(o,cst_periodicWave,periodic_wave);
      return o}
    function create$35(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_OscillatorNode])(c,opts)}
    function type$11(n){return caml_call2(_e_[2],n,cst_type$11)}
    function set_type$0(n,v){return caml_call3(_e_[3],n,cst_type$12,v)}
    function detune$1(n){return n.detune()}
    function frequency$0(n){return n.frequency()}
    function set_periodic_wave(n,w){n.setPeriodicWave(w);return 0}
    function start$6(t,n)
     {var t$0=of_option(fn,function(_dS_){return _dS_},t);
      n.start(t$0);
      return 0}
    function stop$4(t,n)
     {var t$0=of_option(fn,function(_dR_){return _dR_},t);
      n.stop(t$0);
      return 0}
    var
     Oscillator=
      [0,
       Periodic_wave,
       Type$4,
       opts$20,
       create$35,
       type$11,
       set_type$0,
       detune$1,
       frequency$0,
       set_periodic_wave,
       start$6,
       stop$4],
     equalpower="equalpower",
     hrtf="HRTF",
     Panning_model=[0,equalpower,hrtf],
     linear$0="linear",
     inverse$0="inverse",
     exponential="exponential",
     Distance_model=[0,linear$0,inverse$0,exponential];
    function opts$21
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      panning_model,
      distance_model,
      position_x,
      position_y,
      position_z,
      orientation_x,
      orientation_y,
      orientation_z,
      ref_distance,
      max_distance,
      rolloff_factor,
      cone_inner_angle,
      cone_outer_angle,
      cone_outer_gain,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$12,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$12,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$12,channel_interpretation);
      caml_call3(_e_[4],o,cst_panningModel,panning_model);
      caml_call3(_e_[4],o,cst_distanceModel,distance_model);
      caml_call3(Float[4],o,cst_positionX,position_x);
      caml_call3(Float[4],o,cst_positionY,position_y);
      caml_call3(Float[4],o,cst_positionZ,position_z);
      caml_call3(Float[4],o,cst_orientationX,orientation_x);
      caml_call3(Float[4],o,cst_orientationY,orientation_y);
      caml_call3(Float[4],o,cst_orientationZ,orientation_z);
      caml_call3(Float[4],o,cst_refDistance,ref_distance);
      caml_call3(Float[4],o,cst_maxDistance,max_distance);
      caml_call3(Float[4],o,cst_rolloff_factor,rolloff_factor);
      caml_call3(Float[4],o,cst_cone_inner_angle,cone_inner_angle);
      caml_call3(Float[4],o,cst_cone_outer_angle,cone_outer_angle);
      caml_call3(Float[4],o,cst_cone_outer_gain,cone_outer_gain);
      return o}
    function create$36(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_PannerNode])(c,opts)}
    function panning_model(n){return caml_call2(_e_[2],n,cst_panningModel$0)}
    function set_panning_model(n,v)
     {return caml_call3(_e_[3],n,cst_panningModel$1,v)}
    function distance_model(n)
     {return caml_call2(_e_[2],n,cst_distanceModel$0)}
    function set_distance_model(n,v)
     {return caml_call3(_e_[3],n,cst_distanceModel$1,v)}
    function position_x$0(n){return n[cst_positionX$0]}
    function position_y$0(n){return n[cst_positionY$0]}
    function position_z$0(n){return n[cst_positionZ$0]}
    function orientation_x(n){return n[cst_orientationX$0]}
    function orientation_y(n){return n[cst_orientationY$0]}
    function orientation_z(n){return n[cst_orientationZ$0]}
    function ref_distance(n){return caml_call2(Float[2],n,cst_refDistance$0)}
    function set_ref_distance(n,v)
     {return caml_call3(Float[3],n,cst_refDistance$1,v)}
    function max_distance(n){return caml_call2(Float[2],n,cst_maxDistance$0)}
    function set_max_distance(n,v)
     {return caml_call3(Float[3],n,cst_maxDistance$1,v)}
    function cone_inner_angle(n)
     {return caml_call2(Float[2],n,cst_coneInnerAngle)}
    function set_cone_inner_angle(n,v)
     {return caml_call3(Float[3],n,cst_coneInnerAngle$0,v)}
    function cone_outer_angle(n)
     {return caml_call2(Float[2],n,cst_coneOuterAngle)}
    function set_cone_outer_angle(n,v)
     {return caml_call3(Float[3],n,cst_coneOuterAngle$0,v)}
    function cone_outer_gain(n)
     {return caml_call2(Float[2],n,cst_coneOuterGain)}
    function set_cone_outer_gain(n,v)
     {return caml_call3(Float[3],n,cst_coneOuterGain$0,v)}
    var
     Panner=
      [0,
       Panning_model,
       Distance_model,
       opts$21,
       create$36,
       panning_model,
       set_panning_model,
       distance_model,
       set_distance_model,
       position_x$0,
       position_y$0,
       position_z$0,
       orientation_x,
       orientation_y,
       orientation_z,
       ref_distance,
       set_ref_distance,
       max_distance,
       set_max_distance,
       cone_inner_angle,
       set_cone_inner_angle,
       cone_outer_angle,
       set_cone_outer_angle,
       cone_outer_gain,
       set_cone_outer_gain];
    function opts$22
     (channel_count,channel_count_mode,channel_interpretation,pan,param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$13,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$13,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$13,channel_interpretation);
      caml_call3(Float[4],o,cst_pan,pan);
      return o}
    function create$37(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_StereoPannerNode])(c,opts)}
    function pan(n){return n[cst_pan$0]}
    var
     Stereo_panner=[0,opts$22,create$37,pan],
     none$1="none",
     mul_2x="2x",
     mul_4x="4x",
     Oversample=[0,none$1,mul_2x,mul_4x];
    function opts$23
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      curve,
      oversample,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$14,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$14,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$14,channel_interpretation);
      o[cst_curve] = of_option(fn,function(_dQ_){return _dQ_},curve);
      caml_call3(_e_[4],o,cst_oversample,oversample);
      return o}
    function create$38(opt,c)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_WaveShaperNode])(c,opts)}
    function curve(n)
     {var _dO_=n[cst_curve$0];
      return to_option(function(_dP_){return _dP_},_dO_)}
    function set_curve(n,v)
     {return n[cst_curve$1] = of_option(null$0,function(_dN_){return _dN_},v)}
    function oversample(n){return caml_call2(_e_[2],n,cst_oversample$0)}
    function set_oversample(n,v)
     {return caml_call3(_e_[3],n,cst_oversample$1,v)}
    var
     Wave_shaper=
      [0,
       Oversample,
       opts$23,
       create$38,
       curve,
       set_curve,
       oversample,
       set_oversample];
    function opts$24
     (channel_count,
      channel_count_mode,
      channel_interpretation,
      input_count,
      output_count,
      output_channel_count,
      parameters,
      processor_options,
      param)
     {var o={};
      caml_call3(Int[4],o,cst_channelCount$15,channel_count);
      caml_call3(_e_[4],o,cst_channelCountMode$15,channel_count_mode);
      caml_call3(_e_[4],o,cst_channelInterpretation$15,channel_interpretation);
      caml_call3(Int[4],o,cst_numberOfInputs$1,input_count);
      caml_call3(Int[4],o,cst_numberOfOutputs$0,output_count);
      function _dJ_(_dM_){return _dM_}
      function _dK_(_dL_){return of_list(_dJ_,_dL_)}
      set_if_some
       (o,
        cst_outputChannelCount,
        caml_call2(Stdlib_Option[7],_dK_,output_channel_count));
      set_if_some(o,cst_parameterData,parameters);
      set_if_some(o,cst_processorOptions,processor_options);
      return o}
    function create$39(opt,c,name)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_AudioWorkletNode])(c,name,opts)}
    function parameter(n,k)
     {var p=n[cst_parameters].get(k);
      return is_none(p)?throw$0(0,"no parameter named ".concat(k)):p}
    function port$1(n){return n[cst_port$2]}
    var
     Worklet$0=[0,opts$24,create$39,parameter,port$1],
     Node=
      [0,
       Channel_count_mode,
       Channel_interpretation,
       context,
       input_count,
       output_count,
       channel_count$1,
       set_channel_count,
       channel_count_mode,
       set_channel_count_mode,
       channel_interpretation,
       set_channel_interpretation,
       connect_node,
       connect_param,
       disconnect,
       disconnect_node,
       disconnect_param,
       Analyser,
       Biquad_filter,
       Buffer_source,
       Channel_merger,
       Channel_splitter,
       Constant_source,
       Convolver,
       Delay,
       Destination$0,
       Dynamics_compressor,
       Gain,
       Iir_filter,
       Media_element_source,
       Media_stream_destination,
       Media_stream_source,
       Media_stream_track_source,
       Oscillator,
       Panner,
       Stereo_panner,
       Wave_shaper,
       Worklet$0];
    function context_time(t){return caml_call2(Float[2],t,cst_contextTime)}
    function performance_time(t)
     {return caml_call2(Float[2],t,cst_performanceTime)}
    var
     Timestamp=[0,context_time,performance_time],
     suspended="suspended",
     running="running",
     closed$0="closed",
     State$0=[0,suspended,running,closed$0];
    function decode_audio_data(c,b)
     {var _dH_=c.decodeAudioData(b);
      return of_promise$0(function(_dI_){return _dI_},_dH_)}
    function destination$0(c){return c[cst_destination$0]}
    function sample_rate$2(c){return caml_call2(Float[2],c,cst_sampleRate$1)}
    function current_time$0(c)
     {return caml_call2(Float[2],c,cst_currentTime$2)}
    function listener(c){return c[cst_listener]}
    function state$2(c){return caml_call2(_e_[2],c,cst_state$2)}
    function audio_worklet(c){return c[cst_audioWorklet]}
    var
     Base=
      [0,
       decode_audio_data,
       destination$0,
       sample_rate$2,
       current_time$0,
       listener,
       state$2,
       audio_worklet],
     balanced="balanced",
     interactive="interactive",
     playback="playback",
     Latency_category=[0,balanced,interactive,playback];
    function opts$25(latency_hint,sample_rate_hz,param)
     {var o={};
      if(latency_hint)
       {var _dF_=latency_hint[1];
        if(925478882 <= _dF_[1])
         var s=_dF_[2],_dG_=[0,s];
        else
         var c=_dF_[2],_dG_=[0,c];
        var latency_hint$0=_dG_}
      else
       var latency_hint$0=0;
      set_if_some(o,cst_latencyHint,latency_hint$0);
      caml_call3(Float[4],o,cst_sampleRate$2,sample_rate_hz);
      return o}
    function create$40(opt,param)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new (target[cst_AudioContext])(opts)}
    function base_latency(c){return caml_call2(Float[2],c,cst_baseLatency)}
    function output_latency(c)
     {return caml_call2(Float[2],c,cst_outputLatency)}
    function get_output_timestamp(c){return c.getOutputTimestamp()}
    function resume$1(c)
     {var _dD_=c.resume();return of_promise$0(function(_dE_){return 0},_dD_)}
    function suspend$0(c)
     {var _dB_=c.suspend();return of_promise$0(function(_dC_){return 0},_dB_)}
    function close$7(c)
     {var _dz_=c.close();return of_promise$0(function(_dA_){return 0},_dz_)}
    function opts$26(cc,l,r,param)
     {return {"numberOfChannels":cc,"length":l,"sampleRate":r}}
    function length$7(c){return caml_call2(Int[2],c,cst_length$10)}
    function create$41(opts)
     {return new (target[cst_OfflineAudioContext])(opts)}
    function start_rendering(c)
     {var _dx_=c.startRenderig();
      return of_promise$0(function(_dy_){return _dy_},_dx_)}
    function suspend$1(c,secs)
     {var _dv_=c.suspend(secs);
      return of_promise$0(function(_dw_){return 0},_dv_)}
    function resume$2(c)
     {var _dt_=c.resume();return of_promise$0(function(_du_){return 0},_dt_)}
    var
     Brr_webaudio=
      [0,
       [0,
        Param,
        Listener,
        Worklet,
        Buffer,
        Node,
        Timestamp,
        [0,
         State$0,
         Base,
         Latency_category,
         opts$25,
         create$40,
         base_latency,
         output_latency,
         get_output_timestamp,
         resume$1,
         suspend$0,
         close$7,
         [0,opts$26,create$41,length$7,start_rendering,suspend$1,resume$2]]]];
    caml_register_global(2981,Brr_webaudio,"Brr_webaudio");
    var
     public$0="public",
     private$0="private",
     secret="secret",
     Type$5=[0,public$0,private$0,secret],
     encrypt="encrypt",
     decrypt="decrypt",
     sign="sign",
     verify="verify",
     derive_key="deriveKey",
     derive_bits="deriveBits",
     wrap_key="wrapKey",
     unwrap_key="unwrapKey",
     Usage=
      [0,
       encrypt,
       decrypt,
       sign,
       verify,
       derive_key,
       derive_bits,
       wrap_key,
       unwrap_key],
     raw="raw",
     pkcs8="pkcs8",
     spki="spki",
     jwk="jwk",
     Format=[0,raw,pkcs8,spki,jwk];
    function type$12(k){return caml_call2(_e_[2],k,cst_type$13)}
    function extractable(k){return caml_call2(Bool[2],k,cst_extractable)}
    function algorithm(k){return k[cst_algorithm]}
    function usages(k){return caml_list_of_js_array(k[cst_usages])}
    function public$1(p){return p[cst_publicKey]}
    function private$1(p){return p[cst_privateKey]}
    var
     Crypto_key=
      [0,
       Type$5,
       Usage,
       Format,
       type$12,
       extractable,
       algorithm,
       usages,
       public$1,
       private$1];
    function v$16(n){return {"name":n}}
    function name$9(a){return caml_call2(_e_[2],a,cst_name$9)}
    var rsassa_pkcs1_v1_5="RSASSA-PKCS1-v1_5";
    function v$17(name,modulus_length,public_exponent,hash,param)
     {return {"name":name,
              "modulusLength":modulus_length,
              "publicExponent":public_exponent,
              "hash":hash}}
    function of_algo(_ds_){return _ds_}
    function name$10(a){return caml_call2(_e_[2],a,cst_name$10)}
    function modulus_length(a){return caml_call2(Int[2],a,cst_modulusLength)}
    function public_exponent(a){return a[cst_publicExponent]}
    function hash(a){return caml_call2(_e_[2],a,cst_hash$1)}
    var
     Rsa_hashed_key_gen_params=
      [0,v$17,of_algo,name$10,modulus_length,public_exponent,hash];
    function v$18(name,hash,param){return {"name":name,"hash":hash}}
    function of_algo$0(_dr_){return _dr_}
    function name$11(a){return caml_call2(_e_[2],a,cst_name$11)}
    function hash$0(a){return caml_call2(_e_[2],a,cst_hash$2)}
    var
     Rsa_hashed_import_params=[0,v$18,of_algo$0,name$11,hash$0],
     rsa_pss="RSA-PSS";
    function v$19(opt,salt_length,param)
     {if(opt)var sth=opt[1],name=sth;else var name=rsa_pss;
      return {"name":name,"saltLength":salt_length}}
    function of_algo$1(_dq_){return _dq_}
    function name$12(a){return caml_call2(_e_[2],a,cst_name$12)}
    function salt_length(a){return caml_call2(Int[2],a,cst_saltLength)}
    var
     Rsa_pss_params=[0,v$19,of_algo$1,name$12,salt_length],
     rsa_oaep="RSA-OAEP";
    function v$20(opt,label,param)
     {if(opt)var sth=opt[1],name=sth;else var name=rsa_oaep;
      if(label)var l=label[1],label$0=l;else var label$0=fn;
      return {"name":name,"label":label$0}}
    function of_algo$2(_dp_){return _dp_}
    function name$13(a){return caml_call2(_e_[2],a,cst_name$13)}
    function label$3(a)
     {var _dn_=a[cst_label$1];
      return to_option(function(_do_){return _do_},_dn_)}
    var Rsa_oaep_params=[0,v$20,of_algo$2,name$13,label$3],ecdsa="ECDSA";
    function v$21(name,named_curve,param)
     {return {"name":name,"namedCurve":named_curve}}
    function of_algo$3(_dm_){return _dm_}
    function name$14(a){return caml_call2(_e_[2],a,cst_name$14)}
    function named_curve(a){return caml_call2(_e_[2],a,cst_namedCurve)}
    var Ec_key_gen_params=[0,v$21,of_algo$3,name$14,named_curve];
    function v$22(name,named_curve,param)
     {return {"name":name,"namedCurve":named_curve}}
    function of_algo$4(_dl_){return _dl_}
    function name$15(a){return caml_call2(_e_[2],a,cst_name$15)}
    function named_curve$0(a){return caml_call2(_e_[2],a,cst_namedCurve$0)}
    var Ec_key_import_params=[0,v$22,of_algo$4,name$15,named_curve$0];
    function v$23(name,hash,param){return {"name":name,"hash":hash}}
    function of_algo$5(_dk_){return _dk_}
    function name$16(a){return caml_call2(_e_[2],a,cst_name$16)}
    function hash$1(a){return caml_call2(_e_[2],a,cst_hash$3)}
    var Ecdsa_params=[0,v$23,of_algo$5,name$16,hash$1],ecdh="ECDH";
    function v$24(name,public$0,param){return {"name":name,"public":public$0}}
    function of_algo$6(_dj_){return _dj_}
    function name$17(a){return caml_call2(_e_[2],a,cst_name$17)}
    function public$2(a){return a[cst_public]}
    var
     Ecdh_key_derive_params=[0,v$24,of_algo$6,name$17,public$2],
     aes_ctr="AES-CTR";
    function v$25(name,length,param){return {"name":name,"length":length}}
    function of_algo$7(_di_){return _di_}
    function name$18(a){return caml_call2(_e_[2],a,cst_name$18)}
    function length$8(a){return caml_call2(Int[2],a,cst_length$11)}
    var Aes_key_gen_params=[0,v$25,of_algo$7,name$18,length$8];
    function v$26(opt,counter,length,param)
     {if(opt)var sth=opt[1],name=sth;else var name=aes_ctr;
      return {"name":name,"counter":counter,"length":length}}
    function of_algo$8(_dh_){return _dh_}
    function name$19(a){return caml_call2(_e_[2],a,cst_name$19)}
    function counter(a){return a[cst_counter]}
    function length$9(a){return caml_call2(Int[2],a,cst_length$12)}
    var
     Aes_ctr_params=[0,v$26,of_algo$8,name$19,counter,length$9],
     aes_cbc="AES-CBC";
    function v$27(opt,iv,param)
     {if(opt)var sth=opt[1],name=sth;else var name=aes_cbc;
      return {"name":name,"iv":iv}}
    function of_algo$9(_dg_){return _dg_}
    function name$20(a){return caml_call2(_e_[2],a,cst_name$20)}
    function iv(a){return a[cst_iv]}
    var Aes_cbc_params=[0,v$27,of_algo$9,name$20,iv],aes_gcm="AES-GCM";
    function v$28(opt,iv,additional_data,tag_length,param)
     {if(opt)var sth=opt[1],name=sth;else var name=aes_cbc;
      if(additional_data)var a=additional_data[1],add=a;else var add=fn;
      if(tag_length)var l=tag_length[1],tlen=l;else var tlen=fn;
      return {"name":name,"iv":iv,"additionalData":add,"tagLength":tlen}}
    function of_algo$10(_df_){return _df_}
    function name$21(a){return caml_call2(_e_[2],a,cst_name$21)}
    function iv$0(a){return a[cst_iv$0]}
    function additional_data(a)
     {return find_map(function(_de_){return _de_},a,cst_additionalData)}
    function tag_length(a)
     {return find_map(function(_dd_){return _dd_},a,cst_tagLength)}
    var
     Aes_gcm_params=
      [0,v$28,of_algo$10,name$21,iv$0,additional_data,tag_length],
     aes_kw="AES-KW",
     hmac="HMAC";
    function v$29(opt,length,hash,param)
     {if(opt)var sth=opt[1],name=sth;else var name=hmac;
      if(length)var l=length[1],l$0=l;else var l$0=fn;
      return {"name":name,"hash":hash,"length":l$0}}
    function of_algo$11(_dc_){return _dc_}
    function name$22(a){return caml_call2(_e_[2],a,cst_name$22)}
    function hash$2(a){return caml_call2(_e_[2],a,cst_hash$4)}
    function length$10(a)
     {return find_map(function(_db_){return _db_},a,cst_length$13)}
    var
     Hmac_key_gen_params=[0,v$29,of_algo$11,name$22,hash$2,length$10],
     sha_1="SHA-1",
     sha_256="SHA-256",
     sha_384="SHA-384",
     sha_512="SHA-512",
     hkdf="HKDF";
    function v$30(opt,hash,salt,info,param)
     {if(opt)var sth=opt[1],name=sth;else var name=hkdf;
      return {"name":name,"hash":hash,"salt":salt,"info":info}}
    function of_algo$12(_da_){return _da_}
    function name$23(a){return caml_call2(_e_[2],a,cst_name$23)}
    function hash$3(a){return caml_call2(_e_[2],a,cst_hash$5)}
    function salt(a){return a[cst_salt]}
    function info$0(a){return a[cst_info$0]}
    var
     Hkdf_params=[0,v$30,of_algo$12,name$23,hash$3,salt,info$0],
     pbkdf2="PBKDF2";
    function v$31(opt,hash,salt,iterations,param)
     {if(opt)var sth=opt[1],name=sth;else var name=pbkdf2;
      return {"name":name,"hash":hash,"salt":salt,"iterations":iterations}}
    function of_algo$13(_c$_){return _c$_}
    function name$24(a){return caml_call2(_e_[2],a,cst_name$24)}
    function hash$4(a){return caml_call2(_e_[2],a,cst_hash$6)}
    function salt$0(a){return a[cst_salt$0]}
    function iterations(a){return caml_call2(Int[2],a,cst_iterations)}
    var Pbkdf2_params=[0,v$31,of_algo$13,name$24,hash$4,salt$0,iterations];
    function encrypt$0(s,a,k,d)
     {var _c9_=s.encrypt(a,k,d);
      return of_promise$0(function(_c__){return _c__},_c9_)}
    function decrypt$0(s,a,k,d)
     {var _c7_=s.decrypt(a,k,d);
      return of_promise$0(function(_c8_){return _c8_},_c7_)}
    function digest(s,a,d)
     {var _c5_=s.digest(a,d);
      return of_promise$0(function(_c6_){return _c6_},_c5_)}
    function sign$0(s,a,k,d)
     {var _c3_=s.sign(a,k,d);
      return of_promise$0(function(_c4_){return _c4_},_c3_)}
    function verify$0(s,a,k,sig,d)
     {return of_promise$0(caml_js_to_bool,s.verify(a,k,sig,d))}
    function generate_key(s,a,extractable,usages)
     {var _c1_=s.generateKey(a,! ! extractable,caml_list_to_js_array(usages));
      return of_promise$0(function(_c2_){return _c2_},_c1_)}
    function generate_key_pair(s,a,extractable,usages)
     {var _cZ_=s.generateKey(a,! ! extractable,caml_list_to_js_array(usages));
      return of_promise$0(function(_c0_){return _c0_},_cZ_)}
    function derive_bits$0(s,a,k,l)
     {var _cX_=s.deriveBits(a,k,l);
      return of_promise$0(function(_cY_){return _cY_},_cX_)}
    function derive_key$0(s,a,k,derived,extractable,usages)
     {var
       _cV_=
        s.deriveKey(a,k,derived,! ! extractable,caml_list_to_js_array(usages));
      return of_promise$0(function(_cW_){return _cW_},_cV_)}
    function import_key(s,f,k,a,extractable,usages)
     {if(98868477 <= k[1])var k$0=k[2],k$1=k$0;else var b=k[2],k$1=b;
      var
       _cT_=
        s.importKey(f,k$1,a,! ! extractable,caml_list_to_js_array(usages));
      return of_promise$0(function(_cU_){return _cU_},_cT_)}
    function export_key(s,f,k)
     {var
       match=caml_equal(Crypto_key[3][4],f),
       ok=
        match
         ?function(v){return [0,98868477,v]}
         :function(v){return [0,86585632,v]};
      return of_promise$0(ok,s.exportKey(f,k))}
    function wrap_key$0(s,f,k,wrap_key,wrapper)
     {var _cR_=s.wrapKey(f,k,wrap_key,wrapper);
      return of_promise$0(function(_cS_){return _cS_},_cR_)}
    function unwrap_key$0(s,f,k,wrap_key,wrapper,unwrapped,extractable,usages)
     {var
       _cP_=
        s.unwrapKey
         (f,
          k,
          wrap_key,
          wrapper,
          unwrapped,
          ! ! extractable,
          caml_list_to_js_array(usages));
      return of_promise$0(function(_cQ_){return _cQ_},_cP_)}
    var crypto=target[cst_crypto];
    function subtle(c){return c[cst_subtle]}
    function set_random_values(c,a){c.getRandomValues(a);return 0}
    var
     Crypto=[0,crypto,subtle,set_random_values],
     Brr_webcrypto=
      [0,
       Crypto_key,
       [0,
        v$16,
        name$9,
        rsassa_pkcs1_v1_5,
        Rsa_hashed_key_gen_params,
        Rsa_hashed_import_params,
        rsa_pss,
        Rsa_pss_params,
        rsa_oaep,
        Rsa_oaep_params,
        ecdsa,
        Ec_key_gen_params,
        Ec_key_import_params,
        Ecdsa_params,
        ecdh,
        Ecdh_key_derive_params,
        aes_ctr,
        Aes_key_gen_params,
        Aes_ctr_params,
        aes_cbc,
        Aes_cbc_params,
        aes_gcm,
        Aes_gcm_params,
        aes_kw,
        hmac,
        Hmac_key_gen_params,
        Hmac_key_gen_params,
        sha_1,
        sha_256,
        sha_384,
        sha_512,
        hkdf,
        Hkdf_params,
        pbkdf2,
        Pbkdf2_params],
       [0,
        encrypt$0,
        decrypt$0,
        digest,
        sign$0,
        verify$0,
        generate_key,
        generate_key_pair,
        derive_bits$0,
        derive_key$0,
        export_key,
        import_key,
        wrap_key$0,
        unwrap_key$0],
       Crypto];
    caml_register_global(2982,Brr_webcrypto,"Brr_webcrypto");
    function as_target$2(_cO_){return _cO_}
    function open$2(p)
     {var _cM_=p.open();return of_promise$0(function(_cN_){return 0},_cM_)}
    function close$8(p)
     {var _cK_=p.close();return of_promise$0(function(_cL_){return 0},_cK_)}
    function get_nullable(p,prop){var v=p[prop];return is_none(v)?empty:v}
    function id$5(p){return caml_call2(_e_[2],p,cst_id$1)}
    function name$25(p){return get_nullable(p,cst_name$25)}
    function manufacturer(p){return get_nullable(p,cst_manufacturer)}
    function version$0(p){return get_nullable(p,cst_version)}
    function type$13(p){return caml_call2(_e_[2],p,cst_type$14)}
    function state$3(p){return caml_call2(_e_[2],p,cst_state$3)}
    function connection(p){return caml_call2(_e_[2],p,cst_connection)}
    function sub_of_port(subp,p)
     {var t=type$13(p);
      if(caml_equal(t,subp))return p;
      var exp="Excepted ".concat(subp).concat(" port but found: ").concat(t);
      return throw$0(0,exp.concat(t))}
    function as_target$3(_cJ_){return _cJ_}
    function as_port(_cI_){return _cI_}
    function of_port(p){return sub_of_port("input",p)}
    var Input$1=[0,as_target$3,as_port,of_port];
    function as_target$4(_cH_){return _cH_}
    function as_port$0(_cG_){return _cG_}
    function of_port$0(p){return sub_of_port("output",p)}
    function send(timestamp_ms,o,msg)
     {if(timestamp_ms)
       var t=timestamp_ms[1],args=[0,msg,t];
      else
       var args=[0,msg];
      try
       {caml_js_meth_call(o,cst_send,args);return _by_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== _a_)throw exn;
        var e=exn[2];
        return [1,e]}}
    function clear$4(o){o.clear();return 0}
    var Output=[0,as_target$4,as_port$0,of_port$0,send,clear$4];
    function inputs(a,f,acc)
     {var _cB_=a[cst_inputs],it=caml_call1(_c_[5],_cB_);
      function f$0(param,v,acc){return caml_call2(f,v,acc)}
      function _cC_(_cF_){return _cF_}
      function _cD_(_cE_){return _cE_}
      return caml_call5(_c_[8],_cD_,_cC_,f$0,it,acc)}
    function outputs(a,f,acc)
     {var _cw_=a[cst_outputs],it=caml_call1(_c_[5],_cw_);
      function f$0(param,v,acc){return caml_call2(f,v,acc)}
      function _cx_(_cA_){return _cA_}
      function _cy_(_cz_){return _cz_}
      return caml_call5(_c_[8],_cy_,_cx_,f$0,it,acc)}
    function opts$27(sysex,software,param)
     {var o={};
      caml_call3(Bool[4],o,cst_sysex,sysex);
      caml_call3(Bool[4],o,cst_software,software);
      return o}
    function of_navigator$2(opts,n)
     {if(opts)var opts$0=opts[1],args=[0,opts$0];else var args=[0];
      var _cu_=caml_js_meth_call(n,cst_requestMIDIAccess,args);
      return of_promise$0(function(_cv_){return _cv_},_cu_)}
    var Access=[0,inputs,outputs,opts$27,of_navigator$2];
    function data$6(e){return e[cst_data$6]}
    var Message=[0,data$6],midimessage="midimessage";
    function port$2(e){return e[cst_port$3]}
    var
     Connection=[0,port$2],
     statechange$0="statechange",
     Ev$6=[0,Message,midimessage,Connection,statechange$0],
     Brr_webmidi=
      [0,
       [0,
        [0,
         as_target$2,
         open$2,
         close$8,
         id$5,
         manufacturer,
         name$25,
         version$0,
         type$13,
         state$3,
         connection],
        Input$1,
        Output,
        Access,
        Ev$6]];
    caml_register_global(2983,Brr_webmidi,"Brr_webmidi");
    var classic="classic",module="module",Type$6=[0,classic,module];
    function opts$28(type,credentials,name,param)
     {var o=obj([0]);
      caml_call3(_e_[4],o,cst_type$15,type);
      caml_call3(_e_[4],o,cst_credentials$1,credentials);
      caml_call3(_e_[4],o,cst_name$26,name);
      return o}
    var worker$0=target[cst_Worker];
    function create$42(opt,uri)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new worker$0(uri,opts)}
    function terminate(w){w.terminate();return 0}
    function post$1(opts,w,v)
     {if(opts)var o=opts[1],opts$0=o;else var opts$0=fn;
      w.postMessage(v,opts$0);
      return 0}
    var shared=target[cst_SharedWorker];
    function create$43(opt,uri)
     {if(opt)var sth=opt[1],opts=sth;else var opts=fn;
      return new shared(uri,opts)}
    function port$3(w){return w[cst_port$4]}
    function ami(param){return has(cst_WorkerGlobalScope,target)}
    function import_scripts(uris)
     {target.importScripts(caml_list_to_js_array(uris));return 0}
    function post$2(opts,v)
     {if(opts)var o=opts[1],opts$0=o;else var opts$0=fn;
      target.postMessage(v,opts$0);
      return 0}
    function close$9(param){target.close();return 0}
    var
     G$0=[0,import_scripts,post$2,close$9],
     imports="imports",
     all$1="all",
     none$2="none",
     Update_via_cache=[0,imports,all$1,none$2],
     parsed="parsed",
     installing="installing",
     installed="installed",
     activating="activating",
     activated="activated",
     redundant="redundant",
     State$1=[0,parsed,installing,installed,activating,activated,redundant];
    function script_url(w){return w.scriptURL()}
    function state$4(w){return w.state()}
    function enable$0(p)
     {var _cs_=p.enable();return of_promise$0(function(_ct_){return 0},_cs_)}
    function disable$0(p)
     {var _cq_=p.disable();return of_promise$0(function(_cr_){return 0},_cq_)}
    function set_header_value(p,v)
     {var _co_=p.setHeaderValue(v);
      return of_promise$0(function(_cp_){return 0},_co_)}
    function get_state(p)
     {function extract(s)
       {var _cn_=caml_call2(_e_[2],s,cst_headerValue);
        return [0,caml_call2(Bool[2],s,cst_enabled$1),_cn_]}
      return of_promise$0(extract,p.getState())}
    var
     Navigation_preload_manager=
      [0,enable$0,disable$0,set_header_value,get_state];
    function installing$0(r)
     {var _cl_=r[cst_installing];
      return to_option(function(_cm_){return _cm_},_cl_)}
    function waiting$0(r)
     {var _cj_=r[cst_waiting];
      return to_option(function(_ck_){return _ck_},_cj_)}
    function active$0(r)
     {var _ch_=r[cst_active$0];
      return to_option(function(_ci_){return _ci_},_ch_)}
    function navigation_preload(r){return r[cst_navigationPreload]}
    function scope(r){return caml_call2(_e_[2],r,cst_scope)}
    function update_via_cache(r)
     {return caml_call2(_e_[2],r,cst_updateViaCache)}
    function update(r)
     {var _cf_=r.update();return of_promise$0(function(_cg_){return 0},_cf_)}
    function unregister(r)
     {return of_promise$0(caml_js_to_bool,r.unregister())}
    function show_notification(opts,r,title)
     {var
       opts$0=of_option(fn,function(_ce_){return _ce_},opts),
       _cc_=r.showNotification(title,opts$0);
      return of_promise$0(function(_cd_){return 0},_cc_)}
    function get_notifications(tag,r)
     {if(tag)var tag$0=tag[1],opts={"tag":tag$0};else var opts=fn;
      var _b__=r.getNotifications(opts);
      function _b$_(_cb_){return _cb_}
      return of_promise$0(function(_ca_){return to_list(_b$_,_ca_)},_b__)}
    function of_navigator$3(n){return n[cst_serviceWorker]}
    function controller$0(c)
     {var _b8_=c[cst_controller];
      return to_option(function(_b9_){return _b9_},_b8_)}
    function ready(c)
     {var _b6_=c[cst_ready];
      return of_promise$0(function(_b7_){return _b7_},_b6_)}
    function register_opts(scope,type,update_via_cache,param)
     {var o={};
      caml_call3(_e_[4],o,cst_scope$0,scope);
      caml_call3(_e_[4],o,cst_type$16,type);
      caml_call3(_e_[4],o,cst_updateViaCache$0,update_via_cache);
      return o}
    function register(opt,c,uri)
     {if(opt)var sth=opt[1],register_opts=sth;else var register_opts=fn;
      var _b4_=c.register(uri,register_opts);
      return of_promise$0(function(_b5_){return _b5_},_b4_)}
    function get_registration(c,uri)
     {var
       uri$0=of_option(fn,function(_b3_){return _b3_},uri),
       _bZ_=c.getRegistration(uri$0);
      function _b0_(_b2_){return _b2_}
      return of_promise$0(function(_b1_){return to_option(_b0_,_b1_)},_bZ_)}
    function get_registrations(c)
     {var _bV_=c.getRegistrations();
      function _bW_(_bY_){return _bY_}
      return of_promise$0(function(_bX_){return to_list(_bW_,_bX_)},_bV_)}
    function start_messages(c){c.startMessages();return 0}
    var
     Container=
      [0,
       of_navigator$3,
       controller$0,
       ready,
       register_opts,
       register,
       get_registration,
       get_registrations,
       start_messages],
     hidden$2="hidden",
     visible$0="visible",
     Visibility_state$0=[0,hidden$2,visible$0],
     window$0="window",
     worker$1="worker",
     sharedworker$0="sharedworker",
     all$2="all",
     Type$7=[0,window$0,worker$1,sharedworker$0,all$2],
     auxiliary="auxiliary",
     top_level="top-level",
     nested="nested",
     none$3="none",
     Frame_type=[0,auxiliary,top_level,nested,none$3];
    function url$5(c){return caml_call2(_e_[2],c,cst_url$3)}
    function frame_type(c){return caml_call2(_e_[2],c,cst_frameType)}
    function id$6(c){return caml_call2(_e_[2],c,cst_id$2)}
    function type$14(c){return caml_call2(_e_[2],c,cst_type$17)}
    function post$3(opts,c,v)
     {if(opts)var o=opts[1],opts$0=o;else var opts$0=fn;
      c.postMessage(v,opts$0);
      return 0}
    function visibility_state$0(w)
     {return caml_call2(_e_[2],w,cst_visibilityState$0)}
    function focused(w){return caml_call2(Bool[2],w,cst_focused)}
    function ancestor_origins(w)
     {var _bT_=w[cst_ancestorOrigins];
      return to_list(function(_bU_){return _bU_},_bT_)}
    function focus$0(w)
     {var _bR_=w.focus();
      return of_promise$0(function(_bS_){return _bS_},_bR_)}
    function navigate$1(w,url)
     {var _bP_=w.focus(url);
      return of_promise$0(function(_bQ_){return _bQ_},_bP_)}
    var
     Window$0=
      [0,visibility_state$0,focused,ancestor_origins,focus$0,navigate$1],
     Client=
      [0,
       Visibility_state$0,
       Type$7,
       Frame_type,
       url$5,
       frame_type,
       id$6,
       type$14,
       post$3,
       Window$0];
    function query_opts$0(include_uncontrolled,type,param)
     {var o={};
      caml_call3(Bool[4],o,cst_includeUncontrolled,include_uncontrolled);
      caml_call3(_e_[4],o,cst_type$18,type);
      return o}
    function get$7(cs,id)
     {var _bL_=cs.get(id);
      function _bM_(_bO_){return _bO_}
      return of_promise$0(function(_bN_){return to_option(_bM_,_bN_)},_bL_)}
    function match_all$0(opt,cs)
     {if(opt)var sth=opt[1],query_opts=sth;else var query_opts=fn;
      var _bH_=cs.matchAll(query_opts);
      function _bI_(_bK_){return _bK_}
      return of_promise$0(function(_bJ_){return to_list(_bI_,_bJ_)},_bH_)}
    function open_window(cs,url)
     {var _bD_=cs.openWindow(url);
      function _bE_(_bG_){return _bG_}
      return of_promise$0(function(_bF_){return to_option(_bE_,_bF_)},_bD_)}
    function claim(cs)
     {var _bB_=cs.claim();return of_promise$0(function(_bC_){return 0},_bB_)}
    var
     Clients=[0,query_opts$0,get$7,match_all$0,open_window,claim],
     clients=target[cst_clients],
     registration=target[cst_registration],
     service_worker=target[cst_serviceWorker$0];
    function skip_waiting(param)
     {var _bz_=target.skipWaiting();
      return of_promise$0(function(_bA_){return 0},_bz_)}
    var
     G$1=[0,clients,registration,service_worker,skip_waiting],
     Brr_webworkers=
      [0,
       [0,
        Type$6,
        opts$28,
        create$42,
        terminate,
        post$1,
        [0,create$43,port$3],
        ami,
        G$0],
       [0,
        Update_via_cache,
        State$1,
        script_url,
        state$4,
        Navigation_preload_manager,
        [0,
         update,
         unregister,
         show_notification,
         get_notifications,
         installing$0,
         waiting$0,
         active$0,
         navigation_preload,
         scope,
         update_via_cache],
        Container,
        Client,
        Clients,
        G$1]];
    caml_register_global(2984,Brr_webworkers,"Brr_webworkers");
    return}
  (globalThis));


//# 1 "../.js/default/vector3/vector3.cma.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Vector3_of_string=caml_string_of_jsbytes("Vector3.of_string: "),
     origin=[254,0.,0.,0.],
     Stdlib_Printf=global_data.Stdlib__Printf,
     Stdlib_Scanf=global_data.Stdlib__Scanf,
     Stdlib=global_data.Stdlib,
     _b_=
      [0,
       [8,[0,0,0],0,0,[12,32,[8,[0,0,0],0,0,[12,32,[8,[0,0,0],0,0,0]]]]],
       caml_string_of_jsbytes("%f %f %f")],
     _a_=
      [0,
       [8,[0,0,0],0,0,[12,32,[8,[0,0,0],0,0,[12,32,[8,[0,0,0],0,0,0]]]]],
       caml_string_of_jsbytes("%f %f %f")];
    function make(x,y,z){return [254,x,y,z]}
    function of_triplet(param)
     {var z=param[3],y=param[2],x=param[1];return [254,x,y,z]}
    function of_string(str)
     {try
       {var
         _f_=function(x,y,z){return [254,x,y,z]},
         _g_=caml_call3(Stdlib_Scanf[5],str,_a_,_f_);
        return _g_}
      catch(_h_)
       {var _e_=caml_call2(Stdlib[28],cst_Vector3_of_string,str);
        return caml_call1(Stdlib[1],_e_)}}
    function to_triplet(v){return [0,v[1],v[2],v[3]]}
    function to_string(v)
     {return caml_call4(Stdlib_Printf[4],_b_,v[1],v[2],v[3])}
    function dot(v1,v2){return v1[1] * v2[1] + v1[2] * v2[2] + v1[3] * v2[3]}
    function cross(v1,v2)
     {return [254,
              v1[2] * v2[3] - v1[3] * v2[2],
              v1[3] * v2[1] - v1[1] * v2[3],
              v1[1] * v2[2] - v1[2] * v2[1]]}
    function diff(v1,v2)
     {return [254,v1[1] - v2[1],v1[2] - v2[2],v1[3] - v2[3]]}
    function add(v1,v2)
     {return [254,v1[1] + v2[1],v1[2] + v2[2],v1[3] + v2[3]]}
    function mag2(v){return v[1] * v[1] + v[2] * v[2] + v[3] * v[3]}
    function mag(v){return Math.sqrt(mag2(v))}
    function angle(v1,v2)
     {var _c_=mag(v2),_d_=mag(v1) * _c_;return Math.acos(dot(v1,v2) / _d_)}
    function dist(v1,v2){return mag(diff(v1,v2))}
    function div(v,s){return [254,v[1] / s,v[2] / s,v[3] / s]}
    function mult(v,s){return [254,v[1] * s,v[2] * s,v[3] * s]}
    function normalize(v){return div(v,mag(v))}
    function neg(v){return [254,- v[1],- v[2],- v[3]]}
    var
     Vector3=
      [0,
       origin,
       make,
       of_triplet,
       of_string,
       to_triplet,
       to_string,
       dot,
       cross,
       diff,
       add,
       mag2,
       mag,
       angle,
       dist,
       div,
       mult,
       normalize,
       neg];
    runtime.caml_register_global(7,Vector3,"Vector3");
    return}
  (globalThis));


//# 1 "../raytracer/.raytracer.objs/jsoo/default/raytracer.cma.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_ba_set_2=runtime.caml_ba_set_2,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     Stdlib_Printf=global_data.Stdlib__Printf,
     Stdlib_Random=global_data.Stdlib__Random,
     Vector3=global_data.Vector3,
     Raytracer=[0],
     Raytracer$0=[0,Raytracer];
    caml_register_global(39,Raytracer$0,"Raytracer__");
    var
     _a_=
      [0,
       [11,
        caml_string_of_jsbytes("col "),
        [4,
         3,
         0,
         0,
         [12,40,[4,3,0,0,[11,caml_string_of_jsbytes("), row "),[4,3,0,0,0]]]]]],
       caml_string_of_jsbytes("col %i(%i), row %i")];
    function print_chance(chance,printf)
     {var _y_=caml_call1(Stdlib_Random[10],1.) < chance?1:0;
      return _y_?caml_call1(printf,0):_y_}
    var
     origin=Vector3[1],
     make=Vector3[2],
     of_triplet=Vector3[3],
     of_string=Vector3[4],
     to_triplet=Vector3[5],
     to_string=Vector3[6],
     dot=Vector3[7],
     cross=Vector3[8],
     diff=Vector3[9],
     add=Vector3[10],
     mag2=Vector3[11],
     mag=Vector3[12],
     angle=Vector3[13],
     dist=Vector3[14],
     div=Vector3[15],
     mult=Vector3[16],
     normalize=Vector3[17],
     neg=Vector3[18],
     symbol=Vector3[10];
    function symbol$0(a,b){return [254,a[1] - b[1],a[2] - b[2],a[3] - b[3]]}
    var
     symbol$1=Vector3[16],
     symbol$2=Vector3[15],
     Syntax=[0,symbol,symbol$0,symbol$1,symbol$2],
     Vec=
      [0,
       origin,
       make,
       of_triplet,
       of_string,
       to_triplet,
       to_string,
       dot,
       cross,
       diff,
       add,
       mag2,
       mag,
       angle,
       dist,
       div,
       mult,
       normalize,
       neg,
       Syntax];
    function at(t,param)
     {var dir=param[2],pos=param[1],_x_=caml_call2(Vec[19][3],dir,t);
      return caml_call2(Vec[19][1],pos,_x_)}
    var Ray=[0,at];
    function hit_sphere(param,_w_)
     {var
       dir=_w_[2],
       pos=_w_[1],
       radius=param[2],
       center=param[1],
       pc=caml_call2(Vec[19][2],pos,center),
       a=caml_call2(Vec[7],dir,dir),
       b=caml_call2(Vec[7],pc,dir) * 2.,
       c=caml_call2(Vec[7],pc,pc) - radius * radius,
       discr=b * b - 4. * a * c;
      return 0. < discr?1:0}
    function ray_color(r)
     {var
       dir=r[2],
       _r_=caml_call3(Vec[2],1.,0.,0.),
       sphere=[0,caml_call3(Vec[2],0.,0.,-1.),0.5,_r_];
      if(hit_sphere(sphere,r))return sphere[3];
      var
       unit=caml_call1(Vec[17],dir),
       t=0.5 * (unit[2] + 1.),
       _s_=caml_call3(Vec[2],0.5,0.7,1.),
       _t_=caml_call2(Vec[19][3],_s_,t),
       _u_=caml_call3(Vec[2],1.,1.,1.),
       _v_=caml_call2(Vec[19][3],_u_,1. - t);
      return caml_call2(Vec[19][1],_v_,_t_)}
    function write_color(array,row,col,color)
     {var r=color[1] * 255. | 0,g=color[2] * 255. | 0,b=color[3] * 255. | 0;
      try
       {caml_ba_set_2(array,row,4 * col | 0 | 0,r);
        caml_ba_set_2(array,row,(4 * col | 0) + 1 | 0,g);
        caml_ba_set_2(array,row,(4 * col | 0) + 2 | 0,b);
        var _q_=0;
        return _q_}
      catch(e)
       {e = caml_wrap_exception(e);
        caml_call4(Stdlib_Printf[2],_a_,col,4 * col | 0,row);
        throw e}}
    function main(array,param)
     {var
       h_i=param[2],
       w_i=param[1],
       w_vp=w_i / h_i * 2.,
       origin=caml_call3(Vec[2],0.,0.,0.),
       horizontal=caml_call3(Vec[2],w_vp,0.,0.),
       vertical=caml_call3(Vec[2],0.,2.,0.),
       _b_=caml_call3(Vec[2],0.,0.,1.),
       _c_=caml_call2(Vec[19][4],vertical,2.),
       _d_=caml_call2(Vec[19][4],horizontal,2.),
       _e_=caml_call2(Vec[19][2],origin,_d_),
       _f_=caml_call2(Vec[19][2],_e_,_c_),
       ll_corner=caml_call2(Vec[19][2],_f_,_b_),
       _h_=h_i - 1 | 0,
       _g_=0;
      if(_h_ >= 0)
       {var row=_g_;
        for(;;)
         {var _j_=w_i - 1 | 0,_i_=0;
          if(_j_ >= 0)
           {var col=_i_;
            for(;;)
             {var
               u=col / (w_i - 1.),
               v=row / (h_i - 1.),
               _l_=caml_call2(Vec[19][3],vertical,v),
               _m_=caml_call2(Vec[19][3],horizontal,u),
               _n_=caml_call2(Vec[19][1],ll_corner,_m_),
               _o_=caml_call2(Vec[19][1],_n_,_l_),
               r=[0,origin,caml_call2(Vec[19][2],_o_,origin)],
               color=ray_color(r);
              write_color(array,row,col,color);
              var _p_=col + 1 | 0;
              if(_j_ !== col){var col=_p_;continue}
              break}}
          var _k_=row + 1 | 0;
          if(_h_ !== row){var row=_k_;continue}
          break}}
      return 0}
    var
     Raytracer$1=
      [0,print_chance,Vec,Ray,hit_sphere,ray_color,write_color,main];
    caml_register_global(43,Raytracer$1,"Raytracer");
    var Raytracer_Ray=[0];
    caml_register_global(44,Raytracer_Ray,"Raytracer__Ray");
    return}
  (globalThis));


//# 1 ".main.eobjs/jsoo/dune__exe.cmo.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var runtime=globalThis.jsoo_runtime,Dune_exe=[0];
    runtime.caml_register_global(0,Dune_exe,"Dune__exe");
    return}
  (globalThis));


//# 1 ".main.eobjs/jsoo/dune__exe__Util.cmo.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var runtime=globalThis.jsoo_runtime;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var global_data=runtime.caml_get_global_data(),Brr=global_data.Brr;
    function log(x){caml_call1(Brr[12][9],[0,x,0]);return x}
    function button(at,onclick,label)
     {var
       _a_=
        [0,caml_call2(Brr[9][2],0,runtime.caml_jsstring_of_string(label)),0],
       but=caml_call3(Brr[9][75],0,at,_a_);
      function _b_(e){return caml_call1(onclick,0)}
      caml_call4(Brr[7][20],0,Brr[7][45],_b_,but);
      return but}
    var Dune_exe_Util=[0,log,button];
    runtime.caml_register_global(1,Dune_exe_Util,"Dune__exe__Util");
    return}
  (globalThis));


//# 1 ".main.eobjs/jsoo/dune__exe__Media.cmo.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_No_video_stream=caml_string_of_jsbytes("No video stream."),
     cst_Stop=caml_string_of_jsbytes("Stop"),
     cst_Watch_fullscreen=caml_string_of_jsbytes("Watch fullscreen"),
     cst_Devices=caml_string_of_jsbytes("Devices"),
     cst_Stream=caml_string_of_jsbytes("Stream:"),
     cst_getCapabilities=caml_string_of_jsbytes("getCapabilities"),
     cst_Caps=caml_string_of_jsbytes("Caps:"),
     cst_Caps_getCapabilities_unsup=
      caml_string_of_jsbytes("Caps: getCapabilities unsuppported"),
     cst_Constraints=caml_string_of_jsbytes("Constraints:"),
     cst_Settings=caml_string_of_jsbytes("Settings:"),
     cst_Track=caml_string_of_jsbytes("Track:"),
     Stdlib_Option=global_data.Stdlib__Option,
     Brr_io=global_data.Brr_io,
     Fut=global_data.Fut,
     Brr=global_data.Brr,
     Dune_exe_Util=global_data.Dune__exe__Util,
     Stdlib_List=global_data.Stdlib__List,
     Jv=global_data.Jv,
     Jstr=global_data.Jstr,
     _a_=[0,1];
    function with_log_group(closed,msg,f)
     {caml_call2(Brr[12][18],closed,msg);
      caml_call1(f,0);
      return caml_call1(Brr[12][19],0)}
    function dump_track(t)
     {function _A_(param)
       {if(caml_call2(Jv[39],cst_getCapabilities,t))
         {var
           _B_=[0,caml_call1(Brr_io[5][6][12],t),0],
           _C_=[0,caml_call1(Brr[12][5],cst_Caps),_B_];
          caml_call1(Brr[12][9],_C_)}
        else
         {var _H_=[0,caml_call1(Brr[12][5],cst_Caps_getCapabilities_unsup),0];
          caml_call1(Brr[12][9],_H_)}
        var
         _D_=[0,caml_call1(Brr_io[5][6][13],t),0],
         _E_=[0,caml_call1(Brr[12][5],cst_Constraints),_D_];
        caml_call1(Brr[12][9],_E_);
        var
         _F_=[0,caml_call1(Brr_io[5][6][15],t),0],
         _G_=[0,caml_call1(Brr[12][5],cst_Settings),_F_];
        return caml_call1(Brr[12][9],_G_)}
      return with_log_group
              (_a_,[0,caml_call1(Brr[12][5],cst_Track),[0,t,0]],_A_)}
    function dump_stream(av)
     {function _y_(param)
       {var _z_=caml_call1(Brr_io[5][7][9],av);
        return caml_call2(Stdlib_List[17],dump_track,_z_)}
      return with_log_group
              (0,[0,caml_call1(Brr[12][5],cst_Stream),[0,av,0]],_y_)}
    function dump_devices(ds)
     {function _w_(param)
       {function _x_(d){return caml_call1(Brr[12][9],[0,d,0])}
        return caml_call2(Stdlib_List[17],_x_,ds)}
      return with_log_group(0,[0,caml_call1(Brr[12][5],cst_Devices),0],_w_)}
    function handle_error(view,param)
     {if(0 === param[0])return 0;
      var
       e=param[1],
       err=caml_call1(Jv[30][4],e),
       match=caml_call1(Jv[30][3],e),
       switch$0=0;
      if(typeof match === "number")
       if(829592127 === match)
        var ui_msg="Don't have a camera? ";
       else
        if(971339429 === match)
         var ui_msg="Can't do anything without your permission! ";
        else
         switch$0 = 1;
      else
       switch$0 = 1;
      if(switch$0)var ui_msg="An error occured: ";
      var
       _u_=caml_call2(Jstr[7],ui_msg,err),
       _v_=[0,caml_call2(Brr[9][2],0,_u_),0],
       msg=caml_call3(Brr[9][132],0,0,_v_);
      return caml_call2(Brr[9][20],view,[0,msg,0])}
    function fullscreen_button(view,video)
     {var
       no_fullscreen=1 - caml_call1(Brr[10][15],Brr[16][2]),
       at=[0,caml_call2(Brr[8][7],no_fullscreen,Brr[8][25]),0];
      function onclick(param)
       {var _r_=caml_call2(Brr[9][56],0,video);
        function _s_(_t_){return handle_error(view,_t_)}
        caml_call2(Fut[4],_s_,_r_);
        return 0}
      return caml_call3(Dune_exe_Util[2],[0,at],onclick,cst_Watch_fullscreen)}
    function stop_stream(view,s)
     {var _q_=caml_call1(Brr_io[5][7][9],s);
      caml_call2(Stdlib_List[17],Brr_io[5][6][16],_q_);
      return caml_call2(Brr[9][18],view,0)}
    function play_stream(view,s)
     {var
       at=[0,caml_call1(Brr[8][4],"playsinline"),0],
       _l_=[0,caml_call2(Brr[9][3],0,cst_No_video_stream),0],
       video=caml_call3(Brr[9][167],0,[0,at],_l_),
       m=caml_call1(Brr_io[5][11][11],video),
       fullscreen=fullscreen_button(view,video);
      function _m_(param){return stop_stream(view,s)}
      var
       stop=caml_call3(Dune_exe_Util[2],0,_m_,cst_Stop),
       src=[0,caml_call1(Brr_io[5][11][6][1],s)];
      caml_call2(Brr_io[5][11][17],m,src);
      function _n_(param)
       {var
         _p_=
          [0,caml_call3(Brr[9][88],0,0,[0,fullscreen,[0,stop,0]]),[0,video,0]];
        caml_call2(Brr[9][18],view,_p_);
        return caml_call1(Fut[9],0)}
      var _o_=caml_call1(Brr_io[5][11][45],m);
      return caml_call2(Fut[16][1],_o_,_n_)}
    function test_stream(view,kind,stream,param)
     {var
       get_media=-68046964 <= kind?Brr_io[5][10][5]:Brr_io[5][10][4],
       md=caml_call1(Brr_io[5][10][1],Brr[16][3]);
      function _b_(ds)
       {dump_devices(ds);
        var _g_=stream[1];
        function _h_(_k_){return stop_stream(view,_k_)}
        caml_call2(Stdlib_Option[9],_h_,_g_);
        function _i_(s)
         {dump_stream(s);stream[1] = [0,s];return play_stream(view,s)}
        var _j_=caml_call2(get_media,md,caml_call1(Brr_io[5][7][1][2],0));
        return caml_call2(Fut[16][1],_j_,_i_)}
      var
       _c_=caml_call1(Brr_io[5][10][2],md),
       _d_=caml_call2(Fut[16][1],_c_,_b_);
      function _e_(_f_){return handle_error(view,_f_)}
      caml_call1(caml_call1(Fut[4],_e_),_d_);
      return 0}
    var
     Dune_exe_Media=
      [0,
       with_log_group,
       dump_track,
       dump_stream,
       dump_devices,
       handle_error,
       fullscreen_button,
       stop_stream,
       play_stream,
       test_stream];
    runtime.caml_register_global(24,Dune_exe_Media,"Dune__exe__Media");
    return}
  (globalThis));


//# 1 ".main.eobjs/jsoo/dune__exe__Main.cmo.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Media_test=caml_string_of_jsbytes("Media test"),
     cst_Media_information_is_dumpe=
      caml_string_of_jsbytes
       ("Media information is dumped in the browser console."),
     cst_Javascript_is_needed_to_vi=
      caml_string_of_jsbytes("Javascript is needed to view this content."),
     cst_Open_camera=caml_string_of_jsbytes("Open camera"),
     cst_Share_screen=caml_string_of_jsbytes("Share screen"),
     cst_Run_Raytracing=caml_string_of_jsbytes("Run Raytracing"),
     cst_Exception_encountered=
      caml_string_of_jsbytes("Exception encountered:"),
     Brr=global_data.Brr,
     Brr_canvas=global_data.Brr_canvas,
     Dune_exe_Media=global_data.Dune__exe__Media,
     Dune_exe_Util=global_data.Dune__exe__Util,
     Stdlib_Bigarray=global_data.Stdlib__Bigarray,
     Raytracer=global_data.Raytracer,
     Stdlib_Printexc=global_data.Stdlib__Printexc;
    function convert_to_img_data(bigarray)
     {var
       h=runtime.caml_ba_dim_1(bigarray),
       w=runtime.caml_ba_dim_2(bigarray),
       data=caml_call2(Stdlib_Bigarray[28],bigarray,runtime.caml_mul(w,h)),
       _p_=runtime.caml_ba_to_typed_array(data),
       data$0=caml_call1(caml_call1(Brr[1][26],4),_p_);
      return caml_call4(Brr_canvas[4][93][1],[0,data$0],w / 4 | 0,h,0)}
    function raytrace_main(canvas,param)
     {function init(row,col){var match=col % 4 | 0;return 3 === match?255:0}
      var
       _i_=4 * caml_call1(Brr_canvas[3][4],canvas) | 0,
       _j_=caml_call1(Brr_canvas[3][5],canvas),
       array=caml_call5(Stdlib_Bigarray[20][2],3,0,_j_,_i_,init);
      try
       {var
         _n_=caml_call1(Brr_canvas[3][5],canvas),
         _o_=[0,caml_call1(Brr_canvas[3][4],canvas),_n_];
        caml_call2(Raytracer[7],array,_o_)}
      catch(e)
       {e = caml_wrap_exception(e);
        var
         _k_=caml_call1(Stdlib_Printexc[1],e),
         _l_=[0,caml_call1(Brr[12][5],_k_),0],
         _m_=[0,caml_call1(Brr[12][5],cst_Exception_encountered),_l_];
        caml_call1(Brr[12][9],_m_)}
      var data=convert_to_img_data(array);
      caml_call1(Dune_exe_Util[1],data);
      var ctx=caml_call2(Brr_canvas[4][15],0,canvas);
      return caml_call4(Brr_canvas[4][96],ctx,data,0,0)}
    var
     _a_=[0,caml_call2(Brr[9][3],0,cst_Media_test),0],
     h1=caml_call3(Brr[9][98],0,0,_a_),
     info=caml_call2(Brr[9][3],0,cst_Media_information_is_dumpe),
     stream=[0,0],
     _b_=[0,caml_call2(Brr[9][3],0,cst_Javascript_is_needed_to_vi),0],
     canvas=caml_call5(Brr_canvas[3][1],0,0,[0,600],[0,400],_b_),
     view=caml_call1(Brr_canvas[3][3],canvas),
     _c_=caml_call3(Dune_exe_Media[9],view,-333399355,stream),
     cam=caml_call3(Dune_exe_Util[2],0,_c_,cst_Open_camera),
     _d_=caml_call3(Dune_exe_Media[9],view,-68046964,stream),
     screen=caml_call3(Dune_exe_Util[2],0,_d_,cst_Share_screen);
    function _e_(_h_){return raytrace_main(canvas,_h_)}
    var
     raytrace_b=caml_call3(Dune_exe_Util[2],0,_e_,cst_Run_Raytracing),
     _f_=
      [0,
       caml_call3(Brr[9][132],0,0,[0,cam,[0,screen,[0,raytrace_b,0]]]),
       [0,view,0]],
     children=[0,h1,[0,caml_call3(Brr[9][132],0,0,[0,info,0]),_f_]];
    raytrace_main(canvas,0);
    var _g_=caml_call1(Brr[10][5],Brr[16][2]);
    caml_call2(Brr[9][18],_g_,children);
    var Dune_exe_Main=[0];
    runtime.caml_register_global(14,Dune_exe_Main,"Dune__exe__Main");
    return}
  (globalThis));


//# 1 "../.js/default/stdlib/std_exit.cmo.js"
// Generated by js_of_ocaml
(function
   (globalThis)
   {"use strict";
    var runtime=globalThis.jsoo_runtime;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    var global_data=runtime.caml_get_global_data(),Stdlib=global_data.Stdlib;
    caml_call1(Stdlib[103],0);
    var Std_exit=[0];
    runtime.caml_register_global(1,Std_exit,"Std_exit");
    return}
  (globalThis));


//# sourceMappingURL=data:application/json;base64,